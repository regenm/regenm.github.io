<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>0.96OLED玩法</title>
    <url>/2024/05/14/0-96OLED%E7%8E%A9%E6%B3%95/</url>
    <content><![CDATA[<p>基于0.96寸OLED，主控ssd1306</p>
<h1 id="显示原理"><a href="#显示原理" class="headerlink" title="显示原理"></a>显示原理</h1><p>基于数据手册</p>
<h2 id="硬件特性"><a href="#硬件特性" class="headerlink" title="硬件特性"></a>硬件特性</h2><p>每个像素点独立控制，通过写入现存的二进制数据进行每个像素的熄灭和点亮</p>
<ul>
<li><p>像素</p>
<p>  <strong>128*64</strong></p>
</li>
</ul>
<h2 id="名词定义"><a href="#名词定义" class="headerlink" title="名词定义"></a>名词定义</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 0.96 OLED</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">|********************************|</span></span><br><span class="line"><span class="string">|********************************|</span></span><br><span class="line"><span class="string">|********************************|</span></span><br><span class="line"><span class="string">|********************************|</span></span><br><span class="line"><span class="string">|********************************|</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="comment"># 模拟图</span></span><br></pre></td></tr></table></figure>

<ul>
<li>SEG</li>
</ul>
<p>相当于一列：一列<strong>64</strong>个像素</p>
<ul>
<li>COLOMN</li>
</ul>
<p>相当于一行：一行<strong>128</strong>个像素</p>
<ul>
<li>COMMON</li>
</ul>
<p>相当于一行：一行<strong>128</strong>个像素</p>
<ul>
<li>PAGE</li>
</ul>
<p>相当于8行：<strong>128*8</strong>个像素</p>
<h2 id="显示方式（ssd1306）"><a href="#显示方式（ssd1306）" class="headerlink" title="显示方式（ssd1306）"></a>显示方式（ssd1306）</h2><blockquote>
<p>There are 3 different memory addressing mode in SSD1306: page addressing mode, horizontal addressing mode and vertical addressing mode. </p>
</blockquote>
<h3 id="1-page-addressing-mode-页地址模式"><a href="#1-page-addressing-mode-页地址模式" class="headerlink" title="1. page addressing mode(页地址模式)"></a>1. page addressing mode(页地址模式)</h3><blockquote>
<p>Page addressing mode (A[1:0]&#x3D;10xb) </p>
<p>In page addressing mode, after the display RAM is read&#x2F;written, the column address pointer is increased automatically by 1. </p>
<p>If the column address pointer reaches column end address, the column address pointer is reset to column start address and &#x3D;&#x3D;page address pointer is not changed.&#x3D;&#x3D; </p>
<p>Users have to set the new page and column addresses in order to access the next page RAM content The sequence of movement of the PAGE and column address point for page addressing mode is shown in Figure 10-1. </p>
</blockquote>
<p><img src="/images/OLED/1.png" alt="page addressing mode"></p>
<p>一次写<code>1Byte(8位)</code>，与<code>horizontal addressing mode</code>的区别只是<strong>PAGE是否自动改变</strong></p>
<h3 id="2-horizontal-addressing-mode-水平地址模式"><a href="#2-horizontal-addressing-mode-水平地址模式" class="headerlink" title="2.horizontal addressing mode(水平地址模式)"></a>2.horizontal addressing mode(水平地址模式)</h3><blockquote>
<p>Horizontal addressing mode (A[1:0]&#x3D;00b)</p>
<p>In horizontal addressing mode, after the display RAM is read&#x2F;written, the column address pointer is increased automatically by 1. </p>
<p>If the column address pointer reaches column end address, the column address pointer is reset to column start address and &#x3D;&#x3D;page address pointer is increased by 1&#x3D;&#x3D;. </p>
<p>The sequence of movement of the page and column address point for horizontal addressing mode is shown in Figure 10-3. </p>
<p>When both column and page address pointers reach the end address, the pointers are reset to column start address and page start address (Dotted line in Figure 10-3.) </p>
</blockquote>
<p><img src="/images/OLED/2.png" alt="horizontal addressing mode"></p>
<p>一次写<code>1Byte(8位)</code></p>
<h3 id="3-vertical-addressing-mode-垂直地址模式"><a href="#3-vertical-addressing-mode-垂直地址模式" class="headerlink" title="3.vertical addressing mode(垂直地址模式)"></a>3.vertical addressing mode(垂直地址模式)</h3><blockquote>
<p>Vertical addressing mode: (A[1:0]&#x3D;01b)</p>
<p>In vertical addressing mode, after the display RAM is read&#x2F;written, the page address pointer is increased automatically by 1. </p>
<p>If the page address pointer reaches the page end address, &#x3D;&#x3D;the page address pointer is reset&#x3D;&#x3D; to page start address and column address pointer is increased by 1. </p>
<p>The sequence of movement of the page and column address point for vertical addressing mode is shown in Figure 10-4. </p>
<p>When both column and page address pointers reach the end address, the pointers are reset to column start address and page start address </p>
<p>(Dotted line in Figure 10-4.) </p>
</blockquote>
<p><img src="/../images/OLED/3.png" alt="vertical addressing mode"></p>
<h3 id="总结-我的理解"><a href="#总结-我的理解" class="headerlink" title="总结(我的理解)"></a>总结(我的理解)</h3><p>三种模式都是一次竖着写<code>1Byte(8位)</code>，</p>
<ol>
<li>第一种向右延伸，到终点不回来</li>
<li>第二种向右延伸，到终点自动回来并+1到下一行</li>
<li>第三种向下延伸，到终点COL自动+1到下一列</li>
</ol>
<h1 id="玩法"><a href="#玩法" class="headerlink" title="玩法"></a>玩法</h1><h2 id="1-显示基本ASCII"><a href="#1-显示基本ASCII" class="headerlink" title="1.显示基本ASCII"></a>1.显示基本ASCII</h2><h2 id="2-显示中文"><a href="#2-显示中文" class="headerlink" title="2.显示中文"></a>2.显示中文</h2><h2 id="3-显示BMP位图"><a href="#3-显示BMP位图" class="headerlink" title="3.显示BMP位图"></a>3.显示BMP位图</h2>]]></content>
      <categories>
        <category>硬件技术</category>
      </categories>
      <tags>
        <tag>project</tag>
        <tag>STM32</tag>
        <tag>IIC</tag>
        <tag>OLED</tag>
        <tag>notes</tag>
        <tag>笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>51单片机笔记</title>
    <url>/2023/10/26/51%E5%8D%95%E7%89%87%E6%9C%BA%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<p>git test message</p>
<ul>
<li><h1 id="Information-Data-sheet"><a href="#Information-Data-sheet" class="headerlink" title="Information	&amp;  	Data sheet"></a>Information	&amp;  	Data sheet</h1></li>
</ul>
<p>Based on –AT89C51.</p>
<blockquote>
<p>The <strong>Atmel AT89 series</strong> is an <a href="https://en.wikipedia.org/wiki/Intel_8051">Intel 8051</a>-compatible family of 8 bit <a href="https://en.wikipedia.org/wiki/Microcontroller">microcontrollers</a> (μCs) manufactured by the <a href="https://en.wikipedia.org/wiki/Atmel">Atmel Corporation</a>.</p>
<p>Based on the Intel 8051 core, the AT89 series remains very popular as general purpose microcontrollers, due to their industry standard instruction set, their low unit cost, and the availability of these chips in DIL (DIP) packages. This allows a great amount of legacy code to be reused without modification in new applications. While less powerful than the newer AT90 series of <a href="https://en.wikipedia.org/wiki/Atmel_AVR">AVR</a> <a href="https://en.wikipedia.org/wiki/RISC">RISC</a> microcontrollers, new product development has continued with the AT89 series for the aforementioned advantages.</p>
<p>More recently, the AT89 series has been augmented with 8051-cored special function microcontrollers, specifically in the areas of <a href="https://en.wikipedia.org/wiki/Universal_Serial_Bus">USB</a>, <a href="https://en.wikipedia.org/wiki/I%C2%B2C">I²C</a> (two wire interface), <a href="https://en.wikipedia.org/wiki/Serial_Peripheral_Interface">SPI</a> and <a href="https://en.wikipedia.org/wiki/Controller_Area_Network">CAN</a> bus controllers, <a href="https://en.wikipedia.org/wiki/MP3">MP3</a> decoders and hardware <a href="https://en.wikipedia.org/wiki/Pulse-width_modulation">PWM</a>.</p>
</blockquote>
<p>Data sheet url links : <a href="https://rocelec.widen.net/view/pdf/gywrtkuql9/ATMLS01727-1.pdf?t.download=true&u=5oefqw">Data Sheet PDF Downloads</a> </p>
<blockquote>
<p><img src="/images/featuresofat89c51.png" alt="features of AT89C51"></p>
</blockquote>
<p>​						<strong>The following I would not like to just write down the points. The post will be focused on application layer</strong></p>
<h1 id="Project-1-1：TIME-BOMB"><a href="#Project-1-1：TIME-BOMB" class="headerlink" title="Project_1_1：TIME BOMB"></a>Project_1_1：<strong>TIME BOMB</strong></h1><p>​	It’s actually very easy to make a TIME BOMB than you can imagine.You will just need some TNT and an at89c51 chip(&lt;3).</p>
<p>Now that we fixed the Bomb (got some TNT). What about the  timer ? Yep, we can use the <strong>AT89C51</strong> chip.</p>
<p><strong>Timer</strong> </p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">delayN10ms</span><span class="params">(<span class="type">unsigned</span> <span class="type">int</span> N)</span>&#123;</span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> i;</span><br><span class="line">  <span class="keyword">for</span>(N;N&gt;<span class="number">0</span>;N--)</span><br><span class="line">  <span class="keyword">for</span>(i=<span class="number">1275</span>;i&gt;<span class="number">0</span>;i--);         <span class="comment">//different types of chips have different delay functions</span></span><br><span class="line">                   <span class="comment">//and it&#x27;s also related to the crystal oscillator</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>what about the next to do after the timer is set? yep , light it.</p>
<p>We can use a switch or a relay to light it . When the switch (connected between vcc and gnd) is on , the heat will light the TNT. EZ game.</p>
 <figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">delayN10ms</span><span class="params">(<span class="type">unsigned</span> <span class="type">int</span> N)</span>&#123;</span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> i;</span><br><span class="line">  <span class="keyword">for</span>(N;N&gt;<span class="number">0</span>;N--)</span><br><span class="line">  <span class="keyword">for</span>(i=<span class="number">1275</span>;i&gt;<span class="number">0</span>;i--);         <span class="comment">//different types of chips have different delay functions</span></span><br><span class="line">                   <span class="comment">//and it&#x27;s also related to the crystal oscillator</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;   </span><br><span class="line">    delayN10ms(<span class="number">10000</span>);<span class="comment">//10s</span></span><br><span class="line">    P1=<span class="number">0x00</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="/images/timeBomb.png" alt=" schematic "></p>
<h1 id="project-1-2-CANCEL-the-TIME-BOMB"><a href="#project-1-2-CANCEL-the-TIME-BOMB" class="headerlink" title="project_1_2 : CANCEL the TIME BOMB"></a>project_1_2 : CANCEL the TIME BOMB</h1><p>​	Now that we create a time bomb , we are going to  use it to rob a bank . However your </p>
<p>incompetent teammates set the bomb  early! You guys are to be exposed to TNT in just 10s . What are you going to do ? </p>
<ul>
<li>Yes ,for sure you can reset the chip. </li>
<li>Also we can use a technique called <strong>INTERRUPTION</strong></li>
</ul>
<blockquote>
<p>Now we are  going to talk about <strong>INTERRUPTION</strong></p>
<p>The chip AT89C51 has six interrupt sources .</p>
<p><strong>What is an interrupt ?</strong></p>
<blockquote>
<p>An interrupt is an external or internal event to get the CPU’s attention. Once the controller detects the interrupt, it suspends the current job and executes a special service routine know as Interrupt Service Routine(ISR).</p>
<p>Upon activation of an interrupt, the microcontroller goes through the following steps</p>
<ol>
<li><p>First it finishes the instruction it is executing and saves the address of the next instruction (PC) on the stack.</p>
</li>
<li><p>It also saves the current status of all the interrupts internally.</p>
</li>
<li><p>It jumps to a fixed location in memory, called the interrupt vector table, that holds the address of the ISR. The microcontroller gets the address of the ISR from the interrupt vector table and jumps to it It starts to execute the interrupt service subroutine until it reaches the last instruction of the subroutine which is RETI (return from interrupt)</p>
</li>
<li><p>Upon executing the RETI instruction, the microcontroller returns to the place where it was interrupted.</p>
</li>
<li><p>First, it gets the program counter (PC) address from the stack by popping the top two bytes of the stack into the PC.</p>
</li>
<li><p>Then it starts to execute from that address.</p>
<p><a href="http://exploreembedded.com/wiki/6.8051_Interrupts">information from here</a></p>
</li>
</ol>
</blockquote>
<p><strong>8051 interrupt Structure</strong></p>
<blockquote>
<p>8051 Microcontroller has six interrupt sources as shown in the table below:</p>
<table>
<thead>
<tr>
<th>Interrupt</th>
<th>ROM Location(Hex)</th>
<th>Pin</th>
<th>Flag Clearing</th>
<th>Interrupt no. in C</th>
</tr>
</thead>
<tbody><tr>
<td>Reset</td>
<td>0000</td>
<td>9</td>
<td>Auto</td>
<td>–</td>
</tr>
<tr>
<td>External HW Interrupt 0 (INT0)</td>
<td>0003</td>
<td>P3.2(12)</td>
<td>Auto</td>
<td>0</td>
</tr>
<tr>
<td>Timer 0 Interrupt(TF0)</td>
<td>000B</td>
<td>-</td>
<td>Auto</td>
<td>1</td>
</tr>
<tr>
<td>External HW Interrupt 1 (INT1)</td>
<td>0013</td>
<td>P3.3(13)</td>
<td>Auto</td>
<td>2</td>
</tr>
<tr>
<td>Timer 1 Interrupt(TF1)</td>
<td>001B</td>
<td>-</td>
<td>Auto</td>
<td>3</td>
</tr>
<tr>
<td>Serial Com Interrupt(RI and TI)</td>
<td>0023</td>
<td>-</td>
<td>Program SW</td>
<td>4</td>
</tr>
</tbody></table>
<ul>
<li>the reset vector has just 3 bytes allocated to it, meaning it can hold a jump instruction to the location where the main program is stored.</li>
<li>The other interrupts have 8 bytes allocated to each of them, hence a small Interrupt service routine(ISR) can be placed here. However, if the ISR needs to larger in length, it has to placed else where and the allocated 8 bytes need to have the code that simple redirects the control to the ISR.</li>
<li><em>INT0</em> and <em>INT1</em> are external interrupts on P3.2 and P3.3 respectively. These can be configured to be low level triggered or edge triggered interrupt sources.</li>
<li><em>TF0</em> and <em>TF1</em> are timer overflow interrupts for timer 0 and 1 respectively</li>
<li>The <em>Serial COM Interrupt</em> can be configured to trigger upon transmit or receipt of a byte during serial communication.</li>
</ul>
</blockquote>
<p><strong>enable interruption</strong></p>
<blockquote>
<p><img src="/images/structureof51interruption.jpg" alt="structure of 51 interrupt "></p>
</blockquote>
</blockquote>
<p>**example code using external interrupt **</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">setUp</span><span class="params">()</span>&#123;</span><br><span class="line">    IP = <span class="number">0x04</span>; </span><br><span class="line">   EA=<span class="number">1</span>;</span><br><span class="line">   EX0=<span class="number">1</span>; <span class="comment">// allow external interrupt INT0</span></span><br><span class="line">   IT0 = <span class="number">1</span>; <span class="comment">// set edge triggerin</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span>&#123;</span><br><span class="line">  setUp();</span><br><span class="line">   delayNms(<span class="number">10000</span>);<span class="comment">//10s</span></span><br><span class="line">    P1=<span class="number">0x00</span>;        <span class="comment">//start BOMB</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">int0</span><span class="params">(<span class="type">void</span>)</span> interrupt 0&#123;</span><br><span class="line"></span><br><span class="line">     P1=<span class="number">0xff</span>;			<span class="comment">//cancel the timer</span></span><br><span class="line">    P2=<span class="number">0x00</span>;       <span class="comment">//to display</span></span><br><span class="line">    delayN10ms(<span class="number">1000</span>);   <span class="comment">// pause 10s for your survive</span></span><br><span class="line">    P2=<span class="number">0xff</span>;       <span class="comment">//to display</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p><img src="/images/gif.gif" alt="simple example"></p>
</blockquote>
<p>Now you can run away safely ;D.</p>
<p>**The above codes are just some rough examples . **</p>
<h1 id="Project-1-3-the-final-version-of-the-time-bomb"><a href="#Project-1-3-the-final-version-of-the-time-bomb" class="headerlink" title="Project_1_3 : the final version of the time bomb"></a>Project_1_3 : the final version of the time bomb</h1><h2 id="First-we-are-going-to-design-the-schematic-seriously"><a href="#First-we-are-going-to-design-the-schematic-seriously" class="headerlink" title="First , we are going to design the schematic seriously."></a>First , we are going to design the schematic seriously.</h2><p><img src="/images/finalbomb.png" alt="the final schematic"></p>
<h3 id="codes"><a href="#codes" class="headerlink" title="codes:"></a><strong>codes:</strong></h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;reg51.h&gt;</span></span></span><br><span class="line"></span><br><span class="line">sbit button_1=P2^<span class="number">4</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">delayNms</span><span class="params">(<span class="type">int</span> N)</span>    <span class="comment">//@11.0592MHz</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">unsigned</span> <span class="type">char</span> i;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span>(N)&#123;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">1275</span>;i&gt;<span class="number">0</span>;i--);</span><br><span class="line">  N--;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">bombStart</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">//setup</span></span><br><span class="line">   IP = <span class="number">0x04</span>; </span><br><span class="line">    EA=<span class="number">1</span>;</span><br><span class="line">    EX0=<span class="number">1</span>; <span class="comment">// allow external interrupt INT0</span></span><br><span class="line">    IT0 = <span class="number">1</span>; <span class="comment">// set edge triggering</span></span><br><span class="line">    P2 =<span class="number">0xff</span>;</span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line">      <span class="keyword">if</span>(button_1==<span class="number">0</span>)&#123;</span><br><span class="line">        bombStart();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">bombStart</span><span class="params">()</span>&#123;</span><br><span class="line">  delayNms(<span class="number">10000</span>);</span><br><span class="line">  P1=<span class="number">0x00</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">int0</span><span class="params">(<span class="type">void</span>)</span> interrupt 0&#123; </span><br><span class="line"></span><br><span class="line">   P1=<span class="number">0xff</span>;<span class="comment">//cancel the timer</span></span><br><span class="line">  delayNms(<span class="number">10000</span>); <span class="comment">// increase 10s for your survive</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>explanations:</strong></p>
<ol>
<li>Once the bomb is set up , you need to press the start button to start the bomb.</li>
<li>Once you start the bomb , you have 10 s to run away .</li>
<li>If you want to delay the bomb , press the button “PAUSE” .<ul>
<li><strong>ps</strong>: there is no way you can cancel the bomb unless you reset or cut off the power .</li>
</ul>
</li>
</ol>
<p><strong>other information</strong></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">IT1 = <span class="number">1</span>; <span class="comment">// Enable external interrupt 1 to trigger by a falling edge signal. </span></span><br><span class="line"></span><br><span class="line">IT1 = <span class="number">0</span>; <span class="comment">// Enable a low level signal on external interrupt 1 to generate an interrupt.</span></span><br><span class="line"></span><br><span class="line">IT0 = <span class="number">1</span>; <span class="comment">// Enable external interrupt 0 to trigger by a falling edge signal.</span></span><br><span class="line"></span><br><span class="line">IT0 = <span class="number">0</span>; <span class="comment">// Enable a low level signal on external interrupt 1 to generate an interrupt.</span></span><br></pre></td></tr></table></figure>

<h1 id="Project-1-4-Use-a-TIMER-interrupt-to-set-the-bomb"><a href="#Project-1-4-Use-a-TIMER-interrupt-to-set-the-bomb" class="headerlink" title="Project_1_4: Use a TIMER interrupt to  set the bomb"></a>Project_1_4: Use a TIMER interrupt to  set the bomb</h1><p>​	To control the timer and specify our needs&#x2F;logic we have to configure the timers first. For configuring and controlling the 89c51 microcontroller timers we have four registers. These registers are associated with timers of 89c51 micro controller. Each register plays an important role in controlling and configuring the timer. </p>
<blockquote>
<p>**Registers that are associated with timers.  **</p>
<p>- </p>
<ul>
<li>(Timer Control register)</li>
<li>TMOD   (Timer Mode register)</li>
<li>TH0&#x2F;TL0 (Timer 0, 16-bit register, High bits goes to TH0, Low bits goes to TL0)</li>
<li>TH1&#x2F;TL1 (Timer 1, 16-bit register, High bits goes to TH1, Low bits goes to TL1)</li>
</ul>
</blockquote>
<p><strong>Formula if TIMER INTERRUPT</strong></p>
<p>TH0&#x2F;TL0(Timer-0) &#x3D; TH1&#x2F;TL1(Timer-1)</p>
<p>These two registers TH and TL are timer high byte and timer low byte registers. 0 and 1 are the timers numbers. These are 16-bit registers. we Load our time delays&#x2F;counter value in these registers. Recall 8051 timer counter can count up to 65535 and 16 bits cover 65535 in binary. Since 8051(89c51,89c52) is an 8-bit microcontroller, so to load 65535 we need two registers one representing the high byte and other the low byte. we access these register in two bytes one byte for TH(timer high byte) and TL(timer low byte). TH and TL together makes 16-bits(TH 8-bit, TL8-bit).  TH0 and TL0 are byte addressable only.</p>
<ul>
<li>how to set them then ? There is an  example .</li>
</ul>
<blockquote>
<p><img src="https://b2600043.smushcdn.com/2600043/wp-content/uploads/2/2/1/5/22159166/1434719730.png?lossy=0&strip=1&webp=1" alt="Calculating Delay for 8051(89c51,89c52) microcontroller"></p>
</blockquote>
<h3 id="TCON-Timer-control-Register-of-8051-Microcontroller"><a href="#TCON-Timer-control-Register-of-8051-Microcontroller" class="headerlink" title="TCON(Timer control) Register of 8051 Microcontroller"></a>TCON(Timer control) Register of 8051 Microcontroller</h3><p>TCON(Timer Control) is an 8-bit register. It’s bits are used for generating interrupts on gpio pins internal or external. The most important bits of the timers TRx and TFx are also in it. TRx(timer run) and TFx(timer overflow) bits which we use in almost all our timer applications are in it. When we initialize TRx with 1, TRx&#x3D;1 it means start the timer, When the specified time is over the timer it self make TFx&#x3D;1 which means that the delay value is reached. Once TFx&#x3D;1 stop the timer by initializing TRx with 0 TRx&#x3D;0(Stop Timer). Now if we again want to run the timer make TRx&#x3D;1. In the diagram you can see the SFR for TCON register, the bit’s used for interrupt handling and the timer run and timer over flow bits. If you want to access the individual bits of the registers, you can access them by their names. You can also access whole register it self by its name. At the bottom of the page their is a small example explaining it. </p>
<h2 id="Now-we-are-going-to-upgrade-our-Bomb"><a href="#Now-we-are-going-to-upgrade-our-Bomb" class="headerlink" title="Now we are going to upgrade our Bomb!"></a>Now we are going to upgrade our Bomb!</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;REGX52.H&gt;</span></span></span><br><span class="line"> </span><br><span class="line">sbit led=P2^<span class="number">4</span>;</span><br><span class="line"> </span><br><span class="line"><span class="type">int</span> cnt=<span class="number">0</span>;</span><br><span class="line"> </span><br><span class="line"><span class="type">void</span> <span class="title function_">Time0Init</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="comment">//配置定时器0工作模式16位计时</span></span><br><span class="line">    <span class="comment">//set T0 working mode with 16 bits</span></span><br><span class="line">  TMOD&amp;=<span class="number">0xF0</span>;</span><br><span class="line">    TMOD|=<span class="number">0x01</span>;</span><br><span class="line">  <span class="comment">//给初值，定制10ms</span></span><br><span class="line">    <span class="comment">//set initial value , create 10 ms delay</span></span><br><span class="line">  TL0=<span class="number">0x00</span>;</span><br><span class="line">  TH0=<span class="number">0xDC</span>;</span><br><span class="line">  </span><br><span class="line">  TR0=<span class="number">1</span>;<span class="comment">//开始计时</span></span><br><span class="line">        <span class="comment">// turn on T0</span></span><br><span class="line">  TF0=<span class="number">0</span>;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">//打开定时器0中断</span></span><br><span class="line">    <span class="comment">//turn on T0 interrupt</span></span><br><span class="line">  ET0=<span class="number">1</span>;</span><br><span class="line">  <span class="comment">//打开总中断</span></span><br><span class="line">    <span class="comment">// turn on general interrupt</span></span><br><span class="line">  EA=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="type">void</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  </span><br><span class="line">  led=<span class="number">1</span>;</span><br><span class="line">  </span><br><span class="line">  Time0Init();</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">  &#123;</span><br><span class="line">    ;<span class="comment">//do noting</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="type">void</span> <span class="title function_">Time0Rountime</span><span class="params">()</span>  interrupt 1</span><br><span class="line">&#123;</span><br><span class="line">      cnt++;						<span class="comment">//cnt++用来记录第一次爆表，cnt是1次</span></span><br><span class="line">            						<span class="comment">// record the interrupt times</span></span><br><span class="line">                    <span class="comment">//重新给初值</span></span><br><span class="line">                        <span class="comment">//reset the initial value</span></span><br><span class="line">      TL0=<span class="number">0x00</span>;</span><br><span class="line">      TH0=<span class="number">0xDC</span>;</span><br><span class="line">      <span class="keyword">if</span>(cnt==<span class="number">1000</span>)				<span class="comment">//爆表100次，经过10s，led就亮</span></span><br><span class="line">                              <span class="comment">// after 100 times which the time passes 1s</span></span><br><span class="line">      &#123;</span><br><span class="line">        cnt=<span class="number">0</span>;					<span class="comment">//当1s时，让count从0开始，计算下一次的1s</span></span><br><span class="line">                            <span class="comment">// set the cnt again</span></span><br><span class="line">        P1=<span class="number">0x00</span>;				<span class="comment">//BOMb!!!</span></span><br><span class="line">      &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h2 id="1-What-if-we-get-many-BOMBs-which-they-are-set-at-different-palces"><a href="#1-What-if-we-get-many-BOMBs-which-they-are-set-at-different-palces" class="headerlink" title="1. What if we get many BOMBs which they are set at different palces ?"></a>1. What if we get many BOMBs which they are set at different palces ?</h2><ul>
<li><strong>Explode with a delay ( such as 1 s )</strong></li>
</ul>
<blockquote>
<p>Solution KEY : </p>
<p>​				Once the first BOMB is about to explode , it sends a signal to another BOMB.</p>
<p><strong>the signal :</strong></p>
<ol>
<li>Voltage （like 0 v  —&gt; 1 v  or reverse it ）</li>
<li>Waves of Voltage ( PULSE )</li>
<li>Serial text</li>
</ol>
</blockquote>
<h2 id="1-Voltage"><a href="#1-Voltage" class="headerlink" title="1. Voltage"></a>1. Voltage</h2><p>​	Once the first bomb is about to explode, it sends a Voltage signal to the second and so on.</p>
<p>​	We can use one of a pin to do this work .</p>
<ul>
<li>The first BOMB</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    </span><br><span class="line">    delayN10ms(<span class="number">10000</span>);   <span class="comment">//10s</span></span><br><span class="line">    P2<span class="number">.1</span>=<span class="number">0</span>;       <span class="comment">// send a signal ( 5v ) </span></span><br><span class="line">    P1=<span class="number">0x00</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>The second BOMB</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">   <span class="keyword">while</span>(<span class="number">1</span>)&#123;   </span><br><span class="line">      <span class="keyword">if</span>(P2<span class="number">.1</span>==<span class="number">0</span>)&#123;</span><br><span class="line">            delayN10ms(<span class="number">10000</span>);   <span class="comment">//10s</span></span><br><span class="line">            P2<span class="number">.2</span>=<span class="number">0</span>;       <span class="comment">// send a signal to the third BOMB (send to P2.1) ( 5v ) </span></span><br><span class="line">            P1=<span class="number">0x00</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="2-Through-Plain-Text（by-serial-）"><a href="#2-Through-Plain-Text（by-serial-）" class="headerlink" title="2. Through Plain Text（by serial ）"></a>2. Through Plain Text（by serial ）</h2><blockquote>
<p>The procedure :</p>
<ol>
<li>Set the first bomb</li>
<li>Connect to the the second Bomb and the third one so on</li>
<li>Start the first Bomb</li>
<li>the second before the first Bomb is about to explode ,it send a message “BOMB”</li>
</ol>
</blockquote>
<p><strong>The schematic</strong></p>
<p><img src="/images/theFinalBomb.png" alt="the final version"></p>
<p><strong>The first BOMB.</strong> 	</p>
<ul>
<li>Transmit  signal ( We only use the send module, so we just need one pin ( <strong>TX</strong> ))</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;reg51.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> seg[]=&#123;<span class="number">0xc0</span>,<span class="number">0xf9</span>,<span class="number">0xa4</span>,<span class="number">0xb0</span>,<span class="number">0x99</span>,<span class="number">0x92</span>,<span class="number">0x82</span>,<span class="number">0xf8</span>,<span class="number">0x80</span>,<span class="number">0x90</span>&#125;; <span class="comment">//数码管驱动</span></span><br><span class="line"></span><br><span class="line">sbit start = P1^<span class="number">7</span>;</span><br><span class="line">sbit bomb  = P1^<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> timeS=<span class="number">9</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">delayNms</span><span class="params">(<span class="type">int</span> N)</span>    <span class="comment">// @11.0592MHz   延时函数</span></span><br><span class="line">&#123;</span><br><span class="line">        <span class="type">unsigned</span> <span class="type">char</span> i;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span>(N)&#123;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">1275</span>;i&gt;<span class="number">0</span>;i--);</span><br><span class="line">                N--;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">serialInit</span><span class="params">()</span>&#123;</span><br><span class="line">        </span><br><span class="line">        TH1=<span class="number">0xFD</span>;   <span class="comment">//Set timer 1 for BAUD=9600</span></span><br><span class="line">        TMOD=<span class="number">0x20</span>;   <span class="comment">//Set Timer 1 in Mode 2 8-bit Auto reload          </span></span><br><span class="line">        SCON=<span class="number">0x50</span>;   <span class="comment">//Set serial reception enable and Mode 1 8-bit UART</span></span><br><span class="line">        TR1=<span class="number">1</span>;     <span class="comment">//Start Timer 1</span></span><br><span class="line">        </span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">interruptSetUp</span><span class="params">()</span>&#123;</span><br><span class="line">        IP  =  <span class="number">0x04</span>; </span><br><span class="line">     EA  =  <span class="number">1</span>;</span><br><span class="line">     EX0 =  <span class="number">1</span>; <span class="comment">// allow external interrupt INT0</span></span><br><span class="line">        EX1 =  <span class="number">1</span>;</span><br><span class="line">     IT0 =  <span class="number">1</span>; <span class="comment">// set edge triggerin</span></span><br><span class="line">        IT1 =  <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">sendSignal</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">unsigned</span> <span class="type">char</span> Message[<span class="number">15</span>]=&#123;<span class="string">&quot;BOMB&quot;</span>&#125;;</span><br><span class="line">        <span class="type">char</span> i;</span><br><span class="line">       delayNms(<span class="number">300</span>);</span><br><span class="line">        <span class="keyword">for</span> (i=<span class="number">0</span>;i&lt;<span class="number">7</span>;i++)</span><br><span class="line">        &#123;</span><br><span class="line">         SBUF = Message[i];  <span class="comment">//Send one by one each byte to serial</span></span><br><span class="line">         <span class="keyword">while</span>(TI==<span class="number">0</span>);      <span class="comment">//Wait for Transmition complition</span></span><br><span class="line">     TI=<span class="number">0</span>;     <span class="comment">//Clear Transmit Intterupt flag</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">        serialInit();<span class="comment">// initialize</span></span><br><span class="line">        interruptSetUp();</span><br><span class="line">        <span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line">                </span><br><span class="line">                <span class="keyword">if</span>(start==<span class="number">0</span>)&#123;</span><br><span class="line">                        timeS=<span class="number">9</span>;</span><br><span class="line">                        <span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line"></span><br><span class="line">                                P0=seg[timeS];</span><br><span class="line">                                delayNms(<span class="number">500</span>);</span><br><span class="line">                                timeS--;</span><br><span class="line">                                <span class="keyword">if</span>(timeS==<span class="number">-1</span>)&#123;</span><br><span class="line">                                        sendSignal();</span><br><span class="line">                                        delayNms(<span class="number">10</span>);</span><br><span class="line">                                        bomb=<span class="number">0</span>;</span><br><span class="line">                                        <span class="keyword">while</span>(<span class="number">1</span>);</span><br><span class="line">                                &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                </span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">int0</span><span class="params">(<span class="type">void</span>)</span> interrupt 0&#123;    <span class="comment">// stop all the BOMBs entirely </span></span><br><span class="line">        <span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line">                </span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">int1</span><span class="params">(<span class="type">void</span>)</span> interrupt 2&#123;</span><br><span class="line">        delayNms(<span class="number">5000</span>);        <span class="comment">//pause for 5 seconds</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>The second BOMB</p>
<ul>
<li>Receive the signal from the last BOMB</li>
<li>Transmit signal to the third</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;REGX52.H&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> seg[]=&#123;<span class="number">0xc0</span>,<span class="number">0xf9</span>,<span class="number">0xa4</span>,<span class="number">0xb0</span>,<span class="number">0x99</span>,<span class="number">0x92</span>,<span class="number">0x82</span>,<span class="number">0xf8</span>,<span class="number">0x80</span>,<span class="number">0x90</span>&#125;; <span class="comment">//数码管驱动</span></span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> Message[<span class="number">15</span>]=&#123;<span class="string">&quot;BOMB&quot;</span>&#125;;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> receivedMessage[<span class="number">15</span>];</span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span>  r=<span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> timeS=<span class="number">9</span>;</span><br><span class="line">sbit bomb  = P1^<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">delayNms</span><span class="params">(<span class="type">int</span> N)</span>    <span class="comment">//@11.0592MHz   延时函数</span></span><br><span class="line">&#123;</span><br><span class="line">        <span class="type">unsigned</span> <span class="type">char</span> i;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span>(N)&#123;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">1275</span>;i&gt;<span class="number">0</span>;i--);</span><br><span class="line">                N--;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">interruptSetUp</span><span class="params">()</span>&#123;</span><br><span class="line">        IP  =  <span class="number">0x04</span>; </span><br><span class="line">   EA  =  <span class="number">1</span>;</span><br><span class="line">   EX0 =  <span class="number">1</span>; <span class="comment">// allow external interrupt INT0</span></span><br><span class="line">        EX1 =  <span class="number">1</span>;</span><br><span class="line">   IT0 =  <span class="number">1</span>; <span class="comment">// set edge triggerin</span></span><br><span class="line">        IT1 =  <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">UartInit</span><span class="params">()</span>    <span class="comment">//9600bps@11.0592MHz</span></span><br><span class="line">&#123;</span><br><span class="line">  PCON &amp;= <span class="number">0x7F</span>;		<span class="comment">//波特率不倍速</span></span><br><span class="line">  SCON = <span class="number">0x50</span>;		<span class="comment">//8位数据,可变波特率</span></span><br><span class="line">  TMOD &amp;= <span class="number">0x0F</span>;		<span class="comment">//清除定时器1模式位</span></span><br><span class="line">  TMOD |= <span class="number">0x20</span>;		<span class="comment">//设定定时器1为8位自动重装方式</span></span><br><span class="line">  TL1 = <span class="number">0xFD</span>;			<span class="comment">//设定定时初值</span></span><br><span class="line">  TH1 = <span class="number">0xFD</span>;			<span class="comment">//设定定时器重装值		</span></span><br><span class="line">  TR1 = <span class="number">1</span>;			<span class="comment">//启动定时器1</span></span><br><span class="line">  ET1 = <span class="number">0</span>;        	<span class="comment">//禁止定时器1中断</span></span><br><span class="line">  EA=<span class="number">1</span>;				<span class="comment">//开放总中断 </span></span><br><span class="line">  ES=<span class="number">1</span>;				<span class="comment">//开放串口中断</span></span><br><span class="line">        </span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Uartsend</span><span class="params">(<span class="type">unsigned</span> <span class="type">char</span> byte)</span><span class="comment">//发送</span></span><br><span class="line">&#123;</span><br><span class="line">  receivedMessage[r]=byte;<span class="comment">//把数据写入发送缓冲区SBUF</span></span><br><span class="line">        r++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">sendSignal</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">char</span> i;</span><br><span class="line">       delayNms(<span class="number">300</span>);</span><br><span class="line">        <span class="keyword">for</span> (i=<span class="number">0</span>;i&lt;<span class="number">7</span>;i++)</span><br><span class="line">        &#123;</span><br><span class="line">         SBUF = Message[i];  <span class="comment">//Send one by one each byte to serial</span></span><br><span class="line">         <span class="keyword">while</span>(TI==<span class="number">0</span>);      <span class="comment">//Wait for Transmition complition</span></span><br><span class="line">     TI=<span class="number">0</span>;     <span class="comment">//Clear Transmit Intterupt flag</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">sendReceivedSignal</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">char</span> i;</span><br><span class="line">       delayNms(<span class="number">300</span>);</span><br><span class="line">        <span class="keyword">for</span> (i=<span class="number">0</span>;i&lt;r;i++)</span><br><span class="line">        &#123;</span><br><span class="line">         SBUF = receivedMessage[i];  <span class="comment">//Send one by one each byte to serial</span></span><br><span class="line">         <span class="keyword">while</span>(TI==<span class="number">0</span>);      <span class="comment">//Wait for Transmition complition</span></span><br><span class="line">     TI=<span class="number">0</span>;     <span class="comment">//Clear Transmit Intterupt flag</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">UART_ISR</span><span class="params">()</span> interrupt 4     <span class="comment">//串口中断函数</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">if</span>(RI==<span class="number">1</span>)<span class="comment">//接收中断</span></span><br><span class="line">  &#123;</span><br><span class="line">    Uartsend(SBUF);<span class="comment">//把接收的数据发送到计算机</span></span><br><span class="line">    RI=<span class="number">0</span>;<span class="comment">//软件清零</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">compareMessage</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(receivedMessage[<span class="number">0</span>]==<span class="string">&#x27;B&#x27;</span>&amp;&amp;receivedMessage[<span class="number">1</span>]==<span class="string">&#x27;O&#x27;</span>&amp;&amp;receivedMessage[<span class="number">2</span>]==<span class="string">&#x27;M&#x27;</span>&amp;&amp;receivedMessage[<span class="number">3</span>]==<span class="string">&#x27;B&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  UartInit();</span><br><span class="line">        interruptSetUp();</span><br><span class="line">       </span><br><span class="line">  <span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">  &#123;</span><br><span class="line">                </span><br><span class="line">    <span class="keyword">if</span>(compareMessage()==<span class="number">1</span>)&#123;</span><br><span class="line">                        <span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line"></span><br><span class="line">                                P0=seg[timeS];</span><br><span class="line">                                delayNms(<span class="number">500</span>);</span><br><span class="line">                                timeS--;</span><br><span class="line">                                <span class="keyword">if</span>(timeS==<span class="number">-1</span>)&#123;</span><br><span class="line">                                        sendSignal();</span><br><span class="line">                                        delayNms(<span class="number">10</span>);</span><br><span class="line">                                        bomb=<span class="number">0</span>;</span><br><span class="line">                                        <span class="keyword">while</span>(<span class="number">1</span>);</span><br><span class="line">                                &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                &#125;</span><br><span class="line">               </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">int0</span><span class="params">(<span class="type">void</span>)</span> interrupt 0&#123;</span><br><span class="line">        <span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line">                </span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">int1</span><span class="params">(<span class="type">void</span>)</span> interrupt 2&#123;</span><br><span class="line">        delayNms(<span class="number">5000</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>The THird BOMB.</strong></p>
<p>Actually it  does the same thing as the second one .</p>
<ul>
<li>Receive the signal from the last BOMB</li>
<li>Transmit signal to the third one</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;REGX52.H&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> seg[]=&#123;<span class="number">0xc0</span>,<span class="number">0xf9</span>,<span class="number">0xa4</span>,<span class="number">0xb0</span>,<span class="number">0x99</span>,<span class="number">0x92</span>,<span class="number">0x82</span>,<span class="number">0xf8</span>,<span class="number">0x80</span>,<span class="number">0x90</span>&#125;; <span class="comment">//数码管驱动</span></span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> Message[<span class="number">15</span>]=&#123;<span class="string">&quot;BOMB&quot;</span>&#125;;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> receivedMessage[<span class="number">15</span>];</span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span>  r=<span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> timeS=<span class="number">9</span>;</span><br><span class="line">sbit bomb  = P1^<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">delayNms</span><span class="params">(<span class="type">int</span> N)</span>    <span class="comment">//@11.0592MHz   延时函数</span></span><br><span class="line">&#123;</span><br><span class="line">        <span class="type">unsigned</span> <span class="type">char</span> i;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span>(N)&#123;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">1275</span>;i&gt;<span class="number">0</span>;i--);</span><br><span class="line">                N--;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">interruptSetUp</span><span class="params">()</span>&#123;</span><br><span class="line">        IP  =  <span class="number">0x04</span>; </span><br><span class="line">   EA  =  <span class="number">1</span>;</span><br><span class="line">   EX0 =  <span class="number">1</span>; <span class="comment">// allow external interrupt INT0</span></span><br><span class="line">        EX1 =  <span class="number">1</span>;</span><br><span class="line">   IT0 =  <span class="number">1</span>; <span class="comment">// set edge triggerin</span></span><br><span class="line">        IT1 =  <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">UartInit</span><span class="params">()</span>    <span class="comment">//9600bps@11.0592MHz</span></span><br><span class="line">&#123;</span><br><span class="line">  PCON &amp;= <span class="number">0x7F</span>;		<span class="comment">//波特率不倍速</span></span><br><span class="line">  SCON = <span class="number">0x50</span>;		<span class="comment">//8位数据,可变波特率</span></span><br><span class="line">  TMOD &amp;= <span class="number">0x0F</span>;		<span class="comment">//清除定时器1模式位</span></span><br><span class="line">  TMOD |= <span class="number">0x20</span>;		<span class="comment">//设定定时器1为8位自动重装方式</span></span><br><span class="line">  TL1 = <span class="number">0xFD</span>;			<span class="comment">//设定定时初值</span></span><br><span class="line">  TH1 = <span class="number">0xFD</span>;			<span class="comment">//设定定时器重装值		</span></span><br><span class="line">  TR1 = <span class="number">1</span>;			<span class="comment">//启动定时器1</span></span><br><span class="line">  ET1 = <span class="number">0</span>;        	<span class="comment">//禁止定时器1中断</span></span><br><span class="line">  EA=<span class="number">1</span>;				<span class="comment">//开放总中断 </span></span><br><span class="line">  ES=<span class="number">1</span>;				<span class="comment">//开放串口中断</span></span><br><span class="line">        </span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Uartsend</span><span class="params">(<span class="type">unsigned</span> <span class="type">char</span> byte)</span><span class="comment">//发送</span></span><br><span class="line">&#123;</span><br><span class="line">  receivedMessage[r]=byte;<span class="comment">//把数据写入发送缓冲区SBUF</span></span><br><span class="line">        r++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">sendSignal</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">char</span> i;</span><br><span class="line">       delayNms(<span class="number">300</span>);</span><br><span class="line">        <span class="keyword">for</span> (i=<span class="number">0</span>;i&lt;<span class="number">7</span>;i++)</span><br><span class="line">        &#123;</span><br><span class="line">         SBUF = Message[i];  <span class="comment">//Send one by one each byte to serial</span></span><br><span class="line">         <span class="keyword">while</span>(TI==<span class="number">0</span>);      <span class="comment">//Wait for Transmition complition</span></span><br><span class="line">     TI=<span class="number">0</span>;     <span class="comment">//Clear Transmit Intterupt flag</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">sendReceivedSignal</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">char</span> i;</span><br><span class="line">       delayNms(<span class="number">300</span>);</span><br><span class="line">        <span class="keyword">for</span> (i=<span class="number">0</span>;i&lt;r;i++)</span><br><span class="line">        &#123;</span><br><span class="line">         SBUF = receivedMessage[i];  <span class="comment">//Send one by one each byte to serial</span></span><br><span class="line">         <span class="keyword">while</span>(TI==<span class="number">0</span>);      <span class="comment">//Wait for Transmition complition</span></span><br><span class="line">     TI=<span class="number">0</span>;     <span class="comment">//Clear Transmit Intterupt flag</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">UART_ISR</span><span class="params">()</span> interrupt 4     <span class="comment">//串口中断函数</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">if</span>(RI==<span class="number">1</span>)<span class="comment">//接收中断</span></span><br><span class="line">  &#123;</span><br><span class="line">    Uartsend(SBUF);<span class="comment">//把接收的数据发送到计算机</span></span><br><span class="line">    RI=<span class="number">0</span>;<span class="comment">//软件清零</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">compareMessage</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(receivedMessage[<span class="number">0</span>]==<span class="string">&#x27;B&#x27;</span>&amp;&amp;receivedMessage[<span class="number">1</span>]==<span class="string">&#x27;O&#x27;</span>&amp;&amp;receivedMessage[<span class="number">2</span>]==<span class="string">&#x27;M&#x27;</span>&amp;&amp;receivedMessage[<span class="number">3</span>]==<span class="string">&#x27;B&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  UartInit();</span><br><span class="line">        interruptSetUp();</span><br><span class="line">       </span><br><span class="line">  <span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">  &#123;</span><br><span class="line">                </span><br><span class="line">    <span class="keyword">if</span>(compareMessage()==<span class="number">1</span>)&#123;</span><br><span class="line">                        <span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line"></span><br><span class="line">                                P0=seg[timeS];</span><br><span class="line">                                delayNms(<span class="number">500</span>);</span><br><span class="line">                                timeS--;</span><br><span class="line">                                <span class="keyword">if</span>(timeS==<span class="number">-1</span>)&#123;</span><br><span class="line">                                        sendSignal();</span><br><span class="line">                                        delayNms(<span class="number">10</span>);</span><br><span class="line">                                        bomb=<span class="number">0</span>;</span><br><span class="line">                                        <span class="keyword">while</span>(<span class="number">1</span>);</span><br><span class="line">                                &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                &#125;</span><br><span class="line">               </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">int0</span><span class="params">(<span class="type">void</span>)</span> interrupt 0&#123;</span><br><span class="line">        <span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line">                </span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">int1</span><span class="params">(<span class="type">void</span>)</span> interrupt 2&#123;</span><br><span class="line">        delayNms(<span class="number">5000</span>);</span><br><span class="line">&#125;<span class="meta">#<span class="keyword">include</span> <span class="string">&lt;REGX52.H&gt;</span></span></span><br><span class="line"><span class="type">void</span> <span class="title function_">UartInit</span><span class="params">()</span>    <span class="comment">//9600bps@11.0592MHz</span></span><br><span class="line">&#123;</span><br><span class="line">  PCON &amp;= <span class="number">0x7F</span>;		<span class="comment">//波特率不倍速</span></span><br><span class="line">  SCON = <span class="number">0x50</span>;		<span class="comment">//8位数据,可变波特率</span></span><br><span class="line">  TMOD &amp;= <span class="number">0x0F</span>;		<span class="comment">//清除定时器1模式位</span></span><br><span class="line">  TMOD |= <span class="number">0x20</span>;		<span class="comment">//设定定时器1为8位自动重装方式</span></span><br><span class="line">  TL1 = <span class="number">0xFD</span>;			<span class="comment">//设定定时初值</span></span><br><span class="line">  TH1 = <span class="number">0xFD</span>;			<span class="comment">//设定定时器重装值		</span></span><br><span class="line">  TR1 = <span class="number">1</span>;			<span class="comment">//启动定时器1</span></span><br><span class="line">  ET1 = <span class="number">0</span>;        	<span class="comment">//禁止定时器1中断</span></span><br><span class="line">  EA=<span class="number">1</span>;				<span class="comment">//开放总中断 </span></span><br><span class="line">  ES=<span class="number">1</span>;				<span class="comment">//开放串口中断</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Uartsend</span><span class="params">(<span class="type">unsigned</span> <span class="type">char</span> byte)</span><span class="comment">//发送</span></span><br><span class="line">&#123;</span><br><span class="line">  SBUF=byte;<span class="comment">//把数据写入发送缓冲区SBUF</span></span><br><span class="line">  <span class="comment">//数据发送完成的标志是TI=1；所以等待数据传送完</span></span><br><span class="line">  <span class="keyword">while</span>(TI==<span class="number">0</span>);</span><br><span class="line">  TI=<span class="number">0</span>;<span class="comment">//软件清零</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">UART_ISR</span><span class="params">()</span> interrupt 4<span class="comment">//串口中断函数</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">if</span>(RI==<span class="number">1</span>)<span class="comment">//接收中断</span></span><br><span class="line">  &#123;</span><br><span class="line">    Uartsend(SBUF);<span class="comment">//把接收的数据发送到下一个</span></span><br><span class="line">    RI=<span class="number">0</span>;<span class="comment">//软件清零</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  UartInit();</span><br><span class="line">  <span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">  &#123;</span><br><span class="line">    </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p><strong>This is the end of our BOMB</strong></p>
<p>Good luck .</p>
]]></content>
      <categories>
        <category>软硬件技术</category>
      </categories>
      <tags>
        <tag>笔记</tag>
        <tag>嵌入式</tag>
        <tag>c51</tag>
      </tags>
  </entry>
  <entry>
    <title>AD域控和LDAP</title>
    <url>/2025/06/30/AD%E5%9F%9F%E6%8E%A7%E5%92%8CLDAP/</url>
    <content><![CDATA[<h2 id="LDAP（Lightweight-Directory-Access-Protocol）"><a href="#LDAP（Lightweight-Directory-Access-Protocol）" class="headerlink" title="LDAP（Lightweight Directory Access Protocol）"></a>LDAP（Lightweight Directory Access Protocol）</h2><p>LDAP 是一种 <strong>目录服务协议</strong>，用于访问和管理目录信息（比如用户、组织、设备等）。它是一个跨平台的协议，可以被很多系统支持，如：</p>
<ul>
<li>OpenLDAP（Linux 中常用的开源 LDAP 实现）</li>
<li>Active Directory（微软的目录服务就是基于 LDAP 的）</li>
<li>Apache Directory、389 DS 等</li>
</ul>
<p>LDAP 的用途主要是：</p>
<ul>
<li>用户认证（如登录系统）</li>
<li>用户信息查询（如获取邮箱、电话等）</li>
<li>应用统一认证（SSO）</li>
</ul>
<p>LDAP 中的典型结构是类似于树状目录的，如：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">bash复制编辑dc=example,dc=com</span><br><span class="line"> ├── ou=users</span><br><span class="line"> │    ├── cn=alice</span><br><span class="line"> │    └── cn=bob</span><br><span class="line"> └── ou=groups</span><br></pre></td></tr></table></figure>

<hr>
<h3 id="什么是-AD-域控（Active-Directory-Domain-Controller）"><a href="#什么是-AD-域控（Active-Directory-Domain-Controller）" class="headerlink" title="什么是 AD 域控（Active Directory Domain Controller）"></a>什么是 AD 域控（Active Directory Domain Controller）</h3><p>Active Directory（简称 AD）是微软开发的一套 <strong>基于 LDAP 的目录服务系统</strong>，它不仅实现了 LDAP 协议，还扩展了许多功能：</p>
<ul>
<li>用户、组、计算机、权限的集中管理</li>
<li>集中身份认证和授权（基于 Kerberos 和 LDAP）</li>
<li>集成 DNS、组策略（GPO）、证书等服务</li>
<li>控制 Windows 网络的“域”环境</li>
</ul>
<p>一个 <strong>AD 域控（Domain Controller）</strong> 是一台负责管理 AD 目录的服务器，负责处理：</p>
<ul>
<li>用户登录请求（如验证用户名密码）</li>
<li>域内设备管理</li>
<li>安全策略分发</li>
</ul>
<h2 id="AD-域控的核心价值是“集中管理身份与设备”"><a href="#AD-域控的核心价值是“集中管理身份与设备”" class="headerlink" title="AD 域控的核心价值是“集中管理身份与设备”"></a><strong>AD 域控的核心价值是“集中管理身份与设备”</strong></h2><h1 id=""><a href="#" class="headerlink" title=""></a></h1>]]></content>
      <categories>
        <category>软件技术</category>
      </categories>
      <tags>
        <tag>笔记</tag>
        <tag>linux</tag>
        <tag>system</tag>
        <tag>command</tag>
        <tag>运维</tag>
        <tag>WinServer</tag>
        <tag>AD</tag>
        <tag>LDAP</tag>
      </tags>
  </entry>
  <entry>
    <title>AD域控结合Self-Password-Services实现自助改密码</title>
    <url>/2025/07/01/AD%E5%9F%9F%E6%8E%A7%E7%BB%93%E5%90%88Self-Password-Services%E5%AE%9E%E7%8E%B0%E8%87%AA%E5%8A%A9%E6%94%B9%E5%AF%86%E7%A0%81/</url>
    <content><![CDATA[<blockquote>
<ol>
<li>操作系统：Anolis（类似centos，使用yum，dnf包管理）</li>
</ol>
</blockquote>
<h1 id="AD域控结合Self-Password-Services实现自助改密码"><a href="#AD域控结合Self-Password-Services实现自助改密码" class="headerlink" title="AD域控结合Self-Password-Services实现自助改密码"></a>AD域控结合Self-Password-Services实现自助改密码</h1><h1 id="直接安装部署"><a href="#直接安装部署" class="headerlink" title="直接安装部署"></a>直接安装部署</h1><p>​	经常会有这样的场景，AD域用户忘记或遗失了自己的密码。这时候可以找管理员进行修改，但是情况多了也会有些麻烦。所以可以尝试搭建**ssp(self-password-sercive)**实现用户自助改密码。还可以通过脚本的方式实现批量改密码，结合邮件等功能也能自主改密码。	</p>
<p>​	使用了两种方式部署，分别是实体机部署以及docker部署，本文部署方式为实体机部署，docker部署可能因为镜像，等等原因不及而终。最后整理部分报错信息以及解决方案供参考。	</p>
<p>​	</p>
<ul>
<li>准备资料</li>
</ul>
<p>​	SSP项目地址：<a href="https://github.com/ltb-project/self-service-password">ltb-project&#x2F;self-service-password: Web interface to change and reset password in an LDAP directory</a></p>
<p>​	AD域控服务器（CS）搭建方式：<a href="https://blog.csdn.net/m0_49254484/article/details/129364336">企业AD域（域控服务器）的安装和配置详细教程_域服务器的安装与配置-CSDN博客</a></p>
<p>​	AD CA服务器搭建方式：<a href="https://blog.csdn.net/weixin_48711866/article/details/127204995">AD域控与CA证书、NPS（radius）超级详细安装_ad ca-CSDN博客</a></p>
<ul>
<li><p>参考部署资料</p>
<p>  <a href="https://blog.csdn.net/qq461391728/article/details/115867721">Self Service Password部署-CSDN博客</a></p>
</li>
</ul>
<h2 id="1-安装httpd（apache）php各项依赖"><a href="#1-安装httpd（apache）php各项依赖" class="headerlink" title="1. 安装httpd（apache）php各项依赖"></a>1. 安装httpd（apache）php各项依赖</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 安装 Apache 和 PHP</span></span><br><span class="line">dnf install httpd php php-ldap php-mbstring -y</span><br></pre></td></tr></table></figure>

<p><img src="/../images/Linux/%E8%BF%90%E7%BB%B4/ssp/image-20250704102141823.png" alt="image-20250704102141823"></p>
<h2 id="2-开始安装ssp"><a href="#2-开始安装ssp" class="headerlink" title="2. 开始安装ssp"></a>2. 开始安装ssp</h2><h3 id="1-配置源"><a href="#1-配置源" class="headerlink" title="1.配置源"></a>1.配置源</h3><ul>
<li>可以尝试先下载</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">dnf -y install self-service-password</span><br></pre></td></tr></table></figure>

<p><img src="/../images/Linux/%E8%BF%90%E7%BB%B4/ssp/image-20250704102758477.png" alt="image-20250704102758477"></p>
<p>我这里下载过所以显示已经安装，如果不能安装则进入下一步：</p>
<ol>
<li>配置源：</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim /etc/yum.repos.d/ltb-project.repo</span><br></pre></td></tr></table></figure>

<p>写入以下信息：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[ltb-project-noarch]</span><br><span class="line">name=LTB project packages (noarch)</span><br><span class="line">baseurl=https://ltb-project.org/rpm/$releasever/noarch</span><br><span class="line">enabled=1</span><br><span class="line">gpgcheck=1</span><br><span class="line">gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-LTB-project</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>导入GPG私钥</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">rpm --import https://ltb-project.org/wiki/lib/RPM-GPG-KEY-LTB-project</span><br></pre></td></tr></table></figure>

<p><img src="/../images/Linux/%E8%BF%90%E7%BB%B4/ssp/image-20250704104057746.png" alt="image-20250704104057746"></p>
<ol start="3">
<li>添加php72的yum源</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum -y install epel-release</span><br><span class="line">rpm -Uvh https://mirror.webtatic.com/yum/el7/webtatic-release.rpm</span><br></pre></td></tr></table></figure>

<p><img src="/../images/Linux/%E8%BF%90%E7%BB%B4/ssp/image-20250704104232023.png" alt="image-20250704104232023"></p>
<h2 id="3-下载安装"><a href="#3-下载安装" class="headerlink" title="3. 下载安装"></a>3. 下载安装</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">dnf -y install self-service-password</span><br></pre></td></tr></table></figure>

<p><img src="/../images/Linux/%E8%BF%90%E7%BB%B4/ssp/image-20250704104342086.png" alt="image-20250704104342086"></p>
<h2 id="4-配置文件"><a href="#4-配置文件" class="headerlink" title="4. 配置文件"></a>4. 配置文件</h2><p>​	其实最麻烦的其实是这里，这个配置文件很长，有很多细节。此时你下载好了之后，启动httpd服务就可以访问到ssp的界面了，但是会报错：<strong>在使用凭据加密前，需要在 keyphrase 设置中填写一个随机字符串</strong></p>
<p><img src="/../images/Linux/%E8%BF%90%E7%BB%B4/ssp/image-20250704104846233.png" alt="image-20250704104846233"></p>
<p>先实现基本功能-<strong>用户自己使用旧密码改为新密码</strong>。只要这一步能够pass，那么使用邮件就能通过。</p>
<h3 id="1-证书设置"><a href="#1-证书设置" class="headerlink" title="1. 证书设置"></a>1. 证书设置</h3><h4 id="1-导出证书"><a href="#1-导出证书" class="headerlink" title="1. 导出证书"></a>1. 导出证书</h4><ol>
<li>要想ssp能够<strong>正常修改</strong>AD域的用户名账号密码<strong>几乎</strong>无法逃开证书认证的部分<ol>
<li>个人尝试过各种方式跳过加密，都是不行的，顶多能够查询信息，修改是不可能的。</li>
</ol>
</li>
</ol>
<ul>
<li>AD域<strong>根证书导出</strong></li>
</ul>
<p>登录到服务器后Win+R输入cmd打开命令行输入：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd Desktop</span><br><span class="line">certutil -ca.cert root.cer</span><br></pre></td></tr></table></figure>

<p>这样根证书就导出到桌面了，<strong>注意如果没有安装AD CS服务，这个命令是无法生效的</strong></p>
<p>然后传到服务器即可</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">scp root.cer root@192.168.72.128:/root/</span><br></pre></td></tr></table></figure>



<h4 id="2-导入证书并生效"><a href="#2-导入证书并生效" class="headerlink" title="2. 导入证书并生效"></a>2. 导入证书并生效</h4><ul>
<li>上一步传过来的证书是二进制的，无法被Linux添加，需要先转换格式</li>
</ul>
<p><img src="/../images/Linux/%E8%BF%90%E7%BB%B4/ssp/image-20250704110454356.png" alt="image-20250704110454356"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">openssl x509 -in root.cer -inform DER -out root.pem -outform PEM</span><br></pre></td></tr></table></figure>

<p><img src="/../images/Linux/%E8%BF%90%E7%BB%B4/ssp/image-20250704110521201.png" alt="image-20250704110521201"></p>
<ul>
<li><strong>根据Linux发行版的不同，导入方式有差别</strong>，基于<strong>Debian&#x2F;Ubuntu</strong>：</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 对于基于 Debian/Ubuntu</span></span><br><span class="line"><span class="built_in">cp</span> ca.crt /usr/local/share/ca-certificates/</span><br><span class="line">update-ca-certificates</span><br></pre></td></tr></table></figure>

<ul>
<li>基于 RHEL&#x2F;CentOS （龙蜥使也是用这种方式）</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 对于基于 RHEL/CentOS</span></span><br><span class="line"><span class="built_in">cp</span> ca.crt /etc/pki/ca-trust/source/anchors/</span><br><span class="line">update-ca-trust</span><br></pre></td></tr></table></figure>

<h4 id="3-检查是否导入成功。"><a href="#3-检查是否导入成功。" class="headerlink" title="3. 检查是否导入成功。"></a>3. 检查是否导入成功。</h4><ul>
<li>基于<strong>Debian&#x2F;Ubuntu</strong>：</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">openssl verify -CAfile /etc/ssl/certs/ca-certificates.crt root.pem</span><br></pre></td></tr></table></figure>

<ul>
<li>RHEL&#x2F;CentOS （龙蜥使也是用这种方式）</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">openssl verify -CAfile /etc/pki/ca-trust/extracted/pem/tls-ca-bundle.pem root.pem</span><br></pre></td></tr></table></figure>

<p><img src="/../images/Linux/%E8%BF%90%E7%BB%B4/ssp/image-20250704111216732.png" alt="image-20250704111216732"></p>
<h3 id="2-config-inc-php配置文件设置"><a href="#2-config-inc-php配置文件设置" class="headerlink" title="2. config.inc.php配置文件设置"></a>2. config.inc.php配置文件设置</h3><ul>
<li>首先保证最小功能，也就是ldap和ad的设置</li>
<li><strong>LDAP</strong></li>
</ul>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># Debug mode</span></span><br><span class="line"><span class="comment"># true: log and display any errors or warnings (use this in configuration/testing)</span></span><br><span class="line"><span class="comment"># false: log only errors and do not display them (use this in production)</span></span><br><span class="line"><span class="variable">$debug</span> = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment"># LDAP</span></span><br><span class="line"><span class="variable">$ldap_url</span> = <span class="string">&quot;ldaps://WIN-QAG6G63NI1O.suitbim.com:636&quot;</span>;<span class="comment"># 替换成自己的AD域服务器</span></span><br><span class="line"><span class="variable">$ldap_starttls</span> = <span class="literal">false</span>; <span class="comment"># 已经使用了ldaps，所以关闭</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$ldap_binddn</span> = <span class="string">&quot;CN=Administrator,CN=Users,DC=www,DC=test,DC=com&quot;</span>;<span class="comment"># AD域DN,可以通过查看AD域服务器或者ldapsearch命令查看</span></span><br><span class="line"><span class="variable">$ldap_bindpw</span> = <span class="string">&quot;PAssword&quot;</span>; <span class="comment"># 密码</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$ldap_base</span> = <span class="string">&quot;DC=www,DC=test,DC=com&quot;</span>; <span class="comment"># 待修改的用户所在的组织结构，一般是一开始创建的林</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$ldap_login_attribute</span> = <span class="string">&quot;sAMAccountName&quot;</span>; <span class="comment"># 不改</span></span><br><span class="line"><span class="variable">$ldap_fullname_attribute</span> = <span class="string">&quot;cn&quot;</span>;         <span class="comment">#   不改</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$ldap_filter</span> = <span class="string">&quot;(&amp;(objectClass=user)(sAMAccountName=&#123;login&#125;)(!(userAccountControl:1.2.840.113556.1.4.803:=2)))&quot;</span>;<span class="comment"># 过滤器，可以照抄</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$ldap_scope</span> = <span class="string">&quot;sub&quot;</span>; <span class="comment"># 不改，sub模式出错概率小</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$ldap_use_exop_passwd</span> = <span class="literal">false</span>; <span class="comment">#  出错可以试true</span></span><br><span class="line"><span class="variable">$ldap_use_ppolicy_control</span> = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable">$ldap_network_timeout</span> = <span class="number">10</span>;</span><br><span class="line"><span class="variable">$ldap_page_size</span> = <span class="number">0</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li><strong>AD设置</strong></li>
</ul>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># Active Directory mode</span></span><br><span class="line"><span class="comment"># true: use unicodePwd as password field</span></span><br><span class="line"><span class="comment"># false: LDAPv3 standard behavior</span></span><br><span class="line"><span class="variable">$ad_mode</span> = <span class="literal">true</span>;  <span class="comment"># 必改</span></span><br><span class="line"><span class="variable">$ad_options</span>=[];</span><br><span class="line"><span class="comment"># Force account unlock when password is changed</span></span><br><span class="line"><span class="variable">$ad_options</span>[<span class="string">&#x27;force_unlock&#x27;</span>] = <span class="literal">false</span>;</span><br><span class="line"><span class="comment"># Force user change password at next login</span></span><br><span class="line"><span class="variable">$ad_options</span>[<span class="string">&#x27;force_pwd_change&#x27;</span>] = <span class="literal">false</span>;</span><br><span class="line"><span class="comment"># Allow user with expired password to change password</span></span><br><span class="line"><span class="variable">$ad_options</span>[<span class="string">&#x27;change_expired_password&#x27;</span>] = <span class="literal">false</span>;</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>还有一处重要的地方！</strong></li>
<li>搜索 manager，一共有2处设置</li>
</ul>
<p><img src="/../images/Linux/%E8%BF%90%E7%BB%B4/ssp/image-20250704131911829.png" alt="image-20250704131911829"></p>
<p>需要将对应的设置比如<code>$who_change_password = &quot;manager&quot;;</code>改为<code>manager</code>，否则会遇到改密码权限问题。</p>
<p><img src="/../images/Linux/%E8%BF%90%E7%BB%B4/ssp/image-20250704160819334.png" alt="image-20250704160819334"></p>
<p><img src="/../images/Linux/%E8%BF%90%E7%BB%B4/ssp/image-20250704161000961.png" alt="image-20250704161000961"></p>
<h3 id="3-修改本地域名解析"><a href="#3-修改本地域名解析" class="headerlink" title="3. 修改本地域名解析"></a>3. 修改本地域名解析</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim /etc/hosts</span><br></pre></td></tr></table></figure>

<p>增加ip-域名映射。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">192.168.99.190 WIN-QAG6G63NI1O.example.com</span><br></pre></td></tr></table></figure>

<p><strong>域名</strong>在AD域服务器中可查</p>
<p>查看方法：powershell </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">([System.Net.Dns]::GetHostByName($env:COMPUTERNAME)).HostName</span><br></pre></td></tr></table></figure>



<p><img src="/../images/Linux/%E8%BF%90%E7%BB%B4/ssp/image-20250709141845081.png" alt="image-20250709141845081"></p>
<h2 id="5-启动"><a href="#5-启动" class="headerlink" title="5. 启动"></a>5. 启动</h2><p>​	至此大部分配置均已结束，可以开始启动或尝试重启httpd和php-fpm进行测试了。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">systemctl restart httpd</span><br><span class="line">systemctl restart php-fpm</span><br></pre></td></tr></table></figure>



<h1 id="直接部署遇到的问题汇总与解决方式"><a href="#直接部署遇到的问题汇总与解决方式" class="headerlink" title="直接部署遇到的问题汇总与解决方式"></a>直接部署遇到的问题汇总与解决方式</h1><h3 id="1-安装ssp时提示有关php的版本问题"><a href="#1-安装ssp时提示有关php的版本问题" class="headerlink" title="1. 安装ssp时提示有关php的版本问题"></a>1. 安装ssp时提示有关php的版本问题</h3><p>查看已有的版本，并启用对应的版本：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">dnf module reset php -y</span><br><span class="line">dnf module enable php:7.4 -y</span><br><span class="line"># 之后再尝试下载</span><br><span class="line">dnf install php php-cli php-common php-ldap php-mbstring php-gd php-opcache php-json php-xml -y</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">dnf module list php <span class="comment"># 查看系统的php模块</span></span><br></pre></td></tr></table></figure>



<p><img src="/../images/Linux/%E8%BF%90%E7%BB%B4/ssp/image-20250704133139411.png" alt="image-20250704133139411"></p>
<h3 id="2-不能访问LDAP服务"><a href="#2-不能访问LDAP服务" class="headerlink" title="2. 不能访问LDAP服务"></a>2. 不能访问LDAP服务</h3><ul>
<li>这个问题可能是由以下原因造成<ol>
<li>网络问题（防火墙等）</li>
</ol>
</li>
</ul>
<p>对于网络问题，可以测试用telnet</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">telnet 192.168.72.129 636</span><br></pre></td></tr></table></figure>

<p><img src="/../images/Linux/%E8%BF%90%E7%BB%B4/ssp/image-20250704135116699.png" alt="image-20250704135116699"></p>
<p>对于防火墙策略：</p>
<ul>
<li>客户端和服务端可以关闭防火墙进行测试</li>
</ul>
<h3 id="3-证书问题引起的无法修改密码"><a href="#3-证书问题引起的无法修改密码" class="headerlink" title="3. 证书问题引起的无法修改密码"></a>3. 证书问题引起的无法修改密码</h3><p>证书问题也是我卡住的主要问题，比较棘手。</p>
<ul>
<li>引起证书问题的原因<ol>
<li>根证书不对</li>
<li>证书加密强度不够</li>
<li>证书未正确加载</li>
</ol>
</li>
</ul>
<ol>
<li><p><strong>根证书不对的解决方向：</strong></p>
</li>
<li><p>重复重新操作证书设置，</p>
</li>
<li><p>从AD域服务器重装CA服务器角色</p>
</li>
<li><p>不使用命令行，使用图形化的方式导出方式</p>
</li>
<li><p><strong>证书加密强度不够</strong></p>
</li>
</ol>
<ul>
<li>这个会导致能够访问到ldap服务器，但是无法修改成功，会显示密码被拒绝，即使你用了强密码，完全符合AD域服务器的密码策略。</li>
</ul>
<p>解决方法：</p>
<ol>
<li><strong>重新导出根证书：使用加密方式更为安全的算法：sha512 * 4096 bit或更好</strong></li>
<li>放宽加密证书要求的策略，也是我测试时使用的最有效的方式</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim /etc/openldap/ldap.conf</span><br></pre></td></tr></table></figure>

<p>增加，或者禁用</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">TLS_CIPHER_SUITE NORMAL</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">TLS_REQCERT allow # or TLS_REQCERT never</span><br></pre></td></tr></table></figure>

<ol start="3">
<li><p>证书未正确加载</p>
</li>
<li><p>查看证书是否一致</p>
</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cat</span> root.crt <span class="comment"># or cat root.pem</span></span><br></pre></td></tr></table></figure>

<ol start="2">
<li>查看证书是否放在正确的位置，根据发行版不同放在不同的位置</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 对于基于 Debian/Ubuntu</span></span><br><span class="line">ca.crt /usr/local/share/ca-certificates/</span><br><span class="line">update-ca-certificates</span><br><span class="line"><span class="comment"># 对于基于 RHEL/CentOS</span></span><br><span class="line"><span class="built_in">cp</span> ca.crt /etc/pki/ca-trust/source/anchors/</span><br><span class="line">update-ca-trust</span><br></pre></td></tr></table></figure>

<h1 id="离线RPM包安装部署"><a href="#离线RPM包安装部署" class="headerlink" title="离线RPM包安装部署"></a>离线RPM包安装部署</h1><h2 id="1-使用离线RPM包安装"><a href="#1-使用离线RPM包安装" class="headerlink" title="1. 使用离线RPM包安装"></a>1. 使用离线RPM包安装</h2><blockquote>
<p>很多运维工程师倾向于使用离线安装包而非直接通过 <code>dnf</code> 或其他包管理器在线安装，主要是为了保证软件版本的稳定和可控，避免因仓库自动更新带来的不确定性；此外，生产环境往往限制服务器访问外网，使用离线包可以绕过网络限制，确保安装顺利；同时，离线安装方便快速在多台机器间复制，满足安全合规和审计要求，也便于自定义安装和配置，从而提升部署的灵活性和可靠性。</p>
</blockquote>
<h3 id="1-准备离线RPM包"><a href="#1-准备离线RPM包" class="headerlink" title="1. 准备离线RPM包"></a>1. 准备离线RPM包</h3><p>这里先给出两个官方archive</p>
<ol>
<li><a href="https://ltb-project.org/archives/">Index of &#x2F;archives</a>这个是ssp官方资源包括rpm以及tar包</li>
<li><a href="https://rpmfind.net/linux/rpm2html/search.php?query=php-Smarty&submit=Search+...&system=&arch=">RPM resource php-Smarty</a>这个是php依赖包库，搜索下载用</li>
</ol>
<p>根据系统版本来确认安装的版本为1.4.3、查看发行版的命令为：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cat</span> /etc/os-release</span><br></pre></td></tr></table></figure>

<p><img src="/../images/Linux/%E8%BF%90%E7%BB%B4/ssp/image-20250707104353311.png" alt="image-20250707104353311"></p>
<h2 id="2-上传至服务器"><a href="#2-上传至服务器" class="headerlink" title="2. 上传至服务器"></a>2. 上传至服务器</h2><h3 id="1-ftp服务传送"><a href="#1-ftp服务传送" class="headerlink" title="1. ftp服务传送"></a>1. ftp服务传送</h3><p>使用xshell的xftp进行传送</p>
<p><img src="/../images/Linux/%E8%BF%90%E7%BB%B4/ssp/image-20250707104655441.png" alt="image-20250707104655441"></p>
<h3 id="2-或scp传送"><a href="#2-或scp传送" class="headerlink" title="2. 或scp传送"></a>2. 或scp传送</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">scp self-service-password-1.4.3-1.el7.noarch.rpm php-Smarty-3.1.48-2.el8.noarch.rpm root@192.168.72.128:/data/ssp/</span><br></pre></td></tr></table></figure>

<h2 id="3-安装"><a href="#3-安装" class="headerlink" title="3. 安装"></a>3. 安装</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo dnf install ./self-service-password-1.4.3-1.el7.noarch.rpm</span><br></pre></td></tr></table></figure>

<p>此时会报错：</p>
<p><img src="/../images/Linux/%E8%BF%90%E7%BB%B4/ssp/image-20250707104902161.png" alt="image-20250707104902161"></p>
<p>所以需要去给出的网站搜索这个依赖rpm包并下载传送到服务器。</p>
<p><img src="/../images/Linux/%E8%BF%90%E7%BB%B4/ssp/image-20250707105010595.png" alt="image-20250707105010595"></p>
<p>找到对应版本后下载即可</p>
<p>然后安装这个依赖</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> dnf install ./php-Smarty-3.1.48-2.el8.noarch.rpm</span><br></pre></td></tr></table></figure>

<p><img src="/../images/Linux/%E8%BF%90%E7%BB%B4/ssp/image-20250707105140009.png" alt="image-20250707105140009"></p>
<p>最后安装ssp即可</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> dnf install ./self-service-password-1.4.3-1.el7.noarch.rpm</span><br></pre></td></tr></table></figure>

<p><img src="/../images/Linux/%E8%BF%90%E7%BB%B4/ssp/image-20250707105258966.png" alt="image-20250707105258966"></p>
<h2 id="4-配置文件简单介绍"><a href="#4-配置文件简单介绍" class="headerlink" title="4. 配置文件简单介绍"></a>4. 配置文件简单介绍</h2><blockquote>
<table>
<thead>
<tr>
<th>Web 根目录</th>
<th><code>/usr/share/self-service-password</code></th>
</tr>
</thead>
<tbody><tr>
<td><strong>配置文件</strong></td>
<td><strong><code>/etc/self-service-password/config.inc.php</code></strong></td>
</tr>
<tr>
<td><strong>Apache 配置（可选）</strong></td>
<td><strong><code>/etc/httpd/conf.d/self-service-password.conf</code></strong></td>
</tr>
</tbody></table>
</blockquote>
<p><strong>其余操作同上述直接安装部署</strong></p>
<h1 id="Docker容器安装部署"><a href="#Docker容器安装部署" class="headerlink" title="Docker容器安装部署"></a>Docker容器安装部署</h1><h2 id="1-准备镜像"><a href="#1-准备镜像" class="headerlink" title="1. 准备镜像"></a>1. 准备镜像</h2><blockquote>
<p>这里选择<strong>alpine-1.7.3</strong>，是个人尝试部署后较为成功的一个镜像，其余的镜像例如dev-master、latest都遇到了有关系统证书的问题。问题与系统的证书策略有关。这里给出相关信息供参考。</p>
</blockquote>
<p><img src="/../images/Linux/%E8%BF%90%E7%BB%B4/ssp/image-20250709142709809.png" alt="image-20250709142709809"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker pull docker.io/ltbproject/self-service-password:alpine-1.7.3</span><br></pre></td></tr></table></figure>

<h2 id="2-准备需要的挂载文件"><a href="#2-准备需要的挂载文件" class="headerlink" title="2. 准备需要的挂载文件"></a>2. 准备需要的挂载文件</h2><ol>
<li><strong><code>rootca.crt</code></strong> ：获取方法见上文： 直接部署安装-4.1.1</li>
<li><strong><code>config.inc.php</code></strong> ：文件与上文文件内容相同。</li>
</ol>
<h2 id="3-起容器"><a href="#3-起容器" class="headerlink" title="3. 起容器"></a>3. 起容器</h2><ul>
<li>端口、路径以及名字自主修改</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker run -p 18080:80 \</span><br><span class="line">--name ssp \</span><br><span class="line">-v /data/soft/ssp-docker/config.inc.php:/var/www/config.inc.php.orig \</span><br><span class="line">-d docker.io/ltbproject/self-service-password:alpine-1.7.3</span><br></pre></td></tr></table></figure>

<h2 id="4-配置文件-1"><a href="#4-配置文件-1" class="headerlink" title="4. 配置文件"></a>4. 配置文件</h2><h3 id="1-证书配置"><a href="#1-证书配置" class="headerlink" title="1. 证书配置"></a>1. 证书配置</h3><h4 id="1-拷贝证书到容器"><a href="#1-拷贝证书到容器" class="headerlink" title="1. 拷贝证书到容器"></a>1. 拷贝证书到容器</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker <span class="built_in">cp</span> ./rootca.crt ssp:/usr/local/share/ca-certificates/rootca.crt</span><br></pre></td></tr></table></figure>

<p><img src="/../images/Linux/%E8%BF%90%E7%BB%B4/ssp/image-20250709143807776.png" alt="image-20250709143807776"></p>
<h4 id="2-更新到系统证书链"><a href="#2-更新到系统证书链" class="headerlink" title="2. 更新到系统证书链"></a>2. 更新到系统证书链</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker <span class="built_in">exec</span> -it ssp bash <span class="comment"># 如果在容器内则不用</span></span><br><span class="line">apk update</span><br><span class="line">apk add ca-certificates</span><br><span class="line">update-ca-certificates</span><br></pre></td></tr></table></figure>

<p><img src="/../images/Linux/%E8%BF%90%E7%BB%B4/ssp/image-20250709143940995.png" alt="image-20250709143940995"></p>
<h4 id="3-测试证书是否添加"><a href="#3-测试证书是否添加" class="headerlink" title="3. 测试证书是否添加"></a>3. 测试证书是否添加</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker <span class="built_in">exec</span> -it ssp bash <span class="comment"># 如果在容器内则不用</span></span><br><span class="line">openssl verify /usr/local/share/ca-certificates/rootca.crt</span><br></pre></td></tr></table></figure>

<p><img src="/../images/Linux/%E8%BF%90%E7%BB%B4/ssp/image-20250709144042528.png" alt="image-20250709144042528"></p>
<h3 id="2-域名解析配置"><a href="#2-域名解析配置" class="headerlink" title="2. 域名解析配置"></a>2. 域名解析配置</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker exec -it ssp bash # 如果在容器内则不用</span><br><span class="line">vim /etc/hosts</span><br></pre></td></tr></table></figure>

<ul>
<li>添加一行 ip - 域名：来源同上</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">192.168.99.190 WIN-QAG6G63NI1O.example.com</span><br></pre></td></tr></table></figure>

<h2 id="5-至此配置已结束，可以开始使用。"><a href="#5-至此配置已结束，可以开始使用。" class="headerlink" title="5. 至此配置已结束，可以开始使用。"></a>5. 至此配置已结束，可以开始使用。</h2><h1 id="Docker部署遇到问题解决方式"><a href="#Docker部署遇到问题解决方式" class="headerlink" title="Docker部署遇到问题解决方式"></a>Docker部署遇到问题解决方式</h1><ul>
<li><p>提供思路参考</p>
</li>
<li><p>网络问题</p>
<ul>
<li><p>对于网络问题，可以测试用telnet</p>
  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">telnet 192.168.72.129 636</span><br></pre></td></tr></table></figure>

<p>  <img src="/../images/Linux/%E8%BF%90%E7%BB%B4/ssp/image-20250704135116699.png" alt="image-20250704135116699"></p>
<p>  对于防火墙策略：</p>
<ul>
<li>客户端和服务端可以关闭防火墙进行测试</li>
</ul>
</li>
</ul>
</li>
<li><p>证书问题</p>
<ul>
<li>无法访问ldap目录大部分是ssp与服务器进行ssl握手时断开连接</li>
<li>以下为参考测试方式。</li>
</ul>
</li>
</ul>
<p><img src="/../images/Linux/%E8%BF%90%E7%BB%B4/ssp/image-20250709145027704.png" alt="image-20250709145027704"></p>
]]></content>
      <categories>
        <category>软件技术</category>
      </categories>
      <tags>
        <tag>笔记</tag>
        <tag>linux</tag>
        <tag>system</tag>
        <tag>command</tag>
        <tag>运维</tag>
        <tag>WinServer</tag>
        <tag>AD</tag>
        <tag>LDAP</tag>
        <tag>self-password-service</tag>
      </tags>
  </entry>
  <entry>
    <title>AD域服务器安装CA服务</title>
    <url>/2025/07/04/AD%E5%9F%9F%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%AE%89%E8%A3%85CA%E6%9C%8D%E5%8A%A1/</url>
    <content><![CDATA[<blockquote>
<p>操作系统：WinServer 2019</p>
</blockquote>
<h1 id="AD域服务器安装CA服务"><a href="#AD域服务器安装CA服务" class="headerlink" title="AD域服务器安装CA服务"></a><strong>AD域服务器安装CA服务</strong></h1><h2 id="1-点击管理-添加角色和功能"><a href="#1-点击管理-添加角色和功能" class="headerlink" title="1. 点击管理-添加角色和功能"></a>1. 点击管理-添加角色和功能</h2><p><img src="/../images/Linux/%E8%BF%90%E7%BB%B4/AD-CA/image-20250704165642504.png" alt="image-20250704165642504"></p>
<h2 id="2-点击下一页"><a href="#2-点击下一页" class="headerlink" title="2. 点击下一页"></a>2. 点击下一页</h2><p><img src="/../images/Linux/%E8%BF%90%E7%BB%B4/AD-CA/image-20250704170543964.png" alt="image-20250704170543964"></p>
<h2 id="3-点击-基于角色或基于功能的安装"><a href="#3-点击-基于角色或基于功能的安装" class="headerlink" title="3. 点击  基于角色或基于功能的安装"></a>3. 点击  基于角色或基于功能的安装</h2><p><img src="/../images/Linux/%E8%BF%90%E7%BB%B4/AD-CA/image-20250704170636394.png" alt="image-20250704170636394"></p>
<h2 id="4-点击-从服务器池中选择服务器-选择要安装的主机-点击下一页"><a href="#4-点击-从服务器池中选择服务器-选择要安装的主机-点击下一页" class="headerlink" title="4. 点击 从服务器池中选择服务器-选择要安装的主机-点击下一页"></a>4. 点击 从服务器池中选择服务器-选择要安装的主机-点击下一页</h2><p><img src="/../images/Linux/%E8%BF%90%E7%BB%B4/AD-CA/image-20250704170918182.png" alt="image-20250704170918182"></p>
<h2 id="5-点击-Active-Directory-证书服务-Web服务器、网络策略和访问网络服务-下一页"><a href="#5-点击-Active-Directory-证书服务-Web服务器、网络策略和访问网络服务-下一页" class="headerlink" title="5. 点击 Active Directory 证书服务-Web服务器、网络策略和访问网络服务-下一页"></a>5. 点击 Active Directory 证书服务-Web服务器、网络策略和访问网络服务-下一页</h2><p><img src="/../images/Linux/%E8%BF%90%E7%BB%B4/AD-CA/image-20250704172212266.png" alt="image-20250704172212266"></p>
<h2 id="6-点击下一页"><a href="#6-点击下一页" class="headerlink" title="6. 点击下一页"></a>6. 点击下一页</h2><p><img src="H:\git_project\RegenBlogs\hexo\blog\source\images\Linux\运维\AD-CA\image-20250704172252061.png" alt="image-20250704172252061"></p>
<h2 id="7-选择-证书颁发机构、联机响应程序、网络设备注册服务、证书颁发机构web注册"><a href="#7-选择-证书颁发机构、联机响应程序、网络设备注册服务、证书颁发机构web注册" class="headerlink" title="7. 选择 证书颁发机构、联机响应程序、网络设备注册服务、证书颁发机构web注册"></a>7. 选择 证书颁发机构、联机响应程序、网络设备注册服务、证书颁发机构web注册</h2><p><img src="H:\git_project\RegenBlogs\hexo\blog\source\images\Linux\运维\AD-CA\image-20250704172552008.png" alt="image-20250704172552008"></p>
<h2 id="8-点击安装"><a href="#8-点击安装" class="headerlink" title="8. 点击安装"></a>8. 点击安装</h2><p><img src="/../images/Linux/%E8%BF%90%E7%BB%B4/AD-CA/image-20250704172707977.png" alt="image-20250704172707977"></p>
<h2 id="9-可能需要重新启动，可以选择合适的时间重启。"><a href="#9-可能需要重新启动，可以选择合适的时间重启。" class="headerlink" title="9. 可能需要重新启动，可以选择合适的时间重启。"></a>9. 可能需要重新启动，可以选择合适的时间重启。</h2><h1 id="配置CA服务器"><a href="#配置CA服务器" class="headerlink" title="配置CA服务器"></a>配置CA服务器</h1><h2 id="1-点击通知，此时应该湖出现感叹号"><a href="#1-点击通知，此时应该湖出现感叹号" class="headerlink" title="1. 点击通知，此时应该湖出现感叹号"></a>1. 点击通知，此时应该湖出现感叹号</h2><p><img src="/../images/Linux/%E8%BF%90%E7%BB%B4/AD-CA/image-20250704173007725.png" alt="image-20250704173007725"></p>
<h2 id="2-点击-配置目标服务器上的Active-Directory证书服务"><a href="#2-点击-配置目标服务器上的Active-Directory证书服务" class="headerlink" title="2. 点击 配置目标服务器上的Active Directory证书服务"></a>2. 点击 配置目标服务器上的Active Directory证书服务</h2><p><img src="/../images/Linux/%E8%BF%90%E7%BB%B4/AD-CA/image-20250704173132719.png" alt="image-20250704173132719"></p>
<h2 id="3-点击下一页"><a href="#3-点击下一页" class="headerlink" title="3. 点击下一页"></a>3. 点击下一页</h2><p><img src="/../images/Linux/%E8%BF%90%E7%BB%B4/AD-CA/image-20250704173206560.png" alt="image-20250704173206560"></p>
<h2 id="4-点击证书颁发机构、证书颁发机构Web注册"><a href="#4-点击证书颁发机构、证书颁发机构Web注册" class="headerlink" title="4. 点击证书颁发机构、证书颁发机构Web注册"></a>4. 点击证书颁发机构、证书颁发机构Web注册</h2><p><img src="/../images/Linux/%E8%BF%90%E7%BB%B4/AD-CA/image-20250704173304085.png" alt="image-20250704173304085"></p>
<h2 id="5-选择企业CA-下一页"><a href="#5-选择企业CA-下一页" class="headerlink" title="5. 选择企业CA-下一页"></a>5. 选择企业CA-下一页</h2><p><img src="/../images/Linux/%E8%BF%90%E7%BB%B4/AD-CA/image-20250704173352625.png" alt="image-20250704173352625"></p>
<h2 id="6-选择根CA-下一页"><a href="#6-选择根CA-下一页" class="headerlink" title="6. 选择根CA -下一页"></a>6. 选择根CA -下一页</h2><p><img src="C:\Users\Regen\AppData\Roaming\Typora\typora-user-images\image-20250704173436419.png" alt="image-20250704173436419"></p>
<h2 id="7-创建新的私钥-下一页"><a href="#7-创建新的私钥-下一页" class="headerlink" title="7. 创建新的私钥-下一页"></a>7. 创建新的私钥-下一页</h2><p><img src="/../images/Linux/%E8%BF%90%E7%BB%B4/AD-CA/image-20250704173507035.png" alt="image-20250704173507035"></p>
<h2 id="8-创建私钥，建议选择稍微高一点的策略，例如SHA-512-长度4096等。防止在ldap连接时遇到证书太过简单而拒绝的情况。"><a href="#8-创建私钥，建议选择稍微高一点的策略，例如SHA-512-长度4096等。防止在ldap连接时遇到证书太过简单而拒绝的情况。" class="headerlink" title="8. 创建私钥，建议选择稍微高一点的策略，例如SHA-512  长度4096等。防止在ldap连接时遇到证书太过简单而拒绝的情况。"></a>8. 创建私钥，建议选择稍微高一点的策略，例如SHA-512  长度4096等。防止在ldap连接时遇到证书太过简单而拒绝的情况。</h2><p><img src="/../images/Linux/%E8%BF%90%E7%BB%B4/AD-CA/image-20250704173718799.png" alt="image-20250704173718799"></p>
<h2 id="9-点击下一页-下一页-下一页"><a href="#9-点击下一页-下一页-下一页" class="headerlink" title="9. 点击下一页-下一页-下一页"></a>9. 点击下一页-下一页-下一页</h2><p><img src="/../images/Linux/%E8%BF%90%E7%BB%B4/AD-CA/image-20250704173747190.png" alt="image-20250704173747190"></p>
<p><img src="/../images/Linux/%E8%BF%90%E7%BB%B4/AD-CA/image-20250704173816862.png" alt="image-20250704173816862"></p>
<p><img src="/../images/Linux/%E8%BF%90%E7%BB%B4/AD-CA/image-20250704173825386.png" alt="image-20250704173825386"></p>
<h2 id="10-点击配置"><a href="#10-点击配置" class="headerlink" title="10 . 点击配置"></a>10 . 点击配置</h2><p><img src="/../images/Linux/%E8%BF%90%E7%BB%B4/AD-CA/image-20250704173849727.png" alt="image-20250704173849727"></p>
<h2 id="11-点击下一页"><a href="#11-点击下一页" class="headerlink" title="11. 点击下一页"></a>11. 点击下一页</h2><p><img src="/../images/Linux/%E8%BF%90%E7%BB%B4/AD-CA/image-20250704173945896.png" alt="image-20250704173945896"></p>
<h2 id="12-至此已结束CA服务角色的的配置"><a href="#12-至此已结束CA服务角色的的配置" class="headerlink" title="12. 至此已结束CA服务角色的的配置"></a>12. 至此已结束CA服务角色的的配置</h2><p>​	可以通过以下命令可以导出根证书。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">certutil -ca.cert root.cer</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>软件技术</category>
      </categories>
      <tags>
        <tag>笔记</tag>
        <tag>linux</tag>
        <tag>system</tag>
        <tag>command</tag>
        <tag>运维</tag>
        <tag>WinServer</tag>
        <tag>AD</tag>
        <tag>LDAP</tag>
        <tag>self-password-service</tag>
      </tags>
  </entry>
  <entry>
    <title>Anolis8和CentOS7的日志对比</title>
    <url>/2025/07/30/Anolis8%E5%92%8CCentOS7%E7%9A%84%E6%97%A5%E5%BF%97%E5%AF%B9%E6%AF%94/</url>
    <content><![CDATA[<h1 id="Anolis8和CentOS7的日志对比"><a href="#Anolis8和CentOS7的日志对比" class="headerlink" title="Anolis8和CentOS7的日志对比"></a>Anolis8和CentOS7的日志对比</h1><table>
<thead>
<tr>
<th>功能&#x2F;用途</th>
<th>CentOS 7</th>
<th>Anolis 8.10</th>
<th>差异解析</th>
<th>常用查看方式（CentOS 7）</th>
<th>常用查看方式（Anolis 8）</th>
</tr>
</thead>
<tbody><tr>
<td>包管理</td>
<td>yum.log</td>
<td>dnf.log, dnf.rpm.log, dnf.librepo.log, hawkey.log</td>
<td>Anolis 8.10 默认用 dnf；hawkey 是 dnf 的依赖库</td>
<td>tail -n 50 &#x2F;var&#x2F;log&#x2F;yum.log</td>
<td>tail -n 50 &#x2F;var&#x2F;log&#x2F;dnf.log</td>
</tr>
<tr>
<td>系统消息总览</td>
<td>messages</td>
<td>无 messages</td>
<td>&#x3D;&#x3D;Anolis 默认依赖 systemd journal，不再写入 &#x2F;var&#x2F;log&#x2F;messages&#x3D;&#x3D;</td>
<td>tail -f &#x2F;var&#x2F;log&#x2F;messages</td>
<td>journalctl -xe</td>
</tr>
<tr>
<td>认证&#x2F;安全</td>
<td>secure</td>
<td>无 secure</td>
<td>&#x3D;&#x3D;同样默认在 journal 中查看，如 journalctl -u sshd&#x3D;&#x3D;</td>
<td>tail -f &#x2F;var&#x2F;log&#x2F;secure</td>
<td>journalctl -u sshd</td>
</tr>
<tr>
<td>计划任务</td>
<td>cron</td>
<td>无 cron</td>
<td>同样转到 journal</td>
<td>tail -f &#x2F;var&#x2F;log&#x2F;cron</td>
<td>journalctl -u crond</td>
</tr>
<tr>
<td>系统引导</td>
<td>boot.log</td>
<td>无 boot.log</td>
<td>&#x3D;&#x3D;用 journalctl -b&#x3D;&#x3D;</td>
<td>cat &#x2F;var&#x2F;log&#x2F;boot.log</td>
<td>journalctl -b</td>
</tr>
<tr>
<td>dmesg</td>
<td>dmesg</td>
<td>无</td>
<td>&#x3D;&#x3D;dmesg 内容也在 journal 中可查&#x3D;&#x3D;</td>
<td>cat &#x2F;var&#x2F;log&#x2F;dmesg 或 dmesg</td>
<td>dmesg 或 journalctl -k</td>
</tr>
<tr>
<td>rhsm（红帽订阅管理）</td>
<td>rhsm</td>
<td>无</td>
<td>&#x3D;&#x3D;Anolis 是开源版本，无 RHSM&#x3D;&#x3D;</td>
<td>tail -f &#x2F;var&#x2F;log&#x2F;rhsm&#x2F;rhsm.log</td>
<td>无（默认无此目录）</td>
</tr>
<tr>
<td>spooler, tallylog</td>
<td>有</td>
<td>无</td>
<td>&#x3D;&#x3D;不常用，取决于安装包&#x3D;&#x3D;</td>
<td>lastlog、faillog 等</td>
<td>无，但可通过lastlog，faillock查看</td>
</tr>
<tr>
<td>服务日志</td>
<td>有</td>
<td>有</td>
<td>安装的具体服务产生的日志</td>
<td>tail -f &#x2F;var&#x2F;log&#x2F;httpd&#x2F;access_log 等</td>
<td>tail -f &#x2F;var&#x2F;log&#x2F;httpd&#x2F;access_log 等</td>
</tr>
<tr>
<td>btmp</td>
<td>btmp</td>
<td>btmp + 历史文件（btmp-20250701）</td>
<td>系统轮转后多了历史文件</td>
<td>lastb</td>
<td>lastb</td>
</tr>
<tr>
<td>private</td>
<td>无</td>
<td>private</td>
<td>可能存放私有敏感日志（取决于服务）</td>
<td>无</td>
<td>根据服务查看</td>
</tr>
<tr>
<td>sssd</td>
<td>无</td>
<td>sssd</td>
<td>如果启用了 SSSD 服务，会有认证相关日志</td>
<td>无</td>
<td>journalctl -u sssd</td>
</tr>
</tbody></table>
<h1 id="Anolis-OS-8-x日志系统大量采用journalctl的原因"><a href="#Anolis-OS-8-x日志系统大量采用journalctl的原因" class="headerlink" title="Anolis OS 8.x日志系统大量采用journalctl的原因"></a>Anolis OS 8.x日志系统大量采用<code>journalctl</code>的原因</h1><h3 id="1-Systemd-全面接管-init-系统"><a href="#1-Systemd-全面接管-init-系统" class="headerlink" title="1. Systemd 全面接管 init 系统"></a>1. Systemd 全面接管 init 系统</h3><ul>
<li>从 RHEL&#x2F;CentOS 7 开始，Systemd 引入，但仍兼容传统日志路径。</li>
<li>到 RHEL 8 &#x2F; Anolis 8，Systemd 日志系统（<code>journald</code>）成为核心组件。</li>
<li>journald 接管了：<ul>
<li>系统引导日志</li>
<li>服务日志（sshd、crond 等）</li>
<li>内核日志（dmesg）</li>
<li>安全认证日志（替代 <code>/var/log/secure</code>）</li>
</ul>
</li>
</ul>
<p>日志由 Systemd 统一管理，更标准、可控、支持结构化输出。</p>
<h3 id="2-结构化日志支持更强大的检索与分析"><a href="#2-结构化日志支持更强大的检索与分析" class="headerlink" title="2. 结构化日志支持更强大的检索与分析"></a>2. 结构化日志支持更强大的检索与分析</h3><ul>
<li><code>journalctl</code> 不是纯文本文件，而是结构化二进制日志文件（默认保存在 <code>/run/log/journal/</code> 或 <code>/var/log/journal/</code>）。</li>
<li>优势：<ul>
<li>按服务（<code>-u</code>）过滤日志；</li>
<li>按时间范围、级别、PID 过滤；</li>
<li>支持 JSON、short、cat 等多种输出格式；</li>
<li>性能更高，便于集中式日志采集（如 Fluentd、rsyslog、systemd-remote）。</li>
</ul>
</li>
</ul>
<h3 id="3-减少对传统日志文件的依赖"><a href="#3-减少对传统日志文件的依赖" class="headerlink" title="3. 减少对传统日志文件的依赖"></a>3. 减少对传统日志文件的依赖</h3><ul>
<li>传统的 <code>/var/log/messages</code>、<code>/var/log/secure</code>、<code>/var/log/cron</code> 等文件：<ul>
<li>在 Anolis 8.x 默认不再生成；</li>
<li>可通过配置 <code>rsyslog</code> 或 <code>systemd-journald</code> 启用文本日志备份；</li>
<li>推荐直接使用 <code>journalctl</code> 进行分析。</li>
</ul>
</li>
</ul>
<h3 id="4-统一日志管理模型便于容器与云环境适配"><a href="#4-统一日志管理模型便于容器与云环境适配" class="headerlink" title="4. 统一日志管理模型便于容器与云环境适配"></a>4. 统一日志管理模型便于容器与云环境适配</h3><ul>
<li>Anolis OS 面向云原生、企业级场景，采用 systemd + journalctl 便于与容器、Kubernetes 集成：<ul>
<li>容器服务（Docker、Podman）默认将日志写入 journald；</li>
<li>统一日志接口便于集中采集；</li>
<li>安全性和访问控制更好（可限制非 root 用户读取）。</li>
</ul>
</li>
</ul>
<hr>
<h2 id="仍需传统日志时的解决方案"><a href="#仍需传统日志时的解决方案" class="headerlink" title="仍需传统日志时的解决方案"></a>仍需传统日志时的解决方案</h2><ul>
<li><p>启用 rsyslog：</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> systemctl <span class="built_in">enable</span> rsyslog --now</span><br></pre></td></tr></table></figure>
</li>
<li><p>修改 <code>/etc/systemd/journald.conf</code> 配置：</p>
  <figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="section">[Journal]</span></span><br><span class="line"><span class="attr">Storage</span>=persistent</span><br><span class="line"><span class="attr">ForwardToSyslog</span>=<span class="literal">yes</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>重启 systemd-journald：</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> systemctl restart systemd-journald</span><br></pre></td></tr></table></figure></li>
</ul>
<hr>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><table>
<thead>
<tr>
<th>原因</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>Systemd 接管服务管理</td>
<td>journald 成为日志核心组件</td>
</tr>
<tr>
<td>支持结构化日志</td>
<td>更强查询能力，利于云环境</td>
</tr>
<tr>
<td>减少传统日志冗余</td>
<td>降低文本日志写盘压力</td>
</tr>
<tr>
<td>容器&#x2F;K8s 日志集成更好</td>
<td>统一日志采集标准接口</td>
</tr>
<tr>
<td>可配置兼容传统日志</td>
<td>可开启 rsyslog 保留旧方式</td>
</tr>
</tbody></table>
<hr>
<h1 id="日志收集方案"><a href="#日志收集方案" class="headerlink" title="日志收集方案"></a>日志收集方案</h1><ul>
<li>Fluentd 的插件 <code>in_systemd</code> 插件可以直接读取 journald 产生的二进制日志，解析成结构化文本日志。</li>
<li>省去先用 <code>journalctl</code> 导出再处理的步骤，实现实时高效日志采集。</li>
</ul>
<hr>
<h2 id="重点关注对象"><a href="#重点关注对象" class="headerlink" title="重点关注对象"></a>重点关注对象</h2><h3 id="一、系统层面"><a href="#一、系统层面" class="headerlink" title="一、系统层面"></a>一、系统层面</h3><table>
<thead>
<tr>
<th>日志路径&#x2F;命令</th>
<th>说明</th>
<th>用途</th>
</tr>
</thead>
<tbody><tr>
<td><code>/var/log/messages</code> 或 <code>journalctl -xe</code></td>
<td>系统核心消息、服务异常、内核警告</td>
<td>系统健康、故障排查第一入口</td>
</tr>
<tr>
<td><code>/var/log/secure</code> 或 <code>journalctl -u sshd</code></td>
<td>SSH 登录、sudo、认证失败</td>
<td>审计安全事件、防止暴力破解</td>
</tr>
<tr>
<td><code>/var/log/boot.log</code> 或 <code>journalctl -b</code></td>
<td>系统启动过程</td>
<td>排查开机慢、硬件驱动问题</td>
</tr>
<tr>
<td><code>dmesg</code> 或 <code>journalctl -k</code></td>
<td>内核硬件信息</td>
<td>硬件异常、驱动问题排查</td>
</tr>
</tbody></table>
<hr>
<h3 id="二、服务层面"><a href="#二、服务层面" class="headerlink" title="二、服务层面"></a>二、服务层面</h3><table>
<thead>
<tr>
<th>日志路径&#x2F;命令</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td><code>/var/log/crond</code> 或 <code>journalctl -u crond</code></td>
<td>定时任务执行情况</td>
</tr>
<tr>
<td><code>/var/log/httpd/</code>、<code>/var/log/nginx/</code></td>
<td>Web 访问和错误日志</td>
</tr>
<tr>
<td><code>/var/log/php-fpm/</code></td>
<td>PHP 应用错误</td>
</tr>
<tr>
<td><code>/var/log/mysqld.log</code>、<code>/var/log/mariadb/mariadb.log</code></td>
<td>数据库运行情况</td>
</tr>
<tr>
<td><code>/var/log/sssd/</code> 或 <code>journalctl -u sssd</code></td>
<td>域认证&#x2F;身份管理日志</td>
</tr>
<tr>
<td><code>/var/log/samba/</code>、<code>/var/log/zabbix/</code></td>
<td>特定服务日志</td>
</tr>
</tbody></table>
<hr>
<h3 id="三、安全与审计"><a href="#三、安全与审计" class="headerlink" title="三、安全与审计"></a>三、安全与审计</h3><table>
<thead>
<tr>
<th>日志文件</th>
<th>用途</th>
</tr>
</thead>
<tbody><tr>
<td><code>/var/log/secure</code></td>
<td>登录和认证信息</td>
</tr>
<tr>
<td><code>/var/log/btmp</code> （<code>lastb</code> 查看）</td>
<td>登录失败历史</td>
</tr>
<tr>
<td><code>/var/log/wtmp</code> （<code>last</code> 查看）</td>
<td>登录登出历史</td>
</tr>
<tr>
<td><code>/var/log/audit/audit.log</code></td>
<td>SELinux&#x2F;安全审计</td>
</tr>
</tbody></table>
<hr>
<h3 id="四、软件包和系统变更"><a href="#四、软件包和系统变更" class="headerlink" title="四、软件包和系统变更"></a>四、软件包和系统变更</h3><table>
<thead>
<tr>
<th>日志路径</th>
<th>用途</th>
</tr>
</thead>
<tbody><tr>
<td><code>/var/log/yum.log</code> 或 <code>/var/log/dnf.log</code></td>
<td>软件安装和升级记录</td>
</tr>
<tr>
<td><code>/var/log/rhsm/</code></td>
<td>红帽订阅管理日志</td>
</tr>
<tr>
<td><code>/var/log/anaconda/</code></td>
<td>系统安装日志</td>
</tr>
</tbody></table>
<hr>
<h3 id="五、业务重点关注日志"><a href="#五、业务重点关注日志" class="headerlink" title="五、业务重点关注日志"></a>五、业务重点关注日志</h3><ul>
<li>根据具体业务关注对应日志目录，如：<ul>
<li>Web 服务：<code>/var/log/nginx/</code>、<code>/var/log/httpd/</code></li>
<li>数据库：<code>/var/log/mysql/</code>、<code>/var/log/mariadb/</code></li>
<li>应用日志：<code>/var/log/your_app/</code></li>
</ul>
</li>
<li>建议结合日志平台（ELK、Loki、Zabbix、Prometheus 等）进行统一管理。</li>
</ul>
]]></content>
      <categories>
        <category>软件技术</category>
      </categories>
      <tags>
        <tag>笔记</tag>
        <tag>运维</tag>
        <tag>日志</tag>
        <tag>centos</tag>
        <tag>anolis</tag>
      </tags>
  </entry>
  <entry>
    <title>AI技术的学习与总结</title>
    <url>/2025/03/01/AI%E6%8A%80%E6%9C%AF%E7%9A%84%E5%AD%A6%E4%B9%A0%E4%B8%8E%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<h1 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h1><p>​	最近一个星期看到了身边的牛人是如何使用AI大模型进行提高工作效率，以及实现新想法促进个人以及企业发展的高效性。于是搭建了一套可以客制化的本地的AI，基于以下方案（项目）。</p>
<ol>
<li><p>Dify</p>
<blockquote>
<p>​	用工作流的方式组合各种模型、知识库、工具来搭建高度客制化的AI工具。</p>
</blockquote>
</li>
<li><p>ollama + deepseek-r1:7b + bge-m3</p>
<blockquote>
<p>ollama 帮助管理推理模型以及知识库模型，提供API接口给DIFY使用</p>
</blockquote>
</li>
<li><p>ragflow</p>
<blockquote>
<p>基于检索增强生成（Retrieval-Augmented Generation, RAG）技术的工作流工具，旨在通过结合检索和生成模型提升问答系统、文本生成等任务的性能。</p>
</blockquote>
</li>
</ol>
<h1 id="ragflow和dify的不同应用"><a href="#ragflow和dify的不同应用" class="headerlink" title="ragflow和dify的不同应用"></a>ragflow和dify的不同应用</h1><blockquote>
<ol>
<li>RAGFlow更适合需要深度文档解析和无幻觉生成的企业，尤其是处理复杂格式文档的场景。</li>
<li>Dify更适合需要灵活工作流编排和多模型集成的开发者，尤其是构建复杂AI应用的场景。</li>
<li>如果企业需要高度定制化的文档解析和检索增强生成，建议选择RAGFlow；如果需要快速构建生产级AI应用，建议选择Dify。</li>
</ol>
</blockquote>
<h1 id="我的下一步AI应用计划"><a href="#我的下一步AI应用计划" class="headerlink" title="我的下一步AI应用计划"></a>我的下一步AI应用计划</h1><h2 id="1-学习dify的工作流原理"><a href="#1-学习dify的工作流原理" class="headerlink" title="1. 学习dify的工作流原理"></a>1. 学习dify的工作流原理</h2><ul>
<li>搭建一个简单的工作流并运行</li>
</ul>
<p><img src="/../images/AI/1.png"></p>
<h2 id="2-使用bge-m3搭建一个知识库模"><a href="#2-使用bge-m3搭建一个知识库模" class="headerlink" title="2. 使用bge-m3搭建一个知识库模"></a>2. 使用bge-m3搭建一个知识库模</h2><h2 id="型"><a href="#型" class="headerlink" title="型"></a>型</h2><ol>
<li><p>手头恰好有40g的电子书，在pdf格式里面随机选择了几册。</p>
</li>
<li><p>先尝试硅基流动的bge-m3模型</p>
</li>
<li><p>检索设置</p>
<blockquote>
<h1 id="Rerank模型"><a href="#Rerank模型" class="headerlink" title="Rerank模型"></a>Rerank模型</h1><p>在知识库检索中，Rerank是一个非常重要的环节，尤其在检索增强生成（RAG）架构中。它可以帮助大语言模型（LLM）获取更精确的内容，从而提高生成回答的准确性和相关性。</p>
<p>Rerank的原理和机制：</p>
<ol>
<li><p>初步检索</p>
<p> 在知识库检索的过程中，首先通过向量检索或其他检索方法，从知识库中检索出于用户问题相关的多个文档或文本片段。这些文档可能与用户问题的相关性不同，有些可能非常贴切，而有些知只是稍微相关，甚至不相关。</p>
</li>
<li><p>重新排序、过滤和优化</p>
<p> Rerank模型 接收初步检索到的文档和列表和用户的问题作为输入。评估每个结果与用户问题的<strong>相关性</strong>，计算相关性分数。根据分数对文档进行重新排序，将最相关订单文档排在前面。并且，过滤掉不相关的文档，从而减少噪声。这样，当LLM生成回答时，会优先考虑排名靠前的、更加相关订单文档。最后，重新排序的文档作为上下文输入到LLM中，LLM根据这些<strong>更精确</strong>的上下文生成回答。</p>
</li>
</ol>
<h1 id="Top-K"><a href="#Top-K" class="headerlink" title="Top K"></a>Top K</h1><p>Top K用于控制检索系统返回结果的数量。例如，如果配置为2，会返回最多两个结果。</p>
<p>Top K通常与👇🏻的Score阈值配合使用。Score阈值用于过滤掉相似度低于某个阈值的结果，而Top K则在满足阈值条件的基础上，进一步筛选出来最相关的K个结果。</p>
<ul>
<li>更全面的结果，可以适当增加 <strong>Top K</strong> 的值。</li>
<li>更精准的结果，可以适当减小 <strong>Top K</strong> 的值，并结合较高的 <strong>Score 阈值</strong>。</li>
</ul>
<h1 id="Score-阈"><a href="#Score-阈" class="headerlink" title="Score 阈"></a>Score 阈</h1><p>Score阈值作为一种标准选择检索结果。用于过滤掉相似度低于阈值的结果。</p>
</blockquote>
</li>
</ol>
<p><img src="/../images/AI/2.png"></p>
<h2 id="3-使用dify搭建一个简单的客制化的AI应用（使用2的知识库）"><a href="#3-使用dify搭建一个简单的客制化的AI应用（使用2的知识库）" class="headerlink" title="3. 使用dify搭建一个简单的客制化的AI应用（使用2的知识库）"></a>3. 使用dify搭建一个简单的客制化的AI应用（使用2的知识库）</h2><p>已实现</p>
<h2 id="4-使用ragflow基于相同数据源搭建客制化AI应用"><a href="#4-使用ragflow基于相同数据源搭建客制化AI应用" class="headerlink" title="4. 使用ragflow基于相同数据源搭建客制化AI应用"></a>4. 使用ragflow基于相同数据源搭建客制化AI应用</h2><p>已实现</p>
<h2 id="5-使用工具例如搜索引擎实现联网"><a href="#5-使用工具例如搜索引擎实现联网" class="headerlink" title="5. 使用工具例如搜索引擎实现联网"></a>5. 使用工具例如搜索引擎实现联网</h2><h1 id="有关各种AI模型以及工具、概念的扫盲"><a href="#有关各种AI模型以及工具、概念的扫盲" class="headerlink" title="有关各种AI模型以及工具、概念的扫盲"></a>有关各种AI模型以及工具、概念的扫盲</h1><blockquote>
<h1 id="RAG"><a href="#RAG" class="headerlink" title="RAG"></a>RAG</h1><p>​	RAG（Retrieval-Augmented Generation，检索增强生成） 是一种结合了信息检索技术与语言生成模型的人工智能技术。该技术通过从外部知识库中检索相关信息，并将其作为提示（Prompt）输入给大型语言模（LLMs），以增强模型处理知识密集型任务的能力，如问答、文本摘要、内容生成等。RAG模型由Facebook AI Research（FAIR）团队于2020年首次提出，并迅速成为大模型应用中的热门方案。</p>
</blockquote>
]]></content>
      <categories>
        <category>软件技术</category>
      </categories>
      <tags>
        <tag>笔记</tag>
        <tag>linux</tag>
        <tag>深度学习</tag>
        <tag>AI</tag>
        <tag>deepseek-r1</tag>
        <tag>ragflow</tag>
        <tag>dify</tag>
        <tag>bge-m3</tag>
        <tag>知识库</tag>
        <tag>本地部署</tag>
        <tag>客制化AI</tag>
      </tags>
  </entry>
  <entry>
    <title>Ansible部署学习</title>
    <url>/2025/07/30/Ansible%E9%83%A8%E7%BD%B2%E5%AD%A6%E4%B9%A0/</url>
    <content><![CDATA[<blockquote>
<p>环境：Anolis 8.10</p>
<p><img src="/../images/Linux/%E8%BF%90%E7%BB%B4/zabbix/image-20250729163727520.png" alt="image-20250729163727520"></p>
</blockquote>
<h1 id="ansible部署学习"><a href="#ansible部署学习" class="headerlink" title="ansible部署学习"></a>ansible部署学习</h1><blockquote>
</blockquote>
<h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><h2 id="Ansible-使用方式对比总结"><a href="#Ansible-使用方式对比总结" class="headerlink" title="Ansible 使用方式对比总结"></a>Ansible 使用方式对比总结</h2><table>
<thead>
<tr>
<th>方式</th>
<th>优点</th>
<th>缺点</th>
<th>适用场景</th>
</tr>
</thead>
<tbody><tr>
<td>Python 虚拟环境安装</td>
<td>- 不影响系统全局Python环境 - 可同时维护多个不同版本的Ansible - 便于隔离依赖包</td>
<td>- 需要先安装Python和virtualenv - 环境激活后才能使用，不方便全局调用</td>
<td>需要多版本共存，或对环境隔离要求高的开发和测试环境</td>
</tr>
<tr>
<td>系统全局安装（pip&#x2F;yum&#x2F;apt）</td>
<td>- 安装方便，使用直接 - 系统命令行全局可用</td>
<td>- 依赖系统Python版本 - 升级或卸载影响所有项目 - 可能和系统自带包冲突</td>
<td>单机或者单环境长期稳定使用，简单快速搭建场景</td>
</tr>
<tr>
<td>Docker 容器运行</td>
<td>- 环境完全隔离，无需安装依赖 - 可快速切换不同Ansible版本 - 方便集成CI&#x2F;CD流水线</td>
<td>- 需要了解Docker使用 - 调试不如本地方便 - 性能上有少许开销</td>
<td>持续集成&#x2F;持续交付环境，临时执行或者多人协作场景</td>
</tr>
</tbody></table>
<h3 id="直接安装"><a href="#直接安装" class="headerlink" title="直接安装"></a>直接安装</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">dnf update</span><br><span class="line">dnf install ansible</span><br></pre></td></tr></table></figure>

<p>​	直接安装可能会遇到版本问题，ansible要求python3.12，还是推荐虚拟环境安装。</p>
<h3 id="使用虚拟环境安装"><a href="#使用虚拟环境安装" class="headerlink" title="使用虚拟环境安装"></a>使用虚拟环境安装</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">python3 -m venv venv</span><br><span class="line"><span class="built_in">source</span> venv/bin/activate</span><br><span class="line">pip install --upgrade pip -i https://mirrors.aliyun.com/pypi/simple/</span><br><span class="line">pip install ansible</span><br></pre></td></tr></table></figure>

<blockquote>
<p>此方法保证至少能用，直接安装可能会遇到版本问题，ansible要求python3.12</p>
</blockquote>
<h3 id="使用docker安装"><a href="#使用docker安装" class="headerlink" title="使用docker安装"></a>使用docker安装</h3><p>​	待补充</p>
<h1 id="学习"><a href="#学习" class="headerlink" title="学习"></a>学习</h1><h2 id="用途"><a href="#用途" class="headerlink" title="用途"></a>用途</h2><blockquote>
<h2 id="🧰-Ansible-的主要用途（按功能分类）"><a href="#🧰-Ansible-的主要用途（按功能分类）" class="headerlink" title="🧰 Ansible 的主要用途（按功能分类）"></a>🧰 Ansible 的主要用途（按功能分类）</h2><hr>
<h3 id="🔧-一、配置管理（Configuration-Management）"><a href="#🔧-一、配置管理（Configuration-Management）" class="headerlink" title="🔧 一、配置管理（Configuration Management）"></a>🔧 一、配置管理（Configuration Management）</h3><p>自动化配置系统环境、服务、文件内容等。</p>
<h4 id="示例用途："><a href="#示例用途：" class="headerlink" title="示例用途："></a>示例用途：</h4><ul>
<li>安装并配置 Nginx、MySQL、Redis 等服务</li>
<li>设置系统参数（如 <code>sysctl</code>、<code>limit</code>）</li>
<li>管理配置文件内容（如 <code>.conf</code>、<code>.ini</code>）</li>
<li>修改环境变量、开机启动项</li>
</ul>
<h4 id="模块示例："><a href="#模块示例：" class="headerlink" title="模块示例："></a>模块示例：</h4><ul>
<li><code>apt</code>, <code>yum</code>, <code>dnf</code>：包管理</li>
<li><code>lineinfile</code>, <code>copy</code>, <code>template</code>：配置文件操作</li>
</ul>
<hr>
<h3 id="🚀-二、应用部署（Application-Deployment）"><a href="#🚀-二、应用部署（Application-Deployment）" class="headerlink" title="🚀 二、应用部署（Application Deployment）"></a>🚀 二、应用部署（Application Deployment）</h3><p>自动化部署自研应用或第三方服务，持续交付。</p>
<h4 id="示例用途：-1"><a href="#示例用途：-1" class="headerlink" title="示例用途："></a>示例用途：</h4><ul>
<li>一键部署 Django、Node.js、Java 项目</li>
<li>同步代码、配置、数据库迁移</li>
<li>滚动重启服务，零停机更新</li>
</ul>
<h4 id="模块示例：-1"><a href="#模块示例：-1" class="headerlink" title="模块示例："></a>模块示例：</h4><ul>
<li><code>git</code>：拉取代码</li>
<li><code>shell</code>, <code>command</code>, <code>systemd</code>：构建和启动服务</li>
<li><code>docker_container</code>：容器化部署</li>
</ul>
<hr>
<h3 id="📋-三、批量任务执行（Ad-hoc-Tasks-运维自动化）"><a href="#📋-三、批量任务执行（Ad-hoc-Tasks-运维自动化）" class="headerlink" title="📋 三、批量任务执行（Ad-hoc Tasks &#x2F; 运维自动化）"></a>📋 三、批量任务执行（Ad-hoc Tasks &#x2F; 运维自动化）</h3><p>批量在多个主机上执行命令或修改状态。</p>
<h4 id="示例用途：-2"><a href="#示例用途：-2" class="headerlink" title="示例用途："></a>示例用途：</h4><ul>
<li>一键重启服务器服务</li>
<li>批量创建用户、更改密码、同步文件</li>
<li>查询内存、磁盘、负载等信息</li>
</ul>
<h4 id="模块示例：-2"><a href="#模块示例：-2" class="headerlink" title="模块示例："></a>模块示例：</h4><ul>
<li><code>user</code>, <code>service</code>, <code>cron</code>, <code>hostname</code>, <code>setup</code></li>
<li>ad-hoc：<code>ansible all -m shell -a &quot;uptime&quot;</code></li>
</ul>
<hr>
<h3 id="🔗-四、IT-编排（Orchestration）"><a href="#🔗-四、IT-编排（Orchestration）" class="headerlink" title="🔗 四、IT 编排（Orchestration）"></a>🔗 四、IT 编排（Orchestration）</h3><p>协调多个服务、组件之间的依赖关系，实现流程控制。</p>
<h4 id="示例用途：-3"><a href="#示例用途：-3" class="headerlink" title="示例用途："></a>示例用途：</h4><ul>
<li>部署流程控制（如先部署数据库再部署 Web）</li>
<li>多角色交互部署（Web + Cache + DB）</li>
<li>灾备切换、主备同步、流程通知等</li>
</ul>
<h4 id="特点："><a href="#特点：" class="headerlink" title="特点："></a>特点：</h4><ul>
<li>多角色（roles）</li>
<li>条件判断、循环、依赖控制</li>
<li>结合 <code>tags</code>、<code>handlers</code>、<code>include_tasks</code></li>
</ul>
<hr>
<h3 id="📦-五、容器与云资源管理（Containers-Cloud）"><a href="#📦-五、容器与云资源管理（Containers-Cloud）" class="headerlink" title="📦 五、容器与云资源管理（Containers &amp; Cloud）"></a>📦 五、容器与云资源管理（Containers &amp; Cloud）</h3><p>集成支持 Docker、Kubernetes、AWS、GCP、Azure 等平台。</p>
<h4 id="示例用途：-4"><a href="#示例用途：-4" class="headerlink" title="示例用途："></a>示例用途：</h4><ul>
<li>创建&#x2F;启动&#x2F;停止容器</li>
<li>批量部署 Kubernetes Pod</li>
<li>创建 AWS EC2、配置安全组、绑定域名</li>
</ul>
<h4 id="模块示例：-3"><a href="#模块示例：-3" class="headerlink" title="模块示例："></a>模块示例：</h4><ul>
<li><code>community.docker.*</code></li>
<li><code>k8s</code>, <code>helm</code>, <code>eks_cluster</code></li>
<li><code>amazon.aws.*</code>, <code>google.cloud.*</code></li>
</ul>
<hr>
<h2 id="🧠-分类总结表"><a href="#🧠-分类总结表" class="headerlink" title="🧠 分类总结表"></a>🧠 分类总结表</h2><table>
<thead>
<tr>
<th>分类</th>
<th>主要作用</th>
<th>常见模块</th>
</tr>
</thead>
<tbody><tr>
<td>配置管理</td>
<td>安装软件、配置服务、编辑文件</td>
<td><code>lineinfile</code>, <code>copy</code>, <code>template</code>, <code>yum</code></td>
</tr>
<tr>
<td>应用部署</td>
<td>拉代码、构建、运行、更新应用</td>
<td><code>git</code>, <code>shell</code>, <code>docker_container</code></td>
</tr>
<tr>
<td>批量任务执行</td>
<td>系统操作、批量指令执行</td>
<td><code>shell</code>, <code>setup</code>, <code>user</code></td>
</tr>
<tr>
<td>IT 编排</td>
<td>跨系统协调自动化流程</td>
<td><code>include_tasks</code>, <code>handlers</code>, <code>roles</code></td>
</tr>
<tr>
<td>云平台和容器管理</td>
<td>管理云资源和容器</td>
<td><code>docker_*</code>, <code>k8s</code>, <code>amazon.aws.*</code></td>
</tr>
</tbody></table>
<hr>
<h2 id="✅-总结一句话"><a href="#✅-总结一句话" class="headerlink" title="✅ 总结一句话"></a>✅ 总结一句话</h2><blockquote>
<p>**Ansible 是一个简单、强大、无代理的自动化工具，可用于管理基础设施、部署应用、编排流程和简化运维任务。</p>
</blockquote>
</blockquote>
]]></content>
      <categories>
        <category>软件技术</category>
      </categories>
      <tags>
        <tag>笔记</tag>
        <tag>运维</tag>
        <tag>部署</tag>
        <tag>Ansibe</tag>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>vmWare安装Arch Linux</title>
    <url>/2025/07/17/Arch-Linux%E8%99%9A%E6%8B%9F%E6%9C%BA%E5%AE%89%E8%A3%85/</url>
    <content><![CDATA[<blockquote>
<p>尝试使用大名鼎鼎的Arch，记录一下安装方法以便后续在实体机复现。</p>
<ol>
<li>安装Arch</li>
<li>安装kde</li>
</ol>
<p>…实体机装了好几次arch还是失败，对这个grub、引导还有efi以及双系统等概念还是不够清楚，后续在深入看下吧。先用上manjaro了，还挺好用。</p>
</blockquote>
<h1 id="VMware-安装-Arch-Linux-步骤"><a href="#VMware-安装-Arch-Linux-步骤" class="headerlink" title="VMware 安装 Arch Linux 步骤"></a>VMware 安装 Arch Linux 步骤</h1><hr>
<h2 id="一、新建虚拟机"><a href="#一、新建虚拟机" class="headerlink" title="一、新建虚拟机"></a>一、新建虚拟机</h2><ol>
<li>打开 VMware，点击 <strong>“Create a New Virtual Machine”</strong>（新建虚拟机）</li>
<li>选择：<ul>
<li><strong>Installer disc image file (iso)</strong></li>
<li>点击 <strong>Browse</strong>，选择下载好的 Arch Linux 镜像（例如 <code>archlinux-2025.07.01-x86_64.iso</code>）</li>
</ul>
</li>
<li>点击 <strong>Next</strong></li>
<li><strong>Guest Operating System</strong> 选择：<ul>
<li><strong>Linux</strong></li>
<li><strong>Version</strong> 选择：<strong>Other Linux 5.x or later kernel 64-bit</strong></li>
</ul>
</li>
<li>点击 <strong>Next</strong></li>
<li>给虚拟机命名（例如：<code>ArchLinux</code>），并选择虚拟机存放位置（默认即可）</li>
<li>点击 <strong>Next</strong></li>
<li>设置磁盘容量：<ul>
<li>20 GB 或更大</li>
<li>选择 <strong>Store virtual disk as a single file</strong>（单文件，性能稍好）</li>
</ul>
</li>
<li>点击 <strong>Next</strong></li>
<li>点击 <strong>Customize Hardware…</strong><ul>
<li>内存：建议 2048 MB（2GB）或更大</li>
<li>处理器：2 个核心</li>
<li>网络适配器：保持 NAT</li>
<li>确认 <strong>CD&#x2F;DVD</strong> 连接并挂载了 Arch ISO</li>
<li>USB、声卡按需启用</li>
</ul>
</li>
<li>点击 <strong>Close</strong></li>
<li>点击 <strong>Finish</strong>，完成虚拟机创建</li>
</ol>
<hr>
<h2 id="二、启动虚拟机进入-Arch-live-环境"><a href="#二、启动虚拟机进入-Arch-live-环境" class="headerlink" title="二、启动虚拟机进入 Arch live 环境"></a>二、启动虚拟机进入 Arch live 环境</h2><ol>
<li>选中你创建的虚拟机，点击 <strong>Power on this virtual machine</strong></li>
<li>会进入 Arch Linux 的启动菜单，选第一个默认项直接回车（通常是 <code>Arch Linux install medium</code>）</li>
<li>等待进入命令行界面，看到类似 <code>root@archiso ~#</code> 提示符即表示成功进入</li>
</ol>
<hr>
<h2 id="三、设置网络"><a href="#三、设置网络" class="headerlink" title="三、设置网络"></a>三、设置网络</h2><h3 id="1-检查网络连通性"><a href="#1-检查网络连通性" class="headerlink" title="1. 检查网络连通性"></a>1. 检查网络连通性</h3><ol>
<li>检查网络连通性（默认 NAT 应该能自动获取 IP）</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ping -c 3 www.baidu.com</span><br></pre></td></tr></table></figure>

<p>能通说明网络正常。</p>
<h3 id="2-换源加速下载"><a href="#2-换源加速下载" class="headerlink" title="2. 换源加速下载"></a>2. 换源加速下载</h3><ul>
<li>备份</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cp</span> /etc/pacman.d/mirrorlist /etc/pacman.d/mirrorlist.backup</span><br></pre></td></tr></table></figure>

<ul>
<li>编辑源</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim /etc/pacman.d/mirrorlist</span><br></pre></td></tr></table></figure>

<p>世界各地镜像源连接<a href="https://archlinux.org/mirrorlist/">https://archlinux.org/mirrorlist/</a></p>
<p>改为：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">##</span></span><br><span class="line"><span class="comment">## Arch Linux repository mirrorlist</span></span><br><span class="line"><span class="comment">## Generated on 2025-07-17</span></span><br><span class="line"><span class="comment">##</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## China</span></span><br><span class="line"><span class="comment">#Server = http://mirrors.163.com/archlinux/$repo/os/$arch</span></span><br><span class="line"><span class="comment">#Server = http://mirrors.aliyun.com/archlinux/$repo/os/$arch</span></span><br><span class="line"><span class="comment">#Server = https://mirrors.aliyun.com/archlinux/$repo/os/$arch</span></span><br><span class="line"><span class="comment">#Server = http://mirrors.bfsu.edu.cn/archlinux/$repo/os/$arch</span></span><br><span class="line"><span class="comment">#Server = https://mirrors.bfsu.edu.cn/archlinux/$repo/os/$arch</span></span><br><span class="line"><span class="comment">#Server = http://mirrors.cqu.edu.cn/archlinux/$repo/os/$arch</span></span><br><span class="line"><span class="comment">#Server = https://mirrors.cqu.edu.cn/archlinux/$repo/os/$arch</span></span><br><span class="line"><span class="comment">#Server = http://mirrors.hit.edu.cn/archlinux/$repo/os/$arch</span></span><br><span class="line"><span class="comment">#Server = https://mirrors.hit.edu.cn/archlinux/$repo/os/$arch</span></span><br><span class="line"><span class="comment">#Server = http://mirrors.hust.edu.cn/archlinux/$repo/os/$arch</span></span><br><span class="line"><span class="comment">#Server = https://mirrors.hust.edu.cn/archlinux/$repo/os/$arch</span></span><br><span class="line"><span class="comment">#Server = http://mirrors.jcut.edu.cn/archlinux/$repo/os/$arch</span></span><br><span class="line"><span class="comment">#Server = https://mirrors.jcut.edu.cn/archlinux/$repo/os/$arch</span></span><br><span class="line"><span class="comment">#Server = http://mirrors.jlu.edu.cn/archlinux/$repo/os/$arch</span></span><br><span class="line"><span class="comment">#Server = https://mirrors.jlu.edu.cn/archlinux/$repo/os/$arch</span></span><br><span class="line"><span class="comment">#Server = http://mirrors.jxust.edu.cn/archlinux/$repo/os/$arch</span></span><br><span class="line"><span class="comment">#Server = https://mirrors.jxust.edu.cn/archlinux/$repo/os/$arch</span></span><br><span class="line"><span class="comment">#Server = http://mirror.lzu.edu.cn/archlinux/$repo/os/$arch</span></span><br><span class="line"><span class="comment">#Server = http://mirrors.neusoft.edu.cn/archlinux/$repo/os/$arch</span></span><br><span class="line"><span class="comment">#Server = https://mirrors.neusoft.edu.cn/archlinux/$repo/os/$arch</span></span><br><span class="line"><span class="comment">#Server = http://mirrors.nju.edu.cn/archlinux/$repo/os/$arch</span></span><br><span class="line"><span class="comment">#Server = https://mirrors.nju.edu.cn/archlinux/$repo/os/$arch</span></span><br><span class="line"><span class="comment">#Server = http://mirror.nyist.edu.cn/archlinux/$repo/os/$arch</span></span><br><span class="line"><span class="comment">#Server = https://mirror.nyist.edu.cn/archlinux/$repo/os/$arch</span></span><br><span class="line"><span class="comment">#Server = https://mirrors.qlu.edu.cn/archlinux/$repo/os/$arch</span></span><br><span class="line"><span class="comment">#Server = http://mirrors.shanghaitech.edu.cn/archlinux/$repo/os/$arch</span></span><br><span class="line"><span class="comment">#Server = https://mirrors.shanghaitech.edu.cn/archlinux/$repo/os/$arch</span></span><br><span class="line"><span class="comment">#Server = https://mirrors.sjtug.sjtu.edu.cn/archlinux/$repo/os/$arch</span></span><br><span class="line"><span class="comment">#Server = http://mirrors.tuna.tsinghua.edu.cn/archlinux/$repo/os/$arch</span></span><br><span class="line"><span class="comment">#Server = https://mirrors.tuna.tsinghua.edu.cn/archlinux/$repo/os/$arch</span></span><br><span class="line"><span class="comment">#Server = http://mirrors.ustc.edu.cn/archlinux/$repo/os/$arch</span></span><br><span class="line"><span class="comment">#Server = https://mirrors.ustc.edu.cn/archlinux/$repo/os/$arch</span></span><br><span class="line"><span class="comment">#Server = http://mirrors.wsyu.edu.cn/archlinux/$repo/os/$arch</span></span><br><span class="line"><span class="comment">#Server = https://mirrors.wsyu.edu.cn/archlinux/$repo/os/$arch</span></span><br><span class="line"><span class="comment">#Server = https://mirrors.xjtu.edu.cn/archlinux/$repo/os/$arch</span></span><br><span class="line"><span class="comment">#Server = http://mirrors.zju.edu.cn/archlinux/$repo/os/$arch</span></span><br></pre></td></tr></table></figure>

<ul>
<li>选择自己想要的源</li>
<li>或者全选</li>
</ul>
<p>使用vim可以快速删除第一列</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">:%normal! 0x</span><br></pre></td></tr></table></figure>



<hr>
<h2 id="四、校准时间"><a href="#四、校准时间" class="headerlink" title="四、校准时间"></a>四、校准时间</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">timedatectl set-ntp <span class="literal">true</span></span><br></pre></td></tr></table></figure>

<p>保证系统时间同步，避免后续安装出错。</p>
<hr>
<h2 id="五、磁盘分区"><a href="#五、磁盘分区" class="headerlink" title="五、磁盘分区"></a>五、磁盘分区</h2><blockquote>
<p>这里图方便只分了两个分区。</p>
</blockquote>
<ol>
<li>查看磁盘名称（VMware 默认一般是 <code>/dev/sda</code>）</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">lsblk</span><br></pre></td></tr></table></figure>

<p>一般会看到 <code>/dev/sda</code>，以及没有分区的情况。</p>
<ol>
<li>运行分区工具：</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cfdisk /dev/sda</span><br></pre></td></tr></table></figure>

<ol>
<li><p>在 cfdisk 界面操作：</p>
<ul>
<li><p>如果提示创建 GPT，选择 <strong>gpt</strong></p>
</li>
<li><p>创建新分区：</p>
<table>
<thead>
<tr>
<th>分区</th>
<th>大小</th>
<th>类型</th>
</tr>
</thead>
<tbody><tr>
<td>&#x2F;dev&#x2F;sda1</td>
<td>512M</td>
<td>EFI System</td>
</tr>
<tr>
<td>&#x2F;dev&#x2F;sda2</td>
<td>剩余空间</td>
<td>Linux filesystem</td>
</tr>
</tbody></table>
</li>
</ul>
</li>
<li><p>写入分区表，选择 <strong>Write</strong>，输入 <code>yes</code> 确认</p>
</li>
<li><p>选择 <strong>Quit</strong> 退出 cfdisk</p>
</li>
</ol>
<hr>
<h2 id="六、格式化分区"><a href="#六、格式化分区" class="headerlink" title="六、格式化分区"></a>六、格式化分区</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mkfs.fat -F32 /dev/sda1    <span class="comment"># 格式化EFI分区</span></span><br><span class="line">mkfs.ext4 /dev/sda2        <span class="comment"># 格式化根分区</span></span><br></pre></td></tr></table></figure>

<hr>
<h2 id="七、挂载分区"><a href="#七、挂载分区" class="headerlink" title="七、挂载分区"></a>七、挂载分区</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mount /dev/sda2 /mnt</span><br><span class="line"><span class="built_in">mkdir</span> /mnt/boot</span><br><span class="line">mount /dev/sda1 /mnt/boot</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="八、安装基础系统"><a href="#八、安装基础系统" class="headerlink" title="八、安装基础系统"></a>八、安装基础系统</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pacstrap /mnt base linux linux-firmware vim networkmanager</span><br></pre></td></tr></table></figure>

<p>这个过程需要联网，会自动下载基本包。</p>
<hr>
<h2 id="九、生成-fstab-文件"><a href="#九、生成-fstab-文件" class="headerlink" title="九、生成 fstab 文件"></a>九、生成 fstab 文件</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">genfstab -U /mnt &gt;&gt; /mnt/etc/fstab</span><br><span class="line"><span class="built_in">cat</span> /mnt/etc/fstab  <span class="comment"># 可查看确认</span></span><br></pre></td></tr></table></figure>

<hr>
<h2 id="十、切换根环境"><a href="#十、切换根环境" class="headerlink" title="十、切换根环境"></a>十、切换根环境</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">arch-chroot /mnt</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="十一、设置时区"><a href="#十一、设置时区" class="headerlink" title="十一、设置时区"></a>十一、设置时区</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">ln</span> -sf /usr/share/zoneinfo/Asia/Shanghai /etc/localtime</span><br><span class="line">hwclock --systohc</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="十二、设置本地化"><a href="#十二、设置本地化" class="headerlink" title="十二、设置本地化"></a>十二、设置本地化</h2><ol>
<li>编辑 <code>locale.gen</code>，取消以下两行前的注释：</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim /etc/locale.gen</span><br><span class="line"><span class="comment"># 找到：</span></span><br><span class="line">en_US.UTF-8 UTF-8</span><br><span class="line">zh_CN.UTF-8 UTF-8</span><br><span class="line"><span class="comment"># 删除行首的#</span></span><br></pre></td></tr></table></figure>

<ol>
<li>生成本地化文件</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">locale-gen</span><br></pre></td></tr></table></figure>

<ol>
<li>设置语言环境</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&quot;LANG=en_US.UTF-8&quot;</span> &gt; /etc/locale.conf</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="十三、设置主机名"><a href="#十三、设置主机名" class="headerlink" title="十三、设置主机名"></a>十三、设置主机名</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&quot;archvm&quot;</span> &gt; /etc/hostname</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="十四、配置-hosts-文件"><a href="#十四、配置-hosts-文件" class="headerlink" title="十四、配置 hosts 文件"></a>十四、配置 hosts 文件</h2><p>编辑 <code>/etc/hosts</code> 文件，加入：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1   localhost</span><br><span class="line">::1         localhost</span><br><span class="line">127.0.1.1   archvm.localdomain archvm</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="十五、设置-root-密码"><a href="#十五、设置-root-密码" class="headerlink" title="十五、设置 root 密码"></a>十五、设置 root 密码</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">passwd</span><br></pre></td></tr></table></figure>

<p>输入两次新密码。</p>
<hr>
<h2 id="十六、安装并配置引导加载器（EFI-系统）"><a href="#十六、安装并配置引导加载器（EFI-系统）" class="headerlink" title="十六、安装并配置引导加载器（EFI 系统）"></a>十六、安装并配置引导加载器（EFI 系统）</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pacman -S grub efibootmgr</span><br><span class="line">grub-install --target=x86_64-efi --efi-directory=/boot --bootloader-id=GRUB</span><br><span class="line">grub-mkconfig -o /boot/grub/grub.cfg</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="十七、启用网络服务"><a href="#十七、启用网络服务" class="headerlink" title="十七、启用网络服务"></a>十七、启用网络服务</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">systemctl <span class="built_in">enable</span> NetworkManager</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="十八、退出并重启"><a href="#十八、退出并重启" class="headerlink" title="十八、退出并重启"></a>十八、退出并重启</h2><ol>
<li>退出 chroot 环境</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">exit</span></span><br></pre></td></tr></table></figure>

<ol>
<li>卸载挂载分区</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">umount -R /mnt</span><br></pre></td></tr></table></figure>

<ol>
<li>重启</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">reboot</span><br></pre></td></tr></table></figure>

<ul>
<li>可能需要一处iso</li>
</ul>
<hr>
<h2 id="十九、第一次启动-Arch-系统"><a href="#十九、第一次启动-Arch-系统" class="headerlink" title="十九、第一次启动 Arch 系统"></a>十九、第一次启动 Arch 系统</h2><ul>
<li>登录 root 用户，输入密码</li>
</ul>
<hr>
<h2 id="二十、第一次启动-Arch-系统"><a href="#二十、第一次启动-Arch-系统" class="headerlink" title="二十、第一次启动 Arch 系统"></a>二十、第一次启动 Arch 系统</h2><ul>
<li>新建普通用户：</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">useradd -m -G wheel -s /bin/bash yourname</span><br><span class="line">passwd regen</span><br></pre></td></tr></table></figure>

<ul>
<li>编辑 sudo 权限（安装 sudo）：</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pacman -S <span class="built_in">sudo</span></span><br><span class="line">EDITOR=vim visudo</span><br><span class="line"><span class="comment"># 取消 %wheel ALL=(ALL) ALL 前的注释</span></span><br></pre></td></tr></table></figure>

<ul>
<li>安装桌面环境 (GNOME &#x2F; KDE &#x2F; XFCE)，根据需求后续配置</li>
</ul>
<h2 id="二十一、允许root使用ssh"><a href="#二十一、允许root使用ssh" class="headerlink" title="二十一、允许root使用ssh"></a>二十一、允许root使用ssh</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> vim /etc/ssh/sshd_config</span><br></pre></td></tr></table></figure>

<p>找到<code>#PermitRootLogin prohibit-password</code></p>
<p>改为</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">PermitRootLogin yes</span><br></pre></td></tr></table></figure>

<p>最后</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">systemctl restart sshd</span><br></pre></td></tr></table></figure>



<h2 id="二十二、安装桌面环境-KDE"><a href="#二十二、安装桌面环境-KDE" class="headerlink" title="二十二、安装桌面环境-KDE"></a>二十二、安装桌面环境-KDE</h2><blockquote>
<p>记得创建一个普通用户，都则安装好了桌面环境后无法登陆！</p>
</blockquote>
<h3 id="1-更新系统（建议先做）"><a href="#1-更新系统（建议先做）" class="headerlink" title="1. 更新系统（建议先做）"></a>1. 更新系统（建议先做）</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo pacman -Syu</span><br></pre></td></tr></table></figure>

<hr>
<h3 id="2-安装-KDE-Plasma-和相关组件"><a href="#2-安装-KDE-Plasma-和相关组件" class="headerlink" title="2. 安装 KDE Plasma 和相关组件"></a>2. 安装 KDE Plasma 和相关组件</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo pacman -S plasma kde-applications</span><br></pre></td></tr></table></figure>

<ul>
<li><code>plasma</code>：KDE 桌面核心包</li>
<li><code>kde-applications</code>：KDE 官方常用软件套件（文件管理器、文本编辑器、多媒体工具等）</li>
</ul>
<p>如果想轻量点，可以只装 <code>plasma</code>，后续再装需要的软件。</p>
<hr>
<h3 id="3-安装显示服务器及登录管理器"><a href="#3-安装显示服务器及登录管理器" class="headerlink" title="3. 安装显示服务器及登录管理器"></a>3. 安装显示服务器及登录管理器</h3><h4 id="3-1-安装-Xorg-显示服务器"><a href="#3-1-安装-Xorg-显示服务器" class="headerlink" title="3.1 安装 Xorg 显示服务器"></a>3.1 安装 Xorg 显示服务器</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo pacman -S xorg</span><br></pre></td></tr></table></figure>

<h4 id="3-2-安装-SDDM-登录管理器"><a href="#3-2-安装-SDDM-登录管理器" class="headerlink" title="3.2 安装 SDDM 登录管理器"></a>3.2 安装 SDDM 登录管理器</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo pacman -S sddm</span><br></pre></td></tr></table></figure>

<hr>
<h3 id="4-启用并启动-SDDM-服务"><a href="#4-启用并启动-SDDM-服务" class="headerlink" title="4. 启用并启动 SDDM 服务"></a>4. 启用并启动 SDDM 服务</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo systemctl enable sddm.service --now</span><br></pre></td></tr></table></figure>

<hr>
<h3 id="5-启用并启动-NetworkManager（如果没启用）"><a href="#5-启用并启动-NetworkManager（如果没启用）" class="headerlink" title="5. 启用并启动 NetworkManager（如果没启用）"></a>5. 启用并启动 NetworkManager（如果没启用）</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo systemctl enable NetworkManager.service --now</span><br></pre></td></tr></table></figure>

<hr>
<h3 id="6-重启系统"><a href="#6-重启系统" class="headerlink" title="6. 重启系统"></a>6. 重启系统</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo reboot</span><br></pre></td></tr></table></figure>

<hr>
<h3 id="7-登录界面"><a href="#7-登录界面" class="headerlink" title="7. 登录界面"></a>7. 登录界面</h3><p>重启后，你应该能看到 KDE 的 SDDM 登录界面。输入用户名和密码登录进入 KDE 桌面。</p>
<p><img src="/../images/Linux/arch/install/image-20250717175154184.png" alt="image-20250717175154184"></p>
]]></content>
      <categories>
        <category>软件技术</category>
      </categories>
      <tags>
        <tag>笔记</tag>
        <tag>linux</tag>
        <tag>system</tag>
        <tag>command</tag>
        <tag>运维</tag>
        <tag>Arch</tag>
      </tags>
  </entry>
  <entry>
    <title>C/C++大型项目编程注意事项</title>
    <url>/2024/05/13/C-C-%E5%A4%A7%E5%9E%8B%E9%A1%B9%E7%9B%AE%E7%BC%96%E7%A8%8B%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9/</url>
    <content><![CDATA[<p><strong>C&#x2F;C++大型项目编程规范</strong></p>
<p>​	最近在参与（或者说使用）某些项目的代码时，感觉其代码之简洁精炼，语言习惯之规范，外观之整洁，可读性之高令人赏心悦目。</p>
<p>​	在其基础上进行增删改查后总是觉得自己的代码不够优雅，就好像一篇书法作品中掺杂几行我写的字。</p>
<p>​	于是打算学习C&#x2F;C++项目编程规范，不求优雅，只求规整可读，结构合理。</p>
<p>​	基于华为C语言编程规范 <a href="https://ilcc.gitbooks.io/wiki/content/StyleGuide/Huawei-C/index.html">在线wiki文档</a></p>
<h1 id="代码总体原则"><a href="#代码总体原则" class="headerlink" title="代码总体原则"></a>代码总体原则</h1><h2 id="1、清晰第一"><a href="#1、清晰第一" class="headerlink" title="1、清晰第一"></a>1、清晰第一</h2><p><strong>代码的可阅读性高于性能，只有确定性能是瓶颈时，才应该主动优化</strong></p>
<ul>
<li><p>优秀的代码可以自我解释（以我的水平可能做到比较难）</p>
</li>
<li><p>常写注释，并且注释写的清晰</p>
</li>
</ul>
<h2 id="2、简洁为美"><a href="#2、简洁为美" class="headerlink" title="2、简洁为美"></a>2、简洁为美</h2><p><strong>写的代码越多，意味着出错的地方越多，也就意味着代码的可靠性越低。</strong></p>
<h1 id="术语"><a href="#术语" class="headerlink" title="术语"></a>术语</h1><blockquote>
<p>原则：编程时必须坚持的指导思想。</p>
<p>规则：编程时强制必须遵守的约定。</p>
<p>建议：编程时必须加以考虑的约定。</p>
<p>说明：对此原则&#x2F;规则&#x2F;建议进行必要的解释。</p>
<p>示例：对此原则&#x2F;规则&#x2F;建议从正、反两个方面给出例子。</p>
<p>延伸阅读材料：建议进一步阅读的参考材料。</p>
</blockquote>
<h1 id="头文件"><a href="#头文件" class="headerlink" title="头文件"></a>头文件</h1><h2 id="原则"><a href="#原则" class="headerlink" title="原则"></a>原则</h2><p><strong>不合理的头文件布局是编译时间过长的根因，不合理的头文件实际上不合理的设计。</strong></p>
<p>如果引入了新的依赖，则一旦被依赖的头文件修改，任何直接和间接依赖其头文件的代码都会被重新编译。</p>
<h3 id="原则1-1-头文件中适合放置接口的声明，不适合放置实现"><a href="#原则1-1-头文件中适合放置接口的声明，不适合放置实现" class="headerlink" title="原则1.1 头文件中适合放置接口的声明，不适合放置实现"></a>原则1.1 头文件中适合放置接口的声明，不适合放置实现</h3><p>头文件是模块（Module）或单元（Unit）的对外接口。头文件中应放置对外部的声明，如对外提供的函数声明、宏定义、类型定义等。</p>
<ul>
<li>内部使用的函数（相当于类的私有方法）声明不应放在头文件中</li>
<li>内部使用的宏、枚举、结构定义不应放入头文件中。</li>
<li>变量定义不应放在头文件中，应放在.c文件中。</li>
</ul>
<p>否则多次依赖会重复定义</p>
<ul>
<li>变量的声明尽量不要放在头文件中，亦即尽量不要使用全局变量作为接口。变量是模块或单元的内部实现细节，不应通过在头文件中声明的方式直接暴露给外部，应通过函数接口的方式进行对外暴露。即使必须使用全局变量，也只应当在.c中定义全局变量，在.h中仅声明变量为全局的。</li>
</ul>
<h3 id="原则1-2-头文件应当职责单一。"><a href="#原则1-2-头文件应当职责单一。" class="headerlink" title="原则1.2 头文件应当职责单一。"></a>原则1.2 头文件应当职责单一。</h3><h3 id="原则1-3-头文件应向稳定的方向包含。"><a href="#原则1-3-头文件应向稳定的方向包含。" class="headerlink" title="原则1.3 头文件应向稳定的方向包含。"></a>原则1.3 头文件应向稳定的方向包含。</h3><p>说明：头文件的包含关系是一种依赖，一般来说，应当让不稳定的模块依赖稳定的模块，从而当不稳定的模块发生变化时，不会影响（编译）稳定的模块。</p>
<h2 id="规则"><a href="#规则" class="headerlink" title="规则"></a>规则</h2><h3 id="规则1-1-每一个-c文件应有一个同名-h文件，用于声明需要对外公开的接口。"><a href="#规则1-1-每一个-c文件应有一个同名-h文件，用于声明需要对外公开的接口。" class="headerlink" title="规则1.1 每一个.c文件应有一个同名.h文件，用于声明需要对外公开的接口。"></a>规则1.1 每一个.c文件应有一个同名.h文件，用于声明需要对外公开的接口。</h3><p>说明：如果一个.c文件不需要对外公布任何接口，则其就不应当存在，除非它是程序的入口，如main函数所在的文件。</p>
<h3 id="规则1-2-禁止头文件循环依赖"><a href="#规则1-2-禁止头文件循环依赖" class="headerlink" title="规则1.2 禁止头文件循环依赖"></a>规则1.2 禁止头文件循环依赖</h3><p>​	任何一个头文件的改变都会使得循环中的所有头文件重新编译</p>
<h3 id="规则1-3-c-h文件禁止包含用不到的头文件。"><a href="#规则1-3-c-h文件禁止包含用不到的头文件。" class="headerlink" title="规则1.3 .c&#x2F;.h文件禁止包含用不到的头文件。"></a>规则1.3 .c&#x2F;.h文件禁止包含用不到的头文件。</h3><h3 id="规则1-4-头文件应当自包含。"><a href="#规则1-4-头文件应当自包含。" class="headerlink" title="规则1.4 头文件应当自包含。"></a>规则1.4 头文件应当自包含。</h3><blockquote>
<p>“头文件应当自包含”是指头文件应该包含自身所需的所有内容，而不依赖于其他头文件。这样的头文件通常被称为”自包含头文件”。下面解释一下这个概念的意义：</p>
<ol>
<li><strong>独立性和可移植性</strong>：自包含头文件使得头文件本身更加独立，不依赖于其他头文件。这样做有助于提高代码的可移植性，因为当你在其他项目或环境中使用这个头文件时，不需要担心它依赖的其他头文件是否可用。</li>
<li><strong>简化依赖关系</strong>：自包含头文件可以简化代码的依赖关系。如果一个头文件依赖于另一个头文件，而后者又依赖于其他头文件，这会形成复杂的依赖链。通过自包含头文件，可以减少这种依赖链，提高代码的可维护性。</li>
<li><strong>避免重复包含</strong>：自包含头文件通常会包含预处理器指令来避免重复包含。这样可以确保在包含相同头文件多次时不会导致重复定义的问题。</li>
<li><strong>提高效率</strong>：自包含头文件可以减少预处理器的工作量，因为它们不需要解析其他头文件的内容。这有助于提高编译效率。</li>
</ol>
</blockquote>
<h3 id="规则1-5-总是编写内部-include保护符（-define-保护）。"><a href="#规则1-5-总是编写内部-include保护符（-define-保护）。" class="headerlink" title="规则1.5 总是编写内部#include保护符（#define 保护）。"></a>规则1.5 总是编写内部#include保护符（#define 保护）。</h3><p>所有头文件都应当使用#define 防止头文件被多重包含，命名格式为<code>FILENAME_H</code>，为了保证唯一性，更好的命名是<code>PROJECTNAME_PATH_FILENAME_H</code>。</p>
<h3 id="规则1-6-禁止在头文件中定义变量。"><a href="#规则1-6-禁止在头文件中定义变量。" class="headerlink" title="规则1.6 禁止在头文件中定义变量。"></a>规则1.6 禁止在头文件中定义变量。</h3><p>说明：在头文件中定义变量，将会由于头文件被其他.c文件包含而导致变量重复定义。</p>
<h3 id="规则1-7-只能通过包含头文件的方式使用其他-c提供的接口，禁止在-c中通过extern的方式使用外部函数接口、变量。"><a href="#规则1-7-只能通过包含头文件的方式使用其他-c提供的接口，禁止在-c中通过extern的方式使用外部函数接口、变量。" class="headerlink" title="规则1.7 只能通过包含头文件的方式使用其他.c提供的接口，禁止在.c中通过extern的方式使用外部函数接口、变量。"></a>规则1.7 只能通过包含头文件的方式使用其他.c提供的接口，禁止在.c中通过extern的方式使用外部函数接口、变量。</h3><h3 id="规则1-8-禁止在extern-“C”中包含头文件。"><a href="#规则1-8-禁止在extern-“C”中包含头文件。" class="headerlink" title="规则1.8 禁止在extern “C”中包含头文件。"></a>规则1.8 禁止在extern “C”中包含头文件。</h3><blockquote>
<p><code>extern &quot;C&quot;</code> 是用于在 C++ 中声明 C 函数时的一种语法。它告诉编译器这些函数按照 C 语言的约定进行链接。</p>
<p>在 C++ 中，函数名的重载、名称修饰（name mangling）等特性会导致函数名在编译后被修改，这样的函数名在链接时可能无法与 C 代码中的函数名匹配。为了解决这个问题，C++ 提供了 <code>extern &quot;C&quot;</code>，它告诉编译器不要对函数名进行 C++ 风格的名称修饰，而是按照 C 语言的规则进行链接。</p>
</blockquote>
<h1 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h1><p>函数设计的精髓：编写整洁函数，同时把代码有效组织起来。</p>
<p>整洁函数要求：代码简单直接、不隐藏设计者的意图、用干净利落的抽象和直截了当的控制语句将函数有机组织起来。</p>
<p>代码的有效组织包括：逻辑层组织和物理层组织两个方面。逻辑层，主要是把不同功能的函数通过某种联系组织起来，主要关注模块间的接口，也就是模块的架构。物理层，无论使用什么样的目录或者名字空间等，需要把函数用一种标准的方法组织起来。例如：设计良好的目录结构、函数名字、文件组织等，这样可以方便查找。</p>
<h2 id="原则-1"><a href="#原则-1" class="headerlink" title="原则"></a>原则</h2><h3 id="原则2-1-一个函数仅完成一件功能。"><a href="#原则2-1-一个函数仅完成一件功能。" class="headerlink" title="原则2.1 一个函数仅完成一件功能。"></a>原则2.1 一个函数仅完成一件功能。</h3><p>说明：一个函数实现多个功能给开发、使用、维护都带来很大的困难。</p>
<p>将没有关联或者关联很弱的语句放到同一函数中，会导致函数职责不明确，难以理解，难以测试和改动。</p>
<h3 id="原则2-2-重复代码应该尽可能提炼成函数"><a href="#原则2-2-重复代码应该尽可能提炼成函数" class="headerlink" title="原则2.2 重复代码应该尽可能提炼成函数"></a>原则2.2 重复代码应该尽可能提炼成函数</h3><p>说明：重复代码提炼成函数可以带来维护成本的降低。</p>
<p>可以使用代码重复度检查工具</p>
<h2 id="规则-1"><a href="#规则-1" class="headerlink" title="规则"></a>规则</h2><h3 id="规则2-1-避免函数过长，新增函数不超过50行（非空非注释行）。"><a href="#规则2-1-避免函数过长，新增函数不超过50行（非空非注释行）。" class="headerlink" title="规则2.1 避免函数过长，新增函数不超过50行（非空非注释行）。"></a>规则2.1 避免函数过长，新增函数不超过50行（非空非注释行）。</h3><h3 id="规则2-2-避免函数的代码块嵌套过深，新增函数的代码块嵌套不超过4层。"><a href="#规则2-2-避免函数的代码块嵌套过深，新增函数的代码块嵌套不超过4层。" class="headerlink" title="规则2.2 避免函数的代码块嵌套过深，新增函数的代码块嵌套不超过4层。"></a>规则2.2 避免函数的代码块嵌套过深，新增函数的代码块嵌套不超过4层。</h3><h4 id="减少代码嵌套层数的方法"><a href="#减少代码嵌套层数的方法" class="headerlink" title="减少代码嵌套层数的方法"></a>减少代码嵌套层数的方法</h4><blockquote>
<ol>
<li><strong>使用函数抽象</strong>：将嵌套的代码块提取成独立的函数，以便于重用和理解。</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;python复制代码def main_function():</span><br><span class="line">   if condition:</span><br><span class="line">       process_items(items)</span><br><span class="line">   else:</span><br><span class="line">       handle_condition_not_met()</span><br><span class="line"></span><br><span class="line">&gt;def process_items(items):</span><br><span class="line">   for item in items:</span><br><span class="line">       if item_valid(item):</span><br><span class="line">           process_item(item)</span><br><span class="line">       else:</span><br><span class="line">           handle_invalid_item(item)</span><br><span class="line"></span><br><span class="line">&gt;def item_valid(item):</span><br><span class="line">   return item.condition</span><br><span class="line"></span><br><span class="line">&gt;def process_item(item):</span><br><span class="line">   # 处理item</span><br><span class="line">   pass</span><br><span class="line"></span><br><span class="line">&gt;def handle_invalid_item(item):</span><br><span class="line">   # 处理无效item</span><br><span class="line">   pass</span><br><span class="line"></span><br><span class="line">&gt;def handle_condition_not_met():</span><br><span class="line">   # 处理条件未满足情况</span><br><span class="line">   pass</span><br></pre></td></tr></table></figure>

<ol>
<li><strong>使用早期返回</strong>：在函数内部，尽早返回结果，而不是在多层嵌套中处理。</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&gt;<span class="keyword">def</span> <span class="title function_">main_function</span>():</span><br><span class="line">   <span class="keyword">if</span> <span class="keyword">not</span> condition:</span><br><span class="line">       handle_condition_not_met()</span><br><span class="line">       <span class="keyword">return</span></span><br><span class="line">   </span><br><span class="line">   <span class="keyword">for</span> item <span class="keyword">in</span> items:</span><br><span class="line">       <span class="keyword">if</span> <span class="keyword">not</span> item_valid(item):</span><br><span class="line">           handle_invalid_item(item)</span><br><span class="line">           <span class="keyword">continue</span></span><br><span class="line">       process_item(item)</span><br><span class="line"></span><br><span class="line">&gt;<span class="keyword">def</span> <span class="title function_">item_valid</span>(<span class="params">item</span>):</span><br><span class="line">   <span class="keyword">return</span> item.condition</span><br><span class="line"></span><br><span class="line">&gt;<span class="keyword">def</span> <span class="title function_">process_item</span>(<span class="params">item</span>):</span><br><span class="line">   <span class="comment"># 处理item</span></span><br><span class="line">   <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">&gt;<span class="keyword">def</span> <span class="title function_">handle_invalid_item</span>(<span class="params">item</span>):</span><br><span class="line">   <span class="comment"># 处理无效item</span></span><br><span class="line">   <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">&gt;<span class="keyword">def</span> <span class="title function_">handle_condition_not_met</span>():</span><br><span class="line">   <span class="comment"># 处理条件未满足情况</span></span><br><span class="line">   <span class="keyword">pass</span></span><br></pre></td></tr></table></figure>

<ol>
<li><strong>使用异常处理</strong>：适用于处理特殊情况或错误的情况。</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&gt;<span class="keyword">def</span> <span class="title function_">main_function</span>():</span><br><span class="line">   <span class="keyword">try</span>:</span><br><span class="line">       <span class="keyword">if</span> condition:</span><br><span class="line">           <span class="keyword">for</span> item <span class="keyword">in</span> items:</span><br><span class="line">               process_item(item)</span><br><span class="line">       <span class="keyword">else</span>:</span><br><span class="line">           <span class="keyword">raise</span> ConditionNotMetError</span><br><span class="line">   <span class="keyword">except</span> ConditionNotMetError:</span><br><span class="line">       handle_condition_not_met()</span><br><span class="line"></span><br><span class="line">&gt;<span class="keyword">def</span> <span class="title function_">process_item</span>(<span class="params">item</span>):</span><br><span class="line">   <span class="keyword">if</span> <span class="keyword">not</span> item_valid(item):</span><br><span class="line">       <span class="keyword">raise</span> InvalidItemError</span><br><span class="line">   <span class="comment"># 处理item</span></span><br><span class="line"></span><br><span class="line">&gt;<span class="keyword">def</span> <span class="title function_">item_valid</span>(<span class="params">item</span>):</span><br><span class="line">   <span class="keyword">return</span> item.condition</span><br><span class="line"></span><br><span class="line">&gt;<span class="keyword">def</span> <span class="title function_">handle_condition_not_met</span>():</span><br><span class="line">   <span class="comment"># 处理条件未满足情况</span></span><br><span class="line">   <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">&gt;<span class="keyword">class</span> <span class="title class_">ConditionNotMetError</span>(<span class="title class_ inherited__">Exception</span>):</span><br><span class="line">   <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">&gt;<span class="keyword">class</span> <span class="title class_">InvalidItemError</span>(<span class="title class_ inherited__">Exception</span>):</span><br><span class="line">   <span class="keyword">pass</span></span><br></pre></td></tr></table></figure>

<p>这些方法可以帮助将嵌套降低到合理的水平，使代码更易读、更易维护。</p>
</blockquote>
<h3 id="规则2-3-可重入函数应避免使用共享变量；若需要使用，则应通过互斥手段（关中断、信号量）对其加以保护。"><a href="#规则2-3-可重入函数应避免使用共享变量；若需要使用，则应通过互斥手段（关中断、信号量）对其加以保护。" class="headerlink" title="规则2.3 可重入函数应避免使用共享变量；若需要使用，则应通过互斥手段（关中断、信号量）对其加以保护。"></a>规则2.3 可重入函数应避免使用共享变量；若需要使用，则应通过互斥手段（关中断、信号量）对其加以保护。</h3><p>可能用不到。</p>
<p>说明：可重入函数是指可能被多个任务并发调用的函数。在多任务操作系统中，函数具有可重入性是多个任务可以共用此函数的必要条件。共享变量指的全局变量和static变量。</p>
<h3 id="规则2-4-对参数的合法性检查，由调用者负责还是由接口函数负责，应在项目组-模块内应统一规定。缺省由调用者负责。"><a href="#规则2-4-对参数的合法性检查，由调用者负责还是由接口函数负责，应在项目组-模块内应统一规定。缺省由调用者负责。" class="headerlink" title="规则2.4 对参数的合法性检查，由调用者负责还是由接口函数负责，应在项目组&#x2F;模块内应统一规定。缺省由调用者负责。"></a>规则2.4 对参数的合法性检查，由调用者负责还是由接口函数负责，应在项目组&#x2F;模块内应统一规定。缺省由调用者负责。</h3><h3 id="规则2-5-对函数的错误返回码要全面处理。"><a href="#规则2-5-对函数的错误返回码要全面处理。" class="headerlink" title="规则2.5 对函数的错误返回码要全面处理。"></a>规则2.5 对函数的错误返回码要全面处理。</h3><h3 id="规则2-6-设计高扇入，合理扇出（小于7）的函数。"><a href="#规则2-6-设计高扇入，合理扇出（小于7）的函数。" class="headerlink" title="规则2.6 设计高扇入，合理扇出（小于7）的函数。"></a>规则2.6 设计高扇入，合理扇出（小于7）的函数。</h3><p>说明：扇出是指一个函数直接调用（控制）其它函数的数目，而扇入是指有多少上级函数调用它。</p>
<p>建议2.1 函数不变参数使用const。</p>
<p>建议2.2 函数应避免使用全局变量、静态局部变量和I&#x2F;O操作，不可避免的地方应集中使用。</p>
<p>建议2.4 函数的参数个数不超过5个。</p>
<p>建议2.5 除打印类函数外，不要使用可变长参函数。</p>
<h1 id="3标识符命名与定义"><a href="#3标识符命名与定义" class="headerlink" title="3标识符命名与定义"></a>3标识符命名与定义</h1><h2 id="通用命名规则"><a href="#通用命名规则" class="headerlink" title="通用命名规则"></a>通用命名规则</h2><ol>
<li><p>unix like风格</p>
<p> 单词用小写字母，每个单词直接用下划线‘_’分割，例如text_mutex，kernel_text_address。</p>
</li>
<li><p>Windows风格</p>
<p> 大小写字母混用，单词连在一起，每个单词首字母大写</p>
</li>
<li><p>匈牙利命名法</p>
<p> 匈牙利命名主要包括三个部分：基本类型、一个或更多的前缀、一个限定词。</p>
</li>
</ol>
<h3 id="原则-2"><a href="#原则-2" class="headerlink" title="原则"></a>原则</h3><h4 id="原则3-1标识符的命名要清晰、明了，有明确含义，同时使用完整的单词或大家基本可以理解的缩写，避免使人产生误解。"><a href="#原则3-1标识符的命名要清晰、明了，有明确含义，同时使用完整的单词或大家基本可以理解的缩写，避免使人产生误解。" class="headerlink" title="原则3.1标识符的命名要清晰、明了，有明确含义，同时使用完整的单词或大家基本可以理解的缩写，避免使人产生误解。"></a>原则3.1标识符的命名要清晰、明了，有明确含义，同时使用完整的单词或大家基本可以理解的缩写，避免使人产生误解。</h4><h4 id="原则3-2-除了常见的通用缩写以外，不使用单词缩写，不得使用汉语拼音。"><a href="#原则3-2-除了常见的通用缩写以外，不使用单词缩写，不得使用汉语拼音。" class="headerlink" title="原则3.2 除了常见的通用缩写以外，不使用单词缩写，不得使用汉语拼音。"></a>原则3.2 除了常见的通用缩写以外，不使用单词缩写，不得使用汉语拼音。</h4><p>示例：一些常见可以缩写的例子：</p>
<ul>
<li>argument 可缩写为 arg</li>
<li>buffer 可缩写为 buff</li>
<li>clock 可缩写为 clk</li>
<li>command 可缩写为 cmd</li>
<li>compare 可缩写为 cmp</li>
<li>configuration 可缩写为 cfg</li>
<li>device 可缩写为 dev</li>
<li>error 可缩写为 err</li>
<li>hexadecimal 可缩写为 hex</li>
<li>increment 可缩写为 inc、</li>
<li>initialize 可缩写为 init</li>
<li>maximum 可缩写为 max</li>
<li>message 可缩写为 msg</li>
<li>minimum 可缩写为 min</li>
<li>parameter 可缩写为 para</li>
<li>previous 可缩写为 prev</li>
<li>register 可缩写为 reg</li>
<li>semaphore 可缩写为 sem</li>
<li>statistic 可缩写为 stat</li>
<li>synchronize 可缩写为 sync</li>
<li>temp 可缩写为 tmp</li>
</ul>
<h3 id="规则-2"><a href="#规则-2" class="headerlink" title="规则"></a>规则</h3><h4 id="规则3-1-产品-项目组内部应保持统一的命名风格。"><a href="#规则3-1-产品-项目组内部应保持统一的命名风格。" class="headerlink" title="规则3.1 产品&#x2F;项目组内部应保持统一的命名风格。"></a>规则3.1 产品&#x2F;项目组内部应保持统一的命名风格。</h4><blockquote>
<p>示例：</p>
<p>add&#x2F;remove begin&#x2F;end create&#x2F;destroy insert&#x2F;delete first&#x2F;last get&#x2F;release increment&#x2F;decrement put&#x2F;get add&#x2F;delete lock&#x2F;unlock open&#x2F;close min&#x2F;max old&#x2F;new start&#x2F;stop next&#x2F;previous source&#x2F;target show&#x2F;hide send&#x2F;receive source&#x2F;destination copy&#x2F;paste up&#x2F;down</p>
</blockquote>
<h3 id="建议"><a href="#建议" class="headerlink" title="建议"></a>建议</h3><h4 id="建议3-2-尽量避免名字中出现数字编号，除非逻辑上的确需要编号。"><a href="#建议3-2-尽量避免名字中出现数字编号，除非逻辑上的确需要编号。" class="headerlink" title="建议3.2 尽量避免名字中出现数字编号，除非逻辑上的确需要编号。"></a>建议3.2 尽量避免名字中出现数字编号，除非逻辑上的确需要编号。</h4><h4 id="建议3-3-标识符前不应添加模块、项目、产品、部门的名称作为前缀。"><a href="#建议3-3-标识符前不应添加模块、项目、产品、部门的名称作为前缀。" class="headerlink" title="建议3.3 标识符前不应添加模块、项目、产品、部门的名称作为前缀。"></a>建议3.3 标识符前不应添加模块、项目、产品、部门的名称作为前缀。</h4><h4 id="建议3-4-平台-驱动等适配代码的标识符命名风格保持和平台-驱动一致。"><a href="#建议3-4-平台-驱动等适配代码的标识符命名风格保持和平台-驱动一致。" class="headerlink" title="建议3.4 平台&#x2F;驱动等适配代码的标识符命名风格保持和平台&#x2F;驱动一致。"></a>建议3.4 平台&#x2F;驱动等适配代码的标识符命名风格保持和平台&#x2F;驱动一致。</h4><h2 id="文件命名规则"><a href="#文件命名规则" class="headerlink" title="文件命名规则"></a>文件命名规则</h2><h3 id="建议-1"><a href="#建议-1" class="headerlink" title="建议"></a>建议</h3><h4 id="建议3-6-文件命名统一采用小写字符。"><a href="#建议3-6-文件命名统一采用小写字符。" class="headerlink" title="建议3.6 文件命名统一采用小写字符。"></a>建议3.6 文件命名统一采用小写字符。</h4><h2 id="变量命名规则"><a href="#变量命名规则" class="headerlink" title="变量命名规则"></a>变量命名规则</h2><h3 id="规则-3"><a href="#规则-3" class="headerlink" title="规则"></a>规则</h3><h4 id="规则3-2-全局变量应增加“g-”前缀。"><a href="#规则3-2-全局变量应增加“g-”前缀。" class="headerlink" title="规则3.2 全局变量应增加“g_”前缀。"></a>规则3.2 全局变量应增加“g_”前缀。</h4><h4 id="规则3-3-静态变量应增加“s-”前缀。"><a href="#规则3-3-静态变量应增加“s-”前缀。" class="headerlink" title="规则3.3 静态变量应增加“s_”前缀。"></a>规则3.3 静态变量应增加“s_”前缀。</h4><h4 id="规则3-4-禁止使用单字节命名变量，但允许定义i、j、k作为局部循环变量。"><a href="#规则3-4-禁止使用单字节命名变量，但允许定义i、j、k作为局部循环变量。" class="headerlink" title="规则3.4 禁止使用单字节命名变量，但允许定义i、j、k作为局部循环变量。"></a>规则3.4 禁止使用单字节命名变量，但允许定义i、j、k作为局部循环变量。</h4><h3 id="建议-2"><a href="#建议-2" class="headerlink" title="建议"></a>建议</h3><h4 id="建议3-7-不建议使用匈牙利命名法。"><a href="#建议3-7-不建议使用匈牙利命名法。" class="headerlink" title="建议3.7 不建议使用匈牙利命名法。"></a>建议3.7 不建议使用匈牙利命名法。</h4><h4 id="建议3-8-使用名词或者形容词＋名词方式命名变量。"><a href="#建议3-8-使用名词或者形容词＋名词方式命名变量。" class="headerlink" title="建议3.8 使用名词或者形容词＋名词方式命名变量。"></a>建议3.8 使用名词或者形容词＋名词方式命名变量。</h4><h2 id="函数命名规则"><a href="#函数命名规则" class="headerlink" title="函数命名规则"></a>函数命名规则</h2><h3 id="建议-3"><a href="#建议-3" class="headerlink" title="建议"></a>建议</h3><h4 id="建议3-9-函数命名应以函数要执行的动作命名，一般采用动词或者动词＋名词的结构。"><a href="#建议3-9-函数命名应以函数要执行的动作命名，一般采用动词或者动词＋名词的结构。" class="headerlink" title="建议3.9 函数命名应以函数要执行的动作命名，一般采用动词或者动词＋名词的结构。"></a>建议3.9 函数命名应以函数要执行的动作命名，一般采用动词或者动词＋名词的结构。</h4><h2 id="宏的命名规则"><a href="#宏的命名规则" class="headerlink" title="宏的命名规则"></a>宏的命名规则</h2><h3 id="规则-4"><a href="#规则-4" class="headerlink" title="规则"></a>规则</h3><h4 id="规则3-5对于数值或者字符串等等常量的定义，建议采用全大写字母，单词之间加下划线‘-’的方式命名（枚举同样建议使用此方式定义）。"><a href="#规则3-5对于数值或者字符串等等常量的定义，建议采用全大写字母，单词之间加下划线‘-’的方式命名（枚举同样建议使用此方式定义）。" class="headerlink" title="规则3.5对于数值或者字符串等等常量的定义，建议采用全大写字母，单词之间加下划线‘_’的方式命名（枚举同样建议使用此方式定义）。"></a>规则3.5对于数值或者字符串等等常量的定义，建议采用全大写字母，单词之间加下划线‘_’的方式命名（枚举同样建议使用此方式定义）。</h4><h4 id="规则3-6-除了头文件或编译开关等特殊标识定义，宏定义不能使用下划线‘-’开头和结尾。"><a href="#规则3-6-除了头文件或编译开关等特殊标识定义，宏定义不能使用下划线‘-’开头和结尾。" class="headerlink" title="规则3.6 除了头文件或编译开关等特殊标识定义，宏定义不能使用下划线‘_’开头和结尾。"></a>规则3.6 除了头文件或编译开关等特殊标识定义，宏定义不能使用下划线‘_’开头和结尾。</h4><h1 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h1><h2 id="原则-3"><a href="#原则-3" class="headerlink" title="原则"></a>原则</h2><h3 id="原则4-1-一个变量只有一个功能，不能把一个变量用作多种用途。"><a href="#原则4-1-一个变量只有一个功能，不能把一个变量用作多种用途。" class="headerlink" title="原则4.1 一个变量只有一个功能，不能把一个变量用作多种用途。"></a>原则4.1 一个变量只有一个功能，不能把一个变量用作多种用途。</h3><blockquote>
<p>我怎么感觉在某些情况下无妨啊，开多了变量会占用性能吧？</p>
<p>也就是说：重要性：代码的可读性、可维护性和减少错误&gt;性能消耗</p>
<p>下列答案基于<strong>chatGPT</strong></p>
<p>遵循“一个变量只有一个功能”的原则确实会增加一些变量的数量，但这通常不会显著增加系统开销，特别是在现代编程环境和硬件条件下。这是因为：</p>
<ol>
<li><p><strong>内存开销相对较小</strong>：</p>
<ul>
<li>现代计算机的内存容量通常非常大，增加几个变量所占用的内存是非常小的。这种内存开销在绝大多数应用场景下可以忽略不计。</li>
</ul>
</li>
<li><p><strong>编译器优化</strong>：</p>
<ul>
<li>现代编译器和解释器非常智能，它们可以优化代码，将不必要的变量删除或者合并，从而减少内存开销。例如，在优化编译过程中，编译器会尝试最小化变量的存储空间，并进行变量复用等优化操作。</li>
</ul>
</li>
<li><p><strong>代码可读性和维护性优先</strong>：</p>
<ul>
<li>代码的可读性和可维护性在实际开发中比微小的性能优化更重要。可读性好的代码更容易被团队中的其他开发人员理解和维护，从而降低了开发和维护的成本。</li>
</ul>
</li>
<li><p><strong>开发效率和错误减少</strong>：</p>
<ul>
<li>使用单一功能变量可以减少代码中的错误，使开发过程更加顺利。这种减少错误和提升开发效率的好处往往远远超过因为增加变量数量而带来的微小性能损失。</li>
</ul>
</li>
</ol>
<p><strong>示例分析</strong>：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 增加系统开销的担忧</span></span><br><span class="line">total_items = <span class="number">10</span></span><br><span class="line">price = <span class="number">5.99</span></span><br><span class="line">total_cost = total_items * price</span><br><span class="line"></span><br><span class="line"><span class="comment"># 不好的做法：减少变量数量</span></span><br><span class="line">x = <span class="number">10</span></span><br><span class="line">x = <span class="number">5.99</span></span><br><span class="line">x = x * x  <span class="comment"># 这样做容易引入错误，也降低了代码的可读性</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 正确做法：使用多个变量，增加代码可读性</span></span><br><span class="line">total_items = <span class="number">10</span></span><br><span class="line">price_per_item = <span class="number">5.99</span></span><br><span class="line">total_cost = total_items * price_per_item</span><br></pre></td></tr></table></figure>

<p>在这个示例中，尽管引入了多个变量，但它们使代码更容易理解和维护。变量名清晰地表达了它们的用途，减少了开发和调试中的潜在错误。</p>
<p><strong>总结</strong>：</p>
<p>遵循“一个变量只有一个功能”的原则，不仅不会显著增加系统开销，反而可以通过提升代码质量和开发效率，降低长远的开发和维护成本。因此，在大多数情况下，这种做法是非常值得的。实际开发中，尤其是在团队协作和大型项目中，应优先考虑代码的可读性和可维护性。</p>
</blockquote>
<h3 id="原则4-2-结构功能单一；不要设计面面俱到的数据结构。"><a href="#原则4-2-结构功能单一；不要设计面面俱到的数据结构。" class="headerlink" title="原则4.2 结构功能单一；不要设计面面俱到的数据结构。"></a>原则4.2 结构功能单一；不要设计面面俱到的数据结构。</h3><h3 id="原则4-3-不用或者少用全局变量。"><a href="#原则4-3-不用或者少用全局变量。" class="headerlink" title="原则4.3 不用或者少用全局变量。"></a>原则4.3 不用或者少用全局变量。</h3><h2 id="规则-5"><a href="#规则-5" class="headerlink" title="规则"></a>规则</h2><h3 id="规则4-1-防止局部变量与全局变量同名。"><a href="#规则4-1-防止局部变量与全局变量同名。" class="headerlink" title="规则4.1 防止局部变量与全局变量同名。"></a>规则4.1 防止局部变量与全局变量同名。</h3><h3 id="规则4-2-通讯过程中使用的结构，必须注意字节序。"><a href="#规则4-2-通讯过程中使用的结构，必须注意字节序。" class="headerlink" title="规则4.2 通讯过程中使用的结构，必须注意字节序。"></a>规则4.2 通讯过程中使用的结构，必须注意字节序。</h3><blockquote>
<p>字节序的解释（基于chatGPT）</p>
<p>字节序（Byte Order）是指在计算机内存中存储多字节数据时，字节的排列顺序。不同计算机系统可能采用不同的字节序，主要有两种类型：大端序（Big-Endian）和小端序（Little-Endian）。</p>
<h3 id="大端序（Big-Endian）"><a href="#大端序（Big-Endian）" class="headerlink" title="大端序（Big-Endian）"></a>大端序（Big-Endian）</h3><ul>
<li><p><strong>定义</strong>：高位字节存储在低地址，低位字节存储在高地址。</p>
</li>
<li><p>示例</p>
<p>  ：假设有一个4字节（32位）的数值</p>
  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">0x12345678</span><br></pre></td></tr></table></figure>

<p>  。在大端序系统中，它的存储顺序如下：</p>
  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">makefile复制代码地址:   0x00  0x01  0x02  0x03</span><br><span class="line">值:     0x12  0x34  0x56  0x78</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="小端序（Little-Endian）"><a href="#小端序（Little-Endian）" class="headerlink" title="小端序（Little-Endian）"></a>小端序（Little-Endian）</h3><ul>
<li><p><strong>定义</strong>：低位字节存储在低地址，高位字节存储在高地址。</p>
</li>
<li><p>示例</p>
<p>  ：同样的数值</p>
  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">0x12345678</span><br></pre></td></tr></table></figure>

<p>  在小端序系统中的存储顺序如下：</p>
  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">makefile复制代码地址:   0x00  0x01  0x02  0x03</span><br><span class="line">值:     0x78  0x56  0x34  0x12</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="为什么字节序很重要"><a href="#为什么字节序很重要" class="headerlink" title="为什么字节序很重要"></a>为什么字节序很重要</h3><p>在多字节数据传输或跨平台交互时，字节序的不同可能导致数据解释错误。例如，一个大端序系统发送数据到一个小端序系统，如果不做任何处理，小端序系统可能会错误地解读数据内容。</p>
<h3 id="字节序的处理"><a href="#字节序的处理" class="headerlink" title="字节序的处理"></a>字节序的处理</h3><ol>
<li><strong>网络字节序</strong>：网络协议（如TCP&#x2F;IP）通常规定使用大端序，这被称为网络字节序（Network Byte Order）。</li>
<li><strong>字节序转换函数</strong>：大多数编程语言提供了用于字节序转换的函数。例如，在C语言中，<code>htons</code>（Host TO Network Short）、<code>htonl</code>（Host TO Network Long）、<code>ntohs</code>（Network TO Host Short）、<code>ntohl</code>（Network TO Host Long）等函数用于在主机字节序和网络字节序之间进行转换。</li>
</ol>
<h3 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h3><p><strong>C语言中的字节序处理</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">c复制代码#include &lt;stdio.h&gt;</span><br><span class="line">#include &lt;stdint.h&gt;</span><br><span class="line">#include &lt;arpa/inet.h&gt;</span><br><span class="line"></span><br><span class="line">void print_bytes(uint32_t value) &#123;</span><br><span class="line">    uint8_t *bytes = (uint8_t *)&amp;value;</span><br><span class="line">    for (int i = 0; i &lt; 4; i++) &#123;</span><br><span class="line">        printf(&quot;%02x &quot;, bytes[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    printf(&quot;\n&quot;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main() &#123;</span><br><span class="line">    uint32_t host_value = 0x12345678; // 主机字节序</span><br><span class="line">    uint32_t network_value = htonl(host_value); // 转换为网络字节序（大端序）</span><br><span class="line"></span><br><span class="line">    printf(&quot;Host byte order: &quot;);</span><br><span class="line">    print_bytes(host_value); // 打印主机字节序</span><br><span class="line"></span><br><span class="line">    printf(&quot;Network byte order: &quot;);</span><br><span class="line">    print_bytes(network_value); // 打印网络字节序</span><br><span class="line"></span><br><span class="line">    uint32_t converted_back = ntohl(network_value); // 转换回主机字节序</span><br><span class="line">    printf(&quot;Converted back to host byte order: &quot;);</span><br><span class="line">    print_bytes(converted_back); // 打印转换回的主机字节序</span><br><span class="line"></span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>输出</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vbnet复制代码Host byte order: 78 56 34 12 </span><br><span class="line">Network byte order: 12 34 56 78 </span><br><span class="line">Converted back to host byte order: 78 56 34 12 </span><br></pre></td></tr></table></figure>

<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>字节序在计算机内存中存储多字节数据时非常重要。理解和处理字节序问题，特别是在跨平台或网络通信中，确保数据正确传输和解释是至关重要的。通过明确协议中的字节序和使用合适的字节序转换函数，可以避免数据传输中的错误。</p>
</blockquote>
<h3 id="规则4-3-严禁使用未经初始化的变量作为右值。"><a href="#规则4-3-严禁使用未经初始化的变量作为右值。" class="headerlink" title="规则4.3 严禁使用未经初始化的变量作为右值。"></a>规则4.3 严禁使用未经初始化的变量作为右值。</h3><h2 id="建议-4"><a href="#建议-4" class="headerlink" title="建议"></a>建议</h2><h3 id="建议4-1-构造仅有一个模块或函数可以修改、创建，而其余有关模块或函数只访问的全局变量，防止多个不同模块或函数都可以修改、创建同一全局变量的现象。"><a href="#建议4-1-构造仅有一个模块或函数可以修改、创建，而其余有关模块或函数只访问的全局变量，防止多个不同模块或函数都可以修改、创建同一全局变量的现象。" class="headerlink" title="建议4.1 构造仅有一个模块或函数可以修改、创建，而其余有关模块或函数只访问的全局变量，防止多个不同模块或函数都可以修改、创建同一全局变量的现象。"></a>建议4.1 构造仅有一个模块或函数可以修改、创建，而其余有关模块或函数只访问的全局变量，防止多个不同模块或函数都可以修改、创建同一全局变量的现象。</h3><h3 id="建议4-2-使用面向接口编程思想，通过API访问数据：如果本模块的数据需要对外部模块开放，应提供接口函数来设置、获取，同时注意全局数据的访问互斥。"><a href="#建议4-2-使用面向接口编程思想，通过API访问数据：如果本模块的数据需要对外部模块开放，应提供接口函数来设置、获取，同时注意全局数据的访问互斥。" class="headerlink" title="建议4.2 使用面向接口编程思想，通过API访问数据：如果本模块的数据需要对外部模块开放，应提供接口函数来设置、获取，同时注意全局数据的访问互斥。"></a>建议4.2 使用面向接口编程思想，通过API访问数据：如果本模块的数据需要对外部模块开放，应提供接口函数来设置、获取，同时注意全局数据的访问互斥。</h3><h3 id="建议4-3-在首次使用前初始化变量，初始化的地方离使用的地方越近越好。建议4-3-在首次使用前初始化变量，初始化的地方离使用的地方越近越好。"><a href="#建议4-3-在首次使用前初始化变量，初始化的地方离使用的地方越近越好。建议4-3-在首次使用前初始化变量，初始化的地方离使用的地方越近越好。" class="headerlink" title="建议4.3 在首次使用前初始化变量，初始化的地方离使用的地方越近越好。建议4.3 在首次使用前初始化变量，初始化的地方离使用的地方越近越好。"></a>建议4.3 在首次使用前初始化变量，初始化的地方离使用的地方越近越好。建议4.3 在首次使用前初始化变量，初始化的地方离使用的地方越近越好。</h3><h3 id="建议4-4-明确全局变量的初始化顺序，避免跨模块的初始化依赖。"><a href="#建议4-4-明确全局变量的初始化顺序，避免跨模块的初始化依赖。" class="headerlink" title="建议4.4 明确全局变量的初始化顺序，避免跨模块的初始化依赖。"></a>建议4.4 明确全局变量的初始化顺序，避免跨模块的初始化依赖。</h3><h3 id="建议4-5-尽量减少没有必要的数据类型默认转换与强制转换。"><a href="#建议4-5-尽量减少没有必要的数据类型默认转换与强制转换。" class="headerlink" title="建议4.5 尽量减少没有必要的数据类型默认转换与强制转换。"></a>建议4.5 尽量减少没有必要的数据类型默认转换与强制转换。</h3><h1 id="宏、常量"><a href="#宏、常量" class="headerlink" title="宏、常量"></a>宏、常量</h1><h2 id=""><a href="#" class="headerlink" title=""></a></h2><h2 id="规则-6"><a href="#规则-6" class="headerlink" title="规则"></a>规则</h2><h3 id="规则5-1-用宏定义表达式时，要使用完备的括号。"><a href="#规则5-1-用宏定义表达式时，要使用完备的括号。" class="headerlink" title="规则5.1 用宏定义表达式时，要使用完备的括号。"></a>规则5.1 用宏定义表达式时，要使用完备的括号。</h3><h3 id="规则5-2-将宏所定义的多条表达式放在大括号中。"><a href="#规则5-2-将宏所定义的多条表达式放在大括号中。" class="headerlink" title="规则5.2 将宏所定义的多条表达式放在大括号中。"></a>规则5.2 将宏所定义的多条表达式放在大括号中。</h3><h3 id="规则5-3-使用宏时，不允许参数发生变化。"><a href="#规则5-3-使用宏时，不允许参数发生变化。" class="headerlink" title="规则5.3 使用宏时，不允许参数发生变化。"></a>规则5.3 使用宏时，不允许参数发生变化。</h3><h3 id="规则5-4-不允许直接使用魔鬼数字。"><a href="#规则5-4-不允许直接使用魔鬼数字。" class="headerlink" title="规则5.4 不允许直接使用魔鬼数字。"></a>规则5.4 不允许直接使用魔鬼数字。</h3><p>说明：使用魔鬼数字的弊端：代码难以理解；如果一个有含义的数字多处使用，一旦需要修改这个数值，代价惨重。</p>
<h2 id="建议-5"><a href="#建议-5" class="headerlink" title="建议"></a>建议</h2><h3 id="建议5-1-除非必要，应尽可能使用函数代替宏。"><a href="#建议5-1-除非必要，应尽可能使用函数代替宏。" class="headerlink" title="建议5.1 除非必要，应尽可能使用函数代替宏。"></a>建议5.1 除非必要，应尽可能使用函数代替宏。</h3><h3 id="建议5-2-常量建议使用const定义代替宏。"><a href="#建议5-2-常量建议使用const定义代替宏。" class="headerlink" title="建议5.2 常量建议使用const定义代替宏。"></a>建议5.2 常量建议使用const定义代替宏。</h3><h3 id="建议5-3-宏定义中尽量不使用return、goto、continue、break等改变程序流程的语句。"><a href="#建议5-3-宏定义中尽量不使用return、goto、continue、break等改变程序流程的语句。" class="headerlink" title="建议5.3 宏定义中尽量不使用return、goto、continue、break等改变程序流程的语句。"></a>建议5.3 宏定义中尽量不使用return、goto、continue、break等改变程序流程的语句。</h3><h1 id="质量保证"><a href="#质量保证" class="headerlink" title="质量保证"></a>质量保证</h1><p><strong>to be continued</strong></p>
<h1 id="程序效率"><a href="#程序效率" class="headerlink" title="程序效率"></a>程序效率</h1><p><strong>to be continued</strong></p>
<h1 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h1><p><strong>to be continued</strong></p>
<h1 id="排版与格式"><a href="#排版与格式" class="headerlink" title="排版与格式"></a>排版与格式</h1><p><strong>to be continued</strong></p>
]]></content>
      <categories>
        <category>软件技术</category>
      </categories>
      <tags>
        <tag>C/C++</tag>
        <tag>编程规范</tag>
        <tag>项目</tag>
      </tags>
  </entry>
  <entry>
    <title>CAN总线笔记</title>
    <url>/2024/11/07/CAN%E6%80%BB%E7%BA%BF%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h1 id="CAN总线"><a href="#CAN总线" class="headerlink" title="CAN总线"></a><strong>CAN总线</strong></h1><blockquote>
<p>CAN（Controller Area Network）总线是一种串行通信协议，用于在汽车、工业自动化设备和物联网等嵌入式系统中实现设备之间的可靠数据传输。</p>
</blockquote>
<h2 id="主要特点"><a href="#主要特点" class="headerlink" title="主要特点"></a>主要特点</h2><p><strong>多主架构</strong>：CAN总线采用多主通信方式，任何节点（即连接在总线上的设备）都可以在总线空闲时发起通信。这种设计提高了系统的灵活性和可靠性。</p>
<p><strong>差分信号传输</strong>：CAN总线使用差分信号传输数据，即CAN_H和CAN_L两根信号线之间的电压差用来表示逻辑状态。这种方式能有效地降低电磁干扰的影响，适合在工业环境中使用。</p>
<p><strong>优先级机制</strong>：CAN协议内置消息优先级，通过标识符的方式决定通信优先级，当两个或多个节点同时发送消息时，优先级高的节点可以继续发送，而优先级低的节点会自动延迟发送。这种机制保障了紧急消息能够优先传输。</p>
<p><strong>高可靠性与数据完整性</strong>：CAN协议内置多种错误检测和纠正机制，如CRC校验、帧检测和ACK确认机制。通过这些机制，CAN总线能够及时检测和纠正数据传输过程中的错误，确保数据的准确性和可靠性。</p>
<h1 id="硬件特性"><a href="#硬件特性" class="headerlink" title="硬件特性"></a>硬件特性</h1><h2 id="结构"><a href="#结构" class="headerlink" title="结构"></a>结构</h2><ol>
<li>每个设备通过CAN收发器挂载在CAN总线网络上</li>
<li>高速CAN使用闭环网络，CAN_H和CAN_L两端添加120Ω的终端电阻</li>
<li>低速CAN使用开环网络，CAN_H和CAN_L其中一端添加2.2kΩ的终端电阻</li>
</ol>
<p><img src="/../images/hardWare/can/1.png"></p>
<h2 id="电平标准"><a href="#电平标准" class="headerlink" title="电平标准"></a>电平标准</h2><p><strong>CAN总线采用差分信号，</strong>即两线电压差（VCAN_H-VCAN_L）传输数据位</p>
<p><strong>高速CAN规定：</strong>	</p>
<pre><code>1. 电压差为0V时表示逻辑1（隐性电平）	
1. 电压差为2V时表示逻辑0（显性电平）
</code></pre>
<p><strong>低速CAN规定：</strong>	</p>
<ol>
<li>电压差为-1.5V时表示逻辑1（隐性电平）	</li>
<li>电压差为3V时表示逻辑0（显性电</li>
</ol>
<h1 id="CAN总线帧格式"><a href="#CAN总线帧格式" class="headerlink" title="CAN总线帧格式"></a>CAN总线帧格式</h1><table>
<thead>
<tr>
<th><strong>帧类型</strong></th>
<th><strong>用途</strong></th>
</tr>
</thead>
<tbody><tr>
<td>数据帧</td>
<td>发送设备主动发送数据（广播式）</td>
</tr>
<tr>
<td>遥控帧</td>
<td>接收设备主动请求数据（请求式）</td>
</tr>
<tr>
<td>错误帧</td>
<td>某个设备检测出错误时向其他设备通知错误</td>
</tr>
<tr>
<td>过载帧</td>
<td>接收设备通知其尚未做好接收准备</td>
</tr>
<tr>
<td>帧间隔</td>
<td>用于将数据帧及遥控帧与前面的帧分离开</td>
</tr>
</tbody></table>
<p><img src="/../images/hardWare/can/2.png"></p>
<blockquote>
<h1 id="数据帧各部分用途简介"><a href="#数据帧各部分用途简介" class="headerlink" title="数据帧各部分用途简介"></a><strong>数据帧各部分用途简介</strong></h1><ol>
<li>SOF（Start of Frame）：帧起始，表示后面一段波形为传输的数据位</li>
<li>ID（Identify）：标识符，区分功能，同时决定优先级</li>
<li>RTR（Remote Transmission Request ）：远程请求位，区分数据帧和遥控帧</li>
<li>IDE（Identifier Extension）：扩展标志位，区分标准格式和扩展格式</li>
<li>SRR（Substitute Remote Request）：替代RTR，协议升级时留下的无意义位</li>
<li>r0&#x2F;r1（Reserve）：保留位，为后续协议升级留下空间DLC（Data Length Code）：数据长度，指示数据段有几个字节</li>
<li>Data：数据段的1~8个字节有效数据</li>
<li>CRC（Cyclic Redundancy Check）：循环冗余校验，校验数据是否正确</li>
<li>ACK（Acknowledgement）：应答位，判断数据有没有被接收方接收</li>
<li>CRC&#x2F;ACK界定符：为应答位前后发送方和接收方释放总线留下时间</li>
<li>EOF（End of Frame ）：帧结束，表示数据位已经传输完毕</li>
</ol>
</blockquote>
]]></content>
      <categories>
        <category>硬件技术</category>
      </categories>
      <tags>
        <tag>STM32</tag>
        <tag>笔记</tag>
        <tag>嵌入式</tag>
        <tag>51</tag>
        <tag>Iot</tag>
        <tag>CAN总线</tag>
      </tags>
  </entry>
  <entry>
    <title>C语言二级指针</title>
    <url>/2023/10/01/C%E8%AF%AD%E8%A8%80%E4%BA%8C%E7%BA%A7%E6%8C%87%E9%92%88/</url>
    <content><![CDATA[<h1 id="C语言的二级指针"><a href="#C语言的二级指针" class="headerlink" title="C语言的二级指针"></a>C语言的二级指针</h1><h2 id="1-起因。"><a href="#1-起因。" class="headerlink" title="1.起因。"></a>1.起因。</h2><p>​	想记录一下这个我难受的知识点。</p>
<p>​	事情的起因：在自己用C实现简单的数据结构 “ 栈 ”的时候，写了这样一段代码。在后面遍历的时候不论怎么修改都会出现<strong>segmentation fault。</strong> 后来通过debug才发现S的地址从来都没有发生变化。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">pushStack</span><span class="params">(<span class="type">int</span> dataToStore,myStack S)</span>&#123;</span><br><span class="line">    ptrToNode tmp=(myStack)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">struct</span> MyStack));</span><br><span class="line">    S-&gt;nextNode=tmp;</span><br><span class="line">    tmp-&gt;lastNode=S;</span><br><span class="line">    tmp-&gt;data=dataToStore;</span><br><span class="line">    tmp-&gt;nextNode=<span class="literal">NULL</span>;</span><br><span class="line">    S= tmp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>​	以上代码错误的原因是：<strong>S作为一个指针参数被传入函数</strong> 虽然函数的末尾覆盖了S的地址，<strong>但这只是在这个函数开辟的栈空间里，结束后S的地址并不会变化</strong></p>
<h2 id="2-解决。"><a href="#2-解决。" class="headerlink" title="2.解决。"></a>2.解决。</h2><h3 id="1-方法一："><a href="#1-方法一：" class="headerlink" title="1.方法一："></a>1.方法一：</h3><p>​			在主函数覆盖S的地址</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">myStack <span class="title function_">pushStack</span><span class="params">(<span class="type">int</span> dataToStore,myStack S)</span>&#123;</span><br><span class="line">    ptrToNode tmp=(myStack)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">struct</span> MyStack));</span><br><span class="line">    S-&gt;nextNode=tmp;</span><br><span class="line">    tmp-&gt;lastNode=S;</span><br><span class="line">    tmp-&gt;data=dataToStore;</span><br><span class="line">    tmp-&gt;nextNode=<span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">return</span> tmp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2-方法二："><a href="#2-方法二：" class="headerlink" title="2.方法二："></a>2.方法二：</h3><p>​			传入二级指针，即可修改二级指针的值（一级指针的地址）</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">pushStack</span><span class="params">(<span class="type">int</span> dataToStore,myStack *S)</span>&#123;</span><br><span class="line">    ptrToNode tmp=(myStack)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">struct</span> MyStack));</span><br><span class="line">    *S-&gt;nextNode=tmp;</span><br><span class="line">    tmp-&gt;lastNode=*S;</span><br><span class="line">    tmp-&gt;data=dataToStore;</span><br><span class="line">    tmp-&gt;nextNode=<span class="literal">NULL</span>;</span><br><span class="line">    *S= tmp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="3-收尾。"><a href="#3-收尾。" class="headerlink" title="3.收尾。"></a>3.收尾。</h2><p>​		简单的实现栈这个数据结构其实不一定需要用到二级指针，只是我把问题复杂化了。带来了意向不到的难题。不过至少让我将二级指针收入囊中。不得不感叹一下任重道远啊。</p>
]]></content>
      <categories>
        <category>软件技术</category>
      </categories>
      <tags>
        <tag>笔记</tag>
        <tag>c</tag>
      </tags>
  </entry>
  <entry>
    <title>Computer Composition Principle</title>
    <url>/2024/02/27/Computer-Composition-Principle/</url>
    <content><![CDATA[<p>​			计算机组成原理</p>
<p>&#x3D;&#x3D;HIghLIght &#x3D;&#x3D;</p>
<h1 id="计算机系统概论"><a href="#计算机系统概论" class="headerlink" title="计算机系统概论"></a>计算机系统概论</h1><h2 id="计算机基本组成"><a href="#计算机基本组成" class="headerlink" title="计算机基本组成"></a>计算机基本组成</h2><h3 id="冯诺依曼计算机"><a href="#冯诺依曼计算机" class="headerlink" title="冯诺依曼计算机"></a>冯诺依曼计算机</h3><ul>
<li>特点</li>
</ul>
<ol>
<li>五大部件：运算器（ALU），控制器（CU），存储器（MEM），输入输出（I&#x2F;O）</li>
<li>指令与数据同等地位存储与存储器</li>
<li>使用二进制</li>
<li>指令由操作码和地址码组成</li>
<li>指令在存储器内顺序存放</li>
<li>以运算器为中心（现代计算以存储器为中心）</li>
</ol>
<h3 id="计算机工作过程"><a href="#计算机工作过程" class="headerlink" title="计算机工作过程"></a>计算机工作过程</h3><h4 id="存储器的基本组成"><a href="#存储器的基本组成" class="headerlink" title="存储器的基本组成"></a>存储器的基本组成</h4><ul>
<li><p>存储体：由存储单元组成（存储单元由存储原件组成，存储原件存储0和1）</p>
</li>
<li><p>存储字：存储单元中的二进制代码组合（？）</p>
</li>
<li><p>存储字长：</p>
</li>
<li><p>MAR：存储器的地址寄存器</p>
</li>
<li><p>MDR：存储器的数据寄存器</p>
</li>
</ul>
<h4 id="运算器的基本组成以及操作过程"><a href="#运算器的基本组成以及操作过程" class="headerlink" title="运算器的基本组成以及操作过程"></a>运算器的基本组成以及操作过程</h4><ul>
<li>ACC：	被加数，被减数，乘积高位，被除数，余数</li>
<li>ALU（算术逻辑单元）： </li>
<li>MQ： 	乘数，乘积低位</li>
</ul>
<h4 id="控制器的基本组成"><a href="#控制器的基本组成" class="headerlink" title="控制器的基本组成"></a>控制器的基本组成</h4><ul>
<li>CU：控制单元</li>
<li>IR：指令寄存器</li>
<li>PC：程序计数器</li>
</ul>
<h3 id="计算机硬件的主要技术指标"><a href="#计算机硬件的主要技术指标" class="headerlink" title="计算机硬件的主要技术指标"></a>计算机硬件的主要技术指标</h3><ol>
<li>机器字长<br> CPU一次能处理的数据位数与ALU中的寄存器位数有关</li>
<li>运算速度</li>
</ol>
<ul>
<li>MIP<strong>（Million Instructions Per Second）</strong></li>
</ul>
<p>​	表示每秒钟能够执行的指令数量。不考虑指令的复杂度和执行时间。</p>
<ul>
<li>MIPS<strong>（Million Instructions Per Second）</strong></li>
</ul>
<p>​	表示每秒钟能够执行的指令数量。MIPS通常用于描述某个特定计算机系统的实际性能，考虑了指令的复杂度和执行时间。</p>
<ul>
<li>CPI<strong>（Cycles Per Instruction）</strong></li>
</ul>
<p>​	表示每条指令执行所需的时钟周期数。CPI的倒数也常被用作衡量计算机性能的指标之一，称为IPC（Instructions Per Cycle）。</p>
<ul>
<li>FLOPS<strong>（Floating Point Operations Per Second）</strong></li>
</ul>
<p>​	表示每秒钟能够执行的浮点运算次数。FLOPS是衡量计算机在执行浮点运算时的速度和效率的重要指标之一。</p>
<h1 id="系统总线"><a href="#系统总线" class="headerlink" title="系统总线"></a>系统总线</h1><h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><ul>
<li>使用总线的原因：希望随时增加或减少设备</li>
<li>总线的定义: 链接多个部件的信息传输线，是各部件信息共享的传输介质</li>
</ul>
<h2 id="总线的分类"><a href="#总线的分类" class="headerlink" title="总线的分类"></a>总线的分类</h2><p>​	按照数据传输方式：并行传输总线，串行传输总线</p>
<h3 id="片内总线"><a href="#片内总线" class="headerlink" title="片内总线"></a>片内总线</h3><p>​	芯片内部的总线</p>
<h3 id="系统总线-1"><a href="#系统总线-1" class="headerlink" title="系统总线"></a>系统总线</h3><ul>
<li>系统总线的定义：是指CPU，主存，I&#x2F;O各大部件之间的信息传输线</li>
</ul>
<h4 id="数据总线"><a href="#数据总线" class="headerlink" title="数据总线"></a>数据总线</h4><p>​	传输各部件之间的数据信息</p>
<ul>
<li>特点</li>
</ul>
<ol>
<li>双向传输</li>
<li>与机器字长，存储字长有关</li>
<li>数据总线位数即数据总线宽度</li>
</ol>
<h4 id="地址总线"><a href="#地址总线" class="headerlink" title="地址总线"></a>地址总线</h4><ul>
<li>特点：</li>
</ul>
<ol>
<li>用于指明CPU欲访问的存储单元或I&#x2F;O端口的地址。</li>
<li><strong>单向</strong>输出（仅由CPU输出）</li>
</ol>
<h4 id="控制总线"><a href="#控制总线" class="headerlink" title="控制总线"></a>控制总线</h4><p>​	为了使各个部件在不同时刻占有总线使用权</p>
<ul>
<li>特点</li>
</ul>
<ol>
<li>对于特定控制线：单向的，对于控制总线总体来说是双向的</li>
<li>对于CPU来说，控制信号既有输出也有输入</li>
</ol>
<ul>
<li>常见控制信号<br>  时钟，复位，总线请求和允许，中断请求和响应，存储器读写，IO读写，传输响应</li>
</ul>
<h3 id="通信总线"><a href="#通信总线" class="headerlink" title="通信总线"></a>通信总线</h3><pre><code>目的：用于计算机系统之间活着计算机系统与其他系统之间的通信。
</code></pre>
<h4 id="传输方式"><a href="#传输方式" class="headerlink" title="传输方式"></a>传输方式</h4><ol>
<li>串行通信总线（远距离）</li>
<li>并行通信总线（近距离）</li>
</ol>
<h1 id="总线的性能指标"><a href="#总线的性能指标" class="headerlink" title="总线的性能指标"></a>总线的性能指标</h1><ol>
<li>总线宽度（数据总线的宽度）</li>
<li>总线带宽（总线的数据传输速率）</li>
<li>时钟同步&#x2F;异步：分为同步总线，异步总线</li>
<li>总线复用：分时使用与地址或者数据</li>
<li>信号线数：地址，数据，控制总线总和</li>
<li>总线控制方式</li>
<li>其他指标</li>
</ol>
<h2 id="总线结构"><a href="#总线结构" class="headerlink" title="总线结构"></a>总线结构</h2><h3 id="总线标准"><a href="#总线标准" class="headerlink" title="总线标准"></a>总线标准</h3><ol>
<li>ISA</li>
<li>EISA</li>
<li>VL-BUS</li>
<li>PCI</li>
<li>AGP</li>
</ol>
<h2 id="总线控制"><a href="#总线控制" class="headerlink" title="总线控制"></a>总线控制</h2><h3 id="总线判优控制"><a href="#总线判优控制" class="headerlink" title="总线判优控制"></a>总线判优控制</h3><ul>
<li>总线判优控制的分类<ul>
<li>集中式：有链式查询，计数器定时查询，独立请求方式</li>
<li>分布式</li>
</ul>
</li>
</ul>
<h4 id="链式查询"><a href="#链式查询" class="headerlink" title="链式查询"></a>链式查询</h4><ul>
<li>特点：</li>
</ul>
<ol>
<li>离总线控制部件最近的设备具有最高优先级 </li>
<li>只需很少几根线</li>
<li>容易扩充设备</li>
<li>对电路故障很敏感</li>
<li>优先级低的设备很难获取请求</li>
</ol>
<h4 id="计数器定时查询"><a href="#计数器定时查询" class="headerlink" title="计数器定时查询"></a>计数器定时查询</h4><ul>
<li>特点：</li>
</ul>
<ol>
<li>优先次序可变，并且是顺序，</li>
<li>设备使用总线的优先级相等</li>
<li>增加了控制线数，控制复杂。</li>
<li>对电路故障敏感度不如链式查询</li>
</ol>
<h4 id="独立请求方式"><a href="#独立请求方式" class="headerlink" title="独立请求方式"></a>独立请求方式</h4><ul>
<li>特点：</li>
</ul>
<ol>
<li>响应速度快</li>
<li>优先次序灵活</li>
<li>控制线多，控制复杂</li>
</ol>
<h3 id="总线通信控制"><a href="#总线通信控制" class="headerlink" title="总线通信控制"></a>总线通信控制</h3><ul>
<li>目的：解决通信双方协调配合的问题。</li>
<li>分类：<ul>
<li>通常有：同步，异步，半同步，分离式。</li>
</ul>
</li>
</ul>
<h4 id="总线周期"><a href="#总线周期" class="headerlink" title="总线周期"></a>总线周期</h4><ul>
<li>定义：完成一次总线操作的时间。</li>
</ul>
<ol>
<li>申请分配阶段</li>
<li>寻址阶段</li>
<li>传数阶段</li>
<li>结束阶段</li>
</ol>
<h4 id="同步通信"><a href="#同步通信" class="headerlink" title="同步通信"></a>同步通信</h4><h4 id="异步通信"><a href="#异步通信" class="headerlink" title="异步通信"></a>异步通信</h4><p>​	异步通信的应答方式：不互锁，半互锁，全互锁。</p>
<h4 id="半同步通信"><a href="#半同步通信" class="headerlink" title="半同步通信"></a>半同步通信</h4><p>“半同步通信”是一种混合型通信模型，结合了同步通信和异步通信的特点。在半同步通信中，通常存在两个部分：一个同步部分和一个异步部分。</p>
<ul>
<li><strong>同步部分</strong>：在同步部分，通信的发送者和接收者会在通信开始和结束时进行显式的同步，以确保数据的正确传输。这意味着发送方和接收方会通过一些同步机制来进行通信，例如信号量、条件变量或者消息队列等。在同步部分中，通信的发送和接收通常是一个阻塞操作，直到通信完成。</li>
<li><strong>异步部分</strong>：在异步部分，通信的发送者和接收者不需要严格的同步，可以在不同的时间进行数据的发送和接收。在异步部分中，通常采用非阻塞的方式进行通信，发送方可以继续执行其他任务，而不需要等待通信完成。</li>
</ul>
<p>半同步通信通常用于解决在异步通信中可能出现的数据一致性问题，同时又希望通过同步通信确保数据的正确性和完整性。这种通信模型可以在一定程度上提高通信的灵活性和效率，同时保持数据的安全性。</p>
<h4 id="分离式通信"><a href="#分离式通信" class="headerlink" title="分离式通信"></a>分离式通信</h4><p>“分离式通信”是一种通信模型，其中通信的发送和接收是通过分开的机制进行的。在分离式通信中，发送者和接收者之间不直接进行数据传输，而是通过中间的通信通道或者中介进行交互。</p>
<p>通常，分离式通信包含以下两个主要组成部分：</p>
<ol>
<li><strong>发送端（Sender）</strong>：发送端负责将数据发送到通信通道或者中介。它将要发送的数据传递给通信通道或者中介，并可能在发送后继续执行其他任务。</li>
<li><strong>接收端（Receiver）</strong>：接收端负责从通信通道或者中介接收数据。它从通信通道或者中介获取数据，并可能对接收到的数据进行处理或者响应。</li>
</ol>
<p>分离式通信的通信通道或者中介可以是各种形式的，例如消息队列、事件、共享内存、套接字等。这些通道或者中介起到了一个连接发送端和接收端的桥梁作用，使得它们能够进行间接的数据交换。</p>
<p>分离式通信常用于解耦发送者和接收者之间的依赖关系，以提高系统的可扩展性、灵活性和性能。同时，它还可以用于实现异步通信，其中发送者和接收者可以以不同的速率进行数据交换。</p>
<h2 id="其他概念"><a href="#其他概念" class="headerlink" title="其他概念"></a>其他概念</h2><h1 id="存储器"><a href="#存储器" class="headerlink" title="存储器"></a>存储器</h1><h2 id="存储器的分类"><a href="#存储器的分类" class="headerlink" title="存储器的分类"></a>存储器的分类</h2><h3 id="按存储介质"><a href="#按存储介质" class="headerlink" title="按存储介质"></a>按存储介质</h3><ol>
<li>半导体存储器 </li>
<li>磁表面存储器</li>
<li>磁芯存储器</li>
<li>光盘存储器</li>
</ol>
<h3 id="按存取方式"><a href="#按存取方式" class="headerlink" title="按存取方式"></a>按存取方式</h3><ol>
<li><p>随机存储器</p>
<ol>
<li>静态RAM（触发器原理寄存信息）</li>
<li>动态RAM（电容充放电原理寄存信息）</li>
</ol>
</li>
<li><p>只读存储器</p>
<ol>
<li>掩模型只读存储器（MROM）</li>
<li>可编程只读存储器（PROM）</li>
<li>可擦除可编程只读存储器（EPROM）</li>
<li>用电可擦除可编程只读存储器（EEPROM）</li>
</ol>
</li>
<li><p>顺序存取存储器</p>
</li>
<li><p>直接存取存储器、</p>
<p> -按在计算机中的作用</p>
</li>
<li><p>主存储器</p>
</li>
<li><p>辅存储器</p>
</li>
<li><p>缓冲存储器</p>
</li>
</ol>
<h2 id="主存储器"><a href="#主存储器" class="headerlink" title="主存储器"></a>主存储器</h2><h3 id="主存中存储单元地址的分配"><a href="#主存中存储单元地址的分配" class="headerlink" title="主存中存储单元地址的分配"></a>主存中存储单元地址的分配</h3><ul>
<li>按字寻址和按字节寻址</li>
</ul>
<blockquote>
<p>例：假设地址线24位，按字节寻址范围就是：2^24</p>
<p>如果机器字长32位，则按字寻址范围就是：2^24&#x2F;（32&#x2F;4）</p>
</blockquote>
<h3 id="主存的技术指标"><a href="#主存的技术指标" class="headerlink" title="主存的技术指标"></a>主存的技术指标</h3><p>​	<strong>存储容量和存储速度</strong></p>
<h4 id="存储容量"><a href="#存储容量" class="headerlink" title="存储容量"></a>存储容量</h4><p>​	定义：主存能存放二进制代码的总位数（存储单元* 存储字长）。也可以用字节总数表示。</p>
<h4 id="存储速度"><a href="#存储速度" class="headerlink" title="存储速度"></a>存储速度</h4><p>​	存储速度由存取时间和存取周期表示。</p>
<ul>
<li><p>存取时间（存储器访问时间（Memory Access Time））</p>
<p>  定义：启动一次存储器操作<strong>到完成该操作所需的全部时间</strong>。</p>
<p>  分为读出时间和写入时间</p>
<ol>
<li>读出时间：收到有效地址到产生有效输出。</li>
<li>写入时间：存储器收到有效地址到数据写入被选中单元。</li>
</ol>
</li>
<li><p>存取周期（Memory Cycle Time）</p>
<p>  定义：存储器连续两次独立的存储器操作所需的最小时间间隔。</p>
</li>
</ul>
<h4 id="存储带宽"><a href="#存储带宽" class="headerlink" title="存储带宽"></a>存储带宽</h4><p>定义：单位时间内存储器存取的信息量</p>
<ul>
<li>提高带宽的措施</li>
</ul>
<ol>
<li>缩短存储周期</li>
<li>增加存储字长</li>
<li>增加存储体</li>
</ol>
<h3 id="半导体存储芯片"><a href="#半导体存储芯片" class="headerlink" title="半导体存储芯片"></a>半导体存储芯片</h3><p>地址线和数据线共同反应存储芯片的容量。</p>
<h4 id="译码驱动方式"><a href="#译码驱动方式" class="headerlink" title="译码驱动方式"></a>译码驱动方式</h4><ol>
<li><p>线选法：一根线拿出一个存储单元各位</p>
</li>
<li><p>重合法：类似键盘扫描</p>
</li>
</ol>
<h3 id="随机存取存储器"><a href="#随机存取存储器" class="headerlink" title="随机存取存储器"></a>随机存取存储器</h3><p>​	分为静态RAM和动态RAM</p>
<h4 id="静态RAM-SRAM"><a href="#静态RAM-SRAM" class="headerlink" title="静态RAM(SRAM)"></a>静态RAM(SRAM)</h4><p>​	用于存储0和1的电路称为 存储器的基本单元电路。</p>
<p>​	易失性半导体</p>
<h4 id="动态RAM-DRAM"><a href="#动态RAM-DRAM" class="headerlink" title="动态RAM(DRAM)"></a>动态RAM(DRAM)</h4><p>​	靠电容存储电荷的原理进行存储信息，需要再生（也称刷新）</p>
<h3 id="存储器与CPU的链接"><a href="#存储器与CPU的链接" class="headerlink" title="存储器与CPU的链接"></a>存储器与CPU的链接</h3><h4 id="存储容量的扩展"><a href="#存储容量的扩展" class="headerlink" title="* 存储容量的扩展"></a>* 存储容量的扩展</h4><ol>
<li>位扩展</li>
</ol>
<p>​		增加存储字长。相同地址线不同位数可以合体。两片1K×4位可以组成1K×8位</p>
<ol start="2">
<li>字扩展</li>
</ol>
<p>​	增加存储器字的数量。例如两片1K×8位可以组成2K×8位。</p>
<h4 id="存储器与CPU的连接"><a href="#存储器与CPU的连接" class="headerlink" title="存储器与CPU的连接"></a>存储器与CPU的连接</h4><p>​	注意篇与片之间的地址线，数据线，控制线的连接。</p>
<ol>
<li><p>地址线的连接</p>
<p> CPU地址线的低位与存储芯片的地址线相连。高位用于扩容或者片选</p>
</li>
<li><p>数据线的连接</p>
</li>
<li><p>读写命令线的连接</p>
</li>
<li><p>片选线的连接</p>
</li>
</ol>
<p>​	取决于片选控制端 CS非（低电平生效），同时其与访存控制信号MREQ非（低电平有效）有关，CPU需要时才会选择存储芯片。</p>
<ol start="5">
<li>合理选择存储芯片</li>
</ol>
<h3 id="存储器的检验"><a href="#存储器的检验" class="headerlink" title="* 存储器的检验"></a>* 存储器的检验</h3><ul>
<li><p>汉明码：具有一位纠错能力的的编码</p>
</li>
<li><p>编码最小距离</p>
<ul>
<li>在一种编码系统中任意两组合法代码之间的最小二进制位数差异。</li>
</ul>
</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">L-1=D+C        （D&gt;=C）</span><br></pre></td></tr></table></figure>

<ul>
<li>L(编码最小距离)</li>
<li>D(检测错误的位数)</li>
<li>C（纠正错误的位数）</li>
</ul>
<h3 id="提高访存速度的措施"><a href="#提高访存速度的措施" class="headerlink" title="提高访存速度的措施"></a>提高访存速度的措施</h3><h4 id="单体多字系统"><a href="#单体多字系统" class="headerlink" title="单体多字系统"></a>单体多字系统</h4><ul>
<li>使用前提：<ul>
<li>指令和数据必须在主存内连续存放。遇到转移指令或操作数不能连续存放则效果不明显。</li>
</ul>
</li>
<li>单体 W 字可以将带宽拓宽 W  倍</li>
</ul>
<h4 id="多体并行系统"><a href="#多体并行系统" class="headerlink" title="多体并行系统"></a>多体并行系统</h4><ul>
<li><p>高位交叉编址（顺序存储）</p>
<ul>
<li>特征：<ul>
<li>在体内顺序存放，不同的请求源可以同时访问不同的体</li>
<li>高位地址表示体号，低位地址表示体内地址</li>
</ul>
</li>
</ul>
</li>
<li><p>低位交叉编址（模M编址）</p>
<ul>
<li>特征：<ul>
<li>程序连续存放在相邻体中，有交叉存储之称。</li>
<li>低位地址表示体号，高位地址表示体内地址</li>
</ul>
</li>
</ul>
</li>
</ul>
<h4 id="求交叉存储和顺序存储的存储器带宽"><a href="#求交叉存储和顺序存储的存储器带宽" class="headerlink" title="* 求交叉存储和顺序存储的存储器带宽"></a>* 求交叉存储和顺序存储的存储器带宽</h4><h2 id="高速缓冲缓存器（Cache）"><a href="#高速缓冲缓存器（Cache）" class="headerlink" title="高速缓冲缓存器（Cache）"></a>高速缓冲缓存器（Cache）</h2><h3 id="基本概念-1"><a href="#基本概念-1" class="headerlink" title="基本概念"></a>基本概念</h3><h4 id="程序访问的局部性原理"><a href="#程序访问的局部性原理" class="headerlink" title="程序访问的局部性原理"></a>程序访问的局部性原理</h4><p>​	<strong>定义：</strong> 程序访问的局部性原理包括时间局部性和空间局部性。时间局部性是指在最近的未来要用到的信息，很可能是现在正在使用的信息，因为程序中存在循环。空间局部性是指在最近的未来要用到的信息，很可能与现在正在使用的信息在存储空间上是连续的，因为指令通常是顺序存放、顺序执行的，数据一般也是以向量、数组等形式簇聚地存储在一起的。</p>
<h1 id="杂记（待整理）"><a href="#杂记（待整理）" class="headerlink" title="杂记（待整理）"></a>杂记（待整理）</h1><blockquote>
<ol>
<li><strong>指令寄存器（IR）：</strong> 这是一个 CPU 内部的寄存器，用于存储当前正在执行的机器指令。当 CPU 从主存中取出指令并解码后，指令的操作码会被加载到指令寄存器中，CPU 根据其中的指令来执行相应的操作。</li>
<li><strong>乘法商寄存器（MQ）：</strong> 这是一个专门用于乘法运算的寄存器，通常在一些早期的 CPU 设计中出现。在执行乘法指令时，乘法器会将被乘数加载到 MQ 中，并将乘法的结果存储在 MQ 中，或者 MQ 用于存储商或余数。这样可以简化乘法运算的硬件设计。</li>
</ol>
</blockquote>
<blockquote>
<p><strong>PC 寄存器（Program Counter Register）</strong>，也称为指令指针寄存器（Instruction Pointer Register），是一种特殊的寄存器，用于存储当前正在执行的 CPU 指令的地址或下一条指令的地址。</p>
<p>PC 寄存器在 CPU 内部起着关键的作用，它指示了 CPU 下一步将要执行的指令的位置。当 CPU 执行完一条指令后，PC 寄存器会自动更新，指向下一条指令的地址，以便 CPU 继续执行。这个过程被称为指令流水线（Instruction Pipeline）。</p>
<p>PC 寄存器用于存储指令地址，控制程序的执行流程；而 IR 寄存器用于存储指令内容，辅助 CPU 解码和执行指令。</p>
</blockquote>
<blockquote>
<p>AGP（Accelerated Graphics Port）和PCI（Peripheral Component Interconnect）是两种计算机总线标准，用于连接计算机主板与外部设备。它们分别用于不同的目的：</p>
<ol>
<li><strong>AGP（加速图形端口）：</strong><ul>
<li>AGP 是一种专门用于连接图形显卡的高速总线标准。它最初被设计用于提供高性能图形渲染的支持，使图形处理单元（GPU）能够快速访问系统内存，从而加速图形处理和显示。</li>
<li>AGP 总线通常用于连接显卡到主板的插槽上，并提供了比传统的 PCI 总线更高的带宽和更低的延迟。这使得 AGP 接口在处理图形密集型任务时表现更好。</li>
</ul>
</li>
<li><strong>PCI（外围组件互连）：</strong><ul>
<li>PCI 是一种通用的、高性能的总线标准，用于连接各种外部设备，如网卡、声卡、扩展卡等。PCI 总线提供了一种标准化的接口，允许不同的设备在计算机系统中进行通信和交换数据。</li>
<li>PCI 总线通常用于连接各种外部设备到主板上的插槽上，例如 PCI 插槽、PCI Express（PCIe）插槽等。它是一种通用的、灵活的接口，适用于连接各种类型的设备。</li>
</ul>
</li>
</ol>
</blockquote>
<blockquote>
<p>微型计算机中控制总线提供的完整信息是( )。</p>
<ul>
<li>所有存储器和1&#x2F;0设备的时序信号和控制信号</li>
<li>来自I&#x2F;O设备和存储器的响应信号</li>
</ul>
</blockquote>
<blockquote>
<p>所谓的三总线结构的计算机中的“三总线”包含___。</p>
<p>A、I&#x2F;O总线B、<em>主存总线C、</em>DMA总线</p>
</blockquote>
]]></content>
      <categories>
        <category>硬件技术</category>
      </categories>
      <tags>
        <tag>笔记</tag>
        <tag>计算机组成原理</tag>
      </tags>
  </entry>
  <entry>
    <title>DC-DC Convert</title>
    <url>/2024/03/28/DC-DC-Convert/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>硬件技术</category>
      </categories>
      <tags>
        <tag>笔记</tag>
        <tag>电源</tag>
        <tag>DC-DC</tag>
      </tags>
  </entry>
  <entry>
    <title>DIFY 新闻助手</title>
    <url>/2025/07/17/DIFY-%E6%96%B0%E9%97%BB%E5%8A%A9%E6%89%8B/</url>
    <content><![CDATA[<h1 id="DIFY-新闻助手"><a href="#DIFY-新闻助手" class="headerlink" title="DIFY 新闻助手"></a>DIFY 新闻助手</h1><blockquote>
<p>老是被说跟不上互联网的各种信息节奏，被说落后、村里没通网之类的。现在利用这个简单的工具快速地了解世界在发生什么。<strong>世界不是由孤立的东西或孤立的过程构成的，而是由事物的联系和相互作用构成的</strong>。不能一心只读圣贤书。</p>
</blockquote>
<p>整体思路就是：模型+搜索引擎+时间API</p>
<p><img src="/../images/AI/3.png" alt="image-20250717084040052"></p>
<h1 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h1><hr>
<p><img src="/../images/AI/4.png" alt="image-20250717084340474"></p>
<blockquote>
<h3 id="新闻摘要"><a href="#新闻摘要" class="headerlink" title="新闻摘要"></a>新闻摘要</h3><h4 id="国内外要闻"><a href="#国内外要闻" class="headerlink" title="国内外要闻"></a>国内外要闻</h4><ul>
<li><strong>乌议会批准延长国家战时状态至11月5日</strong></li>
<li><strong>巴卫生部门称以军袭击加沙多地致70人死亡</strong></li>
<li><strong>第十一批国家组织药品集中带量采购工作启动</strong></li>
<li><strong>2025年黄河调水调沙流量全部入海</strong></li>
</ul>
<h4 id="政策与会议"><a href="#政策与会议" class="headerlink" title="政策与会议"></a>政策与会议</h4><ul>
<li><strong>国新办就2025年上半年工业和信息化发展情况举行新闻发布会</strong></li>
<li><strong>国新办举行“高质量完成’十四五’规划”系列主题新闻发布会（商务部）</strong></li>
<li><strong>国新办就2025年上半年农业农村经济运行情况举行新闻发布会</strong></li>
<li><strong>国新办举行“高质量完成’十四五’规划”系列主题新闻发布会（国家知识产权局）</strong></li>
</ul>
<h4 id="社会与科技"><a href="#社会与科技" class="headerlink" title="社会与科技"></a>社会与科技</h4><ul>
<li><strong>科学家证明果茶等饮料对牙齿造成不可逆转的伤害，合理安排饮用时间可保护牙齿</strong></li>
<li><strong>台内政部长称“风灾复原快”遭批评</strong></li>
<li><strong>加州华人夫妇豪宅养21娃为卖往中国赚钱</strong></li>
<li><strong>职业技能培训助力人才与产业“双向奔赴”</strong></li>
<li><strong>国家发展改革委新增下达100亿元以工代赈中央投资，将吸纳带动31万名重点群体就业增收</strong></li>
</ul>
<h4 id="体育"><a href="#体育" class="headerlink" title="体育"></a>体育</h4><ul>
<li><strong>中国女足获东亚杯亚军，更新换代太慢惹批评，舆论应给予主帅米利西奇更多耐心</strong></li>
</ul>
<h4 id="国际"><a href="#国际" class="headerlink" title="国际"></a>国际</h4><ul>
<li><strong>李强同澳大利亚总理阿尔巴尼斯共同出席第八届中澳工商界首席执行官圆桌会</strong></li>
<li><strong>李强同澳大利亚总理阿尔巴尼斯举行第十轮中澳总理年度会晤</strong></li>
<li><strong>美国总统唐纳德·特朗普向欧盟发出警告，如果欧盟针对美国威士忌加征关税的计划如期实施，美国将对从欧洲进口的酒类加征200%报复性关税</strong></li>
<li><strong>特朗普再次当选美国总统，习近平祝贺并希望中美关系在新任期内取得更大进展</strong></li>
</ul>
<h4 id="财经"><a href="#财经" class="headerlink" title="财经"></a>财经</h4><ul>
<li><strong>商务部新闻发言人就美取消相关对华经贸限制措施情况答记者问</strong></li>
<li><strong>中美经贸“链”仍十分密切</strong></li>
<li><strong>全球首创！2025世界人形机器人运动会能量传递活动启幕</strong></li>
</ul>
<h4 id="文化与生活"><a href="#文化与生活" class="headerlink" title="文化与生活"></a>文化与生活</h4><ul>
<li><strong>各地高校持续实施”宏志助航计划” 精准帮扶毕业生顺利就业</strong></li>
<li><strong>信息化时代，课堂教学还需要板书吗？</strong></li>
</ul>
<h4 id="彩票"><a href="#彩票" class="headerlink" title="彩票"></a>彩票</h4><ul>
<li><strong>2025080双色球开奖号码：03 07 08 10 16 19 + 05</strong></li>
<li><strong>2025079双色球开奖号码：08 11 14 15 30 32 + 05</strong></li>
</ul>
<h4 id="外交"><a href="#外交" class="headerlink" title="外交"></a>外交</h4><ul>
<li><strong>习近平祝贺特朗普再次当选美国总统，指出希望中美关系在美国总统新任期有一个好的开始</strong></li>
<li><strong>习近平向多哥新任领导人致贺电</strong></li>
</ul>
<h4 id="环境与气象"><a href="#环境与气象" class="headerlink" title="环境与气象"></a>环境与气象</h4><ul>
<li><strong>中国气象报社 版权所有</strong></li>
<li><strong>为党和国家事业发展凝聚…进2025&#x2F;07&#x2F;01</strong></li>
</ul>
<h4 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h4><ul>
<li><strong>商务部新闻发言人就加拿大政府关闭海康威视在加业务事答记者问</strong></li>
<li><strong>7月16日出版的第14期《求是》杂志发表习近平总书记重要文章 《坚定不移推进高水平对外开放》</strong></li>
</ul>
<hr>
<h3 id="科技新闻摘要"><a href="#科技新闻摘要" class="headerlink" title="科技新闻摘要"></a>科技新闻摘要</h3><h4 id="1-我国科学家在世界上首次绘制脑科学图谱"><a href="#1-我国科学家在世界上首次绘制脑科学图谱" class="headerlink" title="1. 我国科学家在世界上首次绘制脑科学图谱"></a>1. 我国科学家在世界上首次绘制脑科学图谱</h4><ul>
<li><strong>时间</strong>：5天前</li>
<li><strong>内容</strong>：我国科学家在世界上首次绘制了大脑图谱，大脑由约860亿个神经元和数万亿个神经连接组成，是人体最为复杂和精密的器官，负责调控神经系统。</li>
</ul>
<h4 id="2-地球系统科学的发展过程与全球变化国际大科学计划"><a href="#2-地球系统科学的发展过程与全球变化国际大科学计划" class="headerlink" title="2. 地球系统科学的发展过程与全球变化国际大科学计划"></a>2. 地球系统科学的发展过程与全球变化国际大科学计划</h4><ul>
<li><strong>作者</strong>：符淙斌</li>
<li><strong>内容</strong>：地球系统科学是当今世界最具挑战性的前沿科学领域之一。文章总结分析了近半个世纪以来，国际科学理事会（ICSU）在地球系统科学领域的发展和国际大科学计划。</li>
</ul>
<h4 id="3-世界化学工程大会暨第21届亚太化工联盟大会在中国召开"><a href="#3-世界化学工程大会暨第21届亚太化工联盟大会在中国召开" class="headerlink" title="3. 世界化学工程大会暨第21届亚太化工联盟大会在中国召开"></a>3. 世界化学工程大会暨第21届亚太化工联盟大会在中国召开</h4><ul>
<li><strong>时间</strong>：2025年7月14-18日</li>
<li><strong>地点</strong>：中国</li>
<li><strong>内容</strong>：这是全球化工领域历史悠久、学术领先的盛会，首次在中国召开。</li>
</ul>
<h4 id="4-羅佩凌博士的跨领域研究"><a href="#4-羅佩凌博士的跨领域研究" class="headerlink" title="4. 羅佩凌博士的跨领域研究"></a>4. 羅佩凌博士的跨领域研究</h4><ul>
<li><strong>人物</strong>：羅佩凌博士</li>
<li><strong>背景</strong>：物理背景出身，现研究跨足化学与光电，致力于通过基础物理化学研究探索大气科学的关键议题，展现了难得的跨领域深度与广度。</li>
</ul>
<h4 id="5-云南出土30万年前的木质工具"><a href="#5-云南出土30万年前的木质工具" class="headerlink" title="5. 云南出土30万年前的木质工具"></a>5. 云南出土30万年前的木质工具</h4><ul>
<li><strong>时间</strong>：2025年7月9日</li>
<li><strong>地点</strong>：云南</li>
<li><strong>内容</strong>：出土的30万年前木质工具保存完好，为古人类研究提供了重要线索。</li>
</ul>
<h4 id="6-双色球开奖号码"><a href="#6-双色球开奖号码" class="headerlink" title="6. 双色球开奖号码"></a>6. 双色球开奖号码</h4><ul>
<li><strong>日期</strong>：2025年7月10日</li>
<li><strong>内容</strong>：红球：06, 08, 16, 22, 29, 32；蓝球：16；开奖号：03 07 08 10 16 19 + 05。</li>
</ul>
<h4 id="7-马斯克发布AI女友"><a href="#7-马斯克发布AI女友" class="headerlink" title="7. 马斯克发布AI女友"></a>7. 马斯克发布AI女友</h4><ul>
<li><strong>时间</strong>：2025年7月10日</li>
<li><strong>内容</strong>：马斯克发布了一款AI女友应用，刚上线就因内容“少儿不宜”引发争议。</li>
</ul>
<h4 id="8-京东向骑手卖电动自行车"><a href="#8-京东向骑手卖电动自行车" class="headerlink" title="8. 京东向骑手卖电动自行车"></a>8. 京东向骑手卖电动自行车</h4><ul>
<li><strong>时间</strong>：2025年7月10日</li>
<li><strong>内容</strong>：京东推出电动自行车销售计划，骑手在90天内跑够3000单可全额返款。</li>
</ul>
<h4 id="9-华为8-8英寸小平板本季度发布"><a href="#9-华为8-8英寸小平板本季度发布" class="headerlink" title="9. 华为8.8英寸小平板本季度发布"></a>9. 华为8.8英寸小平板本季度发布</h4><ul>
<li><strong>时间</strong>：2025年7月10日</li>
<li><strong>内容</strong>：华为计划在本季度发布一款8.8英寸的小平板。</li>
</ul>
<h4 id="10-云南出土30万年前的木质工具"><a href="#10-云南出土30万年前的木质工具" class="headerlink" title="10. 云南出土30万年前的木质工具"></a>10. 云南出土30万年前的木质工具</h4><ul>
<li><strong>时间</strong>：2025年7月9日</li>
<li><strong>地点</strong>：云南</li>
<li><strong>内容</strong>：出土的30万年前木质工具保存完好，为古人类研究提供了重要线索。</li>
</ul>
<h4 id="11-AI通过心理实验"><a href="#11-AI通过心理实验" class="headerlink" title="11. AI通过心理实验"></a>11. AI通过心理实验</h4><ul>
<li><strong>时间</strong>：2025年7月9日</li>
<li><strong>内容</strong>：AI通过了心理实验，展示了人类的逻辑思维能力。</li>
</ul>
<h4 id="12-成人大脑暗藏“神经元再生”能力"><a href="#12-成人大脑暗藏“神经元再生”能力" class="headerlink" title="12. 成人大脑暗藏“神经元再生”能力"></a>12. 成人大脑暗藏“神经元再生”能力</h4><ul>
<li><strong>时间</strong>：2025年7月8日</li>
<li><strong>内容</strong>：科学研究发现，成人大脑中可能存在神经元再生的能力。</li>
</ul>
<h4 id="13-熬夜导致饮食变化"><a href="#13-熬夜导致饮食变化" class="headerlink" title="13. 熬夜导致饮食变化"></a>13. 熬夜导致饮食变化</h4><ul>
<li><strong>时间</strong>：2025年7月7日</li>
<li><strong>内容</strong>：研究发现，熬夜可能导致饮食习惯改变，增加食欲。</li>
</ul>
<h4 id="14-5万吨甲醇双燃料油船首制船在广州南沙命名"><a href="#14-5万吨甲醇双燃料油船首制船在广州南沙命名" class="headerlink" title="14. 5万吨甲醇双燃料油船首制船在广州南沙命名"></a>14. 5万吨甲醇双燃料油船首制船在广州南沙命名</h4><ul>
<li><strong>时间</strong>：2025年7月15日</li>
<li><strong>地点</strong>：广州南沙</li>
<li><strong>内容</strong>：首制船命名，标志着中国在新能源船舶领域的又一突破。</li>
</ul>
<h4 id="15-2025年全国科技工作者日活动安排"><a href="#15-2025年全国科技工作者日活动安排" class="headerlink" title="15. 2025年全国科技工作者日活动安排"></a>15. 2025年全国科技工作者日活动安排</h4><ul>
<li><strong>时间</strong>：2025年5月26日</li>
<li><strong>内容</strong>：中国科协宣传文化部部长谭华霖介绍了2025年全国科技工作者日的整体工作安排，聚焦弘扬科学家精神等核心内容。</li>
</ul>
<h4 id="16-四川成都世运会火炬传递活动"><a href="#16-四川成都世运会火炬传递活动" class="headerlink" title="16. 四川成都世运会火炬传递活动"></a>16. 四川成都世运会火炬传递活动</h4><ul>
<li><strong>时间</strong>：2025年7月26日</li>
<li><strong>地点</strong>：四川成都</li>
<li><strong>内容</strong>：火炬传递活动标志着世界运动会历史上首次进行火炬传递，设计上融合了古蜀文明与现代科技。</li>
</ul>
<h4 id="17-比特币市场控制权转移"><a href="#17-比特币市场控制权转移" class="headerlink" title="17. 比特币市场控制权转移"></a>17. 比特币市场控制权转移</h4><ul>
<li><strong>时间</strong>：2周前</li>
<li><strong>内容</strong>：比特币市场正在经历一场无声的控制权转移，重塑2.1万亿美元的市场格局。</li>
</ul>
<h4 id="18-理论攻坚推动基础研究高质量发展"><a href="#18-理论攻坚推动基础研究高质量发展" class="headerlink" title="18. 理论攻坚推动基础研究高质量发展"></a>18. 理论攻坚推动基础研究高质量发展</h4><ul>
<li><strong>时间</strong>：近期</li>
<li><strong>人物</strong>：周善贵</li>
<li><strong>内容</strong>：周善贵在理论研究方面取得突破，推动了基础研究的高质量发展。</li>
</ul>
<h4 id="19-《科学世界》杂志创刊400期"><a href="#19-《科学世界》杂志创刊400期" class="headerlink" title="19. 《科学世界》杂志创刊400期"></a>19. 《科学世界》杂志创刊400期</h4><ul>
<li><strong>时间</strong>：2025年</li>
<li><strong>内容</strong>：《科学世界》杂志迎来创刊400期，读者纷纷送上祝福和分享结缘故事。</li>
</ul>
<h4 id="20-量子材料导电状态切换技术"><a href="#20-量子材料导电状态切换技术" class="headerlink" title="20. 量子材料导电状态切换技术"></a>20. 量子材料导电状态切换技术</h4><ul>
<li><strong>时间</strong>：2025年7月2日</li>
<li><strong>内容</strong>：科学家开发出“热淬火”技术，能够切换量子材料的导电状态。</li>
</ul>
<hr>
<h1 id="2025年7月信息技术新闻总结"><a href="#2025年7月信息技术新闻总结" class="headerlink" title="2025年7月信息技术新闻总结"></a>2025年7月信息技术新闻总结</h1><h2 id="科技动态"><a href="#科技动态" class="headerlink" title="科技动态"></a>科技动态</h2><h3 id="1-科技曝光"><a href="#1-科技曝光" class="headerlink" title="1. 科技曝光"></a>1. 科技曝光</h3><ul>
<li><p>双脉冲发动机曾被美国反向助攻</p>
<p>  科技媒体曝光，美国曾对双脉冲发动机技术提供反向支持。</p>
<ul>
<li><em>来源</em>：Daily</li>
<li><em>时间</em>：2025-07-07 10:05:24</li>
</ul>
</li>
</ul>
<h3 id="2-政府采购"><a href="#2-政府采购" class="headerlink" title="2. 政府采购"></a>2. 政府采购</h3><ul>
<li><p>2025政府采购塑料管道十大品牌等榜单在京发布</p>
<p>  北京发布了2025年政府采购塑料管道十大品牌榜单。</p>
<ul>
<li><em>来源</em>：Daily</li>
<li><em>时间</em>：2025-07-07 10:04:30</li>
</ul>
</li>
</ul>
<h3 id="3-科技资讯AI速递"><a href="#3-科技资讯AI速递" class="headerlink" title="3. 科技资讯AI速递"></a>3. 科技资讯AI速递</h3><ul>
<li><p>昨夜今晨科技热点一览</p>
<p>  汇总了昨夜今晨的科技热点新闻。</p>
<ul>
<li><em>来源</em>：新浪AI</li>
<li><em>时间</em>：2025-07-17 06:34</li>
</ul>
</li>
</ul>
<h3 id="4-SpaceX与xAI"><a href="#4-SpaceX与xAI" class="headerlink" title="4. SpaceX与xAI"></a>4. SpaceX与xAI</h3><ul>
<li><strong>SpaceX被曝拟出售内部股份，估值或达4000亿美元</strong><br>  SpaceX计划出售内部股份，估值可能达到4000亿美元。<ul>
<li><em>来源</em>：全球科技早参</li>
<li><em>时间</em>：2025-07-08 07:54:30</li>
</ul>
</li>
<li><strong>SpaceX承诺向xAI注资20亿美元</strong><br>  SpaceX向Elon Musk的AI公司xAI注资20亿美元。<ul>
<li><em>来源</em>：华尔街日报</li>
<li><em>时间</em>：2025-07-13</li>
</ul>
</li>
</ul>
<h3 id="5-苹果AI“失血”"><a href="#5-苹果AI“失血”" class="headerlink" title="5. 苹果AI“失血”"></a>5. 苹果AI“失血”</h3><ul>
<li><p>华人科学家被扎克伯格挖走</p>
<p>  苹果AI团队的一位华人科学家被扎克伯格以数千万美元年薪挖走。</p>
<ul>
<li><em>来源</em>：全球科技早参</li>
<li><em>时间</em>：2025-07-08</li>
</ul>
</li>
</ul>
<h3 id="6-中国-中亚合作"><a href="#6-中国-中亚合作" class="headerlink" title="6. 中国-中亚合作"></a>6. 中国-中亚合作</h3><ul>
<li><p>国家主席习近平同中亚五国元首见证合作揭牌</p>
<p>  习近平主席同中亚五国元首见证中国-中亚合作中心和贸易畅通合作平台揭牌。</p>
<ul>
<li><em>来源</em>：新华社</li>
<li><em>时间</em>：2025-07-11</li>
</ul>
</li>
</ul>
<h3 id="7-北京市加快人工智能赋能科学研究"><a href="#7-北京市加快人工智能赋能科学研究" class="headerlink" title="7. 北京市加快人工智能赋能科学研究"></a>7. 北京市加快人工智能赋能科学研究</h3><ul>
<li><p>《北京市加快人工智能赋能科学研究高质量发展行动计划（2025—2027年）》发布</p>
<p>  北京市发布未来三年发展科学智能的行动计划。</p>
<ul>
<li><em>来源</em>：北京市政府</li>
<li><em>时间</em>：2025-07-11</li>
</ul>
</li>
</ul>
<h2 id="产业新闻"><a href="#产业新闻" class="headerlink" title="产业新闻"></a>产业新闻</h2><h3 id="1-2025世界人工智能大会"><a href="#1-2025世界人工智能大会" class="headerlink" title="1. 2025世界人工智能大会"></a>1. 2025世界人工智能大会</h3><ul>
<li><p>2025世界人工智能大会暨人工智能全球治理高级别会议新闻发布会</p>
<p>  上海市政府召开新闻发布会，介绍2025世界人工智能大会的相关情况。</p>
<ul>
<li><em>来源</em>：上海市政府</li>
<li><em>时间</em>：2025-07-10</li>
</ul>
</li>
</ul>
<h3 id="2-2025年大阪世博会"><a href="#2-2025年大阪世博会" class="headerlink" title="2. 2025年大阪世博会"></a>2. 2025年大阪世博会</h3><ul>
<li><p>“中国馆杭州日”系列活动举行</p>
<p>  杭州在大阪世博会中国馆举办“科技+文化”系列活动。</p>
<ul>
<li><em>来源</em>：杭州政府</li>
<li><em>时间</em>：2025-07-13</li>
</ul>
</li>
</ul>
<h3 id="3-中国信通院发布综合算力评价报告"><a href="#3-中国信通院发布综合算力评价报告" class="headerlink" title="3. 中国信通院发布综合算力评价报告"></a>3. 中国信通院发布综合算力评价报告</h3><ul>
<li><p>《综合算力评价研究报告（2024年）》发布</p>
<p>  中国信通院发布《综合算力评价研究报告（2024年）》，系统分析了我国各省级行政区的综合算力。</p>
<ul>
<li><em>来源</em>：中国信通院</li>
<li><em>时间</em>：2025-01-02</li>
</ul>
</li>
</ul>
<h3 id="4-芯片与未来产业"><a href="#4-芯片与未来产业" class="headerlink" title="4. 芯片与未来产业"></a>4. 芯片与未来产业</h3><ul>
<li><p>芯片的性能指标、创新能力与迭代方向引发全球关注</p>
<p>  随着未来产业的发展，芯片技术成为全球科技创新和产业发展的热点。</p>
<ul>
<li><em>来源</em>：科技媒体</li>
<li><em>时间</em>：2025-07-16</li>
</ul>
</li>
</ul>
<h3 id="5-电池技术"><a href="#5-电池技术" class="headerlink" title="5. 电池技术"></a>5. 电池技术</h3><ul>
<li><p>特斯拉推出由xAI开发的人工智能助手Grok</p>
<p>  特斯拉向符合条件的车辆推送由xAI开发的人工智能助手Grok。</p>
<ul>
<li><em>来源</em>：特斯拉</li>
<li><em>时间</em>：2025-07-13</li>
</ul>
</li>
</ul>
<h2 id="其他新闻"><a href="#其他新闻" class="headerlink" title="其他新闻"></a>其他新闻</h2><h3 id="1-牙齿健康"><a href="#1-牙齿健康" class="headerlink" title="1. 牙齿健康"></a>1. 牙齿健康</h3><ul>
<li><p>科学家证明果茶等饮料对牙齿造成不可逆转的伤害</p>
<p>  研究发现，合理安排饮用时间可以更好地保护牙齿。</p>
<ul>
<li><em>来源</em>：科学杂志</li>
<li><em>时间</em>：2025-07-16</li>
</ul>
</li>
</ul>
<h3 id="2-脑机接口"><a href="#2-脑机接口" class="headerlink" title="2. 脑机接口"></a>2. 脑机接口</h3><ul>
<li><p>脑机接口技术快速腾飞</p>
<p>  脑机接口技术正在逐步实现科幻片《黑客帝国》中的奇思妙想。</p>
<ul>
<li><em>来源</em>：科技媒体</li>
<li><em>时间</em>：2025-07-16</li>
</ul>
</li>
</ul>
<h3 id="3-新冠疫情"><a href="#3-新冠疫情" class="headerlink" title="3. 新冠疫情"></a>3. 新冠疫情</h3><ul>
<li><p>国新办就2025年上半年工业和信息化发展情况举行新闻发布会</p>
<p>  国新办召开新闻发布会，介绍2025年上半年工业和信息化发展情况。</p>
<ul>
<li><em>来源</em>：国新办</li>
<li><em>时间</em>：2025-07-18</li>
</ul>
</li>
</ul>
<h3 id="4-特朗普关税政策"><a href="#4-特朗普关税政策" class="headerlink" title="4. 特朗普关税政策"></a>4. 特朗普关税政策</h3><ul>
<li><p>特朗普宣布对14国关税税率，拟将”对等关税”暂缓期延至8月1日</p>
<p>  特朗普宣布对14国的关税税率，并将“对等关税”暂缓期延长至8月1日。</p>
<ul>
<li><em>来源</em>：每经早参</li>
<li><em>时间</em>：2025-07-08</li>
</ul>
</li>
</ul>
<h3 id="5-金融新闻"><a href="#5-金融新闻" class="headerlink" title="5. 金融新闻"></a>5. 金融新闻</h3><ul>
<li><p>央行连续8个月增持黄金</p>
<p>  中国人民银行连续8个月增持黄金。</p>
<ul>
<li><em>来源</em>：每经早参</li>
<li><em>时间</em>：2025-07-08</li>
</ul>
</li>
</ul>
<h3 id="6-教育新闻"><a href="#6-教育新闻" class="headerlink" title="6. 教育新闻"></a>6. 教育新闻</h3><ul>
<li><strong>阿里巴巴高德地图推出国内首个面向海外用户的多语言地图</strong><br>  阿里巴巴高德地图推出多语言地图，面向海外用户。<ul>
<li><em>来源</em>：阿里巴巴</li>
<li><em>时间</em>：2025-07-10</li>
</ul>
</li>
<li><strong>上海交大联合阿里公益完成第16期乡村教师培训</strong><br>  上海交通大学联合阿里公益完成第16期乡村教师培训。<ul>
<li><em>来源</em>：上海交大</li>
<li><em>时间</em>：2025-07-10</li>
</ul>
</li>
</ul>
<h3 id="7-环保新闻"><a href="#7-环保新闻" class="headerlink" title="7. 环保新闻"></a>7. 环保新闻</h3><ul>
<li><p>中山加快打造新时代现代产业集群“十大舰队”</p>
<p>  中山市加快构建“4+6”现代产业集群发展格局，集中优势资源力量培育壮大新能源、生物医药与健康、新一代信息技术、高端装备等产业。</p>
<ul>
<li><em>来源</em>：中山市政府</li>
<li><em>时间</em>：2025-06-30</li>
</ul>
</li>
</ul>
<h3 id="8-互联网新闻"><a href="#8-互联网新闻" class="headerlink" title="8. 互联网新闻"></a>8. 互联网新闻</h3><ul>
<li><p>Meta收购Play AI</p>
<p>  Meta收购了专注于利用人工智能生成逼真语音的初创公司Play AI。</p>
<ul>
<li><em>来源</em>：彭博社</li>
<li><em>时间</em>：2025-07-13</li>
</ul>
</li>
</ul>
<h3 id="9-汽车新闻"><a href="#9-汽车新闻" class="headerlink" title="9. 汽车新闻"></a>9. 汽车新闻</h3><ul>
<li><p>蔚来、小鹏背水一战</p>
<p>  蔚来和小鹏在2025年面临严峻挑战，需在市场中突围。</p>
<ul>
<li><em>来源</em>：汽车媒体</li>
<li><em>时间</em>：2025-03-25</li>
</ul>
</li>
</ul>
<h3 id="10-科研新闻"><a href="#10-科研新闻" class="headerlink" title="10. 科研新闻"></a>10. 科研新闻</h3><ul>
<li><p>“发现自旋超固态巨磁卡效应与极低温制冷新机制”入选2024年度“中国科学十大进展”</p>
<p>  该研究入选2024年度“中国科学十大进展”。</p>
<ul>
<li><em>来源</em>：中国科学院</li>
<li><em>时间</em>：2025-03-20</li>
</ul>
</li>
</ul>
<p>以上是2025年7月信息技术新闻的总结。希望对您有所帮助！</p>
</blockquote>
]]></content>
      <categories>
        <category>软件技术</category>
      </categories>
      <tags>
        <tag>笔记</tag>
        <tag>AI</tag>
        <tag>dify</tag>
        <tag>bge-m3</tag>
        <tag>知识库</tag>
        <tag>本地部署</tag>
        <tag>客制化AI</tag>
      </tags>
  </entry>
  <entry>
    <title>Data Structure and Algorithm</title>
    <url>/2023/11/12/Data-Structure-and-Algorithm/</url>
    <content><![CDATA[<h1 id="Start"><a href="#Start" class="headerlink" title="Start"></a>Start</h1><h2 id="树"><a href="#树" class="headerlink" title="树"></a>树</h2><h3 id="哈夫曼树（最优二叉树）"><a href="#哈夫曼树（最优二叉树）" class="headerlink" title="哈夫曼树（最优二叉树）"></a>哈夫曼树（最优二叉树）</h3><blockquote>
<p>​		哈夫曼算法：</p>
<ol>
<li>构造 n 棵二叉树森林，每一个都是带权值的根节点。</li>
<li>选择权值最小的两棵树作为左右子树，其根节点的权值为左右子树权值之和。</li>
<li>删除这两棵树，将新的树加入森林。</li>
<li>重复操作到只剩下一棵树为止。</li>
</ol>
</blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">*  基于结构体数组的哈曼树</span></span><br><span class="line"><span class="comment">*  C++</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">double</span> DataType; <span class="comment">//结点权值的数据类型</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">HTNode</span> <span class="comment">//单个结点的信息</span></span><br><span class="line">&#123;</span><br><span class="line">  DataType weight; <span class="comment">//权值</span></span><br><span class="line">  <span class="type">int</span> parent; <span class="comment">//父节点</span></span><br><span class="line">  <span class="type">int</span> lc, rc; <span class="comment">//左右孩子</span></span><br><span class="line">&#125;*HuffmanTree;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">char</span> **HuffmanCode; <span class="comment">//字符指针数组中存储的元素类型</span></span><br><span class="line">              <span class="comment">//用于存储哈夫曼编码</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//在下标为1到i-1的范围找到权值最小的两个值的下标，其中s1的权值小于s2的权值</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Select</span><span class="params">(HuffmanTree&amp; HT, <span class="type">int</span> n, <span class="type">int</span>&amp; s1, <span class="type">int</span>&amp; s2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="type">int</span> min;</span><br><span class="line">  <span class="comment">//找第一个最小值</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> (HT[i].parent == <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">      min = i;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> i = min + <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> (HT[i].parent == <span class="number">0</span> &amp;&amp; HT[i].weight &lt; HT[min].weight)</span><br><span class="line">      min = i;</span><br><span class="line">  &#125;</span><br><span class="line">  s1 = min; <span class="comment">//第一个最小值给s1</span></span><br><span class="line">  <span class="comment">//找第二个最小值</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> (HT[i].parent == <span class="number">0</span> &amp;&amp; i != s1)</span><br><span class="line">    &#123;</span><br><span class="line">      min = i;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> i = min + <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> (HT[i].parent == <span class="number">0</span> &amp;&amp; HT[i].weight &lt; HT[min].weight&amp;&amp;i != s1)</span><br><span class="line">      min = i;</span><br><span class="line">  &#125;</span><br><span class="line">  s2 = min; <span class="comment">//第二个最小值给s2</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//构建哈夫曼树</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">CreateHuff</span><span class="params">(HuffmanTree&amp; HT, DataType* w, <span class="type">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="type">int</span> m = <span class="number">2</span> * n - <span class="number">1</span>; <span class="comment">//哈夫曼树总结点数</span></span><br><span class="line">    </span><br><span class="line">  HT = (HuffmanTree)<span class="built_in">calloc</span>(m + <span class="number">1</span>, <span class="built_in">sizeof</span>(HTNode)); <span class="comment">//开m+1个HTNode，因为下标为0的HTNode不存储数据</span></span><br><span class="line">    </span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">  &#123;</span><br><span class="line">    HT[i].weight = w[i - <span class="number">1</span>]; <span class="comment">//赋权值给n个叶子结点</span></span><br><span class="line">  &#125;</span><br><span class="line">    </span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> i = n + <span class="number">1</span>; i &lt;= m; i++) <span class="comment">//构建哈夫曼树</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="comment">//选择权值最小的s1和s2，生成它们的父结点</span></span><br><span class="line">    <span class="type">int</span> s1, s2;</span><br><span class="line">    <span class="built_in">Select</span>(HT, i - <span class="number">1</span>, s1, s2); <span class="comment">//在下标为1到i-1的范围找到权值最小的两个值的下标，其中s1的权值小于s2的权值</span></span><br><span class="line">    HT[i].weight = HT[s1].weight + HT[s2].weight; <span class="comment">//i的权重是s1和s2的权重之和</span></span><br><span class="line">    HT[s1].parent = i; <span class="comment">//s1的父亲是i</span></span><br><span class="line">    HT[s2].parent = i; <span class="comment">//s2的父亲是i</span></span><br><span class="line">    HT[i].lc = s1; <span class="comment">//左孩子是s1</span></span><br><span class="line">    HT[i].rc = s2; <span class="comment">//右孩子是s2</span></span><br><span class="line">  &#125;</span><br><span class="line">    </span><br><span class="line">  <span class="comment">//打印哈夫曼树中各结点之间的关系</span></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;哈夫曼树为:&gt;\n&quot;</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;下标   权值     父结点   左孩子   右孩子\n&quot;</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;0                                  \n&quot;</span>);</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; i++)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%-4d   %-6.2lf   %-6d   %-6d   %-6d\n&quot;</span>, i, HT[i].weight, HT[i].parent, HT[i].lc, HT[i].rc);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//生成哈夫曼编码</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">HuffCoding</span><span class="params">(HuffmanTree&amp; HT, HuffmanCode&amp; HC, <span class="type">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  HC = (HuffmanCode)<span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(<span class="type">char</span>*)*(n + <span class="number">1</span>)); <span class="comment">//开n+1个空间，因为下标为0的空间不用</span></span><br><span class="line">  <span class="type">char</span>* code = (<span class="type">char</span>*)<span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(<span class="type">char</span>)*n); <span class="comment">//辅助空间，编码最长为n(最长时，前n-1个用于存储数据，最后1个用于存放&#x27;\0&#x27;)</span></span><br><span class="line">  code[n - <span class="number">1</span>] = <span class="string">&#x27;\0&#x27;</span>; <span class="comment">//辅助空间最后一个位置为&#x27;\0&#x27;</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="type">int</span> start = n - <span class="number">1</span>; <span class="comment">//每次生成数据的哈夫曼编码之前，先将start指针指向&#x27;\0&#x27;</span></span><br><span class="line">    <span class="type">int</span> c = i; <span class="comment">//正在进行的第i个数据的编码</span></span><br><span class="line">    <span class="type">int</span> p = HT[c].parent; <span class="comment">//找到该数据的父结点</span></span><br><span class="line">    <span class="keyword">while</span> (p) <span class="comment">//直到父结点为0，即父结点为根结点时，停止</span></span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> (HT[p].lc == c) <span class="comment">//如果该结点是其父结点的左孩子，则编码为0，否则为1</span></span><br><span class="line">        code[--start] = <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">        code[--start] = <span class="string">&#x27;1&#x27;</span>;</span><br><span class="line">      c = p; <span class="comment">//继续往上进行编码</span></span><br><span class="line">      p = HT[c].parent; <span class="comment">//c的父结点</span></span><br><span class="line">    &#125;</span><br><span class="line">    HC[i] = (<span class="type">char</span>*)<span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(<span class="type">char</span>)*(n - start)); <span class="comment">//开辟用于存储编码的内存空间</span></span><br><span class="line">    <span class="built_in">strcpy</span>(HC[i], &amp;code[start]); <span class="comment">//将编码拷贝到字符指针数组中的相应位置</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">free</span>(code); <span class="comment">//释放辅助空间</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//主函数</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="type">int</span> n = <span class="number">0</span>;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;请输入数据个数:&gt;&quot;</span>);</span><br><span class="line">  <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">  DataType* w = (DataType*)<span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(DataType)*n);</span><br><span class="line">  <span class="keyword">if</span> (w == <span class="literal">NULL</span>)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;malloc fail\n&quot;</span>);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;请输入数据:&gt;&quot;</span>);</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%lf&quot;</span>, &amp;w[i]);</span><br><span class="line">  &#125;</span><br><span class="line">  HuffmanTree HT;</span><br><span class="line">  <span class="built_in">CreateHuff</span>(HT, w, n); <span class="comment">//构建哈夫曼树</span></span><br><span class="line"></span><br><span class="line">  HuffmanCode HC;</span><br><span class="line">  <span class="built_in">HuffCoding</span>(HT, HC, n); <span class="comment">//构建哈夫曼编码</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) <span class="comment">//打印哈夫曼编码</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;数据%.2lf的编码为:%s\n&quot;</span>, HT[i].weight, HC[i]);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">free</span>(w);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="二叉树：求树的高度"><a href="#二叉树：求树的高度" class="headerlink" title="二叉树：求树的高度"></a>二叉树：求树的高度</h3><ol>
<li>递归</li>
</ol>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">使用递归</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">GetHeight</span><span class="params">(BinTree BT)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!BT) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> max(GetHeight(BT-&gt;Left),GetHeight(BT-&gt;Right))+<span class="number">1</span>;</span><br><span class="line">&#125; </span><br><span class="line"><span class="type">int</span> <span class="title function_">max</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span>&#123;<span class="keyword">return</span> a &gt; b ? a : b;&#125;</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>使用队列</li>
</ol>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//使用队列</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">GetHeight</span><span class="params">( BinTree BT )</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>(BT==<span class="literal">NULL</span>)<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    BinTree arr[<span class="number">100</span>];</span><br><span class="line">    BinTree tmpFront;</span><br><span class="line">    <span class="type">int</span> front=<span class="number">0</span>,rear=<span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> h=<span class="number">0</span>;</span><br><span class="line">    arr[rear++]=BT;</span><br><span class="line">    <span class="type">int</span> count=<span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> nextCount=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(front!=rear)&#123;</span><br><span class="line">        h++;</span><br><span class="line">        count=nextCount;</span><br><span class="line">        nextCount=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(count--)&#123;</span><br><span class="line">            tmpFront=arr[front++];</span><br><span class="line">            <span class="keyword">if</span>(tmpFront-&gt;Left)&#123;</span><br><span class="line">                arr[rear++]=tmpFront-&gt;Left;</span><br><span class="line">                nextCount++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(tmpFront-&gt;Right)&#123;</span><br><span class="line">                arr[rear++]=tmpFront-&gt;Right;</span><br><span class="line">                nextCount++;</span><br><span class="line">            &#125; </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> h;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="二叉树：顺序存储"><a href="#二叉树：顺序存储" class="headerlink" title="二叉树：顺序存储"></a>二叉树：顺序存储</h3><p>​	存储按照完全二叉树来（遇到空节点则 赋值 isEmpty 为 true）</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> MaxSize 100</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">TreeNode</span>&#123;</span></span><br><span class="line">   ElemType value; <span class="comment">//结点中的数据元素</span></span><br><span class="line">   <span class="type">bool</span> isEmpty;   <span class="comment">//结点是否为空</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">   TreeNode t[MaxSize];</span><br><span class="line">   <span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">0</span>; i&lt;MaxSize; i++)&#123;</span><br><span class="line">      t[i].isEmpty = <span class="literal">true</span>;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="二叉树的创建"><a href="#二叉树的创建" class="headerlink" title="二叉树的创建"></a>二叉树的创建</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//输入:ABC##DE#G##F###</span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">creat</span><span class="params">(BiTree *T)</span>  <span class="comment">//创建二叉树</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">char</span> ch;</span><br><span class="line">  <span class="built_in">scanf</span>(<span class="string">&quot;%c&quot;</span>,&amp;ch);</span><br><span class="line">  <span class="keyword">if</span>(ch==<span class="string">&#x27;#&#x27;</span>)		<span class="comment">//判断该字符ch是不是为&#x27;#&#x27;,意思是该节点是不是空的</span></span><br><span class="line">    *T=<span class="literal">NULL</span>;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    *T=(BiTree)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(BiTNode));	<span class="comment">//为结点T申请空间</span></span><br><span class="line">    (*T)-&gt;data=ch;		<span class="comment">//将ch的值赋给(*T)-&gt;data</span></span><br><span class="line">    creat(&amp;(*T)-&gt;lchild);</span><br><span class="line">    creat(&amp;(*T)-&gt;rchild);</span><br><span class="line">  &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h3 id="二叉树的遍历"><a href="#二叉树的遍历" class="headerlink" title="二叉树的遍历"></a>二叉树的遍历</h3><ul>
<li><strong>二叉树：先序遍历</strong></li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">PreOrder</span><span class="params">(BiTree T)</span>&#123;</span><br><span class="line">   <span class="keyword">if</span>(T!=<span class="literal">NULL</span>)&#123;</span><br><span class="line">      visit(T);                 <span class="comment">//访问根结点</span></span><br><span class="line">       </span><br><span class="line">      PreOrder(T-&gt;lchild);      <span class="comment">//递归遍历左子树</span></span><br><span class="line">      PreOrder(T-&gt;rchild);      <span class="comment">//递归遍历右子树</span></span><br><span class="line">   &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;        <span class="comment">//遍历失败，根节点空</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;     </span><br></pre></td></tr></table></figure>

<p><strong>二叉树：中序遍历</strong></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">ShowZhongXu</span><span class="params">(BitTree T)</span>      <span class="comment">//		先序遍历二叉树</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">if</span>(T==<span class="literal">NULL</span>)						<span class="comment">//	递归中遇到NULL，返回上一层节点</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> &#123;</span><br><span class="line">  ShowZhongXu(T-&gt;lchild);			<span class="comment">//	递归遍历左子树</span></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,T-&gt;data);</span><br><span class="line">  ShowZhongXu(T-&gt;rchild);			<span class="comment">//	递归遍历右子树</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>二叉树：后序遍历</strong></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">ShowZhongXu</span><span class="params">(BitTree T)</span>      <span class="comment">//		先序遍历二叉树</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">if</span>(T==<span class="literal">NULL</span>)						<span class="comment">//	递归中遇到NULL，返回上一层节点</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;					<span class="comment">// 空根</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> &#123;</span><br><span class="line">  ShowZhongXu(T-&gt;lchild);			<span class="comment">//	递归遍历左子树</span></span><br><span class="line">  ShowZhongXu(T-&gt;rchild);			<span class="comment">//	递归遍历右子树</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,T-&gt;data);      </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>二叉树：层序遍历</strong></li>
</ul>
<ul>
<li>使用队列</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">LevelOrder</span><span class="params">(BiTree T)</span>&#123;</span><br><span class="line">   LinkQueue Q;</span><br><span class="line">   InitQueue (Q);          <span class="comment">//初始化辅助队列</span></span><br><span class="line">    </span><br><span class="line">   BiTree p;</span><br><span class="line">   EnQueue(Q,T);           <span class="comment">//将根节点入队</span></span><br><span class="line">    </span><br><span class="line">   <span class="keyword">while</span>(!isEmpty(Q))&#123;     <span class="comment">//队列不空则循环</span></span><br><span class="line">      DeQueue(Q,p);        <span class="comment">//队头结点出队</span></span><br><span class="line">      visit(p);            <span class="comment">//访问出队结点</span></span><br><span class="line">      <span class="keyword">if</span>(p-&gt;lchild != <span class="literal">NULL</span>)</span><br><span class="line">         EnQueue(Q,p-&gt;lchild);   <span class="comment">//左孩子入队</span></span><br><span class="line">      <span class="keyword">if</span>(p-&gt;rchild != <span class="literal">NULL</span>)</span><br><span class="line">         EnQueue(Q,p-&gt;rchild);   <span class="comment">//右孩子入队</span></span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="二叉树交换左右孩子"><a href="#二叉树交换左右孩子" class="headerlink" title="二叉树交换左右孩子"></a>二叉树交换左右孩子</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//类似于先序遍历</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">swap</span><span class="params">(BiTree T)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">if</span>(T!=<span class="literal">NULL</span>)</span><br><span class="line">  &#123;</span><br><span class="line">    BiTNode *m=T-&gt;lchild;<span class="comment">/*这三行类似于&quot;打擂台法&quot;*/</span></span><br><span class="line">    T-&gt;lchild=T-&gt;rchild;</span><br><span class="line">    T-&gt;rchild=m;			</span><br><span class="line">    swap(T-&gt;lchild);</span><br><span class="line">    swap(T-&gt;rchild);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="求二叉树高度-深度"><a href="#求二叉树高度-深度" class="headerlink" title="求二叉树高度(深度)"></a>求二叉树高度(深度)</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">Depth</span><span class="params">( BiTree T )</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> countl =<span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> countr =<span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> max;</span><br><span class="line">    <span class="keyword">if</span>(T==<span class="literal">NULL</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">       </span><br><span class="line">        countl=Depth( T-&gt;lchild );</span><br><span class="line">        countr=Depth( T-&gt;rchild );</span><br><span class="line">        max=countl&gt;countr? countl:countr;</span><br><span class="line">        <span class="keyword">return</span> max+<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="线索二叉树"><a href="#线索二叉树" class="headerlink" title="线索二叉树"></a>线索二叉树</h3><blockquote>
<p>将空的指针域用以指向前驱后继节点。</p>
<p>遵循：</p>
<ul>
<li>ltag&#x3D;&#x3D;0，指向左孩子；ltag&#x3D;&#x3D;1，指向前驱结点</li>
<li>rtag&#x3D;&#x3D;0，指向右孩子；rtag&#x3D;&#x3D;1，指向后继结点</li>
</ul>
</blockquote>
<pre><code>    1. 二叉树的线索化
</code></pre>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//中序线索化</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">inOrderThreadTree</span><span class="params">(Node* node)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="comment">//如果当前结点为NULL 直接返回</span></span><br><span class="line">  <span class="keyword">if</span> (node == <span class="literal">NULL</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//先处理左子树</span></span><br><span class="line">  inOrderThreadTree(node-&gt;left_node);</span><br><span class="line">  <span class="keyword">if</span> (node-&gt;left_node == <span class="literal">NULL</span>)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="comment">//设置前驱结点</span></span><br><span class="line">    node-&gt;left_type = <span class="number">1</span>;</span><br><span class="line">    node-&gt;left_node = pre;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//如果结点的右子节点为NULL 处理前驱的右指针</span></span><br><span class="line">  <span class="keyword">if</span> (pre !=<span class="literal">NULL</span> &amp;&amp; pre-&gt;right_node == <span class="literal">NULL</span>)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="comment">//设置后继</span></span><br><span class="line">    pre-&gt;right_node = node;</span><br><span class="line">    pre-&gt;right_type = <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//每处理一个节点 当前结点是下一个节点的前驱</span></span><br><span class="line">  pre = node;</span><br><span class="line">  <span class="comment">//最后处理右子树</span></span><br><span class="line">  inOrderThreadTree(node-&gt;right_node);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ol start="2">
<li>中序遍历线索二叉树</li>
</ol>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">inOrderTraverse</span><span class="params">(Node* root)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="comment">//从根节点开始先找到最左边</span></span><br><span class="line">  <span class="keyword">if</span> (root == <span class="literal">NULL</span>)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  Node* temp = root;</span><br><span class="line">  <span class="comment">//先找到最左边结点 然后根据线索化直接向右遍历</span></span><br><span class="line">  <span class="keyword">while</span> (temp != <span class="literal">NULL</span> &amp;&amp; temp-&gt;left_type == <span class="number">0</span>)</span><br><span class="line">  &#123;</span><br><span class="line">    temp = temp-&gt;left_node;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">while</span> (temp != <span class="literal">NULL</span>)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="comment">//输出</span></span><br><span class="line">    temp = temp-&gt;right_node;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="二叉搜索树"><a href="#二叉搜索树" class="headerlink" title="二叉搜索树"></a>二叉搜索树</h3><p><strong>线索二叉树操作集合</strong></p>
<ol>
<li>结构体</li>
</ol>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">TNode</span> *<span class="title">Position</span>;</span></span><br><span class="line"><span class="keyword">typedef</span> Position BinTree;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">TNode</span>&#123;</span></span><br><span class="line">    ElementType Data;</span><br><span class="line">    BinTree Left;</span><br><span class="line">    BinTree Right;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>主函数</li>
</ol>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">int</span> ElementType;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">TNode</span> *<span class="title">Position</span>;</span></span><br><span class="line"><span class="keyword">typedef</span> Position BinTree;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">TNode</span>&#123;</span></span><br><span class="line">    ElementType Data;</span><br><span class="line">    BinTree Left;</span><br><span class="line">    BinTree Right;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">PreorderTraversal</span><span class="params">( BinTree BT )</span>; <span class="comment">/* 先序遍历，由裁判实现，细节不表 */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">InorderTraversal</span><span class="params">( BinTree BT )</span>;  <span class="comment">/* 中序遍历，由裁判实现，细节不表 */</span></span><br><span class="line"></span><br><span class="line">BinTree <span class="title function_">Insert</span><span class="params">( BinTree BST, ElementType X )</span>;</span><br><span class="line">BinTree <span class="title function_">Delete</span><span class="params">( BinTree BST, ElementType X )</span>;</span><br><span class="line">Position <span class="title function_">Find</span><span class="params">( BinTree BST, ElementType X )</span>;</span><br><span class="line">Position <span class="title function_">FindMin</span><span class="params">( BinTree BST )</span>;</span><br><span class="line">Position <span class="title function_">FindMax</span><span class="params">( BinTree BST )</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    BinTree BST, MinP, MaxP, Tmp;</span><br><span class="line">    ElementType X;</span><br><span class="line">    <span class="type">int</span> N, i;</span><br><span class="line"></span><br><span class="line">    BST = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;N);</span><br><span class="line">    <span class="keyword">for</span> ( i=<span class="number">0</span>; i&lt;N; i++ ) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;X);</span><br><span class="line">        BST = Insert(BST, X);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Preorder:&quot;</span>); PreorderTraversal(BST); <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    MinP = FindMin(BST);</span><br><span class="line">    MaxP = FindMax(BST);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;N);</span><br><span class="line">    <span class="keyword">for</span>( i=<span class="number">0</span>; i&lt;N; i++ ) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;X);</span><br><span class="line">        Tmp = Find(BST, X);</span><br><span class="line">        <span class="keyword">if</span> (Tmp == <span class="literal">NULL</span>) <span class="built_in">printf</span>(<span class="string">&quot;%d is not found\n&quot;</span>, X);</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d is found\n&quot;</span>, Tmp-&gt;Data);</span><br><span class="line">            <span class="keyword">if</span> (Tmp==MinP) <span class="built_in">printf</span>(<span class="string">&quot;%d is the smallest key\n&quot;</span>, Tmp-&gt;Data);</span><br><span class="line">            <span class="keyword">if</span> (Tmp==MaxP) <span class="built_in">printf</span>(<span class="string">&quot;%d is the largest key\n&quot;</span>, Tmp-&gt;Data);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;N);</span><br><span class="line">    <span class="keyword">for</span>( i=<span class="number">0</span>; i&lt;N; i++ ) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;X);</span><br><span class="line">        BST = Delete(BST, X);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Inorder:&quot;</span>); InorderTraversal(BST); <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 你的代码将被嵌在这里 */</span></span><br></pre></td></tr></table></figure>

<ol start="3">
<li>操作集合</li>
</ol>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//插入</span></span><br><span class="line">BinTree <span class="title function_">Insert</span><span class="params">( BinTree BST, ElementType X )</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(BST==<span class="literal">NULL</span>) &#123;          <span class="comment">/* 若原树为空，生成并返回一个结点的二叉搜索树 */</span></span><br><span class="line">        BST = (BinTree)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(BinTree));</span><br><span class="line">        BST -&gt;Data = X;</span><br><span class="line">        BST -&gt;Left = BST -&gt;Right = <span class="literal">NULL</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;         <span class="comment">/* 开始寻找要插入元素的位置 */</span></span><br><span class="line">        <span class="keyword">if</span>(X &lt; BST -&gt;Data ) &#123;</span><br><span class="line">            BST -&gt;Left = Insert(BST -&gt;Left, X);</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(X &gt; BST -&gt;Data ) &#123;</span><br><span class="line">            BST -&gt;Right = Insert(BST -&gt;Right, X);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">/* X已经存在，不用操作 */</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> BST;</span><br><span class="line">&#125; </span><br><span class="line"><span class="comment">//删除</span></span><br><span class="line">BinTree <span class="title function_">Delete</span><span class="params">( BinTree BST, ElementType X )</span>&#123;</span><br><span class="line">    BinTree Tmp;</span><br><span class="line">    <span class="keyword">if</span>(BST==<span class="literal">NULL</span>)    </span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Not Found\n&quot;</span>);</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>( X &lt; BST-&gt;Data)  </span><br><span class="line">            BST -&gt;Left = Delete(BST-&gt;Left, X);          <span class="comment">/* 左子树递归删除 */</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(X &gt; BST-&gt;Data ) </span><br><span class="line">            BST -&gt;Right = Delete(BST-&gt;Right , X);       <span class="comment">/* 右子树递归删除*/</span></span><br><span class="line">        <span class="keyword">else</span> &#123;                                          <span class="comment">/* 找到需要删除的结点 */</span></span><br><span class="line">            <span class="keyword">if</span>(BST-&gt;Left &amp;&amp; BST-&gt;Right) &#123;               <span class="comment">/* 被删除的结点有左右子结点 */</span></span><br><span class="line">                Tmp=FindMin(BST-&gt;Right);                <span class="comment">/* 在右子树中找到最小结点填充删除结点 */</span></span><br><span class="line">                BST-&gt;Data = Tmp -&gt;Data;</span><br><span class="line">                BST-&gt;Right=Delete(BST-&gt;Right,BST-&gt;Data);<span class="comment">/* 递归删除要删除结点的右子树中最小元素 */</span></span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;                                     <span class="comment">/* 被删除结点有一个或没有子结点*/</span></span><br><span class="line">                Tmp = BST;</span><br><span class="line">                <span class="keyword">if</span>(!BST-&gt;Left) BST = BST-&gt;Right;        <span class="comment">/*有右孩子或者没孩子*/</span> </span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span>(!BST-&gt;Right)    BST = BST-&gt;Left;<span class="comment">/*有左孩子，一定要加else，不然BST可能是NULL，会段错误*/</span> </span><br><span class="line">                <span class="built_in">free</span>(Tmp);                              <span class="comment">/*如无左右孩子直接删除*/</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> BST;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//查找</span></span><br><span class="line">Position <span class="title function_">Find</span><span class="params">( BinTree BST, ElementType X )</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(BST==<span class="literal">NULL</span>)    <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">if</span>(BST-&gt;Data==X)    <span class="keyword">return</span> BST; </span><br><span class="line">    <span class="keyword">if</span>(X&gt;BST-&gt;Data)     <span class="keyword">return</span> Find(BST-&gt;Right,X);      </span><br><span class="line">    <span class="keyword">if</span>(X&lt;BST-&gt;Data)     <span class="keyword">return</span> Find(BST-&gt;Left,X);</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/*  以下几种写法均可，推荐第上面这一种 </span></span><br><span class="line"><span class="comment"> </span></span><br><span class="line"><span class="comment">    if(!BST)    return NULL;</span></span><br><span class="line"><span class="comment">    if(BST-&gt;Data==X)    return BST; </span></span><br><span class="line"><span class="comment">    if(X&gt;BST-&gt;Data)     Find(BST-&gt;Right,X);     </span></span><br><span class="line"><span class="comment">    if(X&lt;BST-&gt;Data)     Find(BST-&gt;Left,X);</span></span><br><span class="line"><span class="comment"> </span></span><br><span class="line"><span class="comment">    if(BST)&#123;</span></span><br><span class="line"><span class="comment">        if(BST-&gt;Data==X)    return BST; </span></span><br><span class="line"><span class="comment">        if(X&gt;BST-&gt;Data)     Find(BST-&gt;Right,X);     //如果不写return，则返回过来的值并没有继续返回给最开始的函数 </span></span><br><span class="line"><span class="comment">        if(X&lt;BST-&gt;Data)     Find(BST-&gt;Left,X);</span></span><br><span class="line"><span class="comment">    &#125; </span></span><br><span class="line"><span class="comment">    else return NULL;   </span></span><br><span class="line"><span class="comment"> </span></span><br><span class="line"><span class="comment">    if(BST)&#123;</span></span><br><span class="line"><span class="comment">        if(BST-&gt;Data==X)    return BST; </span></span><br><span class="line"><span class="comment">        if(X&gt;BST-&gt;Data)     return  Find(BST-&gt;Right,X); </span></span><br><span class="line"><span class="comment">        if(X&lt;BST-&gt;Data)     return  Find(BST-&gt;Left,X);</span></span><br><span class="line"><span class="comment">    &#125; </span></span><br><span class="line"><span class="comment">    return NULL;</span></span><br><span class="line"><span class="comment"> </span></span><br><span class="line"><span class="comment">    if(BST)&#123;</span></span><br><span class="line"><span class="comment">        if(BST-&gt;Data==X)    return BST; </span></span><br><span class="line"><span class="comment">        if(X&gt;BST-&gt;Data)     return Find(BST-&gt;Right,X);      </span></span><br><span class="line"><span class="comment">        if(X&lt;BST-&gt;Data)     return Find(BST-&gt;Left,X);</span></span><br><span class="line"><span class="comment">    &#125; </span></span><br><span class="line"><span class="comment">    else return NULL;</span></span><br><span class="line"><span class="comment">    */</span>                          </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*如果return NULL前面不写else且Find前也不写else，则最后递归返回的也没return，最后只能是执行到了return NULL</span></span><br><span class="line"><span class="comment">返回了，而如果find 前加上了return则就把递归的结果利用起来了，最后加不加else也无所谓了，而如果直接最后else，</span></span><br><span class="line"><span class="comment">不加return find也是可以的，加上了else之后就不会被每一次返回时最后的return NULL给覆盖掉，所以也行。 */</span> </span><br><span class="line">Position <span class="title function_">FindMin</span><span class="params">( BinTree BST )</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(BST)&#123;</span><br><span class="line">        <span class="keyword">while</span>(BST-&gt;Left)&#123;</span><br><span class="line">            BST=BST-&gt;Left;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; </span><br><span class="line">    <span class="keyword">return</span> BST; </span><br><span class="line">&#125; </span><br><span class="line">Position <span class="title function_">FindMax</span><span class="params">( BinTree BST )</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(BST)&#123;</span><br><span class="line">        <span class="keyword">while</span>(BST-&gt;Right)&#123;</span><br><span class="line">            BST=BST-&gt;Right;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; </span><br><span class="line">    <span class="keyword">return</span> BST; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="图"><a href="#图" class="headerlink" title="图"></a>图</h2><h3 id="并查集"><a href="#并查集" class="headerlink" title="并查集"></a>并查集</h3><p>​	 	主要用于解决一些<strong>元素分组</strong>的问题。也可以用来判断图的连通性，它管理一系列<strong>不相交的集合</strong>，并支持两种操作：</p>
<ul>
<li><strong>合并</strong>（Union）：把两个不相交的集合合并为一个集合。</li>
<li><strong>查询</strong>（Find）：查询两个元素是否在同一个集合中。</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">find</span><span class="params">(<span class="type">int</span> x)</span>  <span class="comment">//最简单版本</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    *当数据很多时，查找会很耗费时间</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">if</span>(father[x]!=x) father[x]=find(father[x]);</span><br><span class="line">    <span class="keyword">return</span> father[x];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">find</span><span class="params">(<span class="type">int</span> x)</span>&#123;           <span class="comment">//查找根节点的函数 </span></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    *  升级版</span></span><br><span class="line"><span class="comment">    *  带路径压缩功能</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="type">int</span> a;</span><br><span class="line">  a=x;</span><br><span class="line">  <span class="keyword">while</span>(x!=father[x])x=father[x];</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">while</span>(a!=father[a])&#123;    <span class="comment">//路径压缩 </span></span><br><span class="line">    <span class="type">int</span> z=a;</span><br><span class="line">    a=father[a];</span><br><span class="line">    father[z]=x;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Union</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span>&#123; </span><br><span class="line">                <span class="comment">//合并两个集合</span></span><br><span class="line">    <span class="type">int</span> fx=find(a);</span><br><span class="line">    <span class="type">int</span> fy=find(b);</span><br><span class="line">    father[fx]=fy;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">judgeConnect</span><span class="params">()</span>&#123;</span><br><span class="line">                <span class="comment">//判断连通性</span></span><br><span class="line">    <span class="type">int</span> i,k=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=vertex;i++)</span><br><span class="line">        <span class="keyword">if</span>(father[i]==i) k++;</span><br><span class="line">        <span class="keyword">if</span>(k==<span class="number">1</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="AOE图"><a href="#AOE图" class="headerlink" title="AOE图"></a>AOE图</h3><blockquote>
<p><em>concept:</em></p>
<p>1、<strong>最早发生</strong>时间：从前往后，前驱结点到当前结点所需时间，取<strong>最大值</strong>；</p>
<p>2、<strong>最迟发生</strong>时间：从后往前，后继结点的最迟时间减去边权的值，取<strong>最小值</strong>；</p>
<p><strong>结束节点的最早发生时间和最迟发生时间相同。</strong></p>
<p>3、关键路径：最早发生时间和最迟发生时间相同的结点叫做关键路径上的结点；</p>
<p>4、<strong>最早开始</strong>时间：等于当前边起始节点的最早发生时间；</p>
<p>5、<strong>最晚开始</strong>时间：等于当前便指向结点的最迟时间减去当前边的权值；</p>
<p>6、<strong>最早完工</strong>时间：等于当前边指向结点的最早发生时间；</p>
<p>7、<strong>最晚完工</strong>时间：等于当前边指向结点的最迟发生时间；</p>
</blockquote>
<h3 id="图的链式存储结构"><a href="#图的链式存储结构" class="headerlink" title="图的链式存储结构"></a>图的链式存储结构</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MVNum 100                                 <span class="comment">//最大顶点数 </span></span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">ArcNode</span>&#123;</span>                        <span class="comment">//表结点 </span></span><br><span class="line">    <span class="type">int</span> adjvex;                                    <span class="comment">//邻接点的位置 </span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">ArcNode</span> * <span class="title">nextarc</span>;</span>      <span class="comment">//指向下一个表结点的指针 </span></span><br><span class="line">  &#125;ArcNode; </span><br><span class="line">  </span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">VNode</span>&#123;</span> </span><br><span class="line">   <span class="type">char</span> data;                                    <span class="comment">//顶点信息 </span></span><br><span class="line">   ArcNode * firstarc;         <span class="comment">//指向第一个表结点的指针 </span></span><br><span class="line">&#125;VNode, AdjList[MVNum];                 <span class="comment">//AdjList表示邻接表类型 </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span>&#123;</span> </span><br><span class="line">    AdjList vertices;              <span class="comment">//头结点数组</span></span><br><span class="line">    <span class="type">int</span> vexnum, arcnum;     <span class="comment">//图的当前顶点数和边数 </span></span><br><span class="line">&#125;ALGraph; </span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">CreatMGraph</span><span class="params">(ALGraph *G)</span>;<span class="comment">/* 创建图 */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">printGraph</span><span class="params">(ALGraph G)</span>;<span class="comment">/*输出图 */</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    ALGraph G;</span><br><span class="line">    CreatMGraph(&amp;G);</span><br><span class="line">    printGraph(G);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">CreatMGraph</span><span class="params">(ALGraph *G)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> i,j,k;</span><br><span class="line">    ArcNode *s;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;G-&gt;vexnum,&amp;G-&gt;arcnum);</span><br><span class="line">    getchar();</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;G-&gt;vexnum;i++)</span><br><span class="line">         <span class="built_in">scanf</span>(<span class="string">&quot;%c&quot;</span>,&amp;G-&gt;vertices[i].data);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;G-&gt;vexnum;i++)</span><br><span class="line">         G-&gt;vertices[i].firstarc=<span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(k=<span class="number">0</span>;k&lt;G-&gt;arcnum;k++) &#123;  </span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;i,&amp;j);    </span><br><span class="line">        s=(ArcNode*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(ArcNode));</span><br><span class="line">        s-&gt;adjvex=j;</span><br><span class="line">        s-&gt;nextarc=G-&gt;vertices[i].firstarc;</span><br><span class="line"></span><br><span class="line">        G-&gt;vertices[i].firstarc=s;   </span><br><span class="line"></span><br><span class="line">        s=(ArcNode*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(ArcNode));</span><br><span class="line">        s-&gt;adjvex=i;</span><br><span class="line"></span><br><span class="line">        s-&gt;nextarc=G-&gt;vertices[j].firstarc;;</span><br><span class="line">        G-&gt;vertices[j].firstarc=s;  </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">printGraph</span><span class="params">(ALGraph G)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> i,j;</span><br><span class="line">    ArcNode *p;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;G.vexnum;i++)</span><br><span class="line">    &#123;</span><br><span class="line">       <span class="built_in">printf</span>(<span class="string">&quot;%c:&quot;</span>,G.vertices[i].data);</span><br><span class="line">       <span class="keyword">for</span>(p=G.vertices[i].firstarc;p;p=p-&gt;nextarc)</span><br><span class="line">           <span class="built_in">printf</span>(<span class="string">&quot; %c&quot;</span>,G.vertices[p-&gt;adjvex].data);</span><br><span class="line">       <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="查找（搜索）"><a href="#查找（搜索）" class="headerlink" title="查找（搜索）"></a>查找（搜索）</h2><h3 id="折半搜索"><a href="#折半搜索" class="headerlink" title="折半搜索"></a>折半搜索</h3><blockquote>
<p>因为折半查找需要方便地定位查找区域，所以它要求线性表必须具有随机存取的特性。因此，该查找法仅适合于顺序存储结构，不适合于链式存储结构，且要求元素按关键字有序排列。</p>
</blockquote>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">BinSearch</span><span class="params">(<span class="type">int</span> <span class="built_in">array</span>[], <span class="type">int</span> x, <span class="type">int</span> n)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> arr[<span class="number">10</span>];<span class="comment">//0 1 2 3 4 5 6 7 8 9 </span></span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> num;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        arr[i]=i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> re=BinSearch(arr,<span class="number">9</span>,<span class="number">10</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;下标：%d\n&quot;</span>,re);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">                <span class="comment">//按折半查找法查找值为x的数组元素，若找到则返回x在数组中的下标位置，否则返回-1</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">BinSearch</span><span class="params">(<span class="type">int</span> <span class="built_in">array</span>[], <span class="type">int</span> x, <span class="type">int</span> n)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> low = <span class="number">0</span>, high = n<span class="number">-1</span>, mid;<span class="comment">//区间左端点low置为0，右端点high置为n-1</span></span><br><span class="line">    <span class="type">int</span> num=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (low &lt;= high)      <span class="comment">//若左端点小于等于右端点，则继续查找</span></span><br><span class="line">    &#123;</span><br><span class="line">        num++;</span><br><span class="line">        mid = low + (high - low) / <span class="number">2</span>;<span class="comment">//取数据区间的重点</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,mid);</span><br><span class="line">        <span class="keyword">if</span> (x &gt; <span class="built_in">array</span>[mid])</span><br><span class="line">            low = mid + <span class="number">1</span>;      <span class="comment">//若x&gt;array[mid]，则修改区间的左端点</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (x &lt; <span class="built_in">array</span>[mid])</span><br><span class="line">            high = mid - <span class="number">1</span>;      <span class="comment">//若x&lt;array[mid]，则修改区间的右端点</span></span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;次数：%d\n&quot;</span>,num);</span><br><span class="line">            <span class="keyword">return</span> mid;        <span class="comment">//若找到，则返回下标值mid</span></span><br><span class="line">            &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;            <span class="comment">//循环结束仍未找到，则返回值-1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="插值查找"><a href="#插值查找" class="headerlink" title="插值查找"></a>插值查找</h3><blockquote>
<p>类似于折半搜索，只是mid的计算方法不一样</p>
<p>比较元素的下标：</p>
<p>Mid &#x3D; Begin + ( (End - Begin) &#x2F; (A[End] - A[Begin]) ) * (X - A[Begin])</p>
<blockquote>
<p>式子中，各部分的含义分别是：</p>
<p>Mid：计算得出的元素的位置；</p>
<p>End：搜索区域内最后一个元素所在的位置；</p>
<p>Begin：搜索区域内第一个元素所在的位置；</p>
<p>X：要查找的目标元素；</p>
<p>A[]：表示整个待搜索序列</p>
</blockquote>
</blockquote>
<p>C语言实现过程</p>
<p>​	<strong>递归算法</strong></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="comment">//实现插值查找算法，ele 表示要查找的目标元素，[begin,end] 指定查找区域</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">interpolation_search</span><span class="params">(<span class="type">int</span>* arr, <span class="type">int</span> begin, <span class="type">int</span> end, <span class="type">int</span> ele)</span> &#123;</span><br><span class="line">    <span class="type">int</span> mid = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">//如果[begin,end] 不存在，返回 -1</span></span><br><span class="line">    <span class="keyword">if</span> (begin &gt; end) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//如果搜索区域内只有一个元素，判断其是否为目标元素</span></span><br><span class="line">    <span class="keyword">if</span> (begin == end) &#123;</span><br><span class="line">        <span class="keyword">if</span> (ele == arr[begin]) &#123;</span><br><span class="line">            <span class="keyword">return</span> begin;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//如果该元素非目标元素，则查找失败</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 找到&quot;中间元素&quot;所在的位置</span></span><br><span class="line">    mid = begin + ((end - begin) / (arr[end] - arr[begin]) * (ele - arr[begin]));</span><br><span class="line">    <span class="comment">//递归的出口</span></span><br><span class="line">    <span class="keyword">if</span> (ele == arr[mid]) &#123;</span><br><span class="line">        <span class="keyword">return</span> mid;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//比较 ele 和 arr[mid] 的值，缩小 ele 可能存在的区域</span></span><br><span class="line">    <span class="keyword">if</span> (ele &lt; arr[mid]) &#123;</span><br><span class="line">        <span class="comment">//新的搜索区域为 [begin,mid-1]</span></span><br><span class="line">        <span class="keyword">return</span> interpolation_search(arr, begin, mid - <span class="number">1</span>, ele);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">//新的搜索区域为 [mid+1,end]</span></span><br><span class="line">        <span class="keyword">return</span> interpolation_search(arr, mid + <span class="number">1</span>, end, ele);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> arr[<span class="number">10</span>] = &#123; <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span> &#125;;</span><br><span class="line">    <span class="comment">//输出元素 2 所在位置的下标</span></span><br><span class="line">    <span class="type">int</span> pos = interpolation_search(arr, <span class="number">0</span>, <span class="number">9</span>, <span class="number">2</span>);</span><br><span class="line">    <span class="keyword">if</span> (pos != <span class="number">-1</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, interpolation_search(arr, <span class="number">0</span>, <span class="number">9</span>, <span class="number">2</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;查找失败&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="二叉排序树"><a href="#二叉排序树" class="headerlink" title="二叉排序树"></a>二叉排序树</h3><blockquote>
<ol>
<li>若左子树非空，则左子树上所有结点的值均小于根结点的值。</li>
<li>若右子树非空，则右子树上所有结点的值均大于根结点的值。</li>
<li>左、右子树也分别是一棵二叉排序树。</li>
</ol>
</blockquote>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*二叉树的二叉链表结点结构定义*/</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">BiTNode</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  <span class="type">int</span> data;	<span class="comment">//结点数据</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">BiTNode</span> *<span class="title">lchild</span>, *<span class="title">rchild</span>;</span>	<span class="comment">//左右孩子指针</span></span><br><span class="line">&#125; BiTNode, *Bitree;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">递归查找二叉排序树T中是否存在key</span></span><br><span class="line"><span class="comment">指针f指向T的双亲，其初始调用值为NULL</span></span><br><span class="line"><span class="comment">若查找成功，则指针p指向该数据元素结点，并返回TRUE</span></span><br><span class="line"><span class="comment">否则指针p指向查找路径上访问的最后一个结点并返回FALSE</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="type">bool</span> <span class="title function_">SearchBST</span><span class="params">(BiTree T, <span class="type">int</span> key, BiTree f, BiTree *p)</span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(!T)&#123;</span><br><span class="line">    *p = f;</span><br><span class="line">    <span class="keyword">return</span> FALSE;</span><br><span class="line">  &#125;<span class="keyword">else</span> <span class="keyword">if</span>(key == T-&gt;data)&#123;</span><br><span class="line">    <span class="comment">//查找成功</span></span><br><span class="line">    *p = T;</span><br><span class="line">    <span class="keyword">return</span> TRUE;</span><br><span class="line">  &#125;<span class="keyword">else</span> <span class="keyword">if</span>(key &lt; T-&gt;data)&#123;</span><br><span class="line">    <span class="keyword">return</span> SearchBST(T-&gt;lchild, key, T, p);	<span class="comment">//在左子树继续查找</span></span><br><span class="line">  &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> SearchBST(T-&gt;rchild, key, T, p);	<span class="comment">//在右子树继续查找</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">当二叉排序树T中不存在关键字等于key的数据元素时</span></span><br><span class="line"><span class="comment">插入key并返回TRUE，否则返回FALSE</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="type">bool</span> <span class="title function_">InsertBST</span><span class="params">(BiTree *T, <span class="type">int</span> key)</span>&#123;</span><br><span class="line">  BiTree p, s;</span><br><span class="line">  <span class="keyword">if</span>(!SearchBST(*T, key, <span class="literal">NULL</span>, &amp;p))&#123;</span><br><span class="line">    <span class="comment">//查找不成功</span></span><br><span class="line">    s = (BiTree)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(BiTNode));</span><br><span class="line">    s-&gt;data = key;</span><br><span class="line">    s-&gt;lchild = s-&gt;rchild = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">if</span>(!p)&#123;</span><br><span class="line">      *T = s;	<span class="comment">//插入s为新的根节点</span></span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(key &lt; p-&gt;data)&#123;</span><br><span class="line">      p-&gt;lchild = s;	<span class="comment">//插入s为左孩子</span></span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">      p-&gt;rchild = s;	<span class="comment">//插入s为右孩子</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> TRUE;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">      <span class="keyword">return</span> FALSE;	<span class="comment">//树种已有关键字相同的结点，不再插入</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*********************构造二叉排序树************/</span></span><br><span class="line"><span class="type">int</span> i;</span><br><span class="line"><span class="type">int</span> a[<span class="number">10</span>] = &#123;<span class="number">62</span>, <span class="number">88</span>, <span class="number">58</span>, <span class="number">47</span>, <span class="number">35</span>, <span class="number">73</span>, <span class="number">51</span>, <span class="number">99</span>, <span class="number">37</span>, <span class="number">93</span>&#125;;</span><br><span class="line">BiTree T = <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i&lt;<span class="number">10</span>; i++)&#123;</span><br><span class="line">  InsertBST(&amp;T, a[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/************************************************/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">若二叉排序树T中存在关键字等于key的数据元素时，则删除该数据元素结点，</span></span><br><span class="line"><span class="comment">并返回TRUE;否则返回FALSE</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="type">bool</span> <span class="title function_">DeleteBST</span><span class="params">(BiTree *T, <span class="type">int</span> key)</span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(!T)&#123;</span><br><span class="line">    <span class="keyword">return</span> FALSE; </span><br><span class="line">  &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(key == T-&gt;data)&#123;</span><br><span class="line">      <span class="comment">//找到关键字等于key的数据元素</span></span><br><span class="line">      <span class="keyword">return</span> Delete(T);</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(key &lt; T -&gt; data)&#123;</span><br><span class="line">      <span class="keyword">return</span> DeleteBST(T -&gt; lchild, key);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">      <span class="keyword">return</span> DeleteBST(T -&gt; rchild, key);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="哈希表（散列表）"><a href="#哈希表（散列表）" class="headerlink" title="哈希表（散列表）"></a>哈希表（散列表）</h3><blockquote>
<p>​	散列表是根据关键字而直接进行访问的数据结构。也就是说，散列表建立了关键字和存储地址之间的一种直接映射关系。</p>
<p>​	这种对应关系称为散列函数，又称为哈希(Hash) 函数。按这个思想，采用散列技术将记录存储在一块连续的存储空间中，这块连续存储空间称为散列表或哈希表(Hash table)。那么关键字对应的记录存储位置我们称为散列地址。</p>
</blockquote>
<h4 id="散列函数的构造方法"><a href="#散列函数的构造方法" class="headerlink" title="散列函数的构造方法"></a>散列函数的构造方法</h4><ol>
<li>直接定址法</li>
</ol>
<p>​				直接取关键字的某个线性函数值为散列地址，散列函数为：<br>$$<br>H(key)&#x3D;key或H(key)&#x3D;a∗key+b<br>$$</p>
<ol start="2">
<li>数字分析法</li>
</ol>
<blockquote>
<p>分析数字关键字在各位上的变化情况，取比较随机的位作为散列地址。</p>
</blockquote>
<ol start="3">
<li>平方取中法</li>
</ol>
<blockquote>
<p>平方取中法比较适合于不知道关键字的分布，而位数又不是很大的情况。</p>
<p>字面意思：平方之后取中间的数字作为散列地址</p>
</blockquote>
<ol start="4">
<li>除留余数法</li>
</ol>
<p>​				散列函数：</p>
<blockquote>
<p>h（key） &#x3D; key % 17</p>
<blockquote>
<ul>
<li>p取素数（避免余数相关性）</li>
</ul>
</blockquote>
</blockquote>
<ol start="5">
<li>随机数法</li>
</ol>
<p>$$<br>H(key)&#x3D;random(key)<br>$$</p>
<h4 id="处理散列冲突"><a href="#处理散列冲突" class="headerlink" title="处理散列冲突"></a>处理散列冲突</h4><p>​				开放地址法（闭散列表）和链地址法（开散列表法）</p>
<ol>
<li>线性探测法</li>
</ol>
<blockquote>
<p>从冲突的的下一个位置起，依次寻找空的散列地址</p>
<blockquote>
<ul>
<li>存在堆积现象</li>
</ul>
</blockquote>
</blockquote>
<p>​	公式：<br>$$<br>H<br>i<br>​<br> (key)&#x3D;(f(key)+d<br>i<br>​<br> )%m (d<br>i<br>​<br> &#x3D;1,2,3,…,m−1)<br>$$<br>​	此时： di &#x3D; 0,1,2,3,…k</p>
<ol start="2">
<li>二次（平方）探测法</li>
</ol>
<p>​		公式<br>$$<br>H<br>i<br>​<br> (key)&#x3D;(f(key)+d<br>i<br>​<br> )%m (d<br>i<br>​<br> &#x3D;1,2,3,…,m−1)<br>$$<br>​	此时：di &#x3D; 0,1,-1,2^2,-2^2,….k^2,-k^2</p>
<ol start="3">
<li>拉链法</li>
</ol>
<blockquote>
<p>将所有关键字为同义词的记录存储在一个单链表中，我们称这种表为同义词子表，在散列表中只存储所有同义词子表的头指针。</p>
</blockquote>
<h2 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h2><h3 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a>插入排序</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">InsertSort</span><span class="params">(<span class="type">int</span>* arr, <span class="type">int</span> n)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n - <span class="number">1</span>; ++i)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="comment">//记录有序序列最后一个元素的下标</span></span><br><span class="line">    <span class="type">int</span> end = i;</span><br><span class="line">    <span class="comment">//待插入的元素</span></span><br><span class="line">    <span class="type">int</span> tem = arr[end + <span class="number">1</span>];</span><br><span class="line">    <span class="comment">//单趟排</span></span><br><span class="line">    <span class="keyword">while</span> (end &gt;= <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="comment">//比插入的数大就向后移</span></span><br><span class="line">      <span class="keyword">if</span> (tem &lt; arr[end])</span><br><span class="line">      &#123;</span><br><span class="line">        arr[end + <span class="number">1</span>] = arr[end];</span><br><span class="line">        end--;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">//比插入的数小，跳出循环</span></span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">      &#123;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//tem放到比插入的数小的数的后面</span></span><br><span class="line">    arr[end  + <span class="number">1</span>] = tem;</span><br><span class="line">    <span class="comment">//代码执行到此位置有两种情况:</span></span><br><span class="line">    <span class="comment">//1.待插入元素找到应插入位置（break跳出循环到此）</span></span><br><span class="line">    <span class="comment">//2.待插入元素比当前有序序列中的所有元素都小（while循环结束后到此）</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<blockquote>
<p>时间复杂度：	</p>
<ul>
<li>最坏（逆序）：O(n^2)</li>
<li>最好（升序）：O(n)</li>
</ul>
<p>空间复杂度：O(1)</p>
</blockquote>
<h3 id="希尔排序"><a href="#希尔排序" class="headerlink" title="希尔排序"></a>希尔排序</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//希尔排序</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">ShellSort</span><span class="params">(<span class="type">int</span>* arr, <span class="type">int</span> n)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> gap = n;</span><br><span class="line">  <span class="keyword">while</span> (gap&gt;<span class="number">1</span>)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="comment">//每次对gap折半操作</span></span><br><span class="line">    gap = gap / <span class="number">2</span>;</span><br><span class="line">    <span class="comment">//单趟排序</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n - gap; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="type">int</span> end = i;</span><br><span class="line">      <span class="type">int</span> tem = arr[end + gap];</span><br><span class="line">      <span class="keyword">while</span> (end &gt;= <span class="number">0</span>)</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="keyword">if</span> (tem &lt; arr[end])</span><br><span class="line">        &#123;</span><br><span class="line">          arr[end + gap] = arr[end];</span><br><span class="line">          end -= gap;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      arr[end + gap] = tem;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<blockquote>
<p>时间复杂度(平均)：O(N^1.3)<br>空间复杂度：O(1)</p>
</blockquote>
<h3 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//选择排序</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">swap</span><span class="params">(<span class="type">int</span>* a, <span class="type">int</span>* b)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> tem = *a;</span><br><span class="line">  *a = *b;</span><br><span class="line">  *b = tem;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">SelectSort</span><span class="params">(<span class="type">int</span>* arr, <span class="type">int</span> n)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="comment">//保存参与单趟排序的第一个数和最后一个数的下标</span></span><br><span class="line">  <span class="type">int</span> begin = <span class="number">0</span>, end = n - <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">while</span> (begin &lt; end)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="comment">//保存最大值的下标</span></span><br><span class="line">    <span class="type">int</span> maxi = begin;</span><br><span class="line">    <span class="comment">//保存最小值的下标</span></span><br><span class="line">    <span class="type">int</span> mini = begin;</span><br><span class="line">    <span class="comment">//找出最大值和最小值的下标</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = begin; i &lt;= end; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> (arr[i] &lt; arr[mini])</span><br><span class="line">      &#123;</span><br><span class="line">        mini = i;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (arr[i] &gt; arr[maxi])</span><br><span class="line">      &#123;</span><br><span class="line">        maxi = i;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//最小值放在序列开头</span></span><br><span class="line">    swap(&amp;arr[mini], &amp;arr[begin]);</span><br><span class="line">    <span class="comment">//防止最大的数在begin位置被换走</span></span><br><span class="line">    <span class="keyword">if</span> (begin == maxi)</span><br><span class="line">    &#123;</span><br><span class="line">      maxi = mini;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//最大值放在序列结尾</span></span><br><span class="line">    swap(&amp;arr[maxi], &amp;arr[end]);</span><br><span class="line">    ++begin;</span><br><span class="line">    --end;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">c</span><br></pre></td></tr></table></figure>

<blockquote>
<p>时间复杂度：</p>
<ul>
<li>最坏情况：O(N^2)</li>
<li>最好情况：O(N^2)</li>
</ul>
<p>空间复杂度：O(1)</p>
</blockquote>
<h3 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//冒泡排序</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">BubbleSort</span><span class="params">(<span class="type">int</span>* arr, <span class="type">int</span> n)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> end = n;</span><br><span class="line">  <span class="keyword">while</span> (end)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="type">int</span> flag = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; end; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> (arr[i - <span class="number">1</span>] &gt; arr[i])</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="type">int</span> tem = arr[i];</span><br><span class="line">        arr[i] = arr[i - <span class="number">1</span>];</span><br><span class="line">        arr[i - <span class="number">1</span>] = tem;</span><br><span class="line">        flag = <span class="number">1</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (flag == <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    --end;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<blockquote>
<p>时间复杂度：</p>
<ul>
<li>最坏情况：O(N^2)</li>
<li>最好情况：O(N)</li>
</ul>
<p>空间复杂度：O(1)</p>
</blockquote>
<h3 id="堆排序"><a href="#堆排序" class="headerlink" title="堆排序"></a>堆排序</h3><blockquote>
<p>堆的分类：</p>
<ul>
<li>大根堆：每个节点的值大于或等于左右孩子节点的值</li>
<li>小根堆：每个节点的值小于或等于左右孩子节点的值</li>
</ul>
</blockquote>
<p>步骤：</p>
<ol>
<li>构造大根堆</li>
<li>顶端与末尾值交换</li>
<li>将剩下的n-1个数造次构造为大根堆，重复上述操作。</li>
</ol>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//目标为升序</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">HeapAdjust</span><span class="params">(<span class="type">int</span>* arr, <span class="type">int</span> start, <span class="type">int</span> end)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> tmp = arr[start];</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">2</span> * start + <span class="number">1</span>; i &lt;= end; i = i * <span class="number">2</span> + <span class="number">1</span>)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> (i &lt; end&amp;&amp; arr[i] &lt; arr[i + <span class="number">1</span>])<span class="comment">//有右孩子并且左孩子小于右孩子</span></span><br><span class="line">    &#123;</span><br><span class="line">      i++;</span><br><span class="line">    &#125;<span class="comment">//i一定是左右孩子的最大值</span></span><br><span class="line">    <span class="keyword">if</span> (arr[i] &gt; tmp)</span><br><span class="line">    &#123;</span><br><span class="line">      arr[start] = arr[i];</span><br><span class="line">      start = i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  arr[start] = tmp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">HeapSort</span><span class="params">(<span class="type">int</span>* arr, <span class="type">int</span> len)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="comment">//第一次建立大根堆，从后往前依次调整</span></span><br><span class="line">  <span class="keyword">for</span>(<span class="type">int</span> i=(len<span class="number">-1</span><span class="number">-1</span>)/<span class="number">2</span>;i&gt;=<span class="number">0</span>;i--)</span><br><span class="line">  &#123;</span><br><span class="line">    HeapAdjust(arr, i, len - <span class="number">1</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//每次将根和待排序的最后一次交换，然后在调整</span></span><br><span class="line">  <span class="type">int</span> tmp;</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; len - <span class="number">1</span>; i++)</span><br><span class="line">  &#123;</span><br><span class="line">    tmp = arr[<span class="number">0</span>];</span><br><span class="line">    arr[<span class="number">0</span>] = arr[len - <span class="number">1</span>-i];</span><br><span class="line">    arr[len - <span class="number">1</span> - i] = tmp;</span><br><span class="line">    HeapAdjust(arr, <span class="number">0</span>, len - <span class="number">1</span>-i- <span class="number">1</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> arr[] = &#123; <span class="number">9</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">3</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">96</span>,<span class="number">66</span> &#125;;</span><br><span class="line">  HeapSort(arr, <span class="keyword">sizeof</span>(arr) / <span class="keyword">sizeof</span>(arr[<span class="number">0</span>]));</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;排序后为:&quot;</span>);</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="keyword">sizeof</span>(arr) / <span class="keyword">sizeof</span>(arr[<span class="number">0</span>]); i++)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, arr[i]);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<blockquote>
<p>时间复杂度：时间复杂度为O(nlogn)</p>
<p>空间复杂度：O(1)</p>
</blockquote>
<h3 id="快速排序（挖坑法）"><a href="#快速排序（挖坑法）" class="headerlink" title="快速排序（挖坑法）"></a>快速排序（挖坑法）</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">PartSort</span><span class="params">(<span class="type">int</span>* arr, <span class="type">int</span> left, <span class="type">int</span> right)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> key = arr[left];</span><br><span class="line">    <span class="type">int</span> hole = left;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span> (left &lt; right)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">while</span> (left &lt; right &amp;&amp; arr[right] &gt;= key)</span><br><span class="line">        &#123;</span><br><span class="line">            right--;</span><br><span class="line">        &#125;</span><br><span class="line">        arr[hole] = arr[right];</span><br><span class="line">        hole = right;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span> (left &lt; right &amp;&amp; arr[left] &lt;= key)</span><br><span class="line">        &#123;</span><br><span class="line">            left++;</span><br><span class="line">        &#125;</span><br><span class="line">        arr[hole] = arr[left];</span><br><span class="line">        hole = left;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    arr[hole] = key;</span><br><span class="line">    <span class="keyword">return</span> hole;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="快速排序（库函数直接调用法）"><a href="#快速排序（库函数直接调用法）" class="headerlink" title="快速排序（库函数直接调用法）"></a>快速排序（库函数直接调用法）</h3><p>函数原型</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">qsort</span><span class="params">(<span class="type">void</span>* base<span class="comment">/*数组名字*/</span>,<span class="type">size_t</span> num<span class="comment">/*元素个数*/</span>,<span class="type">size_t</span> width<span class="comment">/*单个元素所占字节*/</span>,<span class="type">int</span>(__cdecl*compare)(<span class="type">const</span> <span class="type">void</span>*,<span class="type">const</span> <span class="type">void</span>*)<span class="comment">/*比较函数*/</span>)</span>;</span><br></pre></td></tr></table></figure>

<p>案例：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">cmp</span><span class="params">(<span class="type">const</span> <span class="type">void</span> *a,<span class="type">const</span> <span class="type">void</span> *b)</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> *(<span class="type">int</span>*)a-*(<span class="type">int</span>*)b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">  <span class="type">int</span> n,i;</span><br><span class="line">  <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line">  <span class="type">int</span> time[n];</span><br><span class="line">  <span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;n; i++) &#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;time[i]);</span><br><span class="line">  &#125;</span><br><span class="line">  qsort(time,n,<span class="keyword">sizeof</span>(<span class="type">int</span>),cmp);</span><br><span class="line">  <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,time[i]);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="归并排序"><a href="#归并排序" class="headerlink" title="归并排序"></a>归并排序</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">Merge</span><span class="params">(<span class="type">int</span> sourceArr[],<span class="type">int</span> tempArr[], <span class="type">int</span> startIndex, <span class="type">int</span> midIndex, <span class="type">int</span> endIndex)</span>&#123;</span><br><span class="line">    <span class="type">int</span> i = startIndex, j=midIndex+<span class="number">1</span>, k = startIndex;</span><br><span class="line">    <span class="keyword">while</span>(i!=midIndex+<span class="number">1</span> &amp;&amp; j!=endIndex+<span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span>(sourceArr[i] &gt; sourceArr[j])</span><br><span class="line">            tempArr[k++] = sourceArr[j++];</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            tempArr[k++] = sourceArr[i++];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(i != midIndex+<span class="number">1</span>)</span><br><span class="line">        tempArr[k++] = sourceArr[i++];</span><br><span class="line">    <span class="keyword">while</span>(j != endIndex+<span class="number">1</span>)</span><br><span class="line">        tempArr[k++] = sourceArr[j++];</span><br><span class="line">    <span class="keyword">for</span>(i=startIndex; i&lt;=endIndex; i++)</span><br><span class="line">        sourceArr[i] = tempArr[i];</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">//内部使用递归</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">MergeSort</span><span class="params">(<span class="type">int</span> sourceArr[], <span class="type">int</span> tempArr[], <span class="type">int</span> startIndex, <span class="type">int</span> endIndex)</span> &#123;</span><br><span class="line">    <span class="type">int</span> midIndex;</span><br><span class="line">    <span class="keyword">if</span>(startIndex &lt; endIndex) &#123;</span><br><span class="line">        midIndex = startIndex + (endIndex-startIndex) / <span class="number">2</span>;<span class="comment">//避免溢出int</span></span><br><span class="line">        MergeSort(sourceArr, tempArr, startIndex, midIndex);</span><br><span class="line">        MergeSort(sourceArr, tempArr, midIndex+<span class="number">1</span>, endIndex);</span><br><span class="line">        Merge(sourceArr, tempArr, startIndex, midIndex, endIndex);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> * argv[])</span> &#123;</span><br><span class="line">    <span class="type">int</span> a[<span class="number">8</span>] = &#123;<span class="number">50</span>, <span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>, <span class="number">70</span>, <span class="number">40</span>, <span class="number">80</span>, <span class="number">60</span>&#125;;</span><br><span class="line">    <span class="type">int</span> i, b[<span class="number">8</span>];</span><br><span class="line">    MergeSort(a, b, <span class="number">0</span>, <span class="number">7</span>);</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;<span class="number">8</span>; i++)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, a[i]);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>







<blockquote>
<p> 时间复杂度：O(nlogn)。</p>
<p> 空间复杂度：O(N)，归并排序需要一个与原数组相同长度的数组做辅助来排序。</p>
</blockquote>
<h3 id="基数排序"><a href="#基数排序" class="headerlink" title="基数排序"></a>基数排序</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="type">void</span> <span class="title function_">testBS</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    inta[] = &#123;<span class="number">2</span>, <span class="number">343</span>, <span class="number">342</span>, <span class="number">1</span>, <span class="number">123</span>, <span class="number">43</span>, <span class="number">4343</span>, <span class="number">433</span>, <span class="number">687</span>, <span class="number">654</span>, <span class="number">3</span>&#125;;</span><br><span class="line">    <span class="type">int</span> *a_p = a;</span><br><span class="line">    <span class="comment">//计算数组长度</span></span><br><span class="line">    intsize = <span class="keyword">sizeof</span>(a) / <span class="keyword">sizeof</span>(<span class="type">int</span>);</span><br><span class="line">    <span class="comment">//基数排序</span></span><br><span class="line">    bucketSort3(a_p, size);</span><br><span class="line">    <span class="comment">//打印排序后结果</span></span><br><span class="line">    inti;</span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; size; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, a[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    intt;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, t);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//基数排序</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">bucketSort3</span><span class="params">(<span class="type">int</span> *p, intn)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//获取数组中的最大数</span></span><br><span class="line">    intmaxNum = findMaxNum(p, n);</span><br><span class="line">    <span class="comment">//获取最大数的位数，次数也是再分配的次数。</span></span><br><span class="line">    intloopTimes = getLoopTimes(maxNum);</span><br><span class="line">    inti;</span><br><span class="line">    <span class="comment">//对每一位进行桶分配</span></span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">1</span>; i &lt;= loopTimes; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        sort2(p, n, i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//获取数字的位数</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">getLoopTimes</span><span class="params">(intnum)</span></span><br><span class="line">&#123;</span><br><span class="line">    intcount = <span class="number">1</span>;</span><br><span class="line">    inttemp = num / <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">while</span>(temp != <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        count++;</span><br><span class="line">        temp = temp / <span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    returncount;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//查询数组中的最大数</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">findMaxNum</span><span class="params">(<span class="type">int</span> *p, intn)</span></span><br><span class="line">&#123;</span><br><span class="line">    inti;</span><br><span class="line">    intmax = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(*(p + i) &gt; max)</span><br><span class="line">        &#123;</span><br><span class="line">            max = *(p + i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    returnmax;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//将数字分配到各自的桶中，然后按照桶的顺序输出排序结果</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">sort2</span><span class="params">(<span class="type">int</span> *p, intn, intloop)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//建立一组桶此处的20是预设的根据实际数情况修改</span></span><br><span class="line">    intbuckets[<span class="number">10</span>][<span class="number">20</span>] = &#123;&#125;;</span><br><span class="line">    <span class="comment">//求桶的index的除数</span></span><br><span class="line">    <span class="comment">//如798个位桶index=(798/1)%10=8</span></span><br><span class="line">    <span class="comment">//十位桶index=(798/10)%10=9</span></span><br><span class="line">    <span class="comment">//百位桶index=(798/100)%10=7</span></span><br><span class="line">    <span class="comment">//tempNum为上式中的1、10、100</span></span><br><span class="line">    inttempNum = (<span class="type">int</span>)<span class="built_in">pow</span>(<span class="number">10</span>, loop - <span class="number">1</span>);</span><br><span class="line">    inti, j;</span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        introw_index = (*(p + i) / tempNum) % <span class="number">10</span>;</span><br><span class="line">        <span class="keyword">for</span>(j = <span class="number">0</span>; j &lt; <span class="number">20</span>; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(buckets[row_index][j] == <span class="literal">NULL</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                buckets[row_index][j] = *(p + i);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//将桶中的数，倒回到原有数组中</span></span><br><span class="line">    intk = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(j = <span class="number">0</span>; j &lt; <span class="number">20</span>; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(buckets[i][j] != <span class="literal">NULL</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                *(p + k) = buckets[i][j];</span><br><span class="line">                buckets[i][j] = <span class="literal">NULL</span>;</span><br><span class="line">                k++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="/images/dataStructureSort.webp" alt=" comparison "></p>
<h2 id="应试"><a href="#应试" class="headerlink" title="应试"></a>应试</h2><h3 id="概述作业"><a href="#概述作业" class="headerlink" title="概述作业"></a>概述作业</h3><blockquote>
<p>数据在计算机内存中的表示是指（） 。数据的存储结构</p>
<p>数据结构形式地定义为（K，R），其中K是（）的有限集合，R是K上的关系上的有限集合。数据元素</p>
<p>数据结构形式地定义为（D,S），其中D是数据元素的有限集合，S是D上的（）的有限集合。关系</p>
<p>一个广义表的表尾总是一个（ ）。广义表</p>
</blockquote>
<h3 id="线性表"><a href="#线性表" class="headerlink" title="线性表"></a>线性表</h3><blockquote>
<p>对于线性表的各种操作，考虑：</p>
<ol>
<li>length与MaxSize的关系</li>
<li>length是否为零</li>
<li>输入的参数是否符合规则（大于或小于零，是否为空）</li>
</ol>
</blockquote>
<h3 id="栈"><a href="#栈" class="headerlink" title="栈"></a>栈</h3><blockquote>
<p>对于栈的各种操作，考虑：</p>
<ol>
<li>栈空或栈满的情况</li>
<li>输入的参数是否符合规则（大于或小于零，是否为空）</li>
</ol>
</blockquote>
<ul>
<li>后缀表达式</li>
</ul>
<blockquote>
<p>从左往右开始扫描中缀表达式。<br>        遇到数字直接加入后缀表达式<br>        遇到运算符时：<br>            a.若为’(‘则入栈<br>            b.若为’)’，则依次把栈中的运算符加入后缀表达式，直到出现’(’，从栈中删除’)’。<br>            c.若为除括号外的其他运算符，当其他优先级高于除’)’外的栈顶运算符时，直接入栈。<br>        否则从栈顶开始，依次弹出比当前处理的运算符优先级高和优先级相等的运算符，<br>        直到一个比它优先级低的或遇到了一个左括号为止。</p>
</blockquote>
<h3 id="队列"><a href="#队列" class="headerlink" title="队列"></a>队列</h3><blockquote>
<p>对于队列的各种操作，考虑：</p>
<ol>
<li>队列空和满的情况</li>
<li>输入的参数是否符合规则（大于或小于零，是否为空）</li>
</ol>
</blockquote>
<h3 id="图-1"><a href="#图-1" class="headerlink" title="图"></a>图</h3><blockquote>
<p>用邻接矩阵表示有N个结点E条边的图时，深度优先遍历算法的时间复杂度是：C.O(N2)</p>
</blockquote>
<h3 id="栈与队列"><a href="#栈与队列" class="headerlink" title="栈与队列"></a>栈与队列</h3><blockquote>
<p> 下列关于栈的叙述中，错误的是：</p>
<ol>
<li><strong>采用非递归方式重写递归程序时必须使用栈</strong></li>
<li>函数调用时，系统要用栈保存必要的信息</li>
<li><strong>只要确定了入栈次序，即可确定出栈次序</strong></li>
<li><strong>栈是一种受限的线性表，允许在其两端进行操作</strong></li>
</ol>
</blockquote>
<blockquote>
<p> 最不适合用作栈的链表是（）。</p>
<p>A.只有表头指针没有表尾指针的循环双链表</p>
<p>B.只有表尾指针没有表头指针的循环双链表</p>
<p>C.只有表尾指针没有表头指针的循环单链表</p>
<p>D.<strong>只有表头指针没有表尾指针的循环单链表</strong></p>
</blockquote>
<blockquote>
<p> 下列关于栈的叙述中，错误的是：</p>
<ol>
<li>采用非递归方式重写递归程序时必须使用栈</li>
<li>函数调用时，系统要用栈保存必要的信息</li>
<li>只要确定了入栈次序，即可确定出栈次序</li>
<li>栈是一种受限的线性表，允许在其两端进行操作</li>
</ol>
<p> A.仅 1</p>
<p> B.仅 1、2、3</p>
<p> **C.**仅 1、3、4</p>
<p> D.仅 2、3、4</p>
<p> 循环队列的引入是为了（ ）。克服假溢出</p>
</blockquote>
<h3 id="树-1"><a href="#树-1" class="headerlink" title="树"></a>树</h3><blockquote>
<p>树的后序遍历与其对应的二叉树的哪种遍历相同？中序</p>
<p>森林的中序遍历与对应二叉树的什么遍历序列相同？中序</p>
</blockquote>
<h3 id="排序-1"><a href="#排序-1" class="headerlink" title="排序"></a>排序</h3><blockquote>
<p>有组记录的排序码为{ 46，79，56，38，40，84 }，则利用堆排序的方法建立的初始堆为：</p>
<p>84，79，56，38，40，46</p>
</blockquote>
<blockquote>
<p>下面四种排序算法中，稳定的算法是：归并排序</p>
</blockquote>
<blockquote>
<p>快速排序下列排序算法中，时间复杂度不受数据初始状态影响，恒为O(NlogN)的是：</p>
<p>堆排序</p>
</blockquote>
<blockquote>
<p>对N个记录进行快速排序，在最坏的情况下，其时间复杂度是：</p>
<p>O(N2)</p>
</blockquote>
<blockquote>
<p>下列关键码序列中，属于堆的是（ 　）。</p>
<p>（15，30，22，93，52，71）</p>
</blockquote>
]]></content>
      <categories>
        <category>软件技术</category>
      </categories>
      <tags>
        <tag>笔记</tag>
        <tag>Data-Structure-and-Algorithm</tag>
      </tags>
  </entry>
  <entry>
    <title>Database Principles</title>
    <url>/2024/02/27/Database-Principles/</url>
    <content><![CDATA[<h1 id="数据库原理"><a href="#数据库原理" class="headerlink" title="数据库原理"></a>数据库原理</h1><h2 id="1-数据库概论"><a href="#1-数据库概论" class="headerlink" title="1.数据库概论"></a>1.数据库概论</h2><h3 id="数据库以及相关概念"><a href="#数据库以及相关概念" class="headerlink" title="数据库以及相关概念"></a>数据库以及相关概念</h3><ol>
<li>数据（<strong>data</strong>）：信息的表现形式和载体。</li>
<li>数据库（<strong>database</strong>）：长期存储在计算机内，有组织的，统一管理的相关数据的集合。</li>
<li>数据库管理系统（<strong>DBMS</strong>）：位于用户与操作系统逐之间的一层数据管理软件，为用户或应用程序提供访问DB的方法，包括DB的建立，查询，更新及各种数据控制。</li>
<li>数据库系统（<strong>DBS</strong>）：采用数据库技术的计算机系统。</li>
<li>数据库技术：研究数据库结构，存储设计管理和使用的一门软件学科。</li>
</ol>
<h3 id="高级数据库阶段"><a href="#高级数据库阶段" class="headerlink" title="高级数据库阶段"></a>高级数据库阶段</h3><h4 id="对象数据库技术"><a href="#对象数据库技术" class="headerlink" title="对象数据库技术"></a>对象数据库技术</h4><ul>
<li>面向对象与数据库技术结合的产物</li>
</ul>
<blockquote>
<p>主要特征</p>
<ol>
<li>可以完整的描述现实数据结构，以及数据之间嵌套递归的联系。 </li>
<li>具有封装性和继承性，提高了软件的可重用性</li>
</ol>
</blockquote>
<h4 id="分布式数据库系统"><a href="#分布式数据库系统" class="headerlink" title="分布式数据库系统"></a>分布式数据库系统</h4><blockquote>
<p>主要特征：</p>
<ol>
<li>数据物理上分布在不同场地，逻辑上是一个整体 。</li>
<li>每个场地可以执行局部应用，也可以执行全部应用<br>3.。 各地计算机由数据通信网络联系，本地计算机不能完成的任务可以通过通信网络获取其他场地支持。</li>
</ol>
</blockquote>
<h4 id="开放数据库互联技术"><a href="#开放数据库互联技术" class="headerlink" title="开放数据库互联技术"></a>开放数据库互联技术</h4><ul>
<li>用于单个应用程序访问不同的数据库</li>
</ul>
<ol start="4">
<li>XML数据库技术</li>
</ol>
<ul>
<li>灵活</li>
</ul>
<h4 id="现代信息集成技术"><a href="#现代信息集成技术" class="headerlink" title="现代信息集成技术"></a>现代信息集成技术</h4><ol>
<li>数据仓库</li>
<li>连及分析处理技术</li>
<li>数据挖掘</li>
</ol>
<h3 id="数据描述"><a href="#数据描述" class="headerlink" title="数据描述"></a>数据描述</h3><p>​	数据描述有两种形式：物理数据描述和逻辑数据描述。</p>
<ol>
<li>物理数据描述：数据在存储设备上的存储方式的描述。</li>
<li>逻辑数据描述：程序员或者用户用以操作的数据形式的描述，是抽象的概念化数据。</li>
</ol>
<h4 id="概念设计中的数据描述"><a href="#概念设计中的数据描述" class="headerlink" title="概念设计中的数据描述"></a>概念设计中的数据描述</h4><ul>
<li>实体（entity）</li>
<li>实体集 （entity set）</li>
<li>属性（attribute）</li>
<li>实体标识符（identifier）</li>
</ul>
<h4 id="逻辑设计中的数据描述"><a href="#逻辑设计中的数据描述" class="headerlink" title="逻辑设计中的数据描述"></a>逻辑设计中的数据描述</h4><ul>
<li>字段（Field）</li>
<li>记录（Record）</li>
<li>文件（file）</li>
<li>关键码（Key）</li>
</ul>
<h4 id="物理设计中的概念描述"><a href="#物理设计中的概念描述" class="headerlink" title="物理设计中的概念描述"></a>物理设计中的概念描述</h4><ol>
<li>物理存储介质层次，可分为以下六类</li>
</ol>
<ul>
<li>高速缓冲存储器（<strong>cache</strong>）</li>
<li>主存储器（<strong>main menory</strong>）</li>
<li>快擦鞋存储器(<strong>flash memory</strong>)</li>
<li>磁盘存储器(<strong>magnetic disk</strong>)</li>
<li>光存储器(<strong>optical sstorage</strong>)</li>
<li>磁带(<strong>tape storage</strong>)</li>
</ul>
<ol start="2">
<li>物理存储中的数据描述</li>
</ol>
<ul>
<li>位(<strong>bit</strong>)</li>
<li>字节（<strong>byte</strong>）</li>
<li>字(<strong>word</strong>)</li>
<li>块( <strong>Block</strong>)</li>
<li>桶 (<strong>bucket</strong>)</li>
<li>卷(<strong>volume</strong>)</li>
</ul>
<h4 id="数据联系的描述"><a href="#数据联系的描述" class="headerlink" title="数据联系的描述"></a>数据联系的描述</h4><p><strong>联系：是实体之间的互相关系。</strong></p>
<p><strong>联系的元数：与一个联系有关的实体集个数。</strong></p>
<ul>
<li>二元联系的三种类型</li>
</ul>
<ol>
<li>一对一联系</li>
<li>一对多联系</li>
<li>多对多联系</li>
</ol>
<h3 id="数据抽象过程"><a href="#数据抽象过程" class="headerlink" title="数据抽象过程"></a>数据抽象过程</h3><p>模型（model）: 是对现实世界的抽象。使用数据模型（data model）的概念描述数据库的结构和语义，对现实世界的数据进行抽象。</p>
<ul>
<li><strong>概念模型</strong>：用来表达用户需求观点的数据全局逻辑结构模型称为概念模型</li>
<li><strong>逻辑模型：</strong>表达计算机实现观点的DB全局逻辑结构的模型</li>
<li>**外部模型:**表达用户使用观点DB局部逻辑结构的模型</li>
<li><strong>内部模型：</strong>表达DB物理结构的模型</li>
</ul>
<p>他们之间的关系如图所示</p>
<p><img src="/images/" alt="structure"></p>
<h4 id="概念模型"><a href="#概念模型" class="headerlink" title="概念模型"></a>概念模型</h4><p>​	概念模型抽象级别最高，具有以下特点：</p>
<blockquote>
<ol>
<li>表达了数据的整体逻辑结构，他是系统用户对整个应用项目涉及的数据的全面描述</li>
<li>从用户需求的观点出发对数据建模</li>
<li>独立于硬件和软件。</li>
<li>是数据库设计人员与用户之间进行交流的工具。</li>
</ol>
</blockquote>
<p>​	<strong>现在采用的概念模型主要是实体联系模型（ER）(Entity Relationship Ship)</strong></p>
<ul>
<li><p>ER图有三个基本成分</p>
<ul>
<li><ol>
<li>矩形框：表示实体类型</li>
<li>菱形框：表示联系类型</li>
<li>椭圆形框：表示实体类型和联系类型的属性</li>
</ol>
</li>
</ul>
</li>
<li><p>ER图的优点</p>
<ul>
<li>简单易理解，真实反应客户需求</li>
<li>与计算机无关，客户容易接受</li>
</ul>
</li>
<li><p>ER图的缺点</p>
<ul>
<li>只能说明实体间语义的练习，不能说明详细的数据结构</li>
</ul>
</li>
</ul>
<h4 id="逻辑模型"><a href="#逻辑模型" class="headerlink" title="逻辑模型"></a>逻辑模型</h4><ul>
<li>逻辑模型的特点</li>
</ul>
<ol>
<li>表达了DB整体的逻辑结构</li>
<li>从数据库实现的观点出发对数据建模</li>
<li>独立于硬件，依赖于软件（DBMS）</li>
<li>是数据库设计人员与应用程序猿之间进行交流的工具</li>
</ol>
<h5 id="逻辑模型的种类"><a href="#逻辑模型的种类" class="headerlink" title="逻辑模型的种类"></a>逻辑模型的种类</h5><ol>
<li>层次模型</li>
<li>网状模型</li>
<li>关系模型</li>
<li>对象模型</li>
</ol>
<h4 id="三层模式和两级映像"><a href="#三层模式和两级映像" class="headerlink" title="三层模式和两级映像"></a>三层模式和两级映像</h4><ul>
<li>型和值</li>
</ul>
<ol>
<li>型：对一类数据的结构和属性的说明</li>
<li>值：是型的一个具体赋值</li>
</ol>
<ul>
<li>&#x3D;&#x3D;模式&#x3D;&#x3D;</li>
</ul>
<p>​    定义：数据模型使用DB的数据定义语言（DDL），定义后的内容称为模式。</p>
<ol>
<li>描述数据库逻辑结构和特征</li>
<li>对”型“的描述</li>
<li>反映数据结构及其联系</li>
<li>相对稳定</li>
<li>以某一种数据模型为基础</li>
</ol>
<ul>
<li>三层模式：在数据库设计中，有时会使用三层模式来描述数据库的结构和组织方式。这通常涉及到将数据库划分为三个不同的层次或组件：外部模式、概念模式和内部模式。</li>
</ul>
<ol>
<li><p>外部模式（External Schema）：也称为用户视图或子模式，是用户或应用程序能够直接访问和操作的部分数据库。每个外部模式都是特定用户或应用程序对数据库的定制视图。</p>
</li>
<li><p>概念模式（Conceptual Schema）：也称为全局模式或逻辑模式，是数据库的整体逻辑结构和组织方式的抽象表示。它描述了数据库中的所有数据对象、它们之间的关系以及约束条件。</p>
</li>
<li><p>内部模式（Internal Schema）：也称为存储模式，是数据库在物理存储层面的表示。它描述了数据在存储介质上的存储方式、索引结构等细节。</p>
</li>
</ol>
<ul>
<li>两级映像</li>
</ul>
<h3 id="数据库管理系统"><a href="#数据库管理系统" class="headerlink" title="数据库管理系统"></a>数据库管理系统</h3><h4 id="DBMS的工作模式"><a href="#DBMS的工作模式" class="headerlink" title="DBMS的工作模式"></a>DBMS的工作模式</h4><ol>
<li>接受应用程序的数据请求和处理请求</li>
<li>将用户的数据请求(高级指令)转换成复杂的机器代码(低层指令)3</li>
<li>实现对数据库的操作</li>
<li>从对数据库的操作中接受查询结果</li>
<li>对查询结果进行处理(格式转换)</li>
<li>将处理结果返回给用户</li>
</ol>
<h4 id="DBMS的主要功能"><a href="#DBMS的主要功能" class="headerlink" title="DBMS的主要功能"></a>DBMS的主要功能</h4><ol>
<li>数据库的定义功能(DDL，(Data Definition<br> 数据库三层结构、两级映像、定义数据的完整性约anguage束、保密限制约束等</li>
<li>数据库的操纵功能(DML，data manipul<br> ation language<br> 检索:查询，更新::插入、删除、更新</li>
<li>数据库的保护功能<br> 恢复，并发控制，完整性，安全性</li>
<li>数据库的维护功能(Utilities<br> 数据载入、转换、转储等</li>
<li>数据字典(DD</li>
</ol>
<h3 id="数据库系统"><a href="#数据库系统" class="headerlink" title="数据库系统"></a>数据库系统</h3><h4 id="DBS的组成"><a href="#DBS的组成" class="headerlink" title="DBS的组成"></a>DBS的组成</h4><ol>
<li>数据库</li>
<li>硬件</li>
<li>软件</li>
<li>数据管理员</li>
</ol>
<h4 id="DBS的全局结构"><a href="#DBS的全局结构" class="headerlink" title="DBS的全局结构"></a>DBS的全局结构</h4><p><img src="C:\Users\Regen\AppData\Roaming\Typora\typora-user-images\image-20240311125039548.png" alt="image-20240311125039548"></p>
<h4 id="DBS结构的分类"><a href="#DBS结构的分类" class="headerlink" title="DBS结构的分类"></a>DBS结构的分类</h4><ol>
<li><strong>层次数据库结构（Hierarchical Database Structure）</strong>：<ul>
<li>层次数据库结构是最早期的数据库组织方式之一，它使用树状结构来组织数据。每个节点可以有一个或多个子节点，但每个节点只有一个父节点。</li>
<li>典型的例子是IBM的IMS（Information Management System）数据库系统。</li>
</ul>
</li>
<li><strong>网络数据库结构（Network Database Structure）</strong>：<ul>
<li>网络数据库结构扩展了层次数据库的概念，允许一个节点有多个父节点，形成一个图状结构。这种结构提供了更灵活的数据组织方式。</li>
<li>CODASYL（Conference on Data Systems Languages）标准定义了一种常见的网络数据库模型，例如IDMS（Integrated Data Management System）。</li>
</ul>
</li>
<li><strong>关系数据库结构（Relational Database Structure）</strong>：<ul>
<li>关系数据库结构是当前最常用的数据库组织方式之一。它基于关系模型，使用表格（称为关系）来表示数据，并使用关系之间的键值关联来建立数据之间的联系。</li>
<li>关系数据库的代表性产品包括Oracle、MySQL、SQL Server等。</li>
</ul>
</li>
<li><strong>面向对象数据库结构（Object-Oriented Database Structure）</strong>：<ul>
<li>面向对象数据库结构将面向对象编程的思想引入数据库系统，允许将复杂数据结构和对象存储在数据库中，并支持面向对象的查询和操作。</li>
<li>典型的面向对象数据库系统包括ObjectDB、db4o等。</li>
</ul>
</li>
<li><strong>文档数据库结构（Document Database Structure）</strong>：<ul>
<li>文档数据库结构是一种非常灵活的数据库组织方式，它使用文档来存储数据，文档可以是JSON、XML等格式。</li>
<li>MongoDB是一种常见的文档数据库系统。</li>
</ul>
</li>
<li><strong>键-值存储结构（Key-Value Store Structure）</strong>：<ul>
<li>键-值存储结构是一种简单的数据库组织方式，它使用键值对来存储数据，其中每个键都唯一地标识一个值。</li>
<li>Redis、Amazon DynamoDB等是常见的键-值存储数据库系统。</li>
</ul>
</li>
</ol>
<h2 id="2-关系模型和关系运算理论"><a href="#2-关系模型和关系运算理论" class="headerlink" title="2.关系模型和关系运算理论"></a>2.关系模型和关系运算理论</h2><h3 id="关系模型的基本概念"><a href="#关系模型的基本概念" class="headerlink" title="关系模型的基本概念"></a>关系模型的基本概念</h3><p>​	定义：用二维表格表示实体集，用关键码表示实体之间联系的数据模型称为关系模型（Relational Model）。</p>
<ul>
<li>非平凡的函数依赖</li>
</ul>
<p>如果X→Y，但Y不包含于X，则称		X→Y是非平凡的函数依赖。</p>
<ul>
<li>平凡的函数依赖</li>
</ul>
<p>如果X→Y，但Y包含于X，则称		X→Y是平凡的函数依赖。</p>
<ul>
<li>决定因子</li>
</ul>
<p>如果X→Y，则X称为决定因子。 </p>
<h4 id="关键码"><a href="#关键码" class="headerlink" title="关键码"></a>关键码</h4><ul>
<li>超键（super）</li>
</ul>
<p>在关系中能唯一标识元组的属性或属性集称为关系模式的超键。</p>
<ul>
<li>候选键(Candidate)</li>
</ul>
<p>不含有多余属性的超键称为侯选建</p>
<ul>
<li>主键（primary）</li>
</ul>
<p>用户选作元组标识的候选键称为主键</p>
<ul>
<li>外键(foreign)</li>
</ul>
<p>若模式R中属性K是其他模式的主键，则K在R中称为外键。</p>
<h4 id="关系"><a href="#关系" class="headerlink" title="关系"></a>关系</h4><p>定义：一个属性相同的元组的集合。</p>
<blockquote>
<p>规范性限制</p>
<p>关系中每一个属性值都是不可分解的；</p>
<p>关系中不允许出现重复元组，即不允许出现相同的元组；</p>
<p>由于关系是一个集合，因此不考虑元组间的顺序，即没有行序；</p>
<p>元组中的属性在理论上也是无序的，但使用时按习惯考虑列的顺序。</p>
</blockquote>
<h4 id="3类完整性规则"><a href="#3类完整性规则" class="headerlink" title="3类完整性规则"></a>3类完整性规则</h4><h4 id="实体完整性给规则"><a href="#实体完整性给规则" class="headerlink" title="实体完整性给规则"></a>实体完整性给规则</h4><p>要求关系中元组在组成主键的属性上不能有空值。如果出现空值，那么主键值就起不了惟一标识元组的作用。</p>
<h4 id="参照完整性规则"><a href="#参照完整性规则" class="headerlink" title="参照完整性规则"></a>参照完整性规则</h4><p>如果属性集K是关系模式R1的主键，K也是关系模式R2的外键，那么在R2的关系中，K的取值只允许两种可能，或者为空值，或者等于R1关系中某个主键值。</p>
<h4 id="用户定义的完整性规则"><a href="#用户定义的完整性规则" class="headerlink" title="用户定义的完整性规则"></a>用户定义的完整性规则</h4><p>用户可以针对具体的数据约束，设置完整性规则，由系统来检验实施，以使用统一的方法处理它们，不再由应用程序承担这项工作。</p>
<h3 id="关系模式"><a href="#关系模式" class="headerlink" title="关系模式"></a>关系模式</h3><p>​	在关系模型中，记录类型称为关系模式，而关系模式的集合就是数据库的概念模式。</p>
<h4 id="关系模式与关系"><a href="#关系模式与关系" class="headerlink" title="关系模式与关系"></a>关系模式与关系</h4><p>关系模式是型，是对关系的描述，是静态的，稳定的。关系是值，由赋予它的元组语义来确定的，是动态的，不断变化的关系是关系模式在某一时刻的状态或内容</p>
<h3 id="关系代数"><a href="#关系代数" class="headerlink" title="关系代数"></a>关系代数</h3><h3 id="关系代数表达式的优化"><a href="#关系代数表达式的优化" class="headerlink" title="关系代数表达式的优化"></a>关系代数表达式的优化</h3><p>​	</p>
]]></content>
      <categories>
        <category>软件技术</category>
      </categories>
      <tags>
        <tag>笔记</tag>
        <tag>数据库</tag>
        <tag>数据库原理</tag>
      </tags>
  </entry>
  <entry>
    <title>ESP32-Wroom-32玩法</title>
    <url>/2024/12/15/ESP32-Wroom-32%E7%8E%A9%E6%B3%95/</url>
    <content><![CDATA[<h1 id="硬件设计"><a href="#硬件设计" class="headerlink" title="硬件设计"></a>硬件设计</h1><p>基于esp32-wroom-32</p>
<h2 id="Project-1-设计一片esp32-uno"><a href="#Project-1-设计一片esp32-uno" class="headerlink" title="Project 1 设计一片esp32 uno"></a>Project 1 设计一片esp32 uno</h2><h1 id="软件代码"><a href="#软件代码" class="headerlink" title="软件代码"></a>软件代码</h1><p>全部代码基于<code>platformIO</code></p>
<h2 id="连接emqx分布式mqtt服务器"><a href="#连接emqx分布式mqtt服务器" class="headerlink" title="连接emqx分布式mqtt服务器"></a>连接emqx分布式mqtt服务器</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;WiFiClientSecure.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;PubSubClient.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;time.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// WiFi credentials</span></span><br><span class="line">uint LED = <span class="number">16</span>;        </span><br><span class="line"><span class="type">const</span> <span class="type">char</span> *ssid = <span class="string">&quot;regen&quot;</span>;  <span class="comment">// Replace with your WiFi name</span></span><br><span class="line"><span class="type">const</span> <span class="type">char</span> *password = <span class="string">&quot;regen&#x27;s pwd&quot;</span>; <span class="comment">// Replace with your WiFi password</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// MQTT Broker settings</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> mqtt_port = <span class="number">8883</span>;  <span class="comment">// MQTT port (TLS)</span></span><br><span class="line"><span class="type">const</span> <span class="type">char</span> *mqtt_broker = <span class="string">&quot;server ip or domain&quot;</span>;  <span class="comment">// EMQX broker endpoint</span></span><br><span class="line"><span class="type">const</span> <span class="type">char</span> *mqtt_topic = <span class="string">&quot;/esp38266/test&quot;</span>; <span class="comment">// MQTT topic</span></span><br><span class="line"><span class="type">const</span> <span class="type">char</span> *mqtt_username = <span class="string">&quot;uasername&quot;</span>;  <span class="comment">// MQTT username for authentication</span></span><br><span class="line"><span class="type">const</span> <span class="type">char</span> *mqtt_password = <span class="string">&quot;passwd&quot;</span>;  <span class="comment">// MQTT password for authentication</span></span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">char</span> *mqtt_start = <span class="string">&quot;start&quot;</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">char</span> *mqtt_stop = <span class="string">&quot;stop&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// NTP Server settings</span></span><br><span class="line"><span class="type">const</span> <span class="type">char</span> *ntp_server = <span class="string">&quot;pool.ntp.org&quot;</span>; <span class="comment">// Default NTP server</span></span><br><span class="line"><span class="type">const</span> <span class="type">long</span> gmt_offset_sec = <span class="number">0</span>;           <span class="comment">// GMT offset in seconds (adjust for your time zone)</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> daylight_offset_sec = <span class="number">0</span>;       <span class="comment">// Daylight saving time offset in seconds</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// WiFi and MQTT client initialization</span></span><br><span class="line">WiFiClientSecure espClient;</span><br><span class="line"><span class="function">PubSubClient <span class="title">mqtt_client</span><span class="params">(espClient)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// SSL certificate for MQTT broker</span></span><br><span class="line"><span class="type">static</span> <span class="type">const</span> <span class="type">char</span> ca_cert[] PROGMEM = <span class="string">R&quot;EOF(</span></span><br><span class="line"><span class="string">-----BEGIN CERTIFICATE-----</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">-----END CERTIFICATE-----</span></span><br><span class="line"><span class="string">)EOF&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Function declarations</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">connectToWiFi</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">connectToMQTT</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">syncTime</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">mqttCallback</span><span class="params">(<span class="type">char</span> *topic, byte *payload, <span class="type">unsigned</span> <span class="type">int</span> length)</span></span>;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">judgeEqual</span><span class="params">(<span class="type">char</span> *str1, <span class="type">const</span> <span class="type">char</span> *str2, <span class="type">int</span> length)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">setup</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">pinMode</span>(LED, OUTPUT);</span><br><span class="line">    Serial.<span class="built_in">begin</span>(<span class="number">115200</span>);</span><br><span class="line">    <span class="built_in">connectToWiFi</span>();</span><br><span class="line">    <span class="built_in">syncTime</span>();  <span class="comment">// X.509 validation requires synchronization time</span></span><br><span class="line">    mqtt_client.<span class="built_in">setServer</span>(mqtt_broker, mqtt_port);</span><br><span class="line">    mqtt_client.<span class="built_in">setCallback</span>(mqttCallback);</span><br><span class="line">    <span class="built_in">connectToMQTT</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">connectToWiFi</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    WiFi.<span class="built_in">begin</span>(ssid, password);</span><br><span class="line">    <span class="keyword">while</span> (WiFi.<span class="built_in">status</span>() != WL_CONNECTED) &#123;</span><br><span class="line">        <span class="built_in">delay</span>(<span class="number">1000</span>);</span><br><span class="line">        Serial.<span class="built_in">println</span>(<span class="string">&quot;Connecting to WiFi...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    Serial.<span class="built_in">println</span>(<span class="string">&quot;Connected to WiFi&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">syncTime</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">configTime</span>(gmt_offset_sec, daylight_offset_sec, ntp_server);</span><br><span class="line">    Serial.<span class="built_in">print</span>(<span class="string">&quot;Waiting for NTP time sync: &quot;</span>);</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">time</span>(<span class="literal">nullptr</span>) &lt; <span class="number">8</span> * <span class="number">3600</span> * <span class="number">2</span>) &#123;</span><br><span class="line">        <span class="built_in">delay</span>(<span class="number">1000</span>);</span><br><span class="line">        Serial.<span class="built_in">print</span>(<span class="string">&quot;.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    Serial.<span class="built_in">println</span>(<span class="string">&quot;Time synchronized&quot;</span>);</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">tm</span> timeinfo;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">getLocalTime</span>(&amp;timeinfo)) &#123;</span><br><span class="line">        Serial.<span class="built_in">print</span>(<span class="string">&quot;Current time: &quot;</span>);</span><br><span class="line">        Serial.<span class="built_in">println</span>(<span class="built_in">asctime</span>(&amp;timeinfo));</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        Serial.<span class="built_in">println</span>(<span class="string">&quot;Failed to obtain local time&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">connectToMQTT</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    espClient.<span class="built_in">setCACert</span>(ca_cert); <span class="comment">// Load CA certificate</span></span><br><span class="line">    <span class="keyword">while</span> (!mqtt_client.<span class="built_in">connected</span>()) &#123;</span><br><span class="line">        String client_id = <span class="string">&quot;esp32-client-&quot;</span> + <span class="built_in">String</span>(WiFi.<span class="built_in">macAddress</span>());</span><br><span class="line">        Serial.<span class="built_in">printf</span>(<span class="string">&quot;Connecting to MQTT Broker as %s.....\n&quot;</span>, client_id.<span class="built_in">c_str</span>());</span><br><span class="line">        <span class="keyword">if</span> (mqtt_client.<span class="built_in">connect</span>(client_id.<span class="built_in">c_str</span>(), mqtt_username, mqtt_password)) &#123;</span><br><span class="line">            Serial.<span class="built_in">println</span>(<span class="string">&quot;Connected to MQTT broker&quot;</span>);</span><br><span class="line">            mqtt_client.<span class="built_in">subscribe</span>(mqtt_topic);</span><br><span class="line">            <span class="comment">// Publish message upon successful connection</span></span><br><span class="line">            mqtt_client.<span class="built_in">publish</span>(mqtt_topic, <span class="string">&quot;Hi EMQX I&#x27;m ESP32 ^^&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            Serial.<span class="built_in">print</span>(<span class="string">&quot;Failed to connect to MQTT broker, rc=&quot;</span>);</span><br><span class="line">            Serial.<span class="built_in">println</span>(mqtt_client.<span class="built_in">state</span>());</span><br><span class="line">            <span class="built_in">delay</span>(<span class="number">5000</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">mqttCallback</span><span class="params">(<span class="type">char</span> *topic, byte *payload, <span class="type">unsigned</span> <span class="type">int</span> length)</span> </span>&#123;</span><br><span class="line">    Serial.<span class="built_in">print</span>(<span class="string">&quot;Message received on topic: &quot;</span>);</span><br><span class="line">    Serial.<span class="built_in">print</span>(topic);</span><br><span class="line">    Serial.<span class="built_in">print</span>(<span class="string">&quot;]: &quot;</span>);</span><br><span class="line">    <span class="type">char</span> judge[<span class="number">5</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; length; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (i &gt;= <span class="number">12</span>) &#123;</span><br><span class="line">            judge[i - <span class="number">12</span>] = payload[i];</span><br><span class="line">        &#125;</span><br><span class="line">        Serial.<span class="built_in">print</span>((<span class="type">char</span>)payload[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">judgeEqual</span>(judge, mqtt_start, <span class="number">5</span>)) &#123;</span><br><span class="line">        Serial.<span class="built_in">print</span>(<span class="string">&quot;Start signal received, turning LED on&quot;</span>);</span><br><span class="line">        <span class="built_in">digitalWrite</span>(LED, HIGH); <span class="comment">// Turn the LED on</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">judgeEqual</span>(judge, mqtt_stop, <span class="number">4</span>)) &#123;</span><br><span class="line">        Serial.<span class="built_in">print</span>(<span class="string">&quot;Stop signal received, turning LED off&quot;</span>);</span><br><span class="line">        <span class="built_in">digitalWrite</span>(LED, LOW); <span class="comment">// Turn the LED off</span></span><br><span class="line">    &#125;</span><br><span class="line">    Serial.<span class="built_in">println</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">judgeEqual</span><span class="params">(<span class="type">char</span> *str1, <span class="type">const</span> <span class="type">char</span> *str2, <span class="type">int</span> length)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; length; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (str1[i] != str2[i]) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">loop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!mqtt_client.<span class="built_in">connected</span>()) &#123;</span><br><span class="line">        <span class="built_in">connectToMQTT</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    mqtt_client.<span class="built_in">loop</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>







<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="comment">; PlatformIO Project Configuration File</span></span><br><span class="line"><span class="comment">;</span></span><br><span class="line"><span class="comment">;   Build options: build flags, source filter</span></span><br><span class="line"><span class="comment">;   Upload options: custom upload port, speed and extra flags</span></span><br><span class="line"><span class="comment">;   Library options: dependencies, extra library storages</span></span><br><span class="line"><span class="comment">;   Advanced options: extra scripting</span></span><br><span class="line"><span class="comment">;</span></span><br><span class="line"><span class="comment">; Please visit documentation for the other options and examples</span></span><br><span class="line"><span class="comment">; https://docs.platformio.org/page/projectconf.html</span></span><br><span class="line"></span><br><span class="line"><span class="section">[env:denky32]</span></span><br><span class="line"><span class="attr">platform</span> = espressif32</span><br><span class="line"><span class="attr">board</span> = esp32dev</span><br><span class="line"><span class="attr">framework</span> = ardui<span class="literal">no</span></span><br><span class="line"></span><br><span class="line"><span class="comment">; Library dependencies</span></span><br><span class="line"><span class="attr">lib_deps</span> = </span><br><span class="line">    PubSubClient</span><br><span class="line">    arduino-libraries/NTPClient</span><br><span class="line"></span><br><span class="line"><span class="attr">monitor_speed</span> = <span class="number">115200</span> <span class="comment">; Set the serial monitor baud rate</span></span><br><span class="line"><span class="attr">upload_speed</span> = <span class="number">115200</span> <span class="comment">; Upload speed for flashing</span></span><br><span class="line"></span><br><span class="line"><span class="attr">build_flags</span> =</span><br><span class="line">    -D PIO_FRAMEWORK_ARDUINO_ESP32_BLE <span class="comment">; Optional, depending on usage</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>硬件技术</category>
      </categories>
      <tags>
        <tag>笔记</tag>
        <tag>嵌入式</tag>
        <tag>Iot</tag>
        <tag>esp32</tag>
        <tag>物联网协议</tag>
        <tag>esp32series</tag>
      </tags>
  </entry>
  <entry>
    <title>ESP32物联网开发板大失败</title>
    <url>/2024/12/03/ESP32%E7%89%A9%E8%81%94%E7%BD%91%E5%BC%80%E5%8F%91%E6%9D%BF%E5%A4%A7%E5%A4%B1%E8%B4%A5/</url>
    <content><![CDATA[<h1 id="ESP32物联网开发板大失败"><a href="#ESP32物联网开发板大失败" class="headerlink" title="ESP32物联网开发板大失败"></a>ESP32物联网开发板大失败</h1><p><strong>提醒自己别走太快，太快了容易跌跟头，慢一点吃透一点。</strong></p>
<p>第一版ESP32开发板，出现太多问题，需要认真总结。<del>开始想要放弃电路设计。</del></p>
<p><img src="/../images/hardware/esp32iotboard/1.jpg"></p>
<p><img src="/../images/hardware/esp32iotboard/2.jpg"></p>
<p><strong>错了已经错了，悟已往之不谏，知来者之可追。</strong></p>
]]></content>
      <categories>
        <category>硬件技术</category>
      </categories>
      <tags>
        <tag>笔记</tag>
        <tag>嵌入式</tag>
        <tag>Iot</tag>
        <tag>esp32</tag>
        <tag>物联网协议</tag>
      </tags>
  </entry>
  <entry>
    <title>ESP32系列简介</title>
    <url>/2024/12/04/ESP32%E7%B3%BB%E5%88%97%E7%AE%80%E4%BB%8B/</url>
    <content><![CDATA[<ul>
<li>Espressif 将产品分为5个系列分别是：<ol>
<li><strong>ESP32-S 系列</strong></li>
<li><strong>ESP32-C 系列</strong></li>
<li><strong>ESP32-H 系列</strong></li>
<li><strong>ESP32   系列</strong></li>
<li><strong>ESP8266 系列</strong></li>
</ol>
</li>
</ul>
<p><strong>每个系列都有各自的特点以及主要用途范围</strong></p>
<p>ESP32系列包含多个子系列，以下是一些常见系列的主要用途、特点及功能介绍：</p>
<h1 id="ESP32"><a href="#ESP32" class="headerlink" title="ESP32"></a>ESP32</h1><ul>
<li><strong>用途</strong>：广泛应用于各种物联网和无线通信相关的项目，如智能家居控制、工业自动化数据采集与控制、智能玩具、可穿戴设备等领域.</li>
<li><strong>特点</strong> ：<ul>
<li><strong>性能稳定</strong>：工作温度范围达到-40°C到+125°C，集成自校准电路实现动态电压调整，可适应多种外部条件变化。</li>
<li><strong>高度集成</strong>：集天线开关、射频巴伦、功率放大器、低噪声放大器、滤波器以及电源管理模块于一体，占用较小的PCB空间，外围器件需求少。</li>
<li><strong>超低功耗</strong>：具备精细分辨时钟门控、省电模式和动态电压调整等低功耗设计，适用于移动设备和电池供电的物联网设备。</li>
</ul>
</li>
<li><strong>功能</strong> ：<ul>
<li><strong>处理器</strong>：配备Tensilica Xtensa 32位LX6双核处理器，运行频率可达160MHz或240MHz，具有较高的处理能力和多任务处理能力。</li>
<li><strong>无线通信</strong>：支持Wi-Fi 802.11 b&#x2F;g&#x2F;n协议，可工作在Station模式、SoftAP模式或两者兼具的模式，同时支持Wi-Fi Direct。还集成了传统蓝牙和低功耗蓝牙功能，方便与各种蓝牙设备连接通信。</li>
<li><strong>丰富外设</strong>：拥有触摸传感器、ADC、DAC、UART、SPI、I2C、PWM等多种内置外设，便于连接和控制各类外部设备。</li>
<li><strong>安全机制</strong>：内置多种安全机制，如加密算法、安全启动等，保障数据传输的安全性。</li>
</ul>
</li>
</ul>
<h1 id="ESP32-C3"><a href="#ESP32-C3" class="headerlink" title="ESP32-C3"></a>ESP32-C3</h1><ul>
<li><strong>用途</strong>：适合对<strong>成本敏感且空间有限</strong>的物联网应用，如智能插座、智能传感器等小型物联网设备.</li>
<li><strong>特点</strong> ：<ul>
<li><strong>低成本</strong>：价格相对较低，有助于降低产品成本。</li>
<li><strong>小尺寸封装</strong>：采用QFN32 (5mm*5mm)封装，提供22或16个IO脚，节省PCB空间。</li>
<li><strong>低功耗性能</strong>：具备行业领先的低功耗性能和射频性能，可满足电池供电设备的长时间运行需求。</li>
</ul>
</li>
<li><strong>功能</strong> ：<ul>
<li><strong>处理器</strong>：搭载RISC-V 32位单核处理器，四级流水线架构，主频高达160MHz。</li>
<li><strong>无线通信</strong>：完整的Wi-Fi子系统，符合IEEE 802.11b&#x2F;g&#x2F;n协议，支持Station模式、SoftAP模式、SoftAP+Station模式和混杂模式，同时集成低功耗蓝牙子系统，支持Bluetooth 5和Bluetooth mesh。</li>
<li><strong>存储功能</strong>：内置400KB SRAM （其中16KB专用于cache）、384KB ROM存储空间，并支持多个外部SPI、Dual SPI、Quad SPI、QPI flash。</li>
<li><strong>安全机制</strong>：硬件加密加速器支持AES-128&#x2F;256、Hash、RSA、HMAC、数字签名和安全启动，还集成真随机数发生器，并支持片上存储器、片外存储器和外设的访问权限管理及片外存储器加解密功能 。</li>
</ul>
</li>
</ul>
<h1 id="ESP32-S3"><a href="#ESP32-S3" class="headerlink" title="ESP32-S3"></a>ESP32-S3</h1><ul>
<li><strong>用途</strong>：适用于对<strong>性能要求较高的物联网应用</strong>，如智能家电、工业控制、智能安防等领域，可实现更复杂的功能和处理更大量的数据.</li>
<li><strong>特点</strong> ：<ul>
<li><strong>高性能处理器</strong>：集成了高性能的Xtensa 32位LX7双核处理器，五级流水线架构，主频高达240MHz，并配备高达128位的数据总线位宽及专用的SIMD指令，提供优越的运算性能。</li>
<li><strong>大内存与存储支持</strong>：内置512KB SRAM、384KB ROM存储空间，并支持以SPI、Dual SPI、Quad SPI、Octal SPI、QPI、OPI等接口形式连接flash和片外RAM，可满足大量数据存储和处理的需求。</li>
<li><strong>增强的低功耗管理</strong>：针对不同应用场景提供灵活的功耗模式调节，ULP低功耗协处理器可在超低功耗状态下运行，进一步优化了功耗表现。</li>
</ul>
</li>
<li><strong>功能</strong> ：<ul>
<li><strong>无线通信</strong>：支持2.4GHz Wi-Fi和低功耗蓝牙 (Bluetooth® LE) 双模无线通信，具备完整的Wi-Fi子系统，支持Station、SoftAP和SoftAP+Station混杂三种模式。</li>
<li><strong>安全机制</strong>：硬件加密加速器支持AES-128&#x2F;256、Hash、RSA、HMAC、数字签名和安全启动，集成真随机数发生器，支持片上及片外存储器的访问权限管理及片外存储器加解密功能 。</li>
</ul>
</li>
</ul>
<h1 id="ESP32-H"><a href="#ESP32-H" class="headerlink" title="ESP32-H"></a>ESP32-H</h1><ul>
<li><strong>用途</strong>：主要用于开发Matter over Thread终端设备，支持通过Wi-Fi和Thread进行数据传输，在家电制造商开发智能家居产品等方面有较大优势.</li>
<li><strong>特点</strong>：聚焦于特定的无线通信协议和应用场景，为智能家居设备的互联互通提供了更优化的解决方案.</li>
<li><strong>功能</strong>：除了具备ESP32系列的基本功能外，着重支持Matter协议以及相关的Thread通信功能，以满足智能家居设备间无缝连接和互操作性的需求.</li>
</ul>
]]></content>
      <categories>
        <category>硬件技术</category>
      </categories>
      <tags>
        <tag>笔记</tag>
        <tag>嵌入式</tag>
        <tag>Iot</tag>
        <tag>esp32</tag>
        <tag>物联网协议</tag>
        <tag>esp32series</tag>
      </tags>
  </entry>
  <entry>
    <title>Flask+Vue+MySQL 小型项目实战</title>
    <url>/2024/07/08/Flask-Vue-MySQL-%E5%B0%8F%E5%9E%8B%E9%A1%B9%E7%9B%AE%E5%AE%9E%E6%88%98/</url>
    <content><![CDATA[<h1 id="项目简介"><a href="#项目简介" class="headerlink" title="项目简介"></a>项目简介</h1><h2 id="项目内容简介"><a href="#项目内容简介" class="headerlink" title="项目内容简介"></a>项目内容简介</h2><ol>
<li><p>搭建一个博客管理平台。</p>
</li>
<li><p>部署到我的服务器。以便将来我不再需要在本地进行一系列操作例如：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git pull </span><br><span class="line">git push </span><br><span class="line">hexo new <span class="string">&quot; pages&quot;</span> </span><br><span class="line">hexo generate </span><br><span class="line">hexo s </span><br><span class="line">hexo deploy</span><br></pre></td></tr></table></figure>

<p>同时还有博客文件备份的作用，预防电脑出事后的一系列恢复操作。</p>
</li>
<li><p>以及一些数据查询操作。</p>
</li>
<li><p>登录界面</p>
</li>
<li><p>管理界面</p>
</li>
</ol>
<h2 id="技术简介"><a href="#技术简介" class="headerlink" title="技术简介"></a>技术简介</h2><p><a href="https://regenm.github.io/2024/07/03/SpringBoot-vue-mysql%E9%A1%B9%E7%9B%AE%E5%AE%9E%E8%AE%AD/">SpringBoot+vue+mysql项目实训</a>结束后想试试别的web框架，发现有个轻量级的框架<code>Flask+Vue+SQLite</code>，我这里没安装SQLlite，于是使用<strong>MySQL</strong>进行替代。</p>
<ul>
<li><strong>MySQL和SQLite的区别</strong></li>
</ul>
<blockquote>
<p><strong>类型</strong>:</p>
<ul>
<li><strong>MySQL</strong>: 是一个<strong>完整的客户端&#x2F;服务器</strong>数据库管理系统，支持多用户访问，适用于大型和中型应用程序，具有高性能和可扩展性。</li>
<li><strong>SQLite</strong>: 是一个<strong>轻量级的嵌入式</strong>数据库引擎，它不需要一个独立的服务器进程或配置，可以直接访问普通的数据库文件。</li>
</ul>
<p><strong>部署和配置</strong>:</p>
<ul>
<li><strong>MySQL</strong>: 需要独立的服务器进程，可以在不同的操作系统上安装，需要配置和管理。</li>
<li><strong>SQLite</strong>: 作为库直接链接到应用程序，不需要配置服务器，部署非常简单，适合于轻量级的应用和嵌入式系统。</li>
</ul>
<p><strong>性能和适用场景</strong>:</p>
<ul>
<li><strong>MySQL</strong>: 由于其客户端&#x2F;服务器架构，适合需要处理大量数据和复杂查询的应用，具有较高的性能和并发处理能力。</li>
<li><strong>SQLite</strong>: 适合单用户或少量用户的本地应用，处理小型数据集和简单查询，性能通常比MySQL略低，但足够满足轻量级应用的需求。</li>
</ul>
<p><strong>特性和功能</strong>:</p>
<ul>
<li><strong>MySQL</strong>: 支持丰富的功能集，包括存储过程、触发器、复制和高级安全特性等，适合于复杂的数据处理需求。</li>
<li><strong>SQLite</strong>: 功能相对简单，不支持存储过程和触发器，但支持主键、索引和事务处理，满足基本的数据管理需求。</li>
</ul>
</blockquote>
<ul>
<li><strong>python虚拟环境</strong></li>
</ul>
<blockquote>
<p>Python 虚拟环境（virtual environment）是一个独立的、隔离的 Python 运行环境。它允许你在同一个系统上运行多个项目，而这些项目可以依赖于不同的包版本或不同的 Python 解释器版本。虚拟环境可以避免包版本冲突，并且提供一个干净的环境来开发和部署 Python 应用程序。</p>
</blockquote>
<ul>
<li><strong>Flask</strong></li>
</ul>
<blockquote>
<h3 id="Flask-简介"><a href="#Flask-简介" class="headerlink" title="Flask 简介"></a>Flask 简介</h3><p>Flask 是一个轻量级的 Python Web 框架，通常用于构建 web 应用程序。它是基于 WSGI（Web Server Gateway Interface）协议的，并且是微框架的一种，这意味着它提供了核心功能并且保持简洁，但允许开发者根据需要添加扩展或库来实现更复杂的功能。</p>
<h3 id="Flask-的特点"><a href="#Flask-的特点" class="headerlink" title="Flask 的特点"></a>Flask 的特点</h3><ol>
<li><strong>轻量级</strong>：Flask 被设计为一个微框架，提供最小的基础架构。它不包含 ORM（对象关系映射）或表单验证等功能，但允许开发者根据需要选择添加第三方扩展。</li>
<li><strong>灵活性</strong>：由于 Flask 是轻量级的，它提供了高度的灵活性。开发者可以根据项目需求进行配置，而不是被框架限制。</li>
<li><strong>易于使用</strong>：Flask 具有简单的学习曲线，非常适合快速开发原型。它的 API 设计非常直观，且有丰富的文档支持。</li>
<li><strong>扩展性</strong>：尽管 Flask 本身是一个微框架，但它有一个强大的扩展生态系统，允许你添加数据库集成、表单处理、用户认证等功能。</li>
</ol>
<h3 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h3><ul>
<li><strong>小型 Web 应用程序</strong>：由于其轻量级特性，Flask 非常适合构建小型和中型的 Web 应用程序。</li>
<li><strong>API 开发</strong>：Flask 被广泛用于开发 RESTful API 服务。</li>
<li><strong>快速原型设计</strong>：Flask 的简洁和灵活性使其非常适合快速开发应用程序原型。</li>
</ul>
</blockquote>
<blockquote>
<h3 id="WSGI-简介"><a href="#WSGI-简介" class="headerlink" title="WSGI 简介"></a>WSGI 简介</h3><p><strong>WSGI</strong>（Web Server Gateway Interface）是Python中一个用于Web应用程序和Web服务器之间的标准接口。它的全称是 <strong>Web Server Gateway Interface</strong>，这个标准定义了Web服务器如何与Web应用程序进行通信，并如何处理Web请求。</p>
<h3 id="WSGI-的作用"><a href="#WSGI-的作用" class="headerlink" title="WSGI 的作用"></a>WSGI 的作用</h3><ol>
<li><strong>标准化接口</strong>：WSGI 是一个规范，它定义了Python Web应用程序与Web服务器之间的接口。这意味着无论你使用什么样的Web服务器（如 Gunicorn、uWSGI）或Web框架（如 Flask、Django），只要它们遵循WSGI规范，它们就可以互相配合工作。</li>
<li><strong>应用和服务器的分离</strong>：WSGI 将Web应用程序与Web服务器分离，允许开发者选择不同的服务器和框架。这种灵活性意味着你可以轻松切换服务器或升级应用程序而不影响另一方。</li>
</ol>
<h3 id="WSGI-的工作原理"><a href="#WSGI-的工作原理" class="headerlink" title="WSGI 的工作原理"></a>WSGI 的工作原理</h3><p>WSGI 的工作流程如下：</p>
<ol>
<li><strong>请求传递</strong>：当Web服务器接收到HTTP请求时，它会通过WSGI将请求信息传递给Python的Web应用程序。请求的信息通常包括环境变量（如请求的URL、HTTP方法等）和请求体。</li>
<li><strong>响应生成</strong>：Web应用程序处理请求并生成一个响应。这个响应通常包括状态码、响应头和响应体。</li>
<li><strong>响应返回</strong>：Web应用程序将响应返回给Web服务器，Web服务器随后将响应传递给客户端（如浏览器）。</li>
</ol>
</blockquote>
<h1 id="项目分析"><a href="#项目分析" class="headerlink" title="项目分析"></a>项目分析</h1><h2 id="需求分析"><a href="#需求分析" class="headerlink" title="需求分析"></a>需求分析</h2><ol>
<li>登录界面<ol>
<li>一个密码框</li>
</ol>
</li>
<li>管理界面<ol>
<li>可视化显示数据</li>
<li>执行命令</li>
<li>执行脚本</li>
</ol>
</li>
</ol>
<h3 id="思维导图"><a href="#思维导图" class="headerlink" title="思维导图"></a>思维导图</h3><p><img src="/../images/flaskVueMysql/xmind.png" alt="xmind"></p>
<h1 id="前端设计"><a href="#前端设计" class="headerlink" title="前端设计"></a>前端设计</h1><h3 id="登录界面"><a href="#登录界面" class="headerlink" title="登录界面"></a>登录界面</h3><p><img src="/../images/flaskVueMysql/1.png" alt="login"></p>
<h3 id="管理界面"><a href="#管理界面" class="headerlink" title="管理界面"></a>管理界面</h3><p><img src="/../images/flaskVueMysql/2.png" alt="Main"></p>
<h1 id="难点解决-测试阶段"><a href="#难点解决-测试阶段" class="headerlink" title="难点解决( 测试阶段)"></a>难点解决( 测试阶段)</h1><h2 id="1-获取MySQL数据"><a href="#1-获取MySQL数据" class="headerlink" title="1. 获取MySQL数据"></a>1. 获取MySQL数据</h2><ul>
<li><p><strong>获取流程</strong></p>
<ol>
<li><p>前端发送get请求</p>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  import axios from &#x27;axios&#x27;;</span><br><span class="line">  </span><br><span class="line">  export default &#123;</span><br><span class="line">    data() &#123;</span><br><span class="line">      return &#123;</span><br><span class="line">        data: null,</span><br><span class="line">      &#125;;</span><br><span class="line">    &#125;,</span><br><span class="line">    mounted() &#123;</span><br><span class="line">      axios.get(&#x27;http://127.0.0.1:5000/api/data&#x27;)</span><br><span class="line">        .then(response =&gt; &#123;</span><br><span class="line">          this.data = response.data;</span><br><span class="line">        &#125;)</span><br><span class="line">        .catch(error =&gt; &#123;</span><br><span class="line">          console.error(error);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;;</span><br><span class="line">  &lt;/script&gt;</span><br></pre></td></tr></table></figure>

</li>
<li><p>后端响应请求，执行sql语句，返回结果</p>
</li>
</ol>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">CORS(app, origins=[<span class="string">&#x27;http://localhost:5173&#x27;</span>]) <span class="comment"># 允许前端的请求</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/api/data&#x27;</span>, methods=[<span class="string">&#x27;GET&#x27;</span>]</span>)     </span><span class="comment"># get方式 返回测试数据</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_data</span>():</span><br><span class="line">    cur = mysql.connection.cursor()</span><br><span class="line">    cur.execute(<span class="string">&#x27;SELECT * FROM test_data&#x27;</span>)</span><br><span class="line">    results = cur.fetchall()</span><br><span class="line">    cur.close()</span><br><span class="line">    <span class="keyword">return</span> jsonify(results)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run(debug=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure>

<ol start="3">
<li><p>前端显示结果</p>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  </span><br><span class="line">  &lt;h1&gt; This is a test View&lt;/h1&gt;</span><br><span class="line">  &lt;h1&gt; use Flask as backend&lt;/h1&gt;</span><br><span class="line">  &lt;h1&gt; get data from mysql&lt;/h1&gt;</span><br><span class="line">    &lt;div v-if=&quot;data&quot;&gt;</span><br><span class="line">      &lt;!-- 使用数据 --&gt;</span><br><span class="line">      &#123;&#123; data &#125;&#125;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;div v-else&gt;</span><br><span class="line">      Loading...</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>结果：</p>
</li>
</ol>
<p>  <img src="/../images/flaskVueMysql/3.png" alt="GET"></p>
</li>
</ul>
<h2 id="2-前端-文件上传"><a href="#2-前端-文件上传" class="headerlink" title="2. 前端 文件上传"></a>2. 前端 文件上传</h2><ul>
<li>上传之前检查依赖：</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pip install Werkzeug</span><br></pre></td></tr></table></figure>



<ul>
<li><p>文件上传流程</p>
<ol>
<li><p>前端选择本地文件，点击上传，发送post请求</p>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;form @submit.prevent=&quot;uploadFile&quot;&gt;</span><br><span class="line">        &lt;input type=&quot;file&quot; @change=&quot;handleFileUpload&quot;&gt;</span><br><span class="line">        &lt;button type=&quot;submit&quot;&gt;Upload&lt;/button&gt;</span><br><span class="line">      &lt;/form&gt;</span><br><span class="line">      &lt;!-- 文件上传按钮以及选框 --&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  </span><br><span class="line">  &lt;/template&gt;</span><br><span class="line">  </span><br><span class="line">  &lt;script&gt;</span><br><span class="line">  import axios from &#x27;axios&#x27;;</span><br><span class="line">  </span><br><span class="line">  export default &#123;</span><br><span class="line">    data() &#123;</span><br><span class="line">      return &#123;</span><br><span class="line">        file: null</span><br><span class="line">      &#125;;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">      handleFileUpload(event) &#123;</span><br><span class="line">        this.file = event.target.files[0];</span><br><span class="line">      &#125;,</span><br><span class="line">      uploadFile() &#123;</span><br><span class="line">        const formData = new FormData();</span><br><span class="line">        formData.append(&#x27;file&#x27;, this.file);</span><br><span class="line">        //向后端发送POST</span><br><span class="line">        axios.post(&#x27;http://127.0.0.1:5000/upload&#x27;, formData, &#123;</span><br><span class="line">          headers: &#123;</span><br><span class="line">            &#x27;Content-Type&#x27;: &#x27;multipart/form-data&#x27;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">        .then(response =&gt; &#123;</span><br><span class="line">          console.log(response.data);</span><br><span class="line">        &#125;)</span><br><span class="line">        .catch(error =&gt; &#123;</span><br><span class="line">          console.error(error);</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">  &lt;/script&gt;</span><br><span class="line">  </span><br></pre></td></tr></table></figure>

</li>
<li><p>后端响应请求，保存到特定文件夹</p>
 <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">UPLOAD_FOLDER = <span class="string">&#x27;uploads&#x27;</span></span><br><span class="line">app.config[<span class="string">&#x27;UPLOAD_FOLDER&#x27;</span>] = UPLOAD_FOLDER</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/upload&#x27;</span>, methods=[<span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">upload_file</span>():</span><br><span class="line">    <span class="comment"># 检查请求中是否包含文件</span></span><br><span class="line">    <span class="keyword">if</span> <span class="string">&#x27;file&#x27;</span> <span class="keyword">not</span> <span class="keyword">in</span> request.files:</span><br><span class="line">        <span class="keyword">return</span> jsonify(&#123;<span class="string">&#x27;error&#x27;</span>: <span class="string">&#x27;No file part&#x27;</span>&#125;), <span class="number">400</span></span><br><span class="line">    </span><br><span class="line">    file = request.files[<span class="string">&#x27;file&#x27;</span>]</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 检查文件是否有名字</span></span><br><span class="line">    <span class="keyword">if</span> file.filename == <span class="string">&#x27;&#x27;</span>:</span><br><span class="line">        <span class="keyword">return</span> jsonify(&#123;<span class="string">&#x27;error&#x27;</span>: <span class="string">&#x27;No selected file&#x27;</span>&#125;), <span class="number">400</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 保存文件</span></span><br><span class="line">    filename = file.filename</span><br><span class="line">    file.save(os.path.join(app.config[<span class="string">&#x27;UPLOAD_FOLDER&#x27;</span>], filename))</span><br><span class="line">    <span class="keyword">return</span> jsonify(&#123;<span class="string">&#x27;message&#x27;</span>: <span class="string">&#x27;File successfully uploaded&#x27;</span>&#125;), <span class="number">200</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>结果</p>
</li>
</ol>
<p>  注：修改后端代码需要重启flask应用</p>
  <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">CTRL+C</span><br><span class="line">flask run</span><br></pre></td></tr></table></figure>

<p>  <img src="/../images/flaskVueMysql/4.png" alt="GET"></p>
</li>
</ul>
<p><img src="/../images/flaskVueMysql/5.png" alt="GET"></p>
<h2 id="3-后端-执行脚本"><a href="#3-后端-执行脚本" class="headerlink" title="3. 后端 执行脚本"></a>3. 后端 执行脚本</h2><ul>
<li><p>执行流程</p>
<ol>
<li><p>前端点击按钮</p>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;button @click=&quot;runScript&quot;&gt;Run Script&lt;/button&gt;</span><br><span class="line">      &lt;div v-if=&quot;output&quot;&gt;</span><br><span class="line">        &lt;h3&gt;Script Output:&lt;/h3&gt;</span><br><span class="line">        &lt;pre&gt;&#123;&#123; output &#125;&#125;&lt;/pre&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">      &lt;div v-if=&quot;error&quot;&gt;</span><br><span class="line">        &lt;h3&gt;Script Error:&lt;/h3&gt;</span><br><span class="line">        &lt;pre&gt;&#123;&#123; error &#125;&#125;&lt;/pre&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &lt;/template&gt;</span><br><span class="line">  </span><br><span class="line">  &lt;script&gt;</span><br><span class="line">  import axios from &#x27;axios&#x27;;</span><br><span class="line">  </span><br><span class="line">  export default &#123;</span><br><span class="line">    data() &#123;</span><br><span class="line">      return &#123;</span><br><span class="line">        output: &#x27;&#x27;,</span><br><span class="line">        error: &#x27;&#x27;,</span><br><span class="line">      &#125;;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">      runScript() &#123;</span><br><span class="line">        axios.post(&#x27;http://127.0.0.1:5000/run-script&#x27;)</span><br><span class="line">          .then(response =&gt; &#123;</span><br><span class="line">            this.output = response.data.output;</span><br><span class="line">            this.error = response.data.error;</span><br><span class="line">          &#125;)</span><br><span class="line">          .catch(error =&gt; &#123;</span><br><span class="line">            this.error = error.message;</span><br><span class="line">          &#125;);</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;;</span><br><span class="line">  &lt;/script&gt;</span><br></pre></td></tr></table></figure>

</li>
<li><p>后端执行脚本</p>
 <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/run-script&#x27;</span>, methods=[<span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">run_script</span>():</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        </span><br><span class="line">        result = subprocess.run([<span class="string">&#x27;python&#x27;</span>, <span class="string">&#x27;test.py&#x27;</span>], capture_output=<span class="literal">True</span>, text=<span class="literal">True</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> jsonify(&#123;</span><br><span class="line">            <span class="string">&#x27;output&#x27;</span>: result.stdout,</span><br><span class="line">            <span class="string">&#x27;error&#x27;</span>: result.stderr,</span><br><span class="line">            <span class="string">&#x27;returncode&#x27;</span>: result.returncode</span><br><span class="line">        &#125;)</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="keyword">return</span> jsonify(&#123;<span class="string">&#x27;error&#x27;</span>: <span class="built_in">str</span>(e)&#125;), <span class="number">500</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li><p>subprocess</p>
<blockquote>
<p>The <code>subprocess</code> module in Python is used to spawn new processes, connect to their input&#x2F;output&#x2F;error pipes, and obtain their return codes. It replaces older modules like <code>os.system</code> and provides more powerful functionality.</p>
</blockquote>
</li>
</ul>
</li>
<li><p>结果</p>
</li>
</ol>
<p>  你别管一片红，你就说跑没跑起来吧。</p>
</li>
</ul>
<p><img src="/../images/flaskVueMysql/6.png" alt="Script"></p>
<h1 id="最终整合"><a href="#最终整合" class="headerlink" title="最终整合"></a>最终整合</h1><p>​	除了显示数据这个难点以外，其他难点都大差不差的解决了。</p>
<p>​	显示的数据其实也就只是文本（文件名字，博客文章名字等等），初步打算：</p>
<ol>
<li><p>后端：</p>
</li>
<li><p>制作一个脚本(python或者shell都可以)，然后直接调用执行脚本即可。</p>
 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ls &gt; tmp</span><br><span class="line">cat tmp</span><br></pre></td></tr></table></figure>
</li>
<li><p>前端：</p>
<ol>
<li>前端主要就是表单美化等操作了。</li>
</ol>
</li>
</ol>
<p>整合完之后再放github。</p>
<h1 id="完结撒花"><a href="#完结撒花" class="headerlink" title="完结撒花"></a>完结撒花</h1><p>​	不得不说小web项目用用Flask还是挺方便的，虽然报错还有很多，但是能跑就行。后续打算扩展一下功能，</p>
<ol>
<li>可以加上我的物联网想法，实现一个智能物联网云平台，走mqtt协议控制一些小东西，比如家里的服务器以及电源开关，空调遥控等等。</li>
<li>实际上这个平台只有我一个人用，也只能让我一个人用，总感觉安全性不高。打算去看看有关网站登录安全性，以及针对小用户群的web网站技术。<ol>
<li>可以试试加上动态验证，邮箱只设置我的。</li>
<li>待增加。</li>
</ol>
</li>
</ol>
]]></content>
      <categories>
        <category>软件技术</category>
      </categories>
      <tags>
        <tag>笔记</tag>
        <tag>python</tag>
        <tag>javascript</tag>
        <tag>html</tag>
        <tag>Flask</tag>
        <tag>vue</tag>
        <tag>mysql</tag>
        <tag>前端</tag>
        <tag>后端</tag>
      </tags>
  </entry>
  <entry>
    <title>GIT basic</title>
    <url>/2023/11/26/GIT-basic/</url>
    <content><![CDATA[<h1 id="Git-以及github，gitee的使用"><a href="#Git-以及github，gitee的使用" class="headerlink" title="Git 以及github，gitee的使用"></a>Git 以及github，gitee的使用</h1><h2 id="git简介："><a href="#git简介：" class="headerlink" title="git简介："></a>git简介：</h2><blockquote>
<p>Git (&#x2F;ɡɪt&#x2F;) is a distributed version control system that tracks changes in any set of computer files, usually used for coordinating work among programmers who are collaboratively developing source code during software development. Its goals include speed, data integrity, and support for distributed, non-linear workflows (thousands of parallel branches running on different computers).</p>
</blockquote>
<h2 id="What-is-Git"><a href="#What-is-Git" class="headerlink" title="What is Git?"></a><strong>What is Git?</strong></h2><p>Git is a popular version control system. It was created by Linus Torvalds in 2005, and has been maintained by Junio Hamano since then.</p>
<p>It is used for:</p>
<p>Tracking code changes<br>Tracking who made changes<br>Coding collaboration</p>
<h2 id="What-does-Git-do"><a href="#What-does-Git-do" class="headerlink" title="What does Git do?"></a><strong>What does Git do?</strong></h2><p>Manage projects with <strong>Repositories</strong><br><strong>Clone</strong> a project to work on a local copy<br><strong>Control and track</strong> changes with <strong>Staging and Committing</strong><br><strong>Branch and Merge</strong> to allow for work on different parts and versions of a project<br><strong>Pull</strong> the latest version of the project to a local copy<br><strong>Push</strong> local updates to the main project</p>
<h2 id="Working-with-Git"><a href="#Working-with-Git" class="headerlink" title="Working with Git"></a><strong>Working with Git</strong></h2><p>Initialize Git on a folder, making it a Repository<br>Git now creates a hidden folder to keep track of changes in that folder<br>When a file is changed, added or deleted, it is considered modified<br>You select the modified files you want to Stage<br>The Staged files are Committed, which prompts Git to store a permanent snapshot of the files<br>Git allows you to see the full history of every commit.<br>You can revert back to any previous commit.<br>Git does not store a separate copy of every file in every commit, but keeps track of changes made in each commit!<br>Change Platform:</p>
<p>Shift focus to GitHubGitHub<br>Shift focus to BitbucketBitbucket<br>Shift focus to GitLabGitLab</p>
<h2 id="Why-Git"><a href="#Why-Git" class="headerlink" title="Why Git?"></a><strong>Why Git?</strong></h2><p>Over 70% of developers use Git!<br>Developers can work together from anywhere in the world.<br>Developers can see the full history of the project.<br>Developers can revert to earlier versions of a project.</p>
<h2 id="What-is-GitHub"><a href="#What-is-GitHub" class="headerlink" title="What is GitHub?"></a><strong>What is GitHub?</strong></h2><p>Git is not the same as GitHub.<br>GitHub makes tools that use Git.<br>GitHub is the largest host of source code in the world, and has been owned by Microsoft since 2018.<br>In this tutorial, we will focus on using Git with GitHub.</p>
<p><strong>git 有图形化界面（gui）和命令行（bash），这里仅使用git命令行，即git（bash）。</strong></p>
<h3 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a><strong>初始化</strong></h3><h4 id="check-git-version-and-info"><a href="#check-git-version-and-info" class="headerlink" title="check git version and info"></a>check git version and info</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git —version</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="configure-git"><a href="#configure-git" class="headerlink" title="configure git"></a>configure git</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git config --global user.name <span class="string">&quot;xxxxx&quot;</span>    <span class="comment"># global means all the repos are in charge</span></span><br><span class="line">git config --global user.email <span class="string">&quot;xxxxxxxxx@gmail.com&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># if you just want to use “regen” for just once , you can remove “—global”</span></span><br><span class="line"></span><br><span class="line">git config  user.name <span class="string">&quot;regen&quot;</span>    </span><br><span class="line">git config  user.email <span class="string">&quot;regenissb@gmail.com&quot;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="initialize-you-repo"><a href="#initialize-you-repo" class="headerlink" title="initialize you repo"></a>initialize you repo</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#use mkdir and cd to create you working file . Then</span></span><br><span class="line"></span><br><span class="line">git init  </span><br><span class="line"></span><br><span class="line"><span class="comment"># This file is initialized as a git repository from now on . You can make files.</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">touch</span> hello.c</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="file-operation"><a href="#file-operation" class="headerlink" title="file operation"></a>file operation</h3><ol>
<li>check file status<br>Files in the repo has 2 status:<ul>
<li>Tracked - files that Git knows about and are added to the repository</li>
<li>Untracked - files that are in your working directory, but not added to the repository</li>
</ul>
</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git status</span><br></pre></td></tr></table></figure>

<p>​		or you can use </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git status --short</span><br><span class="line"><span class="comment">#  Note: Short status flags are:</span></span><br><span class="line"><span class="comment">#    ?? - Untracked files</span></span><br><span class="line"><span class="comment">#    A - Files added to stage</span></span><br><span class="line"><span class="comment">#    M - Modified files</span></span><br><span class="line"><span class="comment">#    D - Deleted files</span></span><br></pre></td></tr></table></figure>







<ol start="2">
<li>add to stage environment</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># once you finish a part or a bug ,you need to add it to  stage environment. So that you files in the stage environment are ready to commit .</span></span><br><span class="line"></span><br><span class="line">git add hello.c</span><br><span class="line"></span><br><span class="line"><span class="comment"># or you can use </span></span><br><span class="line">git add —all</span><br><span class="line">git add -A</span><br><span class="line"><span class="comment"># this two commends stages all the changes .  </span></span><br></pre></td></tr></table></figure>

<ol start="3">
<li>move from  stage to <strong>commit</strong> for our repo.</li>
</ol>
<ul>
<li>commit all the changes</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git commit -m <span class="string">&quot;First release of Hello World!&quot;</span></span><br><span class="line"><span class="comment"># The commit command performs a commit, and the -m &quot;message&quot; adds a message.</span></span><br><span class="line"><span class="comment"># When we commit, we should always include a message.</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>commit all the changes without add them to stage</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git commit -a -m <span class="string">&quot;Updated index.html with a new line&quot;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>view the history of commit log</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">log</span></span><br></pre></td></tr></table></figure>

<h2 id="GIT-branch"><a href="#GIT-branch" class="headerlink" title="GIT branch"></a><strong>GIT branch</strong></h2><p>​	Introduction :</p>
<blockquote>
<p>In Git, a <code>branch</code> is a new&#x2F;separate version of the main repository.</p>
<p>Branches allow you to work on different parts of a project without impacting the main branch.</p>
<p>When the work is complete, a branch can be merged with the main project.</p>
<p>You can even switch between branches and work on different projects without them interfering with each other.</p>
<p>Branching in Git is very lightweight and fast!</p>
</blockquote>
<h4 id="create-new-git-branch"><a href="#create-new-git-branch" class="headerlink" title="create new git branch"></a>create new git branch</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git branch newBranch</span><br><span class="line">  <span class="comment"># add a new branch</span></span><br></pre></td></tr></table></figure>

<h4 id="check-out-the-branches"><a href="#check-out-the-branches" class="headerlink" title="check out the branches"></a>check out the branches</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git branch</span><br><span class="line"></span><br><span class="line">    newBtanch</span><br><span class="line">  * master</span><br><span class="line"><span class="comment"># The &#x27; * &#x27;means that you are working on master branch.</span></span><br></pre></td></tr></table></figure>

<h4 id="move-branch"><a href="#move-branch" class="headerlink" title="move branch"></a>move branch</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git checkout newbranch     <span class="comment"># switch to new branch &#x27;newBranch&#x27;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="check-status-of-this-branch-add-to-stage-and-commit-same-code"><a href="#check-status-of-this-branch-add-to-stage-and-commit-same-code" class="headerlink" title="check status of this branch , add to stage and commit . (same code)"></a>check status of this branch , add to stage and commit . (same code)</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git status</span><br><span class="line">git add --all</span><br><span class="line">git commit -m <span class="string">&quot;new changes in branch newBranch&quot;</span></span><br></pre></td></tr></table></figure>

<h4 id="merge-branch"><a href="#merge-branch" class="headerlink" title="merge branch"></a>merge branch</h4><ol>
<li>In order to merge two branches, we need to change to the master branch:</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git checkout master</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>merge</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git merge newBranch</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>delete branches</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git branch -d newBranch</span><br></pre></td></tr></table></figure>

<ul>
<li>merge conflict</li>
</ul>
<h2 id="其他操作"><a href="#其他操作" class="headerlink" title="其他操作"></a><strong>其他操作</strong></h2><ul>
<li>GIT Associating a local repository to a remote repository</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git remote add origin git@github.com:regen/test.git</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">git push -u origin master</span><br></pre></td></tr></table></figure>
<h2 id="使用案例"><a href="#使用案例" class="headerlink" title="使用案例"></a>使用案例</h2><h3 id="多个设备同一账号，在不同的场景使用github同步代码。"><a href="#多个设备同一账号，在不同的场景使用github同步代码。" class="headerlink" title="多个设备同一账号，在不同的场景使用github同步代码。"></a>多个设备同一账号，在不同的场景使用github同步代码。</h3><h4 id="终端"><a href="#终端" class="headerlink" title="终端:"></a>终端:</h4><h5 id="初始化设置"><a href="#初始化设置" class="headerlink" title="初始化设置"></a>初始化设置</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 设置用户</span></span><br><span class="line">git config --global user.name <span class="string">&quot;xxxxx&quot;</span>    <span class="comment"># global means all the repos are in charge</span></span><br><span class="line">git config --global user.email <span class="string">&quot;xxxxxxxxx@gmail.com&quot;</span></span><br></pre></td></tr></table></figure>

<h5 id="github添加ssh公钥匙"><a href="#github添加ssh公钥匙" class="headerlink" title="github添加ssh公钥匙"></a>github添加ssh公钥匙</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa -C <span class="string">&quot;xxxxxxxxx@gmail.com&quot;</span></span><br></pre></td></tr></table></figure>

<p>将生成的rsq_pub中的内容复制到github里的ssh栏</p>
<h5 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h5><ul>
<li>复制仓库</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> git@github.com:regenm/Notes.git</span><br></pre></td></tr></table></figure>

<ul>
<li>修改前更新</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git pull origin master</span><br></pre></td></tr></table></figure>

<ul>
<li>修改后上传</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git add -A</span><br><span class="line">git commit -m <span class="string">&quot;add an application of git&quot;</span></span><br><span class="line">git status</span><br><span class="line">git push</span><br></pre></td></tr></table></figure>

<h3 id="不同账号使用同一仓库"><a href="#不同账号使用同一仓库" class="headerlink" title="不同账号使用同一仓库"></a>不同账号使用同一仓库</h3><h4 id="场景一：参加开源项目-使用Fork"><a href="#场景一：参加开源项目-使用Fork" class="headerlink" title="场景一：参加开源项目( 使用Fork )"></a>场景一：参加开源项目( 使用Fork )</h4><p>​	当你想参与不属于你的开源项目时，通常使用Fork。你没有直接对原始仓库的写权限，但可以通过Fork和Pull Request来贡献代码。</p>
<h5 id="使用流程："><a href="#使用流程：" class="headerlink" title="使用流程："></a>使用流程：</h5><ol>
<li><strong>Fork仓库</strong>：将原始仓库复制到你自己的GitHub账户中。</li>
<li><strong>克隆仓库</strong>：将Fork后的仓库克隆到本地进行开发。</li>
<li><strong>开发和提交</strong>：在本地开发，提交代码到你Fork的仓库。</li>
<li><strong>推送分支</strong>：将代码推送到你Fork的GitHub仓库。</li>
<li><strong>Pull Request</strong>：创建Pull Request，请求将你的修改合并到原始仓库。</li>
</ol>
<h5 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h5><ul>
<li><strong>隔离开发</strong>：你的改动不会直接影响原始仓库，确保了独立开发的安全性。</li>
<li><strong>贡献流程</strong>：通过Pull Request进行代码评审，确保代码质量和一致性。</li>
</ul>
<h4 id="场景二：团队开发项目-使用SSH密钥"><a href="#场景二：团队开发项目-使用SSH密钥" class="headerlink" title="场景二：团队开发项目 ( 使用SSH密钥 )"></a>场景二：团队开发项目 ( 使用SSH密钥 )</h4><p>​	<strong>私有项目</strong>：当你与团队成员协作开发私有项目时，使用SSH密钥来管理对远程仓库的访问权限。</p>
<p>​	<strong>团队协作</strong>：在团队内部，每个成员都有对仓库的读写权限，可以直接推送代码到远程仓库。</p>
<h5 id="工作流程"><a href="#工作流程" class="headerlink" title="工作流程"></a>工作流程</h5><ol>
<li><strong>生成SSH密钥</strong>：每个团队成员生成SSH密钥。</li>
<li><strong>添加SSH密钥</strong>：将生成的公钥添加到自己的GitHub账户中。</li>
<li><strong>邀请协作者</strong>：仓库管理员邀请团队成员成为协作者，并分配适当的权限。</li>
<li><strong>克隆仓库</strong>：团队成员使用SSH克隆仓库到本地进行开发。</li>
<li><strong>开发和提交</strong>：在本地开发，提交代码。</li>
<li><strong>推送分支</strong>：将代码直接推送到远程仓库。</li>
</ol>
<h5 id="优点-1"><a href="#优点-1" class="headerlink" title="优点"></a>优点</h5><ul>
<li><strong>直接协作</strong>：团队成员可以直接推送和拉取代码，适合高效的团队协作。</li>
<li><strong>安全性</strong>：SSH密钥提供了安全的身份验证机制。</li>
</ul>
]]></content>
      <categories>
        <category>软件技术</category>
      </categories>
      <tags>
        <tag>笔记</tag>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>Java Projects</title>
    <url>/2023/12/07/Java-Projects/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>软件技术</category>
      </categories>
      <tags>
        <tag>笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>K8s pods service deployment初体验</title>
    <url>/2025/08/04/K8s-pods-service-deployment%E5%88%9D%E4%BD%93%E9%AA%8C/</url>
    <content><![CDATA[<blockquote>
<p>部署过程：<a href="http://regenm.github.io/2025/08/04/K8s-%E4%B8%89%E8%8A%82%E7%82%B9%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/">K8s 三节点环境搭建 | Regen</a></p>
</blockquote>
<p>​	初次体验k8s，起了几个简单的pods、service、deployment</p>
<h1 id="K8s-pods-service-deployment初体验"><a href="#K8s-pods-service-deployment初体验" class="headerlink" title="K8s pods service deployment初体验"></a>K8s pods service deployment初体验</h1><h2 id="pods"><a href="#pods" class="headerlink" title="pods"></a>pods</h2><p><img src="/..%5Cimages%5CLinux%5C%E8%BF%90%E7%BB%B4%5Ck8s%5Cimage-20250804171629285.png" alt="image-20250804171629285"></p>
<h3 id="busybox-pod"><a href="#busybox-pod" class="headerlink" title="busybox-pod"></a>busybox-pod</h3><p>yaml文件：</p>
<ol>
<li>busybox-pod.yaml</li>
</ol>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Pod</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">busybox</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">containers:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">busybox</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">registry.aliyuncs.com/google_containers/busybox:latest</span></span><br><span class="line">    <span class="attr">command:</span> [<span class="string">&quot;sleep&quot;</span>, <span class="string">&quot;3600&quot;</span>]  <span class="comment"># 防止容器立即退出</span></span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    </span><br></pre></td></tr></table></figure>
<h3 id="nginx-pod"><a href="#nginx-pod" class="headerlink" title="nginx-pod"></a>nginx-pod</h3><ol start="2">
<li>nginx-pod.yaml</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">apiVersion: v1</span><br><span class="line">kind: Pod</span><br><span class="line">metadata:</span><br><span class="line">  name: my-nginx</span><br><span class="line">spec:</span><br><span class="line">  containers:</span><br><span class="line">  - name: nginx</span><br><span class="line">    image: nginx:latest</span><br><span class="line">    imagePullPolicy: IfNotPresent</span><br></pre></td></tr></table></figure>

<p>起容器的命令：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">kubectl apply -f nginx-pod.yaml</span><br></pre></td></tr></table></figure>

<p><img src="/..%5Cimages%5CLinux%5C%E8%BF%90%E7%BB%B4%5Ck8s%5Cimage-20250804171629285.png" alt="image-20250804171629285"></p>
<h2 id="service"><a href="#service" class="headerlink" title="service"></a>service</h2><h3 id="nginx-service"><a href="#nginx-service" class="headerlink" title="nginx-service"></a>nginx-service</h3><p>​	上面起来了一个nginx pods，但是要怎么访问呢？—通过service</p>
<p>nginx-service.yaml ：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">apiVersion: v1</span><br><span class="line">kind: Service</span><br><span class="line">metadata:</span><br><span class="line">  name: my-nginx-service</span><br><span class="line">spec:</span><br><span class="line">  <span class="built_in">type</span>: NodePort</span><br><span class="line">  selector:</span><br><span class="line">    run: my-nginx</span><br><span class="line">  ports:</span><br><span class="line">    - protocol: TCP</span><br><span class="line">      port: 80         <span class="comment"># Service 端口</span></span><br><span class="line">      targetPort: 80   <span class="comment"># Pod 容器端口</span></span><br><span class="line">      nodePort: 30080  <span class="comment"># 你访问的节点端口(30000-32767 之间)</span></span><br></pre></td></tr></table></figure>

<p>部署service的命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">kubectl apply -f nginx-service.yaml</span><br></pre></td></tr></table></figure>

<p>再次之前需要先给之前的pod打上标签</p>
<p><strong>查看标签</strong>的命令：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">kubectl get pods --show-labels</span><br></pre></td></tr></table></figure>



<p><img src="/..%5Cimages%5CLinux%5C%E8%BF%90%E7%BB%B4%5Ck8s%5Cimage-20250804172606336.png" alt="image-20250804172606336"></p>
<p><strong>打标签</strong>的命令</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">kubectl label pod my-nginx run=my-nginx</span><br></pre></td></tr></table></figure>



<p>如何查看service呢？</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">kubectl get svc</span><br></pre></td></tr></table></figure>

<p><img src="/..%5Cimages%5CLinux%5C%E8%BF%90%E7%BB%B4%5Ck8s%5Cimage-20250804172402282.png" alt="image-20250804172402282"></p>
<p>然后就可以通过所有的机器的IP:30080访问同一个nginx容器了！</p>
<p><img src="/..%5Cimages%5CLinux%5C%E8%BF%90%E7%BB%B4%5Ck8s%5Cimage-20250804173011788.png" alt="image-20250804173011788"></p>
<p><img src="/..%5Cimages%5CLinux%5C%E8%BF%90%E7%BB%B4%5Ck8s%5Cimage-20250804173054782.png" alt="image-20250804173054782"></p>
<h2 id="deployment"><a href="#deployment" class="headerlink" title="deployment"></a>deployment</h2><h3 id="Nginx集群（service-扩缩容）"><a href="#Nginx集群（service-扩缩容）" class="headerlink" title="Nginx集群（service+扩缩容）"></a>Nginx集群（service+扩缩容）</h3><p>nginx-deployment.yaml </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">apiVersion: apps/v1</span><br><span class="line">kind: Deployment</span><br><span class="line">metadata:</span><br><span class="line">  name: nginx-deployment       # Deployment 的名字</span><br><span class="line">spec:</span><br><span class="line">  replicas: 3                  # 希望运行的 Pod 副本数</span><br><span class="line">  selector:</span><br><span class="line">    matchLabels:</span><br><span class="line">      app: nginx               # 选择哪些 Pod 属于这个 Deployment（必须和 template 中 labels 一致）</span><br><span class="line">  template:                   # Pod 模板，Deployment 会根据这个模板创建 Pod</span><br><span class="line">    metadata:</span><br><span class="line">      labels:</span><br><span class="line">        app: nginx             # 这个标签用于上面 selector 匹配</span><br><span class="line">    spec:</span><br><span class="line">      containers:</span><br><span class="line"></span><br><span class="line">   - name: nginx            # 容器名字</span><br><span class="line">     image: nginx:latest    # 使用的镜像</span><br><span class="line">     imagePullPolicy: Never</span><br><span class="line">     ports:</span><br><span class="line">     - containerPort: 80    # 容器暴露的端口</span><br></pre></td></tr></table></figure>

<p>service.yaml</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">apiVersion: v1</span><br><span class="line">kind: Service</span><br><span class="line">metadata:</span><br><span class="line">  name: nginx-deployment-service</span><br><span class="line">spec:</span><br><span class="line">  type: NodePort</span><br><span class="line">  selector:</span><br><span class="line">    app: nginx</span><br><span class="line">  ports:</span><br><span class="line">    - protocol: TCP</span><br><span class="line">      port: 80</span><br><span class="line">      targetPort: 80</span><br><span class="line">      nodePort: 30081</span><br></pre></td></tr></table></figure>

<h4 id="扩缩容："><a href="#扩缩容：" class="headerlink" title="扩缩容："></a>扩缩容：</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">kubectl scale deployment/nginx-deployment --replicas=5</span><br></pre></td></tr></table></figure>

<p>好快的扩缩容</p>
<p><img src="/..%5Cimages%5CLinux%5C%E8%BF%90%E7%BB%B4%5Ck8s%5Cimage-20250804173743514.png" alt="image-20250804173743514"></p>
<h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><h2 id="镜像源"><a href="#镜像源" class="headerlink" title="镜像源"></a>镜像源</h2>]]></content>
      <categories>
        <category>软件技术</category>
      </categories>
      <tags>
        <tag>笔记</tag>
        <tag>linux</tag>
        <tag>运维</tag>
        <tag>k8s</tag>
        <tag>系统运维</tag>
        <tag>containerd</tag>
        <tag>docker</tag>
        <tag>nginx</tag>
      </tags>
  </entry>
  <entry>
    <title>K8s 三节点环境搭建</title>
    <url>/2025/08/04/K8s-%E4%B8%89%E8%8A%82%E7%82%B9%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</url>
    <content><![CDATA[<blockquote>
<h1 id="环境："><a href="#环境：" class="headerlink" title="环境："></a>环境：</h1><p><img src="/../images/Linux/%E8%BF%90%E7%BB%B4/k8s/image-20250804151509151.png" alt="image-20250804151509151"></p>
<p>效果：</p>
<p><img src="/../images/Linux/%E8%BF%90%E7%BB%B4/k8s/image-20250804153715569.png" alt="image-20250804153715569"></p>
<h1 id="虚拟机环境："><a href="#虚拟机环境：" class="headerlink" title="虚拟机环境："></a>虚拟机环境：</h1><p><img src="/../images/Linux/%E8%BF%90%E7%BB%B4/k8s/image-20250804151541771.png" alt="image-20250804151541771"></p>
<p><strong>Master节点：K8s-1	192.168.72.8</strong></p>
<p><strong>node2 		   K8s-2    192.168.72.9</strong></p>
<p><strong>node2 		   K8s-3    192.168.72.9</strong></p>
<h1 id="搭建过程（思路）："><a href="#搭建过程（思路）：" class="headerlink" title="搭建过程（思路）："></a>搭建过程（思路）：</h1><ol>
<li><h2 id="先完成一台基础主机：具备以下服务"><a href="#先完成一台基础主机：具备以下服务" class="headerlink" title="先完成一台基础主机：具备以下服务"></a>先完成一台基础主机：具备以下服务</h2><ol>
<li>docker</li>
<li>containerd</li>
<li>kubelet kubeadm kubectl</li>
</ol>
</li>
<li><h2 id="编辑好containerd"><a href="#编辑好containerd" class="headerlink" title="编辑好containerd"></a>编辑好containerd</h2><ol>
<li>sandbox镜像源</li>
<li>systemd 服务文件</li>
</ol>
</li>
<li><h2 id="克隆两份"><a href="#克隆两份" class="headerlink" title="克隆两份"></a>克隆两份</h2><ol>
<li>配置Hostname</li>
<li>配置 IP</li>
<li>配置hosts</li>
</ol>
</li>
<li><h2 id="master配置"><a href="#master配置" class="headerlink" title="master配置"></a>master配置</h2><ol>
<li>关闭 swap</li>
<li>加载内核参数</li>
<li>kubeadm init</li>
<li>安装网络插件Flannel</li>
</ol>
</li>
<li><h2 id="nodes配置"><a href="#nodes配置" class="headerlink" title="nodes配置"></a>nodes配置</h2><ol>
<li>关闭 swap</li>
<li>加载内核参数</li>
<li>加入集群</li>
</ol>
</li>
</ol>
</blockquote>
<hr>
<p>​	k8s配置过程现在看起来还是挺简单的。其实<strong>卡主的点大部分都是什么镜像源配置</strong>，但也不能怪国内环境，至少sandbox那个源还能用，其他的镜像可以通过离线导入倒也不是那么痛苦。主要就是那些初始化的时候要用的镜像，后续再看看这类镜像能不能离线导入，或者尝试直接离线安装二进制文件吧。</p>
<p>​	后续需要了解的点</p>
<blockquote>
<ol>
<li>k8s init时的容器是否可以离线导入</li>
<li>k8s 是否有离线安装的方式（RPA、tgz、二进制文件）</li>
<li>containerd 镜像源加速</li>
<li>containerd、docker 镜像源私有搭建</li>
</ol>
</blockquote>
<h1 id="1-基础主机搭建"><a href="#1-基础主机搭建" class="headerlink" title="1. 基础主机搭建"></a>1. 基础主机搭建</h1><blockquote>
<ol>
<li>docker</li>
<li>containerd</li>
<li>kubelet kubeadm kubectl</li>
</ol>
</blockquote>
<h2 id="1-1-Docker安装"><a href="#1-1-Docker安装" class="headerlink" title="1.1 Docker安装"></a>1.1 Docker安装</h2><p>参考<a href="https://regenm.github.io/2024/02/09/docker%E5%AE%B9%E5%99%A8%E6%8A%80%E6%9C%AF/?highlight=docker">docker容器技术 | Regen</a></p>
<h2 id="1-2-containerd安装"><a href="#1-2-containerd安装" class="headerlink" title="1.2 containerd安装"></a>1.2 containerd安装</h2><blockquote>
<p>Containerd 是一个行业标准的容器运行时，专注于简单性、健壮性和可移植性。它是 Docker 的核心组件之一，也可以独立使用。</p>
</blockquote>
<h3 id="包管理器安装"><a href="#包管理器安装" class="headerlink" title="包管理器安装"></a>包管理器安装</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum install containerd</span><br></pre></td></tr></table></figure>

<h3 id="二进制包安装"><a href="#二进制包安装" class="headerlink" title="二进制包安装"></a>二进制包安装</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 下载最新版本</span></span><br><span class="line">wget https://github.com/containerd/containerd/releases/download/v&lt;版本号&gt;/containerd-&lt;版本号&gt;-linux-amd64.tar.gz</span><br><span class="line"></span><br><span class="line"><span class="comment"># 解压</span></span><br><span class="line"><span class="built_in">sudo</span> tar Cxzvf /usr/local containerd-&lt;版本号&gt;-linux-amd64.tar.gz</span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成systemd服务文件</span></span><br><span class="line"><span class="built_in">sudo</span> containerd config default &gt; /etc/containerd/config.toml</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动服务</span></span><br><span class="line"><span class="built_in">sudo</span> systemctl <span class="built_in">enable</span> --now containerd</span><br></pre></td></tr></table></figure>

<h2 id="1-3-k8s基础组件安装"><a href="#1-3-k8s基础组件安装" class="headerlink" title="1.3 k8s基础组件安装"></a>1.3 k8s基础组件安装</h2><h3 id="包管理器安装-1"><a href="#包管理器安装-1" class="headerlink" title="包管理器安装"></a>包管理器安装</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 添加 Kubernetes 仓库</span></span><br><span class="line"><span class="built_in">cat</span> &lt;&lt;<span class="string">EOF &gt; /etc/yum.repos.d/kubernetes.repo</span></span><br><span class="line"><span class="string">[kubernetes]</span></span><br><span class="line"><span class="string">name=Kubernetes</span></span><br><span class="line"><span class="string">baseurl=https://mirrors.aliyun.com/kubernetes/yum/repos/kubernetes-el7-x86_64/</span></span><br><span class="line"><span class="string">enabled=1</span></span><br><span class="line"><span class="string">gpgcheck=0</span></span><br><span class="line"><span class="string">EOF</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装</span></span><br><span class="line"><span class="built_in">sudo</span> yum install -y kubelet kubeadm kubectl</span><br><span class="line"></span><br><span class="line"><span class="comment"># 开机自启 kubelet</span></span><br><span class="line"><span class="built_in">sudo</span> systemctl <span class="built_in">enable</span> --now kubelet</span><br></pre></td></tr></table></figure>



<h1 id="2-编辑基础主机"><a href="#2-编辑基础主机" class="headerlink" title="2. 编辑基础主机"></a>2. 编辑基础主机</h1><blockquote>
<pre><code> 1. systemd 服务文件
 2. sandbox镜像源
 3. 加载内核参数
 4. 关闭swap
</code></pre>
</blockquote>
<h2 id="2-1-systemd-服务文件"><a href="#2-1-systemd-服务文件" class="headerlink" title="2.1 systemd 服务文件"></a>2.1 systemd 服务文件</h2><p>​	主要解决containerd没有systemd单元的问题。如果有则不需要。通过<code>systemctl status containerd</code>检查</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> <span class="built_in">tee</span> /etc/systemd/system/containerd.service &gt; /dev/null &lt;&lt;<span class="string">EOF</span></span><br><span class="line"><span class="string">[Unit]</span></span><br><span class="line"><span class="string">Description=containerd container runtime</span></span><br><span class="line"><span class="string">Documentation=https://containerd.io</span></span><br><span class="line"><span class="string">After=network.target</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">[Service]</span></span><br><span class="line"><span class="string">ExecStart=/usr/bin/containerd</span></span><br><span class="line"><span class="string">Restart=always</span></span><br><span class="line"><span class="string">RestartSec=5</span></span><br><span class="line"><span class="string">Delegate=yes</span></span><br><span class="line"><span class="string">KillMode=process</span></span><br><span class="line"><span class="string">OOMScoreAdjust=-999</span></span><br><span class="line"><span class="string">LimitNOFILE=1048576</span></span><br><span class="line"><span class="string">LimitNPROC=infinity</span></span><br><span class="line"><span class="string">LimitCORE=infinity</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">[Install]</span></span><br><span class="line"><span class="string">WantedBy=multi-user.target</span></span><br><span class="line"><span class="string">EOF</span></span><br></pre></td></tr></table></figure>

<p>然后重新加载 systemd：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo systemctl daemon-reload</span><br><span class="line">sudo systemctl enable --now containerd</span><br></pre></td></tr></table></figure>

<p>查看状态</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> systemctl status containerd</span><br></pre></td></tr></table></figure>



<h2 id="2-2-sandbox镜像源"><a href="#2-2-sandbox镜像源" class="headerlink" title="2.2 sandbox镜像源"></a>2.2 sandbox镜像源</h2><p>​	参考文章：<a href="https://www.cnblogs.com/wod-Y/p/17043985.html">搭建k8s集群初始化master节点 kubeadm init 遇到问题解决 - 杨海星 - 博客园</a></p>
<p>解决方式：修改containerd的镜像源文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim /etc/containerd/config.toml  </span><br></pre></td></tr></table></figure>

<p>修改完重启服务<code>systemctl daemon-reload &amp;&amp; systemctl restart containerd</code></p>
<figure class="highlight toml"><table><tr><td class="code"><pre><span class="line"><span class="attr">disabled_plugins</span> = []</span><br><span class="line"><span class="attr">imports</span> = []</span><br><span class="line"><span class="attr">oom_score</span> = <span class="number">0</span></span><br><span class="line"><span class="attr">plugin_dir</span> = <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="attr">required_plugins</span> = []</span><br><span class="line"><span class="attr">root</span> = <span class="string">&quot;/var/lib/containerd&quot;</span></span><br><span class="line"><span class="attr">state</span> = <span class="string">&quot;/run/containerd&quot;</span></span><br><span class="line"><span class="attr">temp</span> = <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="attr">version</span> = <span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="section">[cgroup]</span></span><br><span class="line">  <span class="attr">path</span> = <span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="section">[debug]</span></span><br><span class="line">  <span class="attr">address</span> = <span class="string">&quot;&quot;</span></span><br><span class="line">  <span class="attr">format</span> = <span class="string">&quot;&quot;</span></span><br><span class="line">  <span class="attr">gid</span> = <span class="number">0</span></span><br><span class="line">  <span class="attr">level</span> = <span class="string">&quot;&quot;</span></span><br><span class="line">  <span class="attr">uid</span> = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="section">[grpc]</span></span><br><span class="line">  <span class="attr">address</span> = <span class="string">&quot;/run/containerd/containerd.sock&quot;</span></span><br><span class="line">  <span class="attr">gid</span> = <span class="number">0</span></span><br><span class="line">  <span class="attr">max_recv_message_size</span> = <span class="number">16777216</span></span><br><span class="line">  <span class="attr">max_send_message_size</span> = <span class="number">16777216</span></span><br><span class="line">  <span class="attr">tcp_address</span> = <span class="string">&quot;&quot;</span></span><br><span class="line">  <span class="attr">tcp_tls_ca</span> = <span class="string">&quot;&quot;</span></span><br><span class="line">  <span class="attr">tcp_tls_cert</span> = <span class="string">&quot;&quot;</span></span><br><span class="line">  <span class="attr">tcp_tls_key</span> = <span class="string">&quot;&quot;</span></span><br><span class="line">  <span class="attr">uid</span> = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="section">[metrics]</span></span><br><span class="line">  <span class="attr">address</span> = <span class="string">&quot;&quot;</span></span><br><span class="line">  <span class="attr">grpc_histogram</span> = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="section">[plugins]</span></span><br><span class="line"></span><br><span class="line">  <span class="section">[plugins.&quot;io.containerd.gc.v1.scheduler&quot;]</span></span><br><span class="line">    <span class="attr">deletion_threshold</span> = <span class="number">0</span></span><br><span class="line">    <span class="attr">mutation_threshold</span> = <span class="number">100</span></span><br><span class="line">    <span class="attr">pause_threshold</span> = <span class="number">0.02</span></span><br><span class="line">    <span class="attr">schedule_delay</span> = <span class="string">&quot;0s&quot;</span></span><br><span class="line">    <span class="attr">startup_delay</span> = <span class="string">&quot;100ms&quot;</span></span><br><span class="line"></span><br><span class="line">  <span class="section">[plugins.&quot;io.containerd.grpc.v1.cri&quot;]</span></span><br><span class="line">    <span class="attr">device_ownership_from_security_context</span> = <span class="literal">false</span></span><br><span class="line">    <span class="attr">disable_apparmor</span> = <span class="literal">false</span></span><br><span class="line">    <span class="attr">disable_cgroup</span> = <span class="literal">false</span></span><br><span class="line">    <span class="attr">disable_hugetlb_controller</span> = <span class="literal">true</span></span><br><span class="line">    <span class="attr">disable_proc_mount</span> = <span class="literal">false</span></span><br><span class="line">    <span class="attr">disable_tcp_service</span> = <span class="literal">true</span></span><br><span class="line">    <span class="attr">enable_selinux</span> = <span class="literal">false</span></span><br><span class="line">    <span class="attr">enable_tls_streaming</span> = <span class="literal">false</span></span><br><span class="line">    <span class="attr">enable_unprivileged_icmp</span> = <span class="literal">false</span></span><br><span class="line">    <span class="attr">enable_unprivileged_ports</span> = <span class="literal">false</span></span><br><span class="line">    <span class="attr">ignore_image_defined_volumes</span> = <span class="literal">false</span></span><br><span class="line">    <span class="attr">max_concurrent_downloads</span> = <span class="number">3</span></span><br><span class="line">    <span class="attr">max_container_log_line_size</span> = <span class="number">16384</span></span><br><span class="line">    <span class="attr">netns_mounts_under_state_dir</span> = <span class="literal">false</span></span><br><span class="line">    <span class="attr">restrict_oom_score_adj</span> = <span class="literal">false</span></span><br><span class="line">    <span class="attr">sandbox_image</span> = <span class="string">&quot;registry.aliyuncs.com/google_containers/pause:3.9&quot;</span></span><br><span class="line">    <span class="attr">selinux_category_range</span> = <span class="number">1024</span></span><br><span class="line">    <span class="attr">stats_collect_period</span> = <span class="number">10</span></span><br><span class="line">    <span class="attr">stream_idle_timeout</span> = <span class="string">&quot;4h0m0s&quot;</span></span><br><span class="line">    <span class="attr">stream_server_address</span> = <span class="string">&quot;127.0.0.1&quot;</span></span><br><span class="line">    <span class="attr">stream_server_port</span> = <span class="string">&quot;0&quot;</span></span><br><span class="line">    <span class="attr">systemd_cgroup</span> = <span class="literal">false</span></span><br><span class="line">    <span class="attr">tolerate_missing_hugetlb_controller</span> = <span class="literal">true</span></span><br><span class="line">    <span class="attr">unset_seccomp_profile</span> = <span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="section">[plugins.&quot;io.containerd.grpc.v1.cri&quot;.cni]</span></span><br><span class="line">      <span class="attr">bin_dir</span> = <span class="string">&quot;/opt/cni/bin&quot;</span></span><br><span class="line">      <span class="attr">conf_dir</span> = <span class="string">&quot;/etc/cni/net.d&quot;</span></span><br><span class="line">      <span class="attr">conf_template</span> = <span class="string">&quot;&quot;</span></span><br><span class="line">      <span class="attr">ip_pref</span> = <span class="string">&quot;&quot;</span></span><br><span class="line">      <span class="attr">max_conf_num</span> = <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="section">[plugins.&quot;io.containerd.grpc.v1.cri&quot;.containerd]</span></span><br><span class="line">      <span class="attr">default_runtime_name</span> = <span class="string">&quot;runc&quot;</span></span><br><span class="line">      <span class="attr">disable_snapshot_annotations</span> = <span class="literal">true</span></span><br><span class="line">      <span class="attr">discard_unpacked_layers</span> = <span class="literal">false</span></span><br><span class="line">      <span class="attr">ignore_rdt_not_enabled_errors</span> = <span class="literal">false</span></span><br><span class="line">      <span class="attr">no_pivot</span> = <span class="literal">false</span></span><br><span class="line">      <span class="attr">snapshotter</span> = <span class="string">&quot;overlayfs&quot;</span></span><br><span class="line"></span><br><span class="line">      <span class="section">[plugins.&quot;io.containerd.grpc.v1.cri&quot;.containerd.default_runtime]</span></span><br><span class="line">        <span class="attr">base_runtime_spec</span> = <span class="string">&quot;&quot;</span></span><br><span class="line">        <span class="attr">cni_conf_dir</span> = <span class="string">&quot;&quot;</span></span><br><span class="line">        <span class="attr">cni_max_conf_num</span> = <span class="number">0</span></span><br><span class="line">        <span class="attr">container_annotations</span> = []</span><br><span class="line">        <span class="attr">pod_annotations</span> = []</span><br><span class="line">        <span class="attr">privileged_without_host_devices</span> = <span class="literal">false</span></span><br><span class="line">        <span class="attr">runtime_engine</span> = <span class="string">&quot;&quot;</span></span><br><span class="line">        <span class="attr">runtime_path</span> = <span class="string">&quot;&quot;</span></span><br><span class="line">        <span class="attr">runtime_root</span> = <span class="string">&quot;&quot;</span></span><br><span class="line">        <span class="attr">runtime_type</span> = <span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">        <span class="section">[plugins.&quot;io.containerd.grpc.v1.cri&quot;.containerd.default_runtime.options]</span></span><br><span class="line"></span><br><span class="line">      <span class="section">[plugins.&quot;io.containerd.grpc.v1.cri&quot;.containerd.runtimes]</span></span><br><span class="line"></span><br><span class="line">        <span class="section">[plugins.&quot;io.containerd.grpc.v1.cri&quot;.containerd.runtimes.runc]</span></span><br><span class="line">          <span class="attr">base_runtime_spec</span> = <span class="string">&quot;&quot;</span></span><br><span class="line">          <span class="attr">cni_conf_dir</span> = <span class="string">&quot;&quot;</span></span><br><span class="line">          <span class="attr">cni_max_conf_num</span> = <span class="number">0</span></span><br><span class="line">          <span class="attr">container_annotations</span> = []</span><br><span class="line">          <span class="attr">pod_annotations</span> = []</span><br><span class="line">          <span class="attr">privileged_without_host_devices</span> = <span class="literal">false</span></span><br><span class="line">          <span class="attr">runtime_engine</span> = <span class="string">&quot;&quot;</span></span><br><span class="line">          <span class="attr">runtime_path</span> = <span class="string">&quot;&quot;</span></span><br><span class="line">          <span class="attr">runtime_root</span> = <span class="string">&quot;&quot;</span></span><br><span class="line">          <span class="attr">runtime_type</span> = <span class="string">&quot;io.containerd.runc.v2&quot;</span></span><br><span class="line"></span><br><span class="line">          <span class="section">[plugins.&quot;io.containerd.grpc.v1.cri&quot;.containerd.runtimes.runc.options]</span></span><br><span class="line">            <span class="attr">BinaryName</span> = <span class="string">&quot;&quot;</span></span><br><span class="line">            <span class="attr">CriuImagePath</span> = <span class="string">&quot;&quot;</span></span><br><span class="line">            <span class="attr">CriuPath</span> = <span class="string">&quot;&quot;</span></span><br><span class="line">            <span class="attr">CriuWorkPath</span> = <span class="string">&quot;&quot;</span></span><br><span class="line">            <span class="attr">IoGid</span> = <span class="number">0</span></span><br><span class="line">            <span class="attr">IoUid</span> = <span class="number">0</span></span><br><span class="line">            <span class="attr">NoNewKeyring</span> = <span class="literal">false</span></span><br><span class="line">            <span class="attr">NoPivotRoot</span> = <span class="literal">false</span></span><br><span class="line">            <span class="attr">Root</span> = <span class="string">&quot;&quot;</span></span><br><span class="line">            <span class="attr">ShimCgroup</span> = <span class="string">&quot;&quot;</span></span><br><span class="line">            <span class="attr">SystemdCgroup</span> = <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">      <span class="section">[plugins.&quot;io.containerd.grpc.v1.cri&quot;.containerd.untrusted_workload_runtime]</span></span><br><span class="line">        <span class="attr">base_runtime_spec</span> = <span class="string">&quot;&quot;</span></span><br><span class="line">        <span class="attr">cni_conf_dir</span> = <span class="string">&quot;&quot;</span></span><br><span class="line">        <span class="attr">cni_max_conf_num</span> = <span class="number">0</span></span><br><span class="line">        <span class="attr">container_annotations</span> = []</span><br><span class="line">        <span class="attr">pod_annotations</span> = []</span><br><span class="line">        <span class="attr">privileged_without_host_devices</span> = <span class="literal">false</span></span><br><span class="line">        <span class="attr">runtime_engine</span> = <span class="string">&quot;&quot;</span></span><br><span class="line">        <span class="attr">runtime_path</span> = <span class="string">&quot;&quot;</span></span><br><span class="line">        <span class="attr">runtime_root</span> = <span class="string">&quot;&quot;</span></span><br><span class="line">        <span class="attr">runtime_type</span> = <span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">        <span class="section">[plugins.&quot;io.containerd.grpc.v1.cri&quot;.containerd.untrusted_workload_runtime.options]</span></span><br><span class="line"></span><br><span class="line">    <span class="section">[plugins.&quot;io.containerd.grpc.v1.cri&quot;.image_decryption]</span></span><br><span class="line">      <span class="attr">key_model</span> = <span class="string">&quot;node&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="section">[plugins.&quot;io.containerd.grpc.v1.cri&quot;.registry]</span></span><br><span class="line">      <span class="attr">config_path</span> = <span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">      <span class="section">[plugins.&quot;io.containerd.grpc.v1.cri&quot;.registry.auths]</span></span><br><span class="line"></span><br><span class="line">      <span class="section">[plugins.&quot;io.containerd.grpc.v1.cri&quot;.registry.configs]</span></span><br><span class="line"></span><br><span class="line">      <span class="section">[plugins.&quot;io.containerd.grpc.v1.cri&quot;.registry.headers]</span></span><br><span class="line"></span><br><span class="line">      <span class="section">[plugins.&quot;io.containerd.grpc.v1.cri&quot;.registry.mirrors]</span></span><br><span class="line"></span><br><span class="line">    <span class="section">[plugins.&quot;io.containerd.grpc.v1.cri&quot;.x509_key_pair_streaming]</span></span><br><span class="line">      <span class="attr">tls_cert_file</span> = <span class="string">&quot;&quot;</span></span><br><span class="line">      <span class="attr">tls_key_file</span> = <span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">  <span class="section">[plugins.&quot;io.containerd.internal.v1.opt&quot;]</span></span><br><span class="line">    <span class="attr">path</span> = <span class="string">&quot;/opt/containerd&quot;</span></span><br><span class="line"></span><br><span class="line">  <span class="section">[plugins.&quot;io.containerd.internal.v1.restart&quot;]</span></span><br><span class="line">    <span class="attr">interval</span> = <span class="string">&quot;10s&quot;</span></span><br><span class="line"></span><br><span class="line">  <span class="section">[plugins.&quot;io.containerd.internal.v1.tracing&quot;]</span></span><br><span class="line">    <span class="attr">sampling_ratio</span> = <span class="number">1.0</span></span><br><span class="line">    <span class="attr">service_name</span> = <span class="string">&quot;containerd&quot;</span></span><br><span class="line"></span><br><span class="line">  <span class="section">[plugins.&quot;io.containerd.metadata.v1.bolt&quot;]</span></span><br><span class="line">    <span class="attr">content_sharing_policy</span> = <span class="string">&quot;shared&quot;</span></span><br><span class="line"></span><br><span class="line">  <span class="section">[plugins.&quot;io.containerd.monitor.v1.cgroups&quot;]</span></span><br><span class="line">    <span class="attr">no_prometheus</span> = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">  <span class="section">[plugins.&quot;io.containerd.runtime.v1.linux&quot;]</span></span><br><span class="line">    <span class="attr">no_shim</span> = <span class="literal">false</span></span><br><span class="line">    <span class="attr">runtime</span> = <span class="string">&quot;runc&quot;</span></span><br><span class="line">    <span class="attr">runtime_root</span> = <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="attr">shim</span> = <span class="string">&quot;containerd-shim&quot;</span></span><br><span class="line">    <span class="attr">shim_debug</span> = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">  <span class="section">[plugins.&quot;io.containerd.runtime.v2.task&quot;]</span></span><br><span class="line">    <span class="attr">platforms</span> = [<span class="string">&quot;linux/amd64&quot;</span>]</span><br><span class="line">    <span class="attr">sched_core</span> = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">  <span class="section">[plugins.&quot;io.containerd.service.v1.diff-service&quot;]</span></span><br><span class="line">    <span class="attr">default</span> = [<span class="string">&quot;walking&quot;</span>]</span><br><span class="line"></span><br><span class="line">  <span class="section">[plugins.&quot;io.containerd.service.v1.tasks-service&quot;]</span></span><br><span class="line">    <span class="attr">rdt_config_file</span> = <span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">  <span class="section">[plugins.&quot;io.containerd.snapshotter.v1.aufs&quot;]</span></span><br><span class="line">    <span class="attr">root_path</span> = <span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">  <span class="section">[plugins.&quot;io.containerd.snapshotter.v1.btrfs&quot;]</span></span><br><span class="line">    <span class="attr">root_path</span> = <span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">  <span class="section">[plugins.&quot;io.containerd.snapshotter.v1.devmapper&quot;]</span></span><br><span class="line">    <span class="attr">async_remove</span> = <span class="literal">false</span></span><br><span class="line">    <span class="attr">base_image_size</span> = <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="attr">discard_blocks</span> = <span class="literal">false</span></span><br><span class="line">    <span class="attr">fs_options</span> = <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="attr">fs_type</span> = <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="attr">pool_name</span> = <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="attr">root_path</span> = <span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">  <span class="section">[plugins.&quot;io.containerd.snapshotter.v1.native&quot;]</span></span><br><span class="line">    <span class="attr">root_path</span> = <span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">  <span class="section">[plugins.&quot;io.containerd.snapshotter.v1.overlayfs&quot;]</span></span><br><span class="line">    <span class="attr">root_path</span> = <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="attr">upperdir_label</span> = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">  <span class="section">[plugins.&quot;io.containerd.snapshotter.v1.zfs&quot;]</span></span><br><span class="line">    <span class="attr">root_path</span> = <span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">  <span class="section">[plugins.&quot;io.containerd.tracing.processor.v1.otlp&quot;]</span></span><br><span class="line">    <span class="attr">endpoint</span> = <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="attr">insecure</span> = <span class="literal">false</span></span><br><span class="line">    <span class="attr">protocol</span> = <span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="section">[proxy_plugins]</span></span><br><span class="line"></span><br><span class="line"><span class="section">[stream_processors]</span></span><br><span class="line"></span><br><span class="line">  <span class="section">[stream_processors.&quot;io.containerd.ocicrypt.decoder.v1.tar&quot;]</span></span><br><span class="line">    <span class="attr">accepts</span> = [<span class="string">&quot;application/vnd.oci.image.layer.v1.tar+encrypted&quot;</span>]</span><br><span class="line">    <span class="attr">args</span> = [<span class="string">&quot;--decryption-keys-path&quot;</span>, <span class="string">&quot;/etc/containerd/ocicrypt/keys&quot;</span>]</span><br><span class="line">    <span class="attr">env</span> = [<span class="string">&quot;OCICRYPT_KEYPROVIDER_CONFIG=/etc/containerd/ocicrypt/ocicrypt_keyprovider.conf&quot;</span>]</span><br><span class="line">    <span class="attr">path</span> = <span class="string">&quot;ctd-decoder&quot;</span></span><br><span class="line">    <span class="attr">returns</span> = <span class="string">&quot;application/vnd.oci.image.layer.v1.tar&quot;</span></span><br><span class="line"></span><br><span class="line">  <span class="section">[stream_processors.&quot;io.containerd.ocicrypt.decoder.v1.tar.gzip&quot;]</span></span><br><span class="line">    <span class="attr">accepts</span> = [<span class="string">&quot;application/vnd.oci.image.layer.v1.tar+gzip+encrypted&quot;</span>]</span><br><span class="line">    <span class="attr">args</span> = [<span class="string">&quot;--decryption-keys-path&quot;</span>, <span class="string">&quot;/etc/containerd/ocicrypt/keys&quot;</span>]</span><br><span class="line">    <span class="attr">env</span> = [<span class="string">&quot;OCICRYPT_KEYPROVIDER_CONFIG=/etc/containerd/ocicrypt/ocicrypt_keyprovider.conf&quot;</span>]</span><br><span class="line">    <span class="attr">path</span> = <span class="string">&quot;ctd-decoder&quot;</span></span><br><span class="line">    <span class="attr">returns</span> = <span class="string">&quot;application/vnd.oci.image.layer.v1.tar+gzip&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="section">[timeouts]</span></span><br><span class="line">  <span class="attr">&quot;io.containerd.timeout.bolt.open&quot;</span> = <span class="string">&quot;0s&quot;</span></span><br><span class="line">  <span class="attr">&quot;io.containerd.timeout.shim.cleanup&quot;</span> = <span class="string">&quot;5s&quot;</span></span><br><span class="line">  <span class="attr">&quot;io.containerd.timeout.shim.load&quot;</span> = <span class="string">&quot;5s&quot;</span></span><br><span class="line">  <span class="attr">&quot;io.containerd.timeout.shim.shutdown&quot;</span> = <span class="string">&quot;3s&quot;</span></span><br><span class="line">  <span class="attr">&quot;io.containerd.timeout.task.state&quot;</span> = <span class="string">&quot;2s&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="section">[ttrpc]</span></span><br><span class="line">  <span class="attr">address</span> = <span class="string">&quot;&quot;</span></span><br><span class="line">  <span class="attr">gid</span> = <span class="number">0</span></span><br><span class="line">  <span class="attr">uid</span> = <span class="number">0</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id=""><a href="#" class="headerlink" title=""></a></h2><h2 id="2-3-加载内核参数"><a href="#2-3-加载内核参数" class="headerlink" title="2.3 加载内核参数"></a>2.3 加载内核参数</h2><p>​	加载的内核参数主要和网络有关系，如果没配置好的话后续加入master节点以及起<code>kube-flannean</code>会出问题。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> modprobe br_netfilter</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cat &lt;&lt;EOF | sudo tee /etc/sysctl.d/k8s.conf</span><br><span class="line">net.bridge.bridge-nf-call-iptables = 1</span><br><span class="line">net.bridge.bridge-nf-call-ip6tables = 1</span><br><span class="line">net.ipv4.ip_forward = 1</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo sysctl --system</span><br></pre></td></tr></table></figure>

<p>检查</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">lsmod | grep br_netfilter</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;net.bridge.bridge-nf-call-iptables = 1&quot;</span> &gt;&gt; /etc/sysctl.conf</span><br><span class="line">sysctl -p</span><br></pre></td></tr></table></figure>





<h2 id="2-4-关闭swap"><a href="#2-4-关闭swap" class="headerlink" title="2.4 关闭swap"></a>2.4 关闭swap</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">swapoff -a</span><br><span class="line"><span class="comment"># 永久关闭：</span></span><br><span class="line"><span class="built_in">sudo</span> sed -i <span class="string">&#x27;/ swap / s/^/#/&#x27;</span> /etc/fstab</span><br></pre></td></tr></table></figure>

<h2 id="2-5-修改Hostname-可选"><a href="#2-5-修改Hostname-可选" class="headerlink" title="2.5 修改Hostname(可选)"></a>2.5 修改Hostname(可选)</h2><p>可选，这台主机最终是作为master节点，可以自己随便改个名字。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hostnamectl set-hostname mastername</span><br></pre></td></tr></table></figure>

<p>如果修改了主机名一定要增加本地域名解析</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">127.0.0.1 mastername</span><br></pre></td></tr></table></figure>

<p>没改成功可以去<code>/etc/hostname</code>改</p>
<h1 id="3-克隆出两个节点"><a href="#3-克隆出两个节点" class="headerlink" title="3. 克隆出两个节点"></a>3. 克隆出两个节点</h1><blockquote>
<ol>
<li>配置Hostname</li>
<li>配置 IP</li>
<li>配置hosts</li>
</ol>
</blockquote>
<p>克隆机器后进行</p>
<h2 id="3-1-配置Hostname"><a href="#3-1-配置Hostname" class="headerlink" title="3.1 配置Hostname"></a>3.1 配置Hostname</h2><p>​	克隆出来的主机作为普通的节点，<strong>必须</strong>修改名字，否则无法接入集群</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hostnamectl set-hostname node2</span><br></pre></td></tr></table></figure>

<p>一定要增加本地域名解析</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">127.0.0.1 ndoe2</span><br></pre></td></tr></table></figure>

<p>没改成功可以去<code>/etc/hostname</code>改</p>
<h2 id="3-1-配置-IP"><a href="#3-1-配置-IP" class="headerlink" title="3.1 配置 IP"></a>3.1 配置 IP</h2><p>根据上网的网卡改</p>
<p>可参考<a href="https://regenm.github.io/2025/07/14/Linux%E7%BD%91%E7%BB%9C%E9%85%8D%E7%BD%AE/">Linux网络配置 | Regen</a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vim /etc/sysconfig/network-scripts/ifcfg-ens33</span><br></pre></td></tr></table></figure>





<h2 id="3-1-配置hosts"><a href="#3-1-配置hosts" class="headerlink" title="3.1 配置hosts"></a>3.1 配置hosts</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vim /etc/hosts</span><br><span class="line"># add</span><br><span class="line">127.0.0.1 node2 # 对应的hostanme</span><br></pre></td></tr></table></figure>

<h1 id="4-master配置"><a href="#4-master配置" class="headerlink" title="4. master配置"></a>4. master配置</h1><blockquote>
<ol>
<li>kubeadm init</li>
<li>安装网络插件Flannel</li>
</ol>
</blockquote>
<h2 id="4-1-kubeadm-init"><a href="#4-1-kubeadm-init" class="headerlink" title="4.1 kubeadm init"></a>4.1 kubeadm init</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">kubeadm init \</span><br><span class="line">  --apiserver-advertise-address=192.168.72.8 \</span><br><span class="line">  --pod-network-cidr=10.244.0.0/16 \</span><br><span class="line">  --image-repository=registry.aliyuncs.com/google_containers</span><br></pre></td></tr></table></figure>

<p>此时会输出介入集群的命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">kubeadm <span class="built_in">join</span> 192.168.72.8:6443 --token gisx9m.q8kqbw0zndrm8i5b --discovery-token-ca-cert-hash </span><br></pre></td></tr></table></figure>

<p>如果忘记可以重新生成：</p>
<p>在 <strong>master 节点</strong> 上执行：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">kubeadm token create --print-join-command</span><br></pre></td></tr></table></figure>

<h2 id="4-1-安装网络插件Flannel"><a href="#4-1-安装网络插件Flannel" class="headerlink" title="4.1 安装网络插件Flannel"></a>4.1 安装网络插件Flannel</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">kubectl apply -f https://raw.githubusercontent.com/coreos/flannel/master/Documentation/kube-flannel.yml</span><br></pre></td></tr></table></figure>



<h1 id="5-nodes配置"><a href="#5-nodes配置" class="headerlink" title="5. nodes配置"></a>5. nodes配置</h1><ol>
<li>加入集群</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">kubeadm <span class="built_in">join</span> 192.168.72.8:6443 --token gisx9m.q8kqbw0zndrm8i5b --discovery-token-ca-cert-hash </span><br></pre></td></tr></table></figure>

<p>等待kube-flannel起来即可，过程可能有点久取决于网速和配置。</p>
<p><img src="/../images/Linux/%E8%BF%90%E7%BB%B4/k8s/image-20250804170231277.png" alt="image-20250804170231277"></p>
<h1 id="6-问题总结"><a href="#6-问题总结" class="headerlink" title="6. 问题总结"></a>6. 问题总结</h1><p>​	以上流程已经避免了很多坑，以下是几个容易卡主的问题。</p>
<h2 id="解决contairnerd镜像源问题"><a href="#解决contairnerd镜像源问题" class="headerlink" title="解决contairnerd镜像源问题"></a>解决contairnerd镜像源问题</h2><p>可参考：</p>
<p><a href="https://www.cnblogs.com/wod-Y/p/17043985.html">搭建k8s集群初始化master节点 kubeadm init 遇到问题解决 - 杨海星 - 博客园</a></p>
<h2 id="解决kube-flannean安装的问题"><a href="#解决kube-flannean安装的问题" class="headerlink" title="解决kube-flannean安装的问题"></a>解决kube-flannean安装的问题</h2><p>可参考：</p>
<p>kubectl apply -f <a href="https://raw.githubusercontent.com/coreos/flannel/master/Documentation/kube-flannel.yml">https://raw.githubusercontent.com/coreos/flannel/master/Documentation/kube-flannel.yml</a></p>
]]></content>
      <categories>
        <category>软件技术</category>
      </categories>
      <tags>
        <tag>笔记</tag>
        <tag>linux</tag>
        <tag>运维</tag>
        <tag>k8s</tag>
        <tag>系统运维</tag>
        <tag>containerd</tag>
        <tag>docker</tag>
        <tag>nginx</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux Notes</title>
    <url>/2023/11/28/Linux-system-Notes/</url>
    <content><![CDATA[<p>A note about linux basic operation.</p>
<h3 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h3><ol>
<li><p>文件查看类</p>
<ul>
<li><pre><code>  more
  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">    ：</span><br><span class="line"></span><br><span class="line">    - 空白键 (space)：代表向下翻一页；</span><br><span class="line">    - Enter ：代表向下翻『一行』；</span><br><span class="line">    - / 字串 ：代表在这个显示的内容当中，向下搜寻『字串』这个关键字；</span><br><span class="line">    - :f ：立刻显示出档名以及目前显示的行数；</span><br><span class="line">    - q ：代表立刻离开 more ，不再显示该文件内容；</span><br><span class="line">    - b 或 [ctrl]-b ：代表往回翻页，不过这动作只对文件有用，对管线无用。</span><br><span class="line"></span><br><span class="line">- ```</span><br><span class="line">    less</span><br></pre></td></tr></table></figure>

  ：

  - 空白键 ：向下翻动一页；
  - [pagedown]：向下翻动一页；
  - [pageup] ：向上翻动一页；
  - **/ 字串 ：向下搜寻『字串』的功能；**
  - **? 字串 ：向上搜寻『字串』的功能；**
  - **n ：重复前一个搜寻 (与 / 或？有关！)**
  - **N ：反向的重复前一个搜寻 (与 / 或？有关！)**
  - q ：离开 less 这个程序；
</code></pre>
</li>
<li><p><code>head</code>：读取前几行文本，如 <code>head -n 20 text.txt</code></p>
</li>
<li><p><code>tail</code>：与 <code>head</code> 相反，如 <code>tail -n 20 text.txt</code></p>
</li>
</ul>
</li>
<li><p>文件压缩解压缩类</p>
<ul>
<li><pre><code>  gzip
  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">    ：</span><br><span class="line"></span><br><span class="line">    - 压缩：`gzip linuxFiles.tar`</span><br><span class="line">    - 解压缩：`gunzip linuxFiles.tar.gz` 或 `gzip -d linuxFiles.tar.gz`</span><br><span class="line"></span><br><span class="line">- ```</span><br><span class="line">    tar</span><br></pre></td></tr></table></figure>

  ：

  - 打包文件：`tar -cvf linuxFiles.tar home/`

  - 解开打包后的文件：`tar -xvf linuxFiles.tar`

  - `tar -w` 选项，每次将选择单个文件抽出或加入，如 `tar -xvwf linuxFiles.tar`

  - ```
      tar -z
      <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">自动调用</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br></pre></td></tr></table></figure>
      gzip
      <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">             </span><br><span class="line"></span><br><span class="line">            进行解压缩：</span><br><span class="line"></span><br><span class="line">            - 压缩：`tar -czvf linuxFiles.tar.gz home/` （等价于 `tar -cvf linuxFiles.tar home/` 和 `gzip linuxFiles.tar` ）</span><br><span class="line">            - 解压缩：`tar -xzvf linuxFiles.tar.gz home/` （等价于 `gzip -d linuxFiles.tar.gz` 和 `tar -xvf linuxFiles.tar` ）</span><br><span class="line"></span><br><span class="line">3. 系统信息查看类</span><br><span class="line"></span><br><span class="line">    - 查看内存占用和 swap 分区占用：`free -h`</span><br><span class="line">    - 查看 CPU 使用情况：`top`</span><br><span class="line">    - 查看设备挂载情况：</span><br><span class="line">        - 所有设备：`lsblk` 、`lsblk -f`</span><br><span class="line">        - 查看硬盘使用情况：`df -h`</span><br><span class="line"></span><br><span class="line">4. 端口查看类</span><br><span class="line"></span><br><span class="line">    - 查看某个端口（使用管道 + 过滤）：</span><br><span class="line"></span><br><span class="line">        - 一般情况下：`netstat -anp | grep 8080` （`-a(all)n(numeric)p(programs)` ）</span><br><span class="line"></span><br><span class="line">        - ```</span><br><span class="line">            netstat</span><br></pre></td></tr></table></figure>

       

      的其他参数：

      - `-a (all)` ：显示所有选项，默认不显示 LISTEN 相关；
      - `-t (tcp)` ：仅显示 tcp 相关选项；
      - `-u (udp)` ：仅显示 udp 相关选项；
      - `-n` ：拒绝显示别名，能显示数字的全部转化成数字；
      - `-l` ：仅列出有在 Listen (监听) 的服务状态；
      - `-p` ：显示建立相关链接的程序名；
      - `-r` ：显示路由信息，路由表；
      - `-e` ：显示扩展信息，例如 uid 等；
      - `-s` ：按各个协议进行统计；
      - `-c` ：每隔一个固定时间，执行该 netstat 命令；
</code></pre>
</li>
</ul>
</li>
<li><p>任务调度类</p>
<ul>
<li><pre><code>  crontab
  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">：</span><br><span class="line"></span><br><span class="line">- 参数选项：</span><br><span class="line"></span><br><span class="line">    - `-e` ：编辑 / 设置 / 修改当前用户的定时任务；</span><br><span class="line">    - `-l` ：列出 / 查看 / 打印 / 输出当前用户的全部定时任务；</span><br><span class="line">    - `-r` ：移除 / 删除当前用户的全部定时任务；</span><br><span class="line"></span><br><span class="line">- 语法中</span><br><span class="line"></span><br><span class="line">     </span><br><span class="line"></span><br></pre></td></tr></table></figure>
      * * * * * 
      <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">            参数的解释：</span><br><span class="line"></span><br><span class="line">            - `*` ：如 `1 2 * * *` 表示每天的 2:01 执行一次；</span><br><span class="line">            - `*/n` ：如 `*/5 * * * *` 表示每隔 5 分钟执行一次；</span><br><span class="line">            - `,(和)` ：如 `1 2 3,4 * *` 表示每月的 3,4 日 2:01 执行一次；</span><br><span class="line">            - `-（范围）` ：如 `1 2 3-6 * *` 表示每月的 3-6 日 2:01 执行一次；</span><br><span class="line"></span><br><span class="line">        - 使用方法：</span><br><span class="line"></span><br><span class="line">            - 进入编辑模式：`crontab -e`</span><br><span class="line">            - 编写任务后保存退出。</span><br><span class="line"></span><br><span class="line">### 文件权限与管理</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">1. 文件系统相关</span><br><span class="line"></span><br><span class="line">    - ```</span><br><span class="line">        ext4</span><br></pre></td></tr></table></figure>

   

  文件系统介绍：

  - 与 `ext3` 相比，`ext4` 文件系统可支持最高 1EB 的分区与最大 16TB 的文件；
  - 拓展了子目录的数量，理论上可以无限个；
  - 与 `ext3` 相比，引入了块组的概念，提高了存取的效率；
  - 预留空间、延迟获取空间，减少了文件的分散；
  - 更详细的 `inodes`，提高了系统的性能；
  - 可以实现快速的文件系统检查；
  - 提供日志校验和，提高了可靠性；
</code></pre>
</li>
</ul>
</li>
<li><p>新硬盘的分区以及挂载流程</p>
<ul>
<li>查看是否已经存在设备：<code>lsblk</code> 、<code>lsblk -f</code> 或者查看 <code>/dev/</code> 下是否存在设备；</li>
<li>使用 <code>fdisk</code> 进行分区设置：<code>fdisk /dev/sdb</code></li>
<li>分区格式化：<code>mkfs -t ext4 /dev/sdb1</code></li>
<li>挂载硬盘到文件夹：<code>mount /dev/sdb1 /newDisk</code></li>
<li>取消挂载：<code>unmount /dev/sdb1</code></li>
</ul>
</li>
<li><p>文件在已有服务器之间的传输</p>
<ul>
<li><p>通过scp或者rsync</p>
<ol>
<li><p>scp</p>
<blockquote>
<p><strong>传过去</strong></p>
<p><code>scp local_file.txt user@remote_host:/path/to/destination/</code></p>
<p><code>scp -r local_folder user@remote_host:/path/to/destination/</code></p>
<p><strong>传过来</strong></p>
<p><code>scp user@remote_host:/path/to/remote_file local_destination/</code></p>
</blockquote>
</li>
<li><p>rsync</p>
<blockquote>
<p><strong>传过去</strong></p>
<p><code>rsync -avz local_file user@remote_host:/path/to/destination/</code></p>
<p><code>rsync -avz local_folder/ user@remote_host:/path/to/destination/</code></p>
<p><strong>传过来</strong></p>
<p><code> rsync -avz user@remote_host:/path/to/remote_file local_destination/</code></p>
</blockquote>
<ul>
<li><strong><code>scp</code></strong>: Simple and straightforward, good for one-time transfers.</li>
<li><strong><code>rsync</code></strong>: More efficient for syncing directories and updating files.</li>
</ul>
</li>
</ol>
</li>
</ul>
</li>
</ol>
<h3 id="系统服务与进程管理"><a href="#系统服务与进程管理" class="headerlink" title="系统服务与进程管理"></a>系统服务与进程管理</h3><ol>
<li><p>进程相关</p>
<ul>
<li>提供所有进程信息：<code>ps aux</code></li>
<li>提供父进程信息：<code>ps lax</code></li>
<li>终止某项进程：<code>kill pid</code> （<code>kill</code> 只是向程序发送一个信号）</li>
</ul>
</li>
<li><p>系统服务（防火墙）相关</p>
<ul>
<li><p>查看防火墙状态：</p>
<ul>
<li><code>systemctl status firewalld</code></li>
<li><code>sudo ufw status</code></li>
</ul>
</li>
<li><p>开启防火墙：</p>
<ul>
<li><code>systemctl start firewalld</code> 、<code>systemctl enable firewalld</code></li>
<li><code>sudo ufw enable</code></li>
</ul>
</li>
<li><p>关闭防火墙：</p>
<ul>
<li><code>systemctl stop firewalld</code></li>
<li><code>sudo ufw disable</code></li>
</ul>
</li>
<li><p>端口操作（以</p>
  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">firewalld</span><br></pre></td></tr></table></figure>

<p>  为例）：</p>
<ul>
<li>开放端口：<ul>
<li>例如开放 <code>ssh</code> 端口：<code>firewall-cmd --zone=public --add-port=22/tcp --permanent</code></li>
<li>使之生效：<code>firewall-cmd --reload</code></li>
<li>检查是否生效：<code>firewall-cmd --zone=public --query-port=22/tcp</code></li>
<li>或者 <code>sudo ufw allow 端口</code></li>
</ul>
</li>
<li>关闭端口：<ul>
<li>限制 <code>ssh</code> 端口：<code>firewall-cmd --zone=public --remove-port=22/tcp --permanent</code></li>
<li>或者 <code>sudo ufw denty 端口</code></li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ol>
<h3 id="日志管理与分析"><a href="#日志管理与分析" class="headerlink" title="日志管理与分析"></a>日志管理与分析</h3>]]></content>
      <categories>
        <category>软件技术</category>
      </categories>
      <tags>
        <tag>笔记</tag>
        <tag>linux</tag>
        <tag>system</tag>
        <tag>command</tag>
        <tag>运维</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux Projects</title>
    <url>/2023/11/28/Linux-Projects/</url>
    <content><![CDATA[<p>​	以下项目都是我在已经完成之后补录的笔记，包括但不限于遇到的报错，问题。便于以后复现。实际上不能说是项目，仅仅是复现并且享受大佬的成果而已。开源不易，感谢大佬们开源！</p>
<h1 id="ZeroTier-内网穿透"><a href="#ZeroTier-内网穿透" class="headerlink" title="ZeroTier 内网穿透"></a>ZeroTier 内网穿透</h1><h2 id="1-简介"><a href="#1-简介" class="headerlink" title="1.简介"></a>1.简介</h2><p>​	官网：<a href="https://www.zerotier.com/">ZeroTier</a></p>
<blockquote>
<p><strong>ZeroTier Client :</strong></p>
<p>The ZeroTier client is used to connect to virtual networks previously created in the ZeroTier Central web-based <a href="https://en.wikipedia.org/wiki/User_interface">UI</a>. Endpoint connections are peer-to-peer and <a href="https://en.wikipedia.org/wiki/End-to-end_encryption">end-to-end encrypted</a>. <a href="https://en.wikipedia.org/wiki/STUN">STUN</a> and <a href="https://en.wikipedia.org/wiki/Hole_punching_(networking)">hole punching</a> are used to establish direct connections between peers behind <a href="https://en.wikipedia.org/wiki/Network_Address_Translation">NAT</a>. Direct connection route discovery is made with the help of a global network of <em>root servers</em> via a mechanism similar to <a href="https://en.wikipedia.org/wiki/Interactive_Connectivity_Establishment">ICE</a> in <a href="https://en.wikipedia.org/wiki/WebRTC">WebRTC</a>.</p>
</blockquote>
<h2 id="2-安装"><a href="#2-安装" class="headerlink" title="2.安装"></a>2.安装</h2><p>​		实际上十分简单，对于Windows，iPad，Android，macOS都有相应软件。</p>
<p><img src="/../images/ZeroTIerDownload.png"></p>
<h3 id="linux"><a href="#linux" class="headerlink" title="linux"></a>linux</h3><ol>
<li>安装</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl -s https://install.zerotier.com | <span class="built_in">sudo</span> bash</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>操作：加入，离开，查看已经连接的网络</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">zerotier-cli <span class="built_in">join</span> &lt;NETWORK ID&gt;</span><br><span class="line"><span class="comment">#加入</span></span><br><span class="line">zerotier-cli leave &lt;NETWORK ID&gt;</span><br><span class="line"><span class="comment">#离开</span></span><br><span class="line">zerotier-cli listnetworks</span><br><span class="line"><span class="comment">#连接列表</span></span><br></pre></td></tr></table></figure>

<h2 id="3-管理"><a href="#3-管理" class="headerlink" title="3.管理"></a>3.管理</h2><p>​	直接登录官网即可进行对已组网络的管理，例如授权用户，修改网络内部IP地址以及备注信息等等</p>
<p><img src="/../images/ZeroTierAdmin.jpg" alt="Admin Page"></p>
<h2 id="4-Last"><a href="#4-Last" class="headerlink" title="4.Last"></a>4.Last</h2><p>​	世上还是好人多啊，ZeroTier的出现真的让内网穿透方便了很多，免费用户的配置也很不错！</p>
<h1 id="FTP-服务器搭建"><a href="#FTP-服务器搭建" class="headerlink" title="FTP 服务器搭建"></a>FTP 服务器搭建</h1><h1 id="MQTT服务器搭建（mosquitto）"><a href="#MQTT服务器搭建（mosquitto）" class="headerlink" title="MQTT服务器搭建（mosquitto）"></a>MQTT服务器搭建（mosquitto）</h1><h2 id="0-简介"><a href="#0-简介" class="headerlink" title="0.简介"></a>0.简介</h2><ol>
<li>简介</li>
</ol>
<blockquote>
<p>MQTT也称为”消息代理”（Broker）。</p>
<p>MQTT是一个基于客户端-服务器的消息发布&#x2F;订阅传输协议。MQTT协议是轻量、简单、开放和易于实现的，这些特点使它适用范围非常广泛。在很多情况下，包括受限的环境中，如：机器与机器（M2M）通信和物联网（IoT）。其在，通过卫星链路通信传感器、偶尔拨号的医疗设备、智能家居、及一些小型化设备中已广泛使用。</p>
</blockquote>
<ol start="2">
<li>原理</li>
</ol>
<blockquote>
<p>MQTT协议原理<br>MQTT协议实现方式<br>实现MQTT协议需要客户端和服务器端通讯完成，在通讯过程中，MQTT协议中有三种身份：发布者（Publish）、代理（Broker）（服务器）、订阅者（Subscribe）。其中，消息的发布者和订阅者都是客户端，消息代理是服务器，消息发布者可以同时是订阅者。</p>
<p>MQTT传输的消息分为：主题（Topic）和负载（payload）两部分：</p>
<p>（1）Topic，可以理解为消息的类型，订阅者订阅（Subscribe）后，就会收到该主题的消息内容（payload）</p>
<p>（2）payload，可以理解为消息的内容，是指订阅者具体要使用的内容。</p>
</blockquote>
<h2 id="1-mosquitto-服务端"><a href="#1-mosquitto-服务端" class="headerlink" title="1. mosquitto 服务端"></a>1. mosquitto 服务端</h2><ul>
<li>安装</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">apt install mosquitto</span><br></pre></td></tr></table></figure>

<ul>
<li>配置</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /etc/mosquitto</span><br></pre></td></tr></table></figure>

<ul>
<li>修改配置文件</li>
</ul>
<p>​				在 <strong>&#x2F;etc&#x2F;mosquitto&#x2F;conf.d</strong>目录下有一个叫 README 的文件，上面写了信息：</p>
<blockquote>
<h1 id="Any-files-placed-in-this-directory-that-have-a-conf-ending-will-be-loaded-as-config-files-by-the-broker-Use-this-to-make-your-local-config"><a href="#Any-files-placed-in-this-directory-that-have-a-conf-ending-will-be-loaded-as-config-files-by-the-broker-Use-this-to-make-your-local-config" class="headerlink" title="Any files placed in this directory that have a .conf ending will be loaded as config files by the broker. Use this to make your local config."></a>Any files placed in this directory that have a .conf ending will be loaded as config files by the broker. Use this to make your local config.</h1></blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /etc/mosquitto/conf.d</span><br><span class="line"></span><br><span class="line">vim config.conf</span><br><span class="line"><span class="comment"># 添加下面配置</span></span><br><span class="line"><span class="comment"># 不允许匿名访问</span></span><br><span class="line">allow_anonymous <span class="literal">false</span></span><br><span class="line"><span class="comment"># 配置端口</span></span><br><span class="line">listener 1883</span><br><span class="line"><span class="comment"># 设置密码文件保存目录</span></span><br><span class="line">password_file /etc/mosquitto/pwfile.example</span><br></pre></td></tr></table></figure>

<ul>
<li>运行配置文件</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mosquitto -c /etc/mosquitto/conf.d/config.conf -v</span><br></pre></td></tr></table></figure>

<ul>
<li>添加用户</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mosquitto_passwd -c /etc/mosquitto/pwfile.example username</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>关闭防火墙！！！</strong></li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ufw <span class="built_in">disable</span></span><br><span class="line"><span class="comment"># 或者添加规则</span></span><br><span class="line">ufw allow 1883</span><br></pre></td></tr></table></figure>

<h2 id="2-mosquitto-clients-客户端"><a href="#2-mosquitto-clients-客户端" class="headerlink" title="2. mosquitto-clients 客户端"></a>2. mosquitto-clients 客户端</h2><ul>
<li>用户登录订阅，发布</li>
</ul>
<p>​	其实一般都是接近被控设备的系统，比如各种Mcu（esp32，esp8266）等等。这部分将在寒假进行补充（在另外一篇博客）。<a href="https://regenm.gitee.io/">esp8266或者esp32等</a></p>
<p>对于Linux客户，可以是模拟器（ ISH ，Termux）</p>
<ul>
<li>安装</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">apt install mosquitto-clients</span><br></pre></td></tr></table></figure>

<ul>
<li>订阅</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mosquitto_sub -h <span class="string">&quot;IP address&quot;</span> -p 1883 -u username -P regen -t <span class="string">&quot;test&quot;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>发布</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mosquitto_pub -h <span class="string">&quot;IP address&quot;</span> -p 1883 -u username -P regen -t <span class="string">&quot;test&quot;</span> -m <span class="string">&quot;hello mqtt! hello ! mosquitto!&quot;</span></span><br></pre></td></tr></table></figure>

<h2 id="3-mosquitto使用"><a href="#3-mosquitto使用" class="headerlink" title="3. mosquitto使用"></a>3. mosquitto使用</h2><ul>
<li><strong>脚本制作</strong></li>
</ul>
<p>​				为了方便 mosquitto 的使用，可以写几个脚本用于发布和订阅</p>
<ol>
<li>发布</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim regenMosquittoScriptSendRemote.sh</span><br><span class="line"></span><br><span class="line"><span class="comment">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line">mosquitto_pub -h <span class="string">&quot;IP address&quot;</span> -p 1883 -u username -P regen -t <span class="string">&quot;test&quot;</span> -m <span class="string">&quot;<span class="variable">$1</span>&quot;</span></span><br></pre></td></tr></table></figure>

<p>​	赋权</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">chmod</span> 777 regenMosquittoScriptSendRemote.sh</span><br></pre></td></tr></table></figure>

<p>​	运行</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./regenMosquittoScriptSendRemote.sh hello!</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>订阅，同理</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim regenMosquittoScriptSubRemote.sh</span><br><span class="line"></span><br><span class="line"><span class="comment">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line">mosquitto_sub -h <span class="string">&quot;IP address&quot;</span> -p 1883 -u username -P regen -t <span class="string">&quot;<span class="variable">$1</span>&quot;</span></span><br></pre></td></tr></table></figure>

<p>​	赋权</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">chmod</span> 777 regenMosquittoScriptSubRemote.sh</span><br></pre></td></tr></table></figure>

<p>​	运行</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./regenMosquittoScriptSendRemote.sh topic</span><br></pre></td></tr></table></figure>

<ul>
<li>连接esp32或8266</li>
</ul>
<h1 id="自建服务器（搭配ZeroTier食用）"><a href="#自建服务器（搭配ZeroTier食用）" class="headerlink" title="自建服务器（搭配ZeroTier食用）"></a>自建服务器（搭配ZeroTier食用）</h1><h2 id="1-begin"><a href="#1-begin" class="headerlink" title="1. begin"></a>1. begin</h2><p>​	虽然和hxy合伙买的白菜价国外服务器性能也还够用，但是也仅仅是够用，之前发现的内网穿透神器Zerotier刚好可以拿来当我的梦中情机的最后一块拼图。使用ZeroTier就可以让我方便的在SH连接到JX的家中局域网内的服务器了！</p>
<h2 id="2-介绍"><a href="#2-介绍" class="headerlink" title="2.介绍"></a>2.介绍</h2><h3 id="1-硬件介绍"><a href="#1-硬件介绍" class="headerlink" title="1.硬件介绍"></a>1.硬件介绍</h3><p>​			硬件部分的清单：</p>
<blockquote>
<p>CPU : E3 1230 v2 (4核8线，3.3ghz)</p>
<p>显卡 ： gt610 	（亮机即可，且低功耗）</p>
<p>内存：8g</p>
<p>外存：240（固态）+500（机械）</p>
</blockquote>
<h3 id="2-软件介绍"><a href="#2-软件介绍" class="headerlink" title="2.软件介绍"></a>2.软件介绍</h3><p>​		由于我正在使用的pc中恰好有四个下载好的镜像文件，分别是 macOS.Ventura_13.4 , deepin ，ubuntu22.04，kali2023，最终使用的是kali,原因在于kali已经安装好绝大部分软件和其需运行的环境，例如：httpd，JDK，javarun，makefile等等。</p>
<h2 id="3-组装（跳过）"><a href="#3-组装（跳过）" class="headerlink" title="3.组装（跳过）"></a>3.组装（跳过）</h2><h2 id="4-配置ZeroTier-如上篇ZeroTier内网穿透"><a href="#4-配置ZeroTier-如上篇ZeroTier内网穿透" class="headerlink" title="4.配置ZeroTier(如上篇ZeroTier内网穿透)"></a>4.配置ZeroTier(如上篇ZeroTier内网穿透)</h2><h2 id="5-结束"><a href="#5-结束" class="headerlink" title="5.结束"></a>5.结束</h2><p>最终效果，通过ipad的终端ssh外网连接kali</p>
<p><img src="/../images/ipadConnectKali.jpg" alt="ipadConnectKali"></p>
<h1 id="makefile"><a href="#makefile" class="headerlink" title="makefile"></a>makefile</h1><h2 id="1-make简要介绍"><a href="#1-make简要介绍" class="headerlink" title="1.make简要介绍"></a>1.make简要介绍</h2><blockquote>
<p>​	In <a href="https://en.wikipedia.org/wiki/Software_development">software development</a>, <strong>Make</strong> is a <a href="https://en.wikipedia.org/wiki/Build_automation">build automation</a> tool that <a href="https://en.wikipedia.org/wiki/Software_build">builds</a> <a href="https://en.wikipedia.org/wiki/Executable_program">executable programs</a> and <a href="https://en.wikipedia.org/wiki/Library_(software)">libraries</a> from <a href="https://en.wikipedia.org/wiki/Source_code">source code</a> by reading <a href="https://en.wikipedia.org/wiki/File_(computing)">files</a> called <em>makefiles</em> which specify how to derive the target program. Though <a href="https://en.wikipedia.org/wiki/Integrated_development_environment">integrated development environments</a> and <a href="https://en.wikipedia.org/wiki/Programming_language">language</a>-specific <a href="https://en.wikipedia.org/wiki/Compiler_(computing)">compiler</a> features can also be used to manage a build process, Make remains widely used, especially in <a href="https://en.wikipedia.org/wiki/Unix">Unix</a> and <a href="https://en.wikipedia.org/wiki/Unix-like">Unix-like</a> <a href="https://en.wikipedia.org/wiki/Operating_system">operating systems</a>.</p>
</blockquote>
<blockquote>
<p>​	Make is not limited to building programs. It can also be used to manage any project where some files need to be updated automatically from other files whenever the other files change.</p>
</blockquote>
<h2 id="2-makefile简要介绍"><a href="#2-makefile简要介绍" class="headerlink" title="2.makefile简要介绍"></a>2.makefile简要介绍</h2><p>​	makefile文件用于告诉make命令如何执行编译和链接。</p>
<p>​	当一个文件具有很多个.c文件和.h文件时，如果将makefile写好了，就只需要一行代码<code>make</code>即可完成编译链接或者<code>make clean</code>删除所有目标文件，同时还能具备以下特性：</p>
<blockquote>
<p>​      1.如果这个工程没有编译过，那么所有C文件都会编译并被链接。</p>
<p>​      2.如果这个工程的某几个C文件被修改，那么只编译被修改的C文件，并链接目标程序。</p>
<p>​      3.如果这个工程的头文件被改变了，那么我们需要编译引用了这几个头文件的C文件，并链接目标程序。</p>
</blockquote>
<h2 id="3-makefile的规则"><a href="#3-makefile的规则" class="headerlink" title="3.makefile的规则"></a>3.makefile的规则</h2><figure class="highlight makefile"><table><tr><td class="code"><pre><span class="line">target ... : prerequisites ...</span><br><span class="line"></span><br><span class="line">         command</span><br><span class="line"></span><br><span class="line">         ...</span><br><span class="line"></span><br><span class="line">         ...</span><br><span class="line">        -------------------------------------------------------------------------------</span><br></pre></td></tr></table></figure>

<ul>
<li>target : 目标文件（可以使object文件，可执行文件，还可以是<strong>标签</strong>）</li>
<li>prerequisites ：生成target所需要的文件或是目标。</li>
<li>command也就是make需要执行的命令。（Shell命令）</li>
</ul>
<h2 id="4-makefile的使用"><a href="#4-makefile的使用" class="headerlink" title="4.makefile的使用"></a>4.makefile的使用</h2><p>​	makefile的规则看似十分简单，但是写好一个makefile却是不简单的。下面举例说明&#96;&#96;&#96;</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#假设已经存在3个c文件，4个.h文件，分别是:</span></span><br><span class="line">cFile1.c cFile2.c cFile3.c</span><br><span class="line">hFile1.h hFile2.h hFile3.h hFile4.h</span><br></pre></td></tr></table></figure>

<p>​		如果我们最终想要生成可执行文件main，那么makefile可以这样写，以下是我使用在线makefile生成器生成的。</p>
<p>​		同时介绍一下gcc的参数：</p>
<blockquote>
<ul>
<li><p>-g可执行程序包含调试信息<br>-g为了调试用的<br>加个-g 是为了gdb 用，不然gdb用不到</p>
</li>
<li><p>-o指定输出文件名<br>-o output_filename，确定输出文件的名称为output_filename，同时这个名称不能和源文件同名。如果不给出这个选项，gcc就给出</p>
</li>
<li><p>-c 只编译不链接<br>产生.o文件，就是obj文件，不产生执行文件</p>
</li>
<li><p>-D 其意义是添加宏定义</p>
</li>
<li><p>-w的意思是关闭编译时的警告，也就是编译后不显示任何warning，因为有时在编译之后编译器会显示一些例如数据转换之类的警告，这些警告是我们平时可以忽略的。</p>
</li>
<li><p>-W选项类似-Wall，会显示警告，但是只显示编译器认为会出现错误的警告。</p>
</li>
<li><p>-Wall选项意思是编译后显示所有警告</p>
</li>
</ul>
</blockquote>
<figure class="highlight makefile"><table><tr><td class="code"><pre><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># In order to execute this &quot;Makefile&quot; just type &quot;make&quot;</span></span><br><span class="line"><span class="comment">#  A. Delis (ad@di.uoa.gr)</span></span><br><span class="line"><span class="comment"># web: https://solver.assistedcoding.eu/makefilegen</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"></span><br><span class="line">OBJS  = cFile1.o cFile2.o cFile3.o</span><br><span class="line">SOURCE  = cFile1.c cFile2.c cFile3.c</span><br><span class="line">HEADER  = hFile1.h hFile2.h hFile3.h hFile4.h</span><br><span class="line">OUT  = main.out</span><br><span class="line">CC   = gcc</span><br><span class="line">FLAGS   = -g -c -Wall				 </span><br><span class="line">LFLAGS   = </span><br><span class="line"><span class="comment"># -g option enables debugging mode </span></span><br><span class="line"><span class="comment"># -c flag generates object code for separate files</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="section">all: <span class="variable">$(OBJS)</span></span></span><br><span class="line">  <span class="variable">$(CC)</span> -g <span class="variable">$(OBJS)</span> -o <span class="variable">$(OUT)</span> <span class="variable">$(LFLAGS)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># create/compile the individual files &gt;&gt;separately&lt;&lt;</span></span><br><span class="line"><span class="section">cFile1.o: cFile1.c</span></span><br><span class="line">  <span class="variable">$(CC)</span> <span class="variable">$(FLAGS)</span> cFile1.c -lcunit</span><br><span class="line"></span><br><span class="line"><span class="section">cFile2.o: cFile2.c</span></span><br><span class="line">  <span class="variable">$(CC)</span> <span class="variable">$(FLAGS)</span> cFile2.c -lcunit</span><br><span class="line"></span><br><span class="line"><span class="section">cFile3.o: cFile3.c</span></span><br><span class="line">  <span class="variable">$(CC)</span> <span class="variable">$(FLAGS)</span> cFile3.c -lcunit</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># clean house</span></span><br><span class="line"><span class="section">clean:</span></span><br><span class="line">  rm -f <span class="variable">$(OBJS)</span> <span class="variable">$(OUT)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># run the program</span></span><br><span class="line"><span class="section">run: <span class="variable">$(OUT)</span></span></span><br><span class="line">  ./<span class="variable">$(OUT)</span></span><br></pre></td></tr></table></figure>



<h1 id="cmake"><a href="#cmake" class="headerlink" title="cmake"></a>cmake</h1><h2 id="1-简要介绍"><a href="#1-简要介绍" class="headerlink" title="1. 简要介绍"></a>1. 简要介绍</h2><blockquote>
<p>From Wikipedia, the free encyclopedia</p>
<p>In <a href="https://en.wikipedia.org/wiki/Software_development">software development</a>, <strong>CMake</strong> is <a href="https://en.wikipedia.org/wiki/Cross-platform">cross-platform</a> <a href="https://en.wikipedia.org/wiki/Free_and_open-source_software">free and open-source software</a> for <a href="https://en.wikipedia.org/wiki/Build_automation">build automation</a>, <a href="https://en.wikipedia.org/wiki/Software_testing">testing</a>, <a href="https://en.wikipedia.org/wiki/Package_(package_management_system)">packaging</a> and <a href="https://en.wikipedia.org/wiki/Installation_(computer_programs)">installation</a> of software by using a <a href="https://en.wikipedia.org/wiki/Compiler">compiler</a>-independent method.[<a href="https://en.wikipedia.org/wiki/CMake#cite_note-3">3]</a> CMake is not a build system itself; it generates another system’s build files.[<a href="https://en.wikipedia.org/wiki/CMake#cite_note-:1-4">4]</a> It supports directory hierarchies and applications that depend on multiple libraries. It can invoke native build environments such as <a href="https://en.wikipedia.org/wiki/Make_(software)">Make</a>, <a href="https://en.wikipedia.org/wiki/Qt_Creator">Qt Creator</a>, <a href="https://en.wikipedia.org/wiki/Ninja_(build_system)">Ninja</a>, <a href="https://en.wikipedia.org/wiki/Android_Studio">Android Studio</a>, Apple’s <a href="https://en.wikipedia.org/wiki/Xcode">Xcode</a>, and <a href="https://en.wikipedia.org/wiki/Microsoft_Visual_Studio">Microsoft Visual Studio</a>.[<a href="https://en.wikipedia.org/wiki/CMake#cite_note-:1-4">4]</a> It has minimal dependencies, requiring only a <a href="https://en.wikipedia.org/wiki/C%2B%2B">C++</a> compiler on its own build system.[<a href="https://en.wikipedia.org/wiki/CMake#cite_note-:1-4">4]</a></p>
<p>CMake is distributed as <a href="https://en.wikipedia.org/wiki/Free_and_open-source_software">free and open-source software</a> under a permissive <a href="https://en.wikipedia.org/wiki/BSD_licenses">BSD-3-Clause</a> license.[<a href="https://en.wikipedia.org/wiki/CMake#cite_note-5"></a></p>
</blockquote>
<p>​	我的理解就是cmake是一款能够夸平台的生成makefile的工具，这样就不需要写复杂的makefile了。</p>
<h2 id="2-cmake使用"><a href="#2-cmake使用" class="headerlink" title="2.	cmake使用"></a>2.	cmake使用</h2><h3 id="1-使用流程"><a href="#1-使用流程" class="headerlink" title="1.使用流程"></a>1.使用流程</h3><pre><code>1. 在项目根目录下创建一个名为` CMakeLists.txt`的文件
</code></pre>
<ol start="2">
<li>编写该文件（当文件比较少的时候）</li>
</ol>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="keyword">cmake_minimum_required</span>(VERSION <span class="number">3.15</span>)  <span class="comment"># 版本要求</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># set the project name</span></span><br><span class="line"><span class="keyword">project</span>(firstProject)</span><br><span class="line"></span><br><span class="line"><span class="comment"># add the executable（包括所有的用到的源文件）</span></span><br><span class="line"><span class="keyword">add_executable</span>(firstOut a.cpp b.cpp)</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>使用cmake命令生成makefile</li>
</ol>
<ul>
<li>cmake命令的使用</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Usage</span><br><span class="line"></span><br><span class="line">  cmake [options] &lt;path-to-source&gt;</span><br><span class="line">  cmake [options] &lt;path-to-existing-build&gt;</span><br><span class="line">  cmake [options] -S &lt;path-to-source&gt; -B &lt;path-to-build&gt;</span><br><span class="line"></span><br><span class="line">Specify a <span class="built_in">source</span> directory to (re-)generate a build system <span class="keyword">for</span> it <span class="keyword">in</span> the</span><br><span class="line">current working directory.  Specify an existing build directory to</span><br><span class="line">re-generate its build system.</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ol start="4">
<li>使用make得到输出</li>
</ol>
<h3 id="2-单个源文件的项目"><a href="#2-单个源文件的项目" class="headerlink" title="2.单个源文件的项目"></a>2.单个源文件的项目</h3><ol>
<li>编写main.cpp</li>
</ol>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;<span class="built_in">printf</span>(<span class="string">&quot;hello\n&quot;</span>);<span class="keyword">return</span> <span class="number">0</span>;&#125;</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>编写CMakeLists.txt</li>
</ol>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="keyword">cmake_minimum_required</span>(VERSION <span class="number">3.15</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># set the project name</span></span><br><span class="line"><span class="keyword">project</span>(firstProject)</span><br><span class="line"></span><br><span class="line"><span class="comment"># add the executable</span></span><br><span class="line"><span class="keyword">add_executable</span>(firstOut main.cpp)</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>创建输出文件夹并且进行输出</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> build</span><br><span class="line">cmake -S . -B ./build/</span><br></pre></td></tr></table></figure>

<ol start="4">
<li>使用make进行编译链接即可得到可执行文件<code>firstOut</code></li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">make</span><br></pre></td></tr></table></figure>

<h3 id="3-CMakeLists-txt-的写法"><a href="#3-CMakeLists-txt-的写法" class="headerlink" title="3. CMakeLists.txt 的写法"></a>3. CMakeLists.txt 的写法</h3><h4 id="1-使用set"><a href="#1-使用set" class="headerlink" title="1.使用set"></a>1.使用set</h4><ul>
<li>定义变量 <strong>set</strong> ，类型为字符串</li>
</ul>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="keyword">set</span>(outName[forstOut])</span><br></pre></td></tr></table></figure>

<ul>
<li>使用宏</li>
</ul>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="keyword">set</span>(CMAKE_CXX_STANDARD <span class="number">11</span>)         <span class="comment"># 指定c++标准的宏</span></span><br><span class="line"><span class="keyword">set</span>(EXECUTABLE_OUTPUT_PATH   /home/regen/CMake/regen_1/build)<span class="comment"># 指定可执行文件的输出目录</span></span><br></pre></td></tr></table></figure>

<ul>
<li>取值</li>
</ul>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="variable">$&#123;outName&#125;</span></span><br></pre></td></tr></table></figure>

<h4 id="2-文件搜索（便于源文件很多的情况）获取源文件名字"><a href="#2-文件搜索（便于源文件很多的情况）获取源文件名字" class="headerlink" title="2.文件搜索（便于源文件很多的情况）获取源文件名字"></a>2.文件搜索（便于源文件很多的情况）获取源文件名字</h4><p>​	建议将源文件放在独立的目录下，便于获取源文件名字。</p>
<ol>
<li>使用<code>aux_source_directory(&lt; dir &gt; &lt; variable &gt;)</code></li>
</ol>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="keyword">aux_source_directory</span>(&lt; dir &gt; &lt; variable &gt;)</span><br><span class="line"><span class="keyword">aux_source_directory</span>(<span class="variable">$&#123;PROJECT_SOURCE_DIR&#125;</span> SRC)</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>使用file（用于应对很多源文件在不同目录的情况）</li>
</ol>
<ul>
<li>后缀搜索目录下所有源文件</li>
</ul>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="keyword">file</span>(GLOB MAIN_SRC <span class="variable">$&#123;PROJECT_SOURCE_DIR&#125;</span>/src/*.cpp)</span><br><span class="line"><span class="keyword">file</span>(GLOB MAIN_HEAD <span class="variable">$&#123;PROJECT_SOURCE_DIR&#125;</span>/<span class="keyword">include</span>/*.h)</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>头文件与源文件分开放的处理方法</li>
</ol>
<ul>
<li>使用宏</li>
</ul>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="keyword">include_directories</span>(headpath)</span><br></pre></td></tr></table></figure>





<h2 id="3-静态库和动态库"><a href="#3-静态库和动态库" class="headerlink" title="3.静态库和动态库"></a>3.静态库和动态库</h2><p>​	pause.打算在下次用到的时候补充</p>
<p>​                                </p>
]]></content>
      <categories>
        <category>软件技术</category>
      </categories>
      <tags>
        <tag>笔记</tag>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux包管理器</title>
    <url>/2025/07/14/Linux%E5%8C%85%E7%AE%A1%E7%90%86%E5%99%A8/</url>
    <content><![CDATA[<hr>
<h1 id="🌱-Linux-包管理器原理与依赖机制详解"><a href="#🌱-Linux-包管理器原理与依赖机制详解" class="headerlink" title="🌱 Linux 包管理器原理与依赖机制详解"></a>🌱 Linux 包管理器原理与依赖机制详解</h1><p>在日常使用 Linux 的过程中，很多人常常会好奇：</p>
<blockquote>
<p>为什么我只安装一个包，却总是跟着安装一堆别的包？<br> 包管理器到底在做什么？为什么还能离线安装？</p>
</blockquote>
<p>下面就通过简单的语言，帮大家彻底搞懂 Linux 包管理器的核心原理与依赖机制。</p>
<hr>
<h2 id="📦-什么是包管理器？"><a href="#📦-什么是包管理器？" class="headerlink" title="📦 什么是包管理器？"></a>📦 什么是包管理器？</h2><p><strong>包管理器</strong>（Package Manager）是 Linux 系统中用于：</p>
<ul>
<li>安装 &#x2F; 升级 &#x2F; 卸载 软件</li>
<li>自动解决依赖</li>
<li>管理软件元数据（如版本、依赖关系）</li>
</ul>
<p>的工具。</p>
<p>可以把它看作 Linux 的「应用商店」或「软件管家」。</p>
<hr>
<h2 id="🛠-常见的包管理器"><a href="#🛠-常见的包管理器" class="headerlink" title="🛠 常见的包管理器"></a>🛠 常见的包管理器</h2><table>
<thead>
<tr>
<th>包管理器</th>
<th>常用发行版</th>
<th>特点</th>
</tr>
</thead>
<tbody><tr>
<td>apt</td>
<td>Debian, Ubuntu</td>
<td>简单易用，文档丰富</td>
</tr>
<tr>
<td>dnf</td>
<td>Fedora, RHEL, CentOS (新)</td>
<td>速度快，依赖管理好</td>
</tr>
<tr>
<td>yum</td>
<td>RHEL, CentOS (旧)</td>
<td>dnf 前身</td>
</tr>
<tr>
<td>zypper</td>
<td>openSUSE</td>
<td>功能丰富</td>
</tr>
<tr>
<td>pacman</td>
<td>Arch Linux</td>
<td>极简强大</td>
</tr>
</tbody></table>
<hr>
<h2 id="🔍-包管理器管理的是什么？"><a href="#🔍-包管理器管理的是什么？" class="headerlink" title="🔍 包管理器管理的是什么？"></a>🔍 包管理器管理的是什么？</h2><p>主要管理的是：</p>
<ul>
<li><strong>编译好的二进制包</strong>（如 <code>.deb</code>, <code>.rpm</code>）</li>
<li>安装后的可执行文件、库文件、配置文件等</li>
<li>软件的元数据（名称、版本、依赖关系）</li>
</ul>
<p>它并不直接管理<strong>源代码</strong>，源代码只是在打包过程中使用。</p>
<hr>
<h2 id="🌐-软件源（Repository）"><a href="#🌐-软件源（Repository）" class="headerlink" title="🌐 软件源（Repository）"></a>🌐 软件源（Repository）</h2><p>软件源是官方或社区提供的<strong>集中存放软件包的服务器</strong>：</p>
<ul>
<li>包管理器通过软件源下载所需包</li>
<li>软件源可包含系统默认软件、第三方软件等</li>
</ul>
<hr>
<h2 id="✅-为什么安装一个包会附带很多依赖？"><a href="#✅-为什么安装一个包会附带很多依赖？" class="headerlink" title="✅ 为什么安装一个包会附带很多依赖？"></a>✅ 为什么安装一个包会附带很多依赖？</h2><p>绝大多数软件都需要：</p>
<ul>
<li>系统库（如 <code>libssl</code> 提供加密功能）</li>
<li>运行时（如 Python、Java）</li>
<li>工具（如命令行工具）</li>
</ul>
<p>当你执行：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt install nginx</span><br></pre></td></tr></table></figure>

<p>包管理器会：</p>
<ol>
<li>分析 nginx 的依赖列表</li>
<li>下载依赖包</li>
<li>先装依赖，再安装 nginx 本体</li>
</ol>
<p>这样避免了你手动找依赖，也能保证软件正常运行。</p>
<hr>
<h2 id="🧰-包管理器的元数据"><a href="#🧰-包管理器的元数据" class="headerlink" title="🧰 包管理器的元数据"></a>🧰 包管理器的元数据</h2><p>每个软件包都带有元数据：</p>
<ul>
<li>名称、版本</li>
<li>必需依赖（Depends &#x2F; Requires）</li>
<li>推荐依赖（Recommends &#x2F; Suggests）</li>
</ul>
<p>包管理器根据这些信息：</p>
<ul>
<li>决定安装哪些依赖</li>
<li>管理卸载和更新</li>
</ul>
<hr>
<h2 id="📦-离线安装是怎么实现的？"><a href="#📦-离线安装是怎么实现的？" class="headerlink" title="📦 离线安装是怎么实现的？"></a>📦 离线安装是怎么实现的？</h2><p>因为：</p>
<ul>
<li>软件以二进制包形式分发</li>
<li>包里已包含程序本体（可执行文件、库等）</li>
</ul>
<p>可以先用：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">apt download nginx</span><br></pre></td></tr></table></figure>

<p>或</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">dnf download nginx</span><br></pre></td></tr></table></figure>

<p>下载主包及依赖包，再拷贝到目标机器离线安装：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> dpkg -i *.deb</span><br><span class="line"><span class="built_in">sudo</span> rpm -i *.rpm</span><br></pre></td></tr></table></figure>

<p>注意：最好提前下载所有依赖，否则离线机器会提示缺少依赖。</p>
<hr>
<h2 id="🧠-总结一句话"><a href="#🧠-总结一句话" class="headerlink" title="🧠 总结一句话"></a>🧠 总结一句话</h2><blockquote>
<p>包管理器是 Linux 中最强大的工具：</p>
<ul>
<li>管理软件安装、卸载、更新</li>
<li>自动解决复杂的依赖关系</li>
<li>帮助系统保持整洁和安全</li>
</ul>
</blockquote>
<hr>
<h2 id="🚀-推荐进阶"><a href="#🚀-推荐进阶" class="headerlink" title="🚀 推荐进阶"></a>🚀 推荐进阶</h2><ul>
<li><p>查看包依赖：</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">apt-cache depends &lt;包名&gt;</span><br><span class="line">dnf repoquery --requires &lt;包名&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>探索源码：大多数包管理器本身也是开源的，可以在官方仓库查看源代码</p>
</li>
</ul>
<hr>
<p>✨ <strong>希望这篇总结能帮你更好地理解 Linux 包管理器的原理与工作机制！</strong><br> 如果需要，我还可以帮忙画<strong>依赖关系图</strong>或写<strong>离线安装脚本</strong>，欢迎留言！ 🚀</p>
<hr>
<p>如果想，我也能帮你把这篇文章配上图表或流程图，让博客看起来更美观～ 🌿</p>
]]></content>
      <categories>
        <category>软件技术</category>
      </categories>
      <tags>
        <tag>笔记</tag>
        <tag>linux</tag>
        <tag>system</tag>
        <tag>command</tag>
        <tag>运维</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux磁盘操作</title>
    <url>/2025/07/14/Linux%E7%A3%81%E7%9B%98%E6%93%8D%E4%BD%9C/</url>
    <content><![CDATA[<h1 id="Linux-磁盘操作总览"><a href="#Linux-磁盘操作总览" class="headerlink" title="Linux 磁盘操作总览"></a>Linux 磁盘操作总览</h1><blockquote>
<p>常用命令：<code>lsblk</code>、<code>fdisk</code>、<code>parted</code>、<code>mkfs</code>、<code>mount</code>、<code>blkid</code>、<code>df</code>、<code>lsblk</code>、<code>vim /etc/fstab</code></p>
</blockquote>
<hr>
<h2 id="查看磁盘和分区信息"><a href="#查看磁盘和分区信息" class="headerlink" title="查看磁盘和分区信息"></a>查看磁盘和分区信息</h2><h3 id="lsblk"><a href="#lsblk" class="headerlink" title="lsblk"></a><code>lsblk</code></h3><p>显示块设备（disk、part）的结构：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">lsblk</span><br></pre></td></tr></table></figure>

<p>示例：</p>
<p><img src="/../images/Linux/%E8%BF%90%E7%BB%B4/disk/image-20250715092022905.png" alt="image-20250715092022905"></p>
<hr>
<h3 id="fdisk-l"><a href="#fdisk-l" class="headerlink" title="fdisk -l"></a><code>fdisk -l</code></h3><p>列出所有磁盘和分区的详细信息（包含分区类型、UUID 等）：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">fdisk -l</span><br></pre></td></tr></table></figure>

<p><img src="/../images/Linux/%E8%BF%90%E7%BB%B4/disk/image-20250715092323809.png" alt="image-20250715092323809"></p>
<hr>
<h2 id="分区"><a href="#分区" class="headerlink" title="分区"></a>分区</h2><p>假设要对 <code>/dev/sdb</code> 新硬盘进行分区：</p>
<h3 id="MBR-分区-fdisk-dev-sdb"><a href="#MBR-分区-fdisk-dev-sdb" class="headerlink" title="MBR 分区  fdisk /dev/sdb"></a>MBR 分区  <code>fdisk /dev/sdb</code></h3><p>交互式工具：</p>
<ul>
<li><code>n</code> → 新建分区</li>
<li><code>p</code> → 主分区</li>
<li><code>1</code> → 分区号</li>
<li>回车 → 默认第一个扇区</li>
<li>回车 → 默认最后一个扇区（或输入 +100G 指定大小）</li>
<li><code>w</code> → 写入分区表并退出</li>
</ul>
<p><img src="/../images/Linux/%E8%BF%90%E7%BB%B4/disk/image-20250715092714083.png" alt="image-20250715092714083"></p>
<p><img src="/../images/Linux/%E8%BF%90%E7%BB%B4/disk/image-20250715092726925.png" alt="image-20250715092726925"></p>
<p>可以发现已经创建好了sdb1</p>
<blockquote>
<p>⚠ 注意：GPT 分区表可以用 <code>parted</code> &#x2F; <code>gdisk</code>，大磁盘（&gt;2TB）推荐 GPT。</p>
</blockquote>
<h3 id="GPT-分区parted-大容量以及现代机器推荐"><a href="#GPT-分区parted-大容量以及现代机器推荐" class="headerlink" title="GPT  分区parted 大容量以及现代机器推荐"></a>GPT  分区<code>parted</code> 大容量以及现代机器推荐</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">parted /dev/sdb</span><br><span class="line">mklabel gpt</span><br><span class="line">mkpart primary xfs 0% 100%</span><br></pre></td></tr></table></figure>

<p><img src="/../images/Linux/%E8%BF%90%E7%BB%B4/disk/image-20250715093446008.png" alt="image-20250715093446008"></p>
<ul>
<li>如果是大容量磁盘，例如几十T需使用xfs文件系统。</li>
</ul>
<h3 id="查看磁盘分区类型"><a href="#查看磁盘分区类型" class="headerlink" title="查看磁盘分区类型"></a>查看磁盘分区类型</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">parted /dev/sdb <span class="built_in">print</span></span><br></pre></td></tr></table></figure>

<p><img src="/../images/Linux/%E8%BF%90%E7%BB%B4/disk/image-20250715093327413.png" alt="image-20250715093327413"></p>
<hr>
<h2 id="格式化（创建文件系统）"><a href="#格式化（创建文件系统）" class="headerlink" title="格式化（创建文件系统）"></a>格式化（创建文件系统）</h2><p>假设新建的分区是 <code>/dev/sdb1</code>：</p>
<h3 id="mkfs-工具："><a href="#mkfs-工具：" class="headerlink" title="mkfs 工具："></a><code>mkfs</code> 工具：</h3><ul>
<li>ext4：</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mkfs.ext4 /dev/sdb1</span><br></pre></td></tr></table></figure>

<p><img src="/../images/Linux/%E8%BF%90%E7%BB%B4/disk/image-20250715093626175.png" alt="image-20250715093626175"></p>
<ul>
<li>xfs（适合大文件&#x2F;高性能场景）：</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mkfs.xfs /dev/sdb1</span><br></pre></td></tr></table></figure>

<ul>
<li>查看支持的文件系统：</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">ls</span> /sbin/mkfs*</span><br></pre></td></tr></table></figure>

<p><img src="/../images/Linux/%E8%BF%90%E7%BB%B4/disk/image-20250715093712405.png" alt="image-20250715093712405"></p>
<hr>
<h2 id="挂载分区"><a href="#挂载分区" class="headerlink" title="挂载分区"></a>挂载分区</h2><p>假设要挂载到 <code>/data</code>：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> -p /data</span><br><span class="line">mount /dev/sdb1 /data</span><br></pre></td></tr></table></figure>

<p>查看当前挂载情况：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">lsblk</span><br><span class="line"><span class="built_in">df</span> -h</span><br></pre></td></tr></table></figure>

<p><img src="/../images/Linux/%E8%BF%90%E7%BB%B4/disk/image-20250715093903586.png" alt="image-20250715093903586"></p>
<p><img src="/../images/Linux/%E8%BF%90%E7%BB%B4/disk/image-20250715093950133.png" alt="image-20250715093950133"></p>
<hr>
<h2 id="开机自动挂载"><a href="#开机自动挂载" class="headerlink" title="开机自动挂载"></a>开机自动挂载</h2><p>获取分区 UUID：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">blkid /dev/sdb1</span><br></pre></td></tr></table></figure>

<p>输出：</p>
<p><img src="/../images/Linux/%E8%BF%90%E7%BB%B4/disk/image-20250715094012956.png" alt="image-20250715094012956"></p>
<p><strong>复制uuid</strong></p>
<p>编辑 <code>/etc/fstab</code>：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim /etc/fstab</span><br></pre></td></tr></table></figure>

<p>添加一行：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">UUID=098f85d8-3753-444b-9d03-309052d9c645 /data ext4 defaults 0 0</span><br></pre></td></tr></table></figure>



<ul>
<li>UUID：分区唯一标识符</li>
<li><code>/data</code>：挂载点</li>
<li><code>ext4</code>：文件系统类型</li>
<li><code>defaults</code>：默认参数（读写、自动挂载等）</li>
<li><code>0 0</code>：是否做 dump 和 fsck 检查</li>
</ul>
<p>最后可以通过<code>reboot</code>测试一下是否成功挂载</p>
<hr>
<h2 id="文件系统查看-检查"><a href="#文件系统查看-检查" class="headerlink" title="文件系统查看 &amp; 检查"></a>文件系统查看 &amp; 检查</h2><ul>
<li>查看磁盘使用情况：</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">df</span> -h</span><br></pre></td></tr></table></figure>

<ul>
<li>查看分区类型和 UUID：</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">blkid</span><br></pre></td></tr></table></figure>

<ul>
<li>查看详细挂载信息：</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mount</span><br></pre></td></tr></table></figure>

<ul>
<li>检查文件系统（例如 ext4）：</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">fsck /dev/sdb1</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="总结：Linux-磁盘完整操作流程："><a href="#总结：Linux-磁盘完整操作流程：" class="headerlink" title="总结：Linux 磁盘完整操作流程："></a><strong>总结：Linux 磁盘完整操作流程</strong>：</h2><table>
<thead>
<tr>
<th>步骤</th>
<th>命令</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>查看磁盘</td>
<td>lsblk &#x2F; fdisk -l</td>
<td>确认设备</td>
</tr>
<tr>
<td>分区</td>
<td>fdisk &#x2F;dev&#x2F;sdb</td>
<td>创建新分区</td>
</tr>
<tr>
<td></td>
<td>parted</td>
<td>创建新分区、查看分区类型</td>
</tr>
<tr>
<td>格式化</td>
<td>mkfs.ext4 &#x2F;dev&#x2F;sdb1</td>
<td>创建文件系统</td>
</tr>
<tr>
<td>创建挂载点</td>
<td>mkdir &#x2F;data</td>
<td>挂载目录</td>
</tr>
<tr>
<td>挂载</td>
<td>mount &#x2F;dev&#x2F;sdb1 &#x2F;data</td>
<td>手动挂载</td>
</tr>
<tr>
<td>自动挂载</td>
<td>blkid 获取 UUID + 编辑 &#x2F;etc&#x2F;fstab</td>
<td>开机自动挂载</td>
</tr>
</tbody></table>
<hr>
<h4 id="附："><a href="#附：" class="headerlink" title="附："></a>附：</h4><ol>
<li>表格 ①：<strong>MBR 内部分区结构</strong>（主分区 &#x2F; 扩展分区 &#x2F; 逻辑分区 对比）</li>
<li>表格 ②：<strong>MBR vs GPT 分区表 对比</strong></li>
</ol>
<h2 id="📦-表格①：MBR-分区结构"><a href="#📦-表格①：MBR-分区结构" class="headerlink" title="📦 表格①：MBR 分区结构"></a>📦 表格①：MBR 分区结构</h2><table>
<thead>
<tr>
<th>类型</th>
<th>数量限制</th>
<th>是否可直接挂载</th>
<th>用途与特点</th>
</tr>
</thead>
<tbody><tr>
<td>主分区 (Primary)</td>
<td>最多 4 个</td>
<td>✅ 可以</td>
<td>最简单直接，可直接格式化挂载</td>
</tr>
<tr>
<td>扩展分区 (Extended)</td>
<td>最多 1 个（必须占一个主分区的位置）</td>
<td>❌ 不可以</td>
<td>容器分区，用来突破最多 4 个分区的限制</td>
</tr>
<tr>
<td>逻辑分区 (Logical)</td>
<td>无限（通常 &#x2F;dev&#x2F;sda5 开始）</td>
<td>✅ 可以</td>
<td>建在扩展分区内部，也可直接格式化挂载</td>
</tr>
</tbody></table>
<hr>
<h2 id="🧰-表格②：MBR-vs-GPT-分区表"><a href="#🧰-表格②：MBR-vs-GPT-分区表" class="headerlink" title="🧰 表格②：MBR vs GPT 分区表"></a>🧰 表格②：MBR vs GPT 分区表</h2><table>
<thead>
<tr>
<th>特点</th>
<th>MBR</th>
<th>GPT</th>
</tr>
</thead>
<tbody><tr>
<td>最大支持容量</td>
<td>单盘最大约 2TB</td>
<td>理论支持到 18EB（几乎无限）</td>
</tr>
<tr>
<td>分区总数</td>
<td>最多 4 个主分区；超过需用扩展+逻辑分区</td>
<td>默认可建 128 个分区（都平等）</td>
</tr>
<tr>
<td>扩展&#x2F;逻辑分区</td>
<td>有</td>
<td>无</td>
</tr>
<tr>
<td>容错</td>
<td>无</td>
<td>有主备分区表，更可靠</td>
</tr>
<tr>
<td>启动方式兼容性</td>
<td>传统 BIOS 启动（只支持 MBR）</td>
<td>推荐 UEFI 启动；也能配合 BIOS 启动</td>
</tr>
<tr>
<td>使用场景</td>
<td>小盘（≤2TB），老系统</td>
<td>大盘、新硬件、新系统</td>
</tr>
</tbody></table>
<hr>
<h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><h1 id="1-tmd死活挂不上"><a href="#1-tmd死活挂不上" class="headerlink" title="1. tmd死活挂不上"></a>1. <del>tmd</del>死活挂不上</h1><p>情景：</p>
<ol>
<li>一块1T磁盘sdb</li>
<li>挂载到<code>/data</code></li>
<li>直接挂载或者是fstab用UUID挂载都失败</li>
</ol>
<p>解决方式：</p>
<ol>
<li>先查看一下日志，看看是什么导致的。</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">dmesg | tail -30</span><br><span class="line">journalctl -xe | tail -30</span><br></pre></td></tr></table></figure>

<p>例如我的：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-- data.mount 单元已结束停止操作。</span><br><span class="line">7月 16 15:26:52 localhost.localdomain kernel: EXT4-fs (sdb1): mounted filesystem with ordered data mode. Opts: (null)</span><br><span class="line">7月 16 15:26:52 localhost.localdomain systemd[1]: data.mount: Unit is bound to inactive unit dev-disk-by\x2duuid-8d489e7f\x2d3f79\x2d4678\x2db082\x2d85fc6fe18c4.device. Stopping, too.</span><br><span class="line">7月 16 15:26:52 localhost.localdomain systemd[1]: Unmounting /data...</span><br><span class="line">-- Subject: data.mount 单元已开始停止操作</span><br><span class="line">-- Defined-By: systemd</span><br><span class="line">-- Support: https://access.redhat.com/support</span><br><span class="line">-- </span><br><span class="line">-- data.mount 单元已开始停止操作。</span><br><span class="line">7月 16 15:26:52 localhost.localdomain systemd[1]: data.mount: Succeeded.</span><br><span class="line">-- Subject: Unit succeeded</span><br><span class="line">-- Defined-By: systemd</span><br><span class="line">-- Support: https://access.redhat.com/support</span><br><span class="line">-- </span><br><span class="line">-- The unit data.mount has successfully entered the &#x27;dead&#x27; state.</span><br><span class="line">7月 16 15:26:52 localhost.localdomain systemd[1]: Unmounted /data.</span><br><span class="line">-- Subject: data.mount 单元已结束停止操作</span><br><span class="line">-- Defined-By: systemd</span><br><span class="line">-- Support: https://access.redhat.com/support</span><br></pre></td></tr></table></figure>

<p>这一行</p>
<p><code>data.mount: Unit is bound to inactive unit dev-disk-by\x2duuid8d489e7f\x2d3f79\x2d4678\x2db082\x2d85fc6fe18c4.device. Stopping, too.</code></p>
<p>喂给Ai:</p>
<blockquote>
<p>出现“data.mount”单元在不停挂载卸载的情况，说明 systemd 里可能残留了老的挂载单元配置，绑定了之前的错误 UUID。</p>
</blockquote>
<ul>
<li>接下来：</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 取消残留的 systemd 挂载单元</span></span><br><span class="line">systemctl stop data.mount</span><br><span class="line">systemctl <span class="built_in">disable</span> data.mount</span><br><span class="line"><span class="comment"># 清理可能的残留文件</span></span><br><span class="line"><span class="built_in">ls</span> /etc/systemd/system/data.mount</span><br><span class="line"><span class="built_in">ls</span> /usr/lib/systemd/system/data.mount</span><br><span class="line"><span class="comment"># 如果存在，执行</span></span><br><span class="line"><span class="built_in">rm</span> /etc/systemd/system/data.mount</span><br><span class="line"><span class="comment"># mv /etc/systemd/system/data.mount /root/</span></span><br><span class="line"><span class="built_in">mv</span> /etc/systemd/system/data.mount /root/</span><br><span class="line">systemctl daemon-reload</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>然后就可以挂上了，可能是第一次没操作好，乱挂之后更挂不上了。新技巧：<strong>取消残留的 systemd 挂载单元</strong></p>
]]></content>
      <categories>
        <category>软件技术</category>
      </categories>
      <tags>
        <tag>笔记</tag>
        <tag>linux</tag>
        <tag>system</tag>
        <tag>command</tag>
        <tag>运维</tag>
        <tag>磁盘操作</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux网络配置</title>
    <url>/2025/07/14/Linux%E7%BD%91%E7%BB%9C%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<p>通用命令：</p>
<table>
<thead>
<tr>
<th>命令</th>
<th>用途</th>
<th>常用示例</th>
<th>解释</th>
</tr>
</thead>
<tbody><tr>
<td><code>ip a</code></td>
<td>查看网络接口和 IP 地址</td>
<td><code>ip a</code></td>
<td>类似 <code>ifconfig</code>，显示所有网卡状态</td>
</tr>
<tr>
<td><code>ip link</code></td>
<td>查看或管理网卡</td>
<td><code>ip link set ens33 up</code></td>
<td>激活或关闭网卡</td>
</tr>
<tr>
<td><code>ping</code></td>
<td>测试网络连通性</td>
<td><code>ping www.baidu.com</code></td>
<td>连续 ping 测试</td>
</tr>
<tr>
<td><code>traceroute</code></td>
<td>路由跟踪</td>
<td><code>traceroute www.baidu.com</code></td>
<td>显示到目标的跳数路径</td>
</tr>
<tr>
<td><code>netstat</code></td>
<td>查看网络连接</td>
<td><code>netstat -tnlp</code></td>
<td>查看监听端口与进程（需安装 <code>net-tools</code>）</td>
</tr>
<tr>
<td><code>ss</code></td>
<td>更快查看连接状态</td>
<td><code>ss -tuln</code></td>
<td>列出 TCP&#x2F;UDP 监听端口</td>
</tr>
<tr>
<td><code>route</code></td>
<td>查看&#x2F;配置路由</td>
<td><code>route -n</code></td>
<td>查看路由表（老工具，常用）</td>
</tr>
<tr>
<td><code>ip route</code></td>
<td>查看路由表</td>
<td><code>ip route</code></td>
<td>建议用替代 <code>route</code></td>
</tr>
<tr>
<td><code>nmcli</code></td>
<td>网络管理工具（命令行）</td>
<td><code>nmcli dev show</code></td>
<td>查看设备详细信息</td>
</tr>
<tr>
<td><code>nmtui</code></td>
<td>网络管理图形界面（终端）</td>
<td><code>nmtui</code></td>
<td>方便配置静态 IP</td>
</tr>
<tr>
<td><code>ethtool</code></td>
<td>查看&#x2F;修改网卡参数</td>
<td><code>ethtool ens33</code></td>
<td>查看网卡速率等信息</td>
</tr>
<tr>
<td><code>dig</code></td>
<td>DNS 查询工具</td>
<td><code>dig www.baidu.com</code></td>
<td>查看域名解析结果</td>
</tr>
<tr>
<td><code>nslookup</code></td>
<td>DNS 查询工具</td>
<td><code>nslookup www.baidu.com</code></td>
<td>类似 dig</td>
</tr>
</tbody></table>
<h1 id="一、文件位置"><a href="#一、文件位置" class="headerlink" title="一、文件位置"></a><strong>一、文件位置</strong></h1><p>通常在：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/etc/sysconfig/network-scripts/ifcfg-&lt;网卡名&gt;</span><br></pre></td></tr></table></figure>

<p>比如：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/etc/sysconfig/network-scripts/ifcfg-ens33</span><br></pre></td></tr></table></figure>

<hr>
<h1 id="二、典型静态-IP-配置内容"><a href="#二、典型静态-IP-配置内容" class="headerlink" title="二、典型静态 IP 配置内容"></a><strong>二、典型静态 IP 配置内容</strong></h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">TYPE=Ethernet             # 网卡类型（固定写 Ethernet）</span><br><span class="line">BOOTPROTO=static          # 启动时使用 static（静态 IP）</span><br><span class="line">NAME=ens33                # 连接名</span><br><span class="line">DEVICE=ens33              # 网卡名</span><br><span class="line">ONBOOT=yes                # 开机自动启用</span><br><span class="line">IPADDR=192.168.1.100      # 静态 IP 地址</span><br><span class="line">NETMASK=255.255.255.0     # 子网掩码</span><br><span class="line">GATEWAY=192.168.1.1       # 默认网关</span><br><span class="line">DNS1=8.8.8.8              # DNS 服务器</span><br></pre></td></tr></table></figure>

<hr>
<h1 id="三、修改后如何生效"><a href="#三、修改后如何生效" class="headerlink" title="三、修改后如何生效"></a><strong>三、修改后如何生效</strong></h1><p>修改完后：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">systemctl restart NetworkManager</span><br></pre></td></tr></table></figure>

<p>或：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nmcli connection reload</span><br></pre></td></tr></table></figure>

<p>查看是否生效：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ip a</span><br><span class="line">ping www.baidu.com</span><br></pre></td></tr></table></figure>

<hr>
<h1 id="四、常用字段解释"><a href="#四、常用字段解释" class="headerlink" title="四、常用字段解释"></a><strong>四、常用字段解释</strong></h1><table>
<thead>
<tr>
<th>字段</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td>TYPE</td>
<td>设备类型（通常写 Ethernet）</td>
</tr>
<tr>
<td>BOOTPROTO</td>
<td>启动时 IP 分配方式：static &#x2F; dhcp</td>
</tr>
<tr>
<td>NAME</td>
<td>连接名</td>
</tr>
<tr>
<td>DEVICE</td>
<td>网卡名（如 ens33）</td>
</tr>
<tr>
<td>ONBOOT</td>
<td>开机是否自动启动</td>
</tr>
<tr>
<td>IPADDR</td>
<td>静态 IP</td>
</tr>
<tr>
<td>NETMASK</td>
<td>子网掩码</td>
</tr>
<tr>
<td>GATEWAY</td>
<td>默认网关</td>
</tr>
<tr>
<td>DNS1&#x2F;DNS2</td>
<td>DNS 服务器</td>
</tr>
</tbody></table>
<hr>
<h1 id="五、动态-IP（DHCP）配置"><a href="#五、动态-IP（DHCP）配置" class="headerlink" title="五、动态 IP（DHCP）配置"></a><strong>五、动态 IP（DHCP）配置</strong></h1><p>只需：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">BOOTPROTO=dhcp</span><br><span class="line">ONBOOT=yes</span><br></pre></td></tr></table></figure>

<p>删除或注释掉 IPADDR &#x2F; NETMASK &#x2F; GATEWAY 等行。</p>
<hr>
]]></content>
      <categories>
        <category>软件技术</category>
      </categories>
      <tags>
        <tag>笔记</tag>
        <tag>linux</tag>
        <tag>system</tag>
        <tag>command</tag>
        <tag>运维</tag>
      </tags>
  </entry>
  <entry>
    <title>MD语法尝试插入图片到博客</title>
    <url>/2023/09/16/MD%E8%AF%AD%E6%B3%95%E5%B0%9D%E8%AF%95%E6%8F%92%E5%85%A5%E5%9B%BE%E7%89%87%E5%88%B0%E5%8D%9A%E5%AE%A2/</url>
    <content><![CDATA[<h1 id="1-COVER1"><a href="#1-COVER1" class="headerlink" title="1.COVER1"></a>1.COVER1</h1><h1 id=""><a href="#" class="headerlink" title=""></a><img src="/../images/cover1.jpg"></h1><h1 id="2-COVER2"><a href="#2-COVER2" class="headerlink" title="2.COVER2"></a>2.COVER2</h1><p><img src="/../images/cover2.jpg"></p>
<h1 id="3-COVER3"><a href="#3-COVER3" class="headerlink" title="3.COVER3"></a>3.COVER3</h1><p><img src="/../images/cover1.jpg">	</p>
]]></content>
      <categories>
        <category>软件技术</category>
      </categories>
      <tags>
        <tag>笔记</tag>
        <tag>md</tag>
      </tags>
  </entry>
  <entry>
    <title>MD语法学习笔记</title>
    <url>/2023/09/16/MD%E8%AF%AD%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h1 id="MD语法学习笔记"><a href="#MD语法学习笔记" class="headerlink" title="MD语法学习笔记"></a>MD语法学习笔记</h1><h2 id="1-基本符号："><a href="#1-基本符号：" class="headerlink" title="1.基本符号："></a>1.基本符号：</h2><p>​	md文档中基本标记都是基于 * - +. &gt; 这几个符号的组合操作</p>
<h2 id="2-标题。"><a href="#2-标题。" class="headerlink" title="2.标题。"></a>2.标题。</h2><p>​	MD总共有六级标题</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section"># 标题1 # </span></span><br><span class="line"><span class="section">## 标题2 ##</span></span><br><span class="line"><span class="section">### 标题3 ###</span></span><br><span class="line"><span class="section">#### 标题4 ####</span></span><br><span class="line"><span class="section">##### 标题5 #####</span></span><br><span class="line"><span class="section">###### 标题6 #######</span></span><br></pre></td></tr></table></figure>

<h1 id="标题1"><a href="#标题1" class="headerlink" title="标题1"></a>标题1</h1><h2 id="标题2"><a href="#标题2" class="headerlink" title="标题2"></a>标题2</h2><h3 id="标题3"><a href="#标题3" class="headerlink" title="标题3"></a>标题3</h3><h4 id="标题4"><a href="#标题4" class="headerlink" title="标题4"></a>标题4</h4><h5 id="标题5"><a href="#标题5" class="headerlink" title="标题5"></a>标题5</h5><h6 id="标题6"><a href="#标题6" class="headerlink" title="标题6"></a>标题6</h6><h2 id="3-列表。"><a href="#3-列表。" class="headerlink" title="3.列表。"></a>3.列表。</h2><ul>
<li>无序列表</li>
</ul>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="bullet">+</span> a</span><br><span class="line"><span class="bullet">+</span> b</span><br><span class="line"><span class="bullet">+</span> c</span><br><span class="line"> </span><br><span class="line"><span class="bullet">-</span> d</span><br><span class="line"><span class="bullet">-</span> e</span><br><span class="line"><span class="bullet">-</span> f</span><br><span class="line"> </span><br><span class="line"><span class="bullet">*</span> g</span><br><span class="line"><span class="bullet">*</span> h</span><br><span class="line"><span class="bullet">*</span> i</span><br></pre></td></tr></table></figure>

<ul>
<li>a</li>
<li>b</li>
<li>c</li>
</ul>
<ul>
<li>d</li>
<li>e</li>
<li>f</li>
</ul>
<ul>
<li>g</li>
<li>h</li>
<li>i</li>
</ul>
<ul>
<li>有序列表</li>
</ul>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">有序列表</span><br><span class="line"><span class="bullet">1.</span> abc</span><br><span class="line"><span class="bullet">2.</span> abc</span><br><span class="line"><span class="bullet">3.</span> dada</span><br><span class="line"> </span><br><span class="line">错序列表</span><br><span class="line"><span class="bullet">2.</span> awfa</span><br><span class="line"><span class="bullet">5.</span> awef</span><br><span class="line"><span class="bullet">25.</span> dfaf</span><br></pre></td></tr></table></figure>



<p>有序列表</p>
<ol>
<li>abc</li>
<li>abc</li>
<li>dada</li>
</ol>
<p>错序列表<br>2. awfa<br>5. awef<br>25. dfaf</p>
<ul>
<li>嵌套列表</li>
</ul>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">无序</span><br><span class="line"><span class="bullet">+</span> a</span><br><span class="line"><span class="bullet">  +</span> a1</span><br><span class="line"><span class="bullet">  +</span> a2</span><br><span class="line"><span class="bullet">+</span> ba</span><br><span class="line"><span class="bullet">+</span> c</span><br><span class="line"> </span><br><span class="line">有序</span><br><span class="line"><span class="bullet">1.</span> a</span><br><span class="line"><span class="bullet">   1.</span> adac</span><br><span class="line"><span class="bullet">      1.</span> adaw</span><br><span class="line"><span class="bullet">   2.</span> adfsda</span><br><span class="line"><span class="bullet">2.</span> ad</span><br><span class="line"><span class="bullet">3.</span> sad</span><br></pre></td></tr></table></figure>

<p>无序</p>
<ul>
<li>a<ul>
<li>a1</li>
<li>a2</li>
</ul>
</li>
<li>ba</li>
<li>c</li>
</ul>
<p>有序</p>
<ol>
<li>a<ol>
<li>adac<ol>
<li>adaw</li>
</ol>
</li>
<li>adfsda</li>
</ol>
</li>
<li>ad</li>
<li>sad</li>
</ol>
<h2 id="4-引用块。"><a href="#4-引用块。" class="headerlink" title="4.引用块。"></a>4.引用块。</h2><ul>
<li>引用</li>
</ul>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">引用</span><br><span class="line"><span class="quote">&gt; 引用1</span></span><br><span class="line">引用1 引用1</span><br><span class="line"> </span><br></pre></td></tr></table></figure>

<p>引用</p>
<blockquote>
<p>引用1<br>引用1 引用1</p>
</blockquote>
<ul>
<li>嵌套引用</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"> 嵌套引用</span><br><span class="line">&gt; 嵌套引用1 </span><br><span class="line">&gt;&gt; 嵌套引用1 </span><br></pre></td></tr></table></figure>

<p> 嵌套引用</p>
<blockquote>
<p>嵌套引用1 </p>
<blockquote>
<p>嵌套引用1 </p>
</blockquote>
</blockquote>
<h2 id="5-代码块。"><a href="#5-代码块。" class="headerlink" title="5.代码块。"></a>5.代码块。</h2><ul>
<li>单行</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">代码块</span><br><span class="line">`</span><br><span class="line">adaawf</span><br><span class="line">`</span><br></pre></td></tr></table></figure>

<p>代码块<br><code>adaawf</code></p>
<ul>
<li>多行代码块</li>
</ul>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="code">```</span></span><br><span class="line"><span class="code">adaawfwrfwr</span></span><br><span class="line"><span class="code">```</span></span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">adaawfwrfwr</span><br></pre></td></tr></table></figure>

<h2 id="6-链接。"><a href="#6-链接。" class="headerlink" title="6.链接。"></a>6.链接。</h2><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">[<span class="string">BAIDU</span>](<span class="link">www.baidu.com</span>)</span><br></pre></td></tr></table></figure>

<p><a href="www.baidu.com">BAIDU</a></p>
<h2 id="7-图片。"><a href="#7-图片。" class="headerlink" title="7.图片。"></a>7.图片。</h2><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">![<span class="string">图片</span>](<span class="link">https://note.youdao.com/favicon.ico</span>)</span><br></pre></td></tr></table></figure>

<p><img src="https://note.youdao.com/favicon.ico" alt="图片"></p>
<h2 id="8-分割线。"><a href="#8-分割线。" class="headerlink" title="8.	分割线。"></a>8.	分割线。</h2><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section">分割线</span></span><br><span class="line"><span class="section">---</span></span><br><span class="line"><span class="section">- - -</span></span><br><span class="line"><span class="section">-------</span></span><br><span class="line"><span class="strong">****</span>*</span><br><span class="line"><span class="bullet">*</span> * *</span><br><span class="line"><span class="strong">____</span></span><br></pre></td></tr></table></figure>

<hr>
<hr>
<hr>
<hr>
<hr>
<h2 id="9-表格。"><a href="#9-表格。" class="headerlink" title="9.表格。"></a>9.表格。</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">表格</span><br><span class="line">|123|234|345|</span><br><span class="line">|:-|:-:|-:|</span><br><span class="line">|abc|bcd|cde|</span><br><span class="line">|abc|bcd|cde|</span><br><span class="line">|abc|bcd|cde|</span><br><span class="line">|abc|bcd|cde|</span><br><span class="line">|abc|bcd|cde|</span><br><span class="line">//例子二</span><br><span class="line">|123|234|345|</span><br><span class="line">|:---|:---:|---:|</span><br><span class="line">|abc|bcd|cde|</span><br><span class="line">|abc|bcd|cde|</span><br><span class="line">|abc|bcd|cde|</span><br><span class="line">//例子三</span><br><span class="line">123|234|345</span><br><span class="line">:-|:-:|-:</span><br><span class="line">abc|bcd|cde</span><br><span class="line">abc|bcd|cde</span><br><span class="line">abc|bcd|cde</span><br></pre></td></tr></table></figure>

<p>表格</p>
<table>
<thead>
<tr>
<th align="left">123</th>
<th align="center">234</th>
<th align="right">345</th>
</tr>
</thead>
<tbody><tr>
<td align="left">abc</td>
<td align="center">bcd</td>
<td align="right">cde</td>
</tr>
<tr>
<td align="left">abc</td>
<td align="center">bcd</td>
<td align="right">cde</td>
</tr>
<tr>
<td align="left">abc</td>
<td align="center">bcd</td>
<td align="right">cde</td>
</tr>
<tr>
<td align="left">abc</td>
<td align="center">bcd</td>
<td align="right">cde</td>
</tr>
<tr>
<td align="left">abc</td>
<td align="center">bcd</td>
<td align="right">cde</td>
</tr>
<tr>
<td align="left">&#x2F;&#x2F;例子二</td>
<td align="center"></td>
<td align="right"></td>
</tr>
<tr>
<td align="left">123</td>
<td align="center">234</td>
<td align="right">345</td>
</tr>
<tr>
<td align="left">:—</td>
<td align="center">:—:</td>
<td align="right">—:</td>
</tr>
<tr>
<td align="left">abc</td>
<td align="center">bcd</td>
<td align="right">cde</td>
</tr>
<tr>
<td align="left">abc</td>
<td align="center">bcd</td>
<td align="right">cde</td>
</tr>
<tr>
<td align="left">abc</td>
<td align="center">bcd</td>
<td align="right">cde</td>
</tr>
<tr>
<td align="left">&#x2F;&#x2F;例子三</td>
<td align="center"></td>
<td align="right"></td>
</tr>
<tr>
<td align="left">123</td>
<td align="center">234</td>
<td align="right">345</td>
</tr>
<tr>
<td align="left">:-</td>
<td align="center">:-:</td>
<td align="right">-:</td>
</tr>
<tr>
<td align="left">abc</td>
<td align="center">bcd</td>
<td align="right">cde</td>
</tr>
<tr>
<td align="left">abc</td>
<td align="center">bcd</td>
<td align="right">cde</td>
</tr>
<tr>
<td align="left">abc</td>
<td align="center">bcd</td>
<td align="right">cde</td>
</tr>
</tbody></table>
<h2 id="10-字体。"><a href="#10-字体。" class="headerlink" title="10.字体。"></a>10.字体。</h2><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">//斜体</span><br><span class="line"><span class="emphasis">*md*</span></span><br><span class="line"> </span><br><span class="line">//粗体</span><br><span class="line"><span class="strong">**md**</span></span><br><span class="line"> </span><br><span class="line">//斜体</span><br><span class="line"><span class="emphasis">_md_</span></span><br><span class="line"> </span><br><span class="line">//斜体</span><br><span class="line"><span class="strong">__md__</span></span><br><span class="line"> </span><br><span class="line">//转义</span><br><span class="line"> </span><br><span class="line">\+</span><br><span class="line"> </span><br><span class="line">//删除线</span><br><span class="line"> </span><br><span class="line">~~删除~~</span><br></pre></td></tr></table></figure>

<p>&#x2F;&#x2F;斜体<br><em>md</em></p>
<p>&#x2F;&#x2F;粗体<br><strong>md</strong></p>
<p>&#x2F;&#x2F;斜体<br><em>md</em></p>
<p>&#x2F;&#x2F;斜体<br><strong>md</strong></p>
<p>&#x2F;&#x2F;转义</p>
<p>+</p>
<p>&#x2F;&#x2F;删除线</p>
<p><del>删除</del></p>
<h2 id="11-表情！-smile"><a href="#11-表情！-smile" class="headerlink" title="11.表情！:smile:"></a>11.表情！:smile:</h2><p>:santa:</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">格式</span><br><span class="line">:内容描述:</span><br><span class="line">例如：</span><br><span class="line">:smile:</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>软件技术</category>
      </categories>
      <tags>
        <tag>笔记</tag>
        <tag>md</tag>
      </tags>
  </entry>
  <entry>
    <title>MQTT服务器搭建（mosquitto）</title>
    <url>/2024/02/09/MQTT%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%90%AD%E5%BB%BA%EF%BC%88mosquitto%EF%BC%89/</url>
    <content><![CDATA[<h1 id="MQTT服务器搭建（mosquitto）"><a href="#MQTT服务器搭建（mosquitto）" class="headerlink" title="MQTT服务器搭建（mosquitto）"></a>MQTT服务器搭建（mosquitto）</h1><h2 id="0-简介"><a href="#0-简介" class="headerlink" title="0.简介"></a>0.简介</h2><ol>
<li>简介</li>
</ol>
<blockquote>
<p>MQTT也称为”消息代理”（Broker）。</p>
<p>MQTT是一个基于客户端-服务器的消息发布&#x2F;订阅传输协议。MQTT协议是轻量、简单、开放和易于实现的，这些特点使它适用范围非常广泛。在很多情况下，包括受限的环境中，如：机器与机器（M2M）通信和物联网（IoT）。其在，通过卫星链路通信传感器、偶尔拨号的医疗设备、智能家居、及一些小型化设备中已广泛使用。</p>
</blockquote>
<ol start="2">
<li>原理</li>
</ol>
<blockquote>
<p>MQTT协议原理<br>MQTT协议实现方式<br>实现MQTT协议需要客户端和服务器端通讯完成，在通讯过程中，MQTT协议中有三种身份：发布者（Publish）、代理（Broker）（服务器）、订阅者（Subscribe）。其中，消息的发布者和订阅者都是客户端，消息代理是服务器，消息发布者可以同时是订阅者。</p>
<p>MQTT传输的消息分为：主题（Topic）和负载（payload）两部分：</p>
<p>（1）Topic，可以理解为消息的类型，订阅者订阅（Subscribe）后，就会收到该主题的消息内容（payload）</p>
<p>（2）payload，可以理解为消息的内容，是指订阅者具体要使用的内容。</p>
</blockquote>
<h2 id="1-mosquitto-服务端"><a href="#1-mosquitto-服务端" class="headerlink" title="1. mosquitto 服务端"></a>1. mosquitto 服务端</h2><ul>
<li>安装</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">apt install mosquitto</span><br></pre></td></tr></table></figure>

<ul>
<li>配置</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /etc/mosquitto</span><br></pre></td></tr></table></figure>

<ul>
<li>修改配置文件</li>
</ul>
<p>​				在 <strong>&#x2F;etc&#x2F;mosquitto&#x2F;conf.d</strong>目录下有一个叫 README 的文件，上面写了信息：</p>
<blockquote>
<h1 id="Any-files-placed-in-this-directory-that-have-a-conf-ending-will-be-loaded-as-config-files-by-the-broker-Use-this-to-make-your-local-config"><a href="#Any-files-placed-in-this-directory-that-have-a-conf-ending-will-be-loaded-as-config-files-by-the-broker-Use-this-to-make-your-local-config" class="headerlink" title="Any files placed in this directory that have a .conf ending will be loaded as config files by the broker. Use this to make your local config."></a>Any files placed in this directory that have a .conf ending will be loaded as config files by the broker. Use this to make your local config.</h1></blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /etc/mosquitto/conf.d</span><br><span class="line"></span><br><span class="line">vim config.conf</span><br><span class="line"><span class="comment"># 添加下面配置</span></span><br><span class="line"><span class="comment"># 不允许匿名访问</span></span><br><span class="line">allow_anonymous <span class="literal">false</span></span><br><span class="line"><span class="comment"># 配置端口</span></span><br><span class="line">listener 1883</span><br><span class="line"><span class="comment"># 设置密码文件保存目录</span></span><br><span class="line">password_file /etc/mosquitto/pwfile.example</span><br></pre></td></tr></table></figure>

<ul>
<li>运行配置文件</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mosquitto -c /etc/mosquitto/conf.d/config.conf -v</span><br></pre></td></tr></table></figure>

<ul>
<li>添加用户</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mosquitto_passwd -c /etc/mosquitto/pwfile.example username</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>关闭防火墙！！！</strong></li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ufw <span class="built_in">disable</span></span><br><span class="line"><span class="comment"># 或者添加规则</span></span><br><span class="line">ufw allow 1883</span><br></pre></td></tr></table></figure>

<h2 id="2-mosquitto-clients-客户端"><a href="#2-mosquitto-clients-客户端" class="headerlink" title="2. mosquitto-clients 客户端"></a>2. mosquitto-clients 客户端</h2><ul>
<li>用户登录订阅，发布</li>
</ul>
<p>​	其实一般都是接近被控设备的系统，比如各种Mcu（esp32，esp8266）等等。这部分将在寒假进行补充（在另外一篇博客）。<a href="https://regenm.gitee.io/">esp8266或者esp32等</a></p>
<p>对于Linux客户，可以是模拟器（ ISH ，Termux）</p>
<ul>
<li>安装</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">apt install mosquitto-clients</span><br></pre></td></tr></table></figure>

<ul>
<li>订阅</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mosquitto_sub -h <span class="string">&quot;IP address&quot;</span> -p 1883 -u username -P regen -t <span class="string">&quot;test&quot;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>发布</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mosquitto_pub -h <span class="string">&quot;IP address&quot;</span> -p 1883 -u username -P regen -t <span class="string">&quot;test&quot;</span> -m <span class="string">&quot;hello mqtt! hello ! mosquitto!&quot;</span></span><br></pre></td></tr></table></figure>

<h2 id="3-mosquitto使用"><a href="#3-mosquitto使用" class="headerlink" title="3. mosquitto使用"></a>3. mosquitto使用</h2><ul>
<li><strong>脚本制作</strong></li>
</ul>
<p>​				为了方便 mosquitto 的使用，可以写几个脚本用于发布和订阅</p>
<ol>
<li>发布</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim regenMosquittoScriptSendRemote.sh</span><br><span class="line"></span><br><span class="line"><span class="comment">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line">mosquitto_pub -h <span class="string">&quot;IP address&quot;</span> -p 1883 -u username -P regen -t <span class="string">&quot;test&quot;</span> -m <span class="string">&quot;<span class="variable">$1</span>&quot;</span></span><br></pre></td></tr></table></figure>

<p>​	赋权</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">chmod</span> 777 regenMosquittoScriptSendRemote.sh</span><br></pre></td></tr></table></figure>

<p>​	运行</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./regenMosquittoScriptSendRemote.sh hello!</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>订阅，同理</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim regenMosquittoScriptSubRemote.sh</span><br><span class="line"></span><br><span class="line"><span class="comment">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line">mosquitto_sub -h <span class="string">&quot;IP address&quot;</span> -p 1883 -u username -P regen -t <span class="string">&quot;<span class="variable">$1</span>&quot;</span></span><br></pre></td></tr></table></figure>

<p>​	赋权</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">chmod</span> 777 regenMosquittoScriptSubRemote.sh</span><br></pre></td></tr></table></figure>

<p>​	运行</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./regenMosquittoScriptSendRemote.sh topic</span><br></pre></td></tr></table></figure>

<ul>
<li>连接esp32或8266</li>
</ul>
<p>看看这个esp8266连接mqtt服务器的项目吗？(<a href="https://regenm.gitee.io/2024/02/09/esp8266%E8%BF%9E%E6%8E%A5%E6%9C%8D%E5%8A%A1%E5%99%A8%EF%BC%88%E5%9F%BA%E4%BA%8Emosquitto%E7%9A%84mqtt-server%EF%BC%89/">esp8266连接服务器（基于mosquitto的mqtt server） | Regen (gitee.io)</a></p>
]]></content>
      <categories>
        <category>软件技术</category>
      </categories>
      <tags>
        <tag>笔记</tag>
        <tag>linux</tag>
        <tag>mqtt</tag>
        <tag>IoT</tag>
        <tag>mosquitto</tag>
      </tags>
  </entry>
  <entry>
    <title>MPU6050 basic (based on arduino)</title>
    <url>/2024/05/19/MPU6050-basic-based-on-arduino/</url>
    <content><![CDATA[<h1 id="MPU6050简介"><a href="#MPU6050简介" class="headerlink" title="MPU6050简介"></a>MPU6050简介</h1><p>The MPU-6050 is the world’s first and only 6-axis motion tracking devices designed for the low power, low cost, and high performance requirements of smartphones, tablets and wearable sensors.</p>
<h2 id="应用领域"><a href="#应用领域" class="headerlink" title="应用领域"></a>应用领域</h2><ul>
<li>BlurFree™ technology (for Video&#x2F;Still Image Stabilization)</li>
<li>AirSign™ technology (for Security&#x2F;Authentication)</li>
<li>TouchAnywhere™ technology (for “no touch” UI Application Control&#x2F;Navigation) </li>
<li>MotionCommand™ technology (for Gesture Short-cuts) </li>
<li>Motion-enabled game and application framework </li>
<li>InstantGesture™ iG™ gesture recognition </li>
<li>Location based services, points of interest, and dead reckoning </li>
<li>Handset and portable gaming </li>
<li>Motion-based game controllers </li>
<li>3D remote controls for Internet connected DTVs and set top boxes, 3D mice </li>
<li>Wearable sensors for health, fitness and sports  </li>
<li>Toys</li>
</ul>
<h1 id="Arduino案例"><a href="#Arduino案例" class="headerlink" title="Arduino案例"></a>Arduino案例</h1><p>​	Arduino使用现成的库很容易上手。</p>
<h2 id="使用Arduino进行获取数据"><a href="#使用Arduino进行获取数据" class="headerlink" title="使用Arduino进行获取数据"></a>使用Arduino进行获取数据</h2><ol>
<li>使用IIC进行通信</li>
<li>使用Wire库</li>
</ol>
<p><img src="/images/MPU6050/1.png" alt="row data"></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;Wire.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> mpuAddress= <span class="number">0x68</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">long</span> accelX, accelY, accelZ;<span class="comment">//xyz方向的加速度</span></span><br><span class="line"><span class="type">float</span> gForceX, gForceY, gForceZ;</span><br><span class="line"></span><br><span class="line"><span class="type">long</span> gyroX, gyroY, gyroZ;</span><br><span class="line"><span class="type">float</span> rotX, rotY, rotZ;</span><br><span class="line"></span><br><span class="line"><span class="type">long</span> tmpDataX, tmpDataY, tmpDataZ;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">setup</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">  Serial.begin(<span class="number">9600</span>);</span><br><span class="line">  Wire.begin();</span><br><span class="line">  setupMPU();</span><br><span class="line">  pinMode(<span class="number">3</span>, OUTPUT);</span><br><span class="line">  pinMode(<span class="number">5</span>, OUTPUT);</span><br><span class="line">  pinMode(<span class="number">6</span>, OUTPUT);</span><br><span class="line">  pinMode(<span class="number">9</span>, OUTPUT);</span><br><span class="line"></span><br><span class="line">  <span class="comment">//testOfThefourPins();//okay</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">loop</span><span class="params">()</span> &#123;</span><br><span class="line">  recordAccelRegisters();</span><br><span class="line">  recordGyroRegisters();</span><br><span class="line">  printData();</span><br><span class="line">  connecMPU6050WithLed();</span><br><span class="line">  <span class="comment">//printTmpData();</span></span><br><span class="line">  delay(<span class="number">200</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">connecMPU6050WithLed</span><span class="params">()</span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(rotX&gt;<span class="number">0</span>) analogWrite(<span class="number">3</span>, <span class="number">255</span>);</span><br><span class="line">  <span class="keyword">else</span> analogWrite(<span class="number">3</span>, <span class="number">0</span>);</span><br><span class="line">  <span class="keyword">if</span>(rotY&gt;<span class="number">0</span>) analogWrite(<span class="number">5</span>, <span class="number">255</span>);</span><br><span class="line">  <span class="keyword">else</span> analogWrite(<span class="number">5</span>, <span class="number">0</span>);</span><br><span class="line">  <span class="keyword">if</span>(rotZ&gt;<span class="number">0</span>) analogWrite(<span class="number">6</span>, <span class="number">255</span>);</span><br><span class="line">  <span class="keyword">else</span> analogWrite(<span class="number">6</span>, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">testOfThefourPins</span><span class="params">()</span> &#123;</span><br><span class="line">  analogWrite(<span class="number">3</span>, <span class="number">255</span>);</span><br><span class="line">  analogWrite(<span class="number">5</span>, <span class="number">255</span>);</span><br><span class="line">  analogWrite(<span class="number">6</span>, <span class="number">255</span>);</span><br><span class="line">  analogWrite(<span class="number">9</span>, <span class="number">255</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">setupMPU</span><span class="params">()</span> &#123;</span><br><span class="line">  Wire.beginTransmission(mpuAddress);  <span class="comment">//This is the I2C address of the MPU (b1101000/b1101001 for AC0 low/high datasheet sec. 9.2)</span></span><br><span class="line">  Wire.write(<span class="number">0x6B</span>);                   <span class="comment">//Accessing the register 6B - Power Management (Sec. 4.28)</span></span><br><span class="line">  Wire.write(<span class="number">0b00000000</span>);             <span class="comment">//Setting SLEEP register to 0. (Required; see Note on p. 9)</span></span><br><span class="line">  Wire.endTransmission();</span><br><span class="line">  Wire.beginTransmission(mpuAddress);  <span class="comment">//I2C address of the MPU</span></span><br><span class="line">  Wire.write(<span class="number">0x1B</span>);                   <span class="comment">//Accessing the register 1B - Gyroscope Configuration (Sec. 4.4)</span></span><br><span class="line">  Wire.write(<span class="number">0x00000000</span>);             <span class="comment">//Setting the gyro to full scale +/- 250deg./s</span></span><br><span class="line">  Wire.endTransmission();</span><br><span class="line">  Wire.beginTransmission(mpuAddress);  <span class="comment">//I2C address of the MPU</span></span><br><span class="line">  Wire.write(<span class="number">0x1C</span>);                   <span class="comment">//Accessing the register 1C - Acccelerometer Configuration (Sec. 4.5)</span></span><br><span class="line">  Wire.write(<span class="number">0b00000000</span>);             <span class="comment">//Setting the accel to +/- 2g</span></span><br><span class="line">  Wire.endTransmission();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">recordAccelRegisters</span><span class="params">()</span> &#123;</span><br><span class="line">  Wire.beginTransmission(mpuAddress);  <span class="comment">//I2C address of the MPU</span></span><br><span class="line">  Wire.write(<span class="number">0x3B</span>);                   <span class="comment">//Starting register for Accel Readings</span></span><br><span class="line">  Wire.endTransmission();</span><br><span class="line">  Wire.requestFrom(mpuAddress, <span class="number">6</span>);  <span class="comment">//Request Accel Registers (3B - 40)</span></span><br><span class="line">  <span class="keyword">while</span> (Wire.available() &lt; <span class="number">6</span>)</span><br><span class="line">    ;</span><br><span class="line">  accelX = Wire.read() &lt;&lt; <span class="number">8</span> | Wire.read();  <span class="comment">//Store first two bytes into accelX</span></span><br><span class="line">  accelY = Wire.read() &lt;&lt; <span class="number">8</span> | Wire.read();  <span class="comment">//Store middle two bytes into accelY</span></span><br><span class="line">  accelZ = Wire.read() &lt;&lt; <span class="number">8</span> | Wire.read();  <span class="comment">//Store last two bytes into accelZ</span></span><br><span class="line">  tmpDataX = accelX;</span><br><span class="line">  tmpDataY = accelY;</span><br><span class="line">  tmpDataZ = accelZ;</span><br><span class="line">  processAccelData();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">processAccelData</span><span class="params">()</span> &#123;</span><br><span class="line">  gForceX = accelX / <span class="number">16384.0</span>;</span><br><span class="line">  gForceY = accelY / <span class="number">16384.0</span>;</span><br><span class="line">  gForceZ = accelZ / <span class="number">16384.0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">recordGyroRegisters</span><span class="params">()</span> &#123;</span><br><span class="line">  Wire.beginTransmission(mpuAddress);  <span class="comment">//I2C address of the MPU</span></span><br><span class="line">  Wire.write(<span class="number">0x43</span>);                   <span class="comment">//Starting register for Gyro Readings</span></span><br><span class="line">  Wire.endTransmission();</span><br><span class="line">  Wire.requestFrom(mpuAddress, <span class="number">6</span>);  <span class="comment">//Request Gyro Registers (43 - 48)</span></span><br><span class="line">  <span class="keyword">while</span> (Wire.available() &lt; <span class="number">6</span>)</span><br><span class="line">    ;</span><br><span class="line">  gyroX = Wire.read() &lt;&lt; <span class="number">8</span> | Wire.read();  <span class="comment">//Store first two bytes into accelX</span></span><br><span class="line">  gyroY = Wire.read() &lt;&lt; <span class="number">8</span> | Wire.read();  <span class="comment">//Store middle two bytes into accelY</span></span><br><span class="line">  gyroZ = Wire.read() &lt;&lt; <span class="number">8</span> | Wire.read();  <span class="comment">//Store last two bytes into accelZ</span></span><br><span class="line">  processGyroData();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">processGyroData</span><span class="params">()</span> &#123;</span><br><span class="line">  rotX = gyroX / <span class="number">131.0</span>;</span><br><span class="line">  rotY = gyroY / <span class="number">131.0</span>;</span><br><span class="line">  rotZ = gyroZ / <span class="number">131.0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">printData</span><span class="params">()</span> &#123;</span><br><span class="line">  Serial.print(<span class="string">&quot;Gyro (deg)&quot;</span>);</span><br><span class="line">  Serial.print(<span class="string">&quot; X=&quot;</span>);</span><br><span class="line">  Serial.print(rotX);</span><br><span class="line">  Serial.print(<span class="string">&quot; Y=&quot;</span>);</span><br><span class="line">  Serial.print(rotY);</span><br><span class="line">  Serial.print(<span class="string">&quot; Z=&quot;</span>);</span><br><span class="line">  Serial.print(rotZ);</span><br><span class="line">  Serial.print(<span class="string">&quot; Accel (g)&quot;</span>);</span><br><span class="line">  Serial.print(<span class="string">&quot; X=&quot;</span>);</span><br><span class="line">  Serial.print(gForceX);</span><br><span class="line">  Serial.print(<span class="string">&quot; Y=&quot;</span>);</span><br><span class="line">  Serial.print(gForceY);</span><br><span class="line">  Serial.print(<span class="string">&quot; Z=&quot;</span>);</span><br><span class="line">  Serial.println(gForceZ);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">printTmpData</span><span class="params">()</span> &#123;</span><br><span class="line">  Serial.print(tmpDataX);</span><br><span class="line">  Serial.print(<span class="string">&quot;\t&quot;</span>);</span><br><span class="line">  Serial.print(tmpDataY);</span><br><span class="line">  Serial.print(<span class="string">&quot;\t&quot;</span>);</span><br><span class="line">  Serial.print(tmpDataZ);</span><br><span class="line">  Serial.print(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>





<h2 id="使用Arduino进行姿态解算"><a href="#使用Arduino进行姿态解算" class="headerlink" title="使用Arduino进行姿态解算"></a>使用Arduino进行姿态解算</h2><ol>
<li><p>使用卡尔曼滤波进行提高数据精准度</p>
</li>
<li><p>需要进行一些数学计算</p>
<p> <img src="/images/MPU6050/2.png" alt="pitch Roll "></p>
</li>
</ol>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;Kalman.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;Wire.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;Math.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">float</span> fRad2Deg = <span class="number">57.295779513f</span>; <span class="comment">//将弧度转为角度的乘数</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MPU = <span class="number">0x68</span>; <span class="comment">//MPU-6050的I2C地址</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> nValCnt = <span class="number">7</span>; <span class="comment">//一次读取寄存器的数量</span></span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> nCalibTimes = <span class="number">1000</span>; <span class="comment">//校准时读数的次数</span></span><br><span class="line"><span class="type">int</span> calibData[nValCnt]; <span class="comment">//校准数据</span></span><br><span class="line"></span><br><span class="line"><span class="type">unsigned</span> <span class="type">long</span> nLastTime = <span class="number">0</span>; <span class="comment">//上一次读数的时间</span></span><br><span class="line"><span class="type">float</span> fLastRoll = <span class="number">0.0f</span>; <span class="comment">//上一次滤波得到的Roll角</span></span><br><span class="line"><span class="type">float</span> fLastPitch = <span class="number">0.0f</span>; <span class="comment">//上一次滤波得到的Pitch角</span></span><br><span class="line">Kalman kalmanRoll; <span class="comment">//Roll角滤波器</span></span><br><span class="line">Kalman kalmanPitch; <span class="comment">//Pitch角滤波器</span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">setup</span><span class="params">()</span> &#123;</span><br><span class="line">  Serial.begin(<span class="number">9600</span>); <span class="comment">//初始化串口，指定波特率</span></span><br><span class="line">  Wire.begin(); <span class="comment">//初始化Wire库</span></span><br><span class="line">  WriteMPUReg(<span class="number">0x6B</span>, <span class="number">0</span>); <span class="comment">//启动MPU6050设备</span></span><br><span class="line"></span><br><span class="line">  Calibration(); <span class="comment">//执行校准</span></span><br><span class="line">  nLastTime = micros(); <span class="comment">//记录当前时间</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">loop</span><span class="params">()</span> &#123;</span><br><span class="line">  <span class="type">int</span> readouts[nValCnt];</span><br><span class="line">  ReadAccGyr(readouts); <span class="comment">//读出测量值</span></span><br><span class="line">  </span><br><span class="line">  <span class="type">float</span> realVals[<span class="number">7</span>];</span><br><span class="line">  Rectify(readouts, realVals); <span class="comment">//根据校准的偏移量进行纠正</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">//计算加速度向量的模长，均以g为单位</span></span><br><span class="line">  <span class="type">float</span> fNorm = <span class="built_in">sqrt</span>(realVals[<span class="number">0</span>] * realVals[<span class="number">0</span>] + realVals[<span class="number">1</span>] * realVals[<span class="number">1</span>] + realVals[<span class="number">2</span>] * realVals[<span class="number">2</span>]);</span><br><span class="line">  <span class="type">float</span> fRoll = GetRoll(realVals, fNorm); <span class="comment">//计算Roll角</span></span><br><span class="line">  <span class="keyword">if</span> (realVals[<span class="number">1</span>] &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    fRoll = -fRoll;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="type">float</span> fPitch = GetPitch(realVals, fNorm); <span class="comment">//计算Pitch角</span></span><br><span class="line">  <span class="keyword">if</span> (realVals[<span class="number">0</span>] &lt; <span class="number">0</span>) &#123;</span><br><span class="line">    fPitch = -fPitch;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//计算两次测量的时间间隔dt，以秒为单位</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">long</span> nCurTime = micros();</span><br><span class="line">  <span class="type">float</span> dt = (<span class="type">double</span>)(nCurTime - nLastTime) / <span class="number">1000000.0</span>;</span><br><span class="line">  <span class="comment">//对Roll角和Pitch角进行卡尔曼滤波</span></span><br><span class="line">  <span class="type">float</span> fNewRoll = kalmanRoll.getAngle(fRoll, realVals[<span class="number">4</span>], dt);</span><br><span class="line">  <span class="type">float</span> fNewPitch = kalmanPitch.getAngle(fPitch, realVals[<span class="number">5</span>], dt);</span><br><span class="line">  <span class="comment">//跟据滤波值计算角度速</span></span><br><span class="line">  <span class="type">float</span> fRollRate = (fNewRoll - fLastRoll) / dt;</span><br><span class="line">  <span class="type">float</span> fPitchRate = (fNewPitch - fLastPitch) / dt;</span><br><span class="line"> </span><br><span class="line"> <span class="comment">//更新Roll角和Pitch角</span></span><br><span class="line">  fLastRoll = fNewRoll;</span><br><span class="line">  fLastPitch = fNewPitch;</span><br><span class="line">  <span class="comment">//更新本次测的时间</span></span><br><span class="line">  nLastTime = nCurTime;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//向串口打印输出Roll角和Pitch角，运行时在Arduino的串口监视器中查看</span></span><br><span class="line">  Serial.print(<span class="string">&quot;Roll:&quot;</span>);</span><br><span class="line">  Serial.print(fNewRoll); Serial.print(<span class="string">&#x27;(&#x27;</span>);</span><br><span class="line">  Serial.print(fRollRate); Serial.print(<span class="string">&quot;),\tPitch:&quot;</span>);</span><br><span class="line">  Serial.print(fNewPitch); Serial.print(<span class="string">&#x27;(&#x27;</span>);</span><br><span class="line">  Serial.print(fPitchRate); Serial.print(<span class="string">&quot;)\n&quot;</span>);</span><br><span class="line">  delay(<span class="number">10</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//向MPU6050写入一个字节的数据</span></span><br><span class="line"><span class="comment">//指定寄存器地址与一个字节的值</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">WriteMPUReg</span><span class="params">(<span class="type">int</span> nReg, <span class="type">unsigned</span> <span class="type">char</span> nVal)</span> &#123;</span><br><span class="line">  Wire.beginTransmission(MPU);</span><br><span class="line">  Wire.write(nReg);</span><br><span class="line">  Wire.write(nVal);</span><br><span class="line">  Wire.endTransmission(<span class="literal">true</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//从MPU6050读出一个字节的数据</span></span><br><span class="line"><span class="comment">//指定寄存器地址，返回读出的值</span></span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> <span class="title function_">ReadMPUReg</span><span class="params">(<span class="type">int</span> nReg)</span> &#123;</span><br><span class="line">  Wire.beginTransmission(MPU);</span><br><span class="line">  Wire.write(nReg);</span><br><span class="line">  Wire.requestFrom(MPU, <span class="number">1</span>, <span class="literal">true</span>);</span><br><span class="line">  Wire.endTransmission(<span class="literal">true</span>);</span><br><span class="line">  <span class="keyword">return</span> Wire.read();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//从MPU6050读出加速度计三个分量、温度和三个角速度计</span></span><br><span class="line"><span class="comment">//保存在指定的数组中</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">ReadAccGyr</span><span class="params">(<span class="type">int</span> *pVals)</span> &#123;</span><br><span class="line">  Wire.beginTransmission(MPU);</span><br><span class="line">  Wire.write(<span class="number">0x3B</span>);</span><br><span class="line">  Wire.requestFrom(MPU, nValCnt * <span class="number">2</span>, <span class="literal">true</span>);</span><br><span class="line">  Wire.endTransmission(<span class="literal">true</span>);</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">long</span> i = <span class="number">0</span>; i &lt; nValCnt; ++i) &#123;</span><br><span class="line">    pVals[i] = Wire.read() &lt;&lt; <span class="number">8</span> | Wire.read();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//对大量读数进行统计，校准平均偏移量</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">Calibration</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">float</span> valSums[<span class="number">7</span>] = &#123;<span class="number">0.0f</span>, <span class="number">0.0f</span>, <span class="number">0.0f</span>, <span class="number">0.0f</span>, <span class="number">0.0f</span>, <span class="number">0.0f</span>, <span class="number">0.0</span>&#125;;</span><br><span class="line">  <span class="comment">//先求和</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; nCalibTimes; ++i) &#123;</span><br><span class="line">    <span class="type">int</span> mpuVals[nValCnt];</span><br><span class="line">    ReadAccGyr(mpuVals);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; nValCnt; ++j) &#123;</span><br><span class="line">      valSums[j] += mpuVals[j];</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//再求平均</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; nValCnt; ++i) &#123;</span><br><span class="line">    calibData[i] = <span class="type">int</span>(valSums[i] / nCalibTimes);</span><br><span class="line">  &#125;</span><br><span class="line">  calibData[<span class="number">2</span>] += <span class="number">16384</span>; <span class="comment">//设芯片Z轴竖直向下，设定静态工作点。</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//算得Roll角。算法见文档。</span></span><br><span class="line"><span class="type">float</span> <span class="title function_">GetRoll</span><span class="params">(<span class="type">float</span> *pRealVals, <span class="type">float</span> fNorm)</span> &#123;</span><br><span class="line">  <span class="type">float</span> fNormXZ = <span class="built_in">sqrt</span>(pRealVals[<span class="number">0</span>] * pRealVals[<span class="number">0</span>] + pRealVals[<span class="number">2</span>] * pRealVals[<span class="number">2</span>]);</span><br><span class="line">  <span class="type">float</span> fCos = fNormXZ / fNorm;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">acos</span>(fCos) * fRad2Deg;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//算得Pitch角。算法见文档。</span></span><br><span class="line"><span class="type">float</span> <span class="title function_">GetPitch</span><span class="params">(<span class="type">float</span> *pRealVals, <span class="type">float</span> fNorm)</span> &#123;</span><br><span class="line">  <span class="type">float</span> fNormYZ = <span class="built_in">sqrt</span>(pRealVals[<span class="number">1</span>] * pRealVals[<span class="number">1</span>] + pRealVals[<span class="number">2</span>] * pRealVals[<span class="number">2</span>]);</span><br><span class="line">  <span class="type">float</span> fCos = fNormYZ / fNorm;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">acos</span>(fCos) * fRad2Deg;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//对读数进行纠正，消除偏移，并转换为物理量。公式见文档。</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">Rectify</span><span class="params">(<span class="type">int</span> *pReadout, <span class="type">float</span> *pRealVals)</span> &#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; ++i) &#123;</span><br><span class="line">    pRealVals[i] = (<span class="type">float</span>)(pReadout[i] - calibData[i]) / <span class="number">16384.0f</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  pRealVals[<span class="number">3</span>] = pReadout[<span class="number">3</span>] / <span class="number">340.0f</span> + <span class="number">36.53</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">4</span>; i &lt; <span class="number">7</span>; ++i) &#123;</span><br><span class="line">    pRealVals[i] = (<span class="type">float</span>)(pReadout[i] - calibData[i]) / <span class="number">131.0f</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>软硬件技术</category>
      </categories>
      <tags>
        <tag>project</tag>
        <tag>IIC</tag>
        <tag>notes</tag>
        <tag>笔记</tag>
        <tag>arduino</tag>
        <tag>MPU6050</tag>
        <tag>basic</tag>
      </tags>
  </entry>
  <entry>
    <title>MySql学习笔记</title>
    <url>/2023/10/31/MySql%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h1 id="MySQL学习笔记（8-0）"><a href="#MySQL学习笔记（8-0）" class="headerlink" title="MySQL学习笔记（8.0）"></a>MySQL学习笔记（8.0）</h1><p>​		一切只因花几十块买了一年的云服务器。刚好目前需要用 用 JDBC ，于是就把数据库部署到了服务器上面。然而这其中却遇到了难以想象的困难（后来才发现没有必要这么弄，且一般也不这么弄，安全性大打折扣）。</p>
<h2 id="1-部署环境以及初始化配置"><a href="#1-部署环境以及初始化配置" class="headerlink" title="1.部署环境以及初始化配置"></a>1.部署环境以及初始化配置</h2><ul>
<li>Ubuntu</li>
</ul>
<h3 id="1-下载安装，配置密码"><a href="#1-下载安装，配置密码" class="headerlink" title="1.下载安装，配置密码"></a>1.下载安装，配置密码</h3><p>以root用户登录之后：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">apt update</span><br><span class="line">apt upgrade  #不解释</span><br><span class="line">apt install mysql-server -y  #下载</span><br></pre></td></tr></table></figure>

<p><strong>此时你可以直接进入mysql</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> use mysql;</span><br><span class="line">mysql<span class="operator">&gt;</span> apt install mysql<span class="operator">-</span>server <span class="operator">-</span>y #（将密码置为空）</span><br><span class="line">mysql<span class="operator">&gt;</span> quit;</span><br><span class="line">#  然后重启mysql，再次进入</span><br><span class="line">systemstl restart mysql</span><br><span class="line">mysql</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> use mysql;</span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">ALTER</span> <span class="keyword">USER</span> <span class="string">&#x27;root&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span> (如果不用远程链接则为<span class="string">&#x27;localhost&#x27;</span>)IDENTIFIED <span class="keyword">WITH</span> mysql_native_password <span class="keyword">BY</span> <span class="string">&#x27;新密码&#x27;</span>;</span><br><span class="line">mysql<span class="operator">&gt;</span> quit #修改完成</span><br></pre></td></tr></table></figure>

<ul>
<li>开启远程链接功能</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql</span><br><span class="line">mysql&gt; use mysql;</span><br><span class="line">mysql&gt; apt install mysql-server -y #修改访问权限，默认只能本地访问。</span><br></pre></td></tr></table></figure>

<ul>
<li>修改MySQL配置文件</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vim /etc/mysql/mysql.conf.d/mysqld.cnf</span><br><span class="line">将[mysqld]下面的 bind-address ***以及mysqlx-bind-address ****注释</span><br><span class="line">同时取消注释</span><br><span class="line">port</span><br><span class="line">user</span><br><span class="line">socket</span><br><span class="line">server-id</span><br><span class="line">重启测试即可</span><br></pre></td></tr></table></figure>

<h2 id="2-开始正式学习mysql"><a href="#2-开始正式学习mysql" class="headerlink" title="2. 开始正式学习mysql"></a>2. 开始正式学习mysql</h2><h3 id="1-修改数据库root密码"><a href="#1-修改数据库root密码" class="headerlink" title="1. 修改数据库root密码"></a>1. 修改数据库root密码</h3><blockquote>
<p>通过各类手段确定数据库信息：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql --version</span><br></pre></td></tr></table></figure>

<p>如果没直接显示则可能docker容器中运行的。</p>
</blockquote>
<h4 id="修改数据库流程"><a href="#修改数据库流程" class="headerlink" title="修改数据库流程"></a>修改数据库流程</h4><ol>
<li>停止数据库服务</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> systemctl stop mysql</span><br><span class="line"><span class="comment"># 或</span></span><br><span class="line"><span class="built_in">sudo</span> systemctl stop mariadb</span><br></pre></td></tr></table></figure>



<ol start="2">
<li>“跳过授权表”方式启动（安全模式</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysqld_safe --skip-grant-tables &amp;</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>root 用户无密码登录</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql -u root</span><br></pre></td></tr></table></figure>

<ol start="4">
<li>修改 root 密码</li>
</ol>
<ul>
<li>MySQL 5.7+ &#x2F; 8.0 &#x2F; MariaDB 新版本</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">FLUSH PRIVILEGES;</span><br><span class="line">ALTER USER &#x27;root&#x27;@&#x27;localhost&#x27; IDENTIFIED BY &#x27;新密码&#x27;;</span><br></pre></td></tr></table></figure>

<ul>
<li>旧版本</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">FLUSH PRIVILEGES;</span><br><span class="line">SET PASSWORD FOR <span class="string">&#x27;root&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span> = PASSWORD(<span class="string">&#x27;新密码&#x27;</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<ol start="5">
<li>退出并重启数据库</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">exit</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">sudo</span> systemctl stop mysql</span><br><span class="line"><span class="comment"># 或</span></span><br><span class="line"><span class="built_in">sudo</span> systemctl stop mariadb</span><br><span class="line"></span><br><span class="line"><span class="built_in">sudo</span> systemctl start mysql</span><br><span class="line"><span class="comment"># 或</span></span><br><span class="line"><span class="built_in">sudo</span> systemctl start mariadb</span><br></pre></td></tr></table></figure>

<ol start="6">
<li>用新密码验证</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql -u root -p</span><br></pre></td></tr></table></figure>

<h3 id="2-查看"><a href="#2-查看" class="headerlink" title="2. 查看"></a>2. 查看</h3>]]></content>
      <categories>
        <category>软件技术</category>
      </categories>
      <tags>
        <tag>笔记</tag>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>Nginx + Docker 实现多级域名访问 Web 应用</title>
    <url>/2025/06/12/Nginx-Docker-%E5%AE%9E%E7%8E%B0%E5%A4%9A%E7%BA%A7%E5%9F%9F%E5%90%8D%E8%AE%BF%E9%97%AE-Web-%E5%BA%94%E7%94%A8/</url>
    <content><![CDATA[<p>​	起因是只有一个域名，regenblogs.fun，但是云服务器在跑的服务有好几个，所以打算使用多级域名的方式进行充分利用这单个域名。过程也比较简单，总结一下便于下次复用。</p>
<hr>
<h3 id="多级域名简要介绍"><a href="#多级域名简要介绍" class="headerlink" title="多级域名简要介绍"></a>多级域名简要介绍</h3><blockquote>
<p>域名的核心是<a href="https://zh.wikipedia.org/wiki/%E5%9F%9F%E5%90%8D%E7%B3%BB%E7%BB%9F">域名系统</a>（英语：Domain Name System，<a href="https://zh.wikipedia.org/wiki/%E7%BC%A9%E5%86%99">缩写</a>：DNS），域名系统中的任何名称都是域名。在域名系统的层次结构中，各种域名都隶属于域名系统根域的下级。域名的第一级是<a href="https://zh.wikipedia.org/wiki/%E9%A0%82%E7%B4%9A%E5%9F%9F">顶级域</a>，它包括<a href="https://zh.wikipedia.org/wiki/%E9%80%9A%E7%94%A8%E9%A0%82%E7%B4%9A%E5%9F%9F">通用顶级域</a>，例如<a href="https://zh.wikipedia.org/wiki/.com">.com</a>、<a href="https://zh.wikipedia.org/wiki/.net">.net</a>和<a href="https://zh.wikipedia.org/wiki/.org">.org</a>；以及<a href="https://zh.wikipedia.org/wiki/%E5%9C%8B%E5%AE%B6%E5%92%8C%E5%9C%B0%E5%8D%80%E9%A0%82%E7%B4%9A%E5%9F%9F">国家和地区顶级域</a>，例如<a href="https://zh.wikipedia.org/wiki/.us">.us</a>、<a href="https://zh.wikipedia.org/wiki/.cn">.cn</a>和<a href="https://zh.wikipedia.org/wiki/.tk">.tk</a>。顶级域名下一层是<a href="https://zh.wikipedia.org/wiki/%E4%BA%8C%E7%BA%A7%E5%9F%9F">二级域名</a>，一级一级地往下。现在，还有一些新兴的中文域名，例如<a href="https://zh.wikipedia.org/wiki/.%E5%9C%A8%E7%BA%BF">.在线</a>等。这些域名向人们提供注册服务，人们可以用它创建公开的互联网资源或运行<a href="https://zh.wikipedia.org/wiki/%E7%B6%B2%E7%AB%99">网站</a>。顶级域名的管理服务由对应的<a href="https://zh.wikipedia.org/wiki/%E5%9F%9F%E5%90%8D%E6%B3%A8%E5%86%8C%E5%B1%80">域名注册管理机构（域名注册局）</a>负责，注册服务通常由<a href="https://zh.wikipedia.org/wiki/%E5%9F%9F%E5%90%8D%E6%B3%A8%E5%86%8C%E5%95%86">域名注册商</a>负责[<a href="https://zh.wikipedia.org/wiki/%E5%9F%9F%E5%90%8D#cite_note-:1-2">2]</a>。</p>
</blockquote>
<h1 id="使用宿主机-Nginx-Docker-实现多级域名访问-Web-应用"><a href="#使用宿主机-Nginx-Docker-实现多级域名访问-Web-应用" class="headerlink" title="使用宿主机 Nginx + Docker 实现多级域名访问 Web 应用"></a>使用宿主机 Nginx + Docker 实现多级域名访问 Web 应用</h1><hr>
<h2 id="场景背景"><a href="#场景背景" class="headerlink" title="场景背景"></a>场景背景</h2><p>​	我有一个 Nuxt 项目，使用 Docker 进行打包，镜像中使用 Nginx 进行静态文件托管。我们希望通过 <code>yuxuan.regenblogs.fun</code> 访问这个 Web 应用。</p>
<hr>
<h2 id="Dockerfile-和-Nginx-配置"><a href="#Dockerfile-和-Nginx-配置" class="headerlink" title="Dockerfile 和 Nginx 配置"></a>Dockerfile 和 Nginx 配置</h2><p>Dockerfile：</p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">FROM</span> nginx:alpine</span><br><span class="line"></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> dist /usr/share/nginx/html</span></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> nginx.conf /etc/nginx/conf.d/default.conf</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">EXPOSE</span> <span class="number">80</span></span><br><span class="line"><span class="keyword">CMD</span><span class="language-bash"> [<span class="string">&quot;nginx&quot;</span>, <span class="string">&quot;-g&quot;</span>, <span class="string">&quot;daemon off;&quot;</span>]</span></span><br></pre></td></tr></table></figure>

<p>容器内 <code>nginx.conf</code>：</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">  <span class="attribute">listen</span> <span class="number">80</span>;</span><br><span class="line">  <span class="attribute">server_name</span> yuxuan.regenblogs.fun;</span><br><span class="line"></span><br><span class="line">  <span class="attribute">root</span> /usr/share/nginx/html;</span><br><span class="line">  <span class="attribute">index</span> index.html;</span><br><span class="line"></span><br><span class="line">  <span class="section">location</span> / &#123;</span><br><span class="line">    <span class="attribute">try_files</span> <span class="variable">$uri</span> <span class="variable">$uri</span>/ /index.html;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="容器启动"><a href="#容器启动" class="headerlink" title="容器启动"></a>容器启动</h2><p>​	不直接映射宿主机的 80 端口，而是使用 3000 端口，避免与宿主机 Nginx 冲突：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker build -t nuxt-yuxuan-app .</span><br><span class="line">docker run -d --name nuxt-yuxuan-container -p 3000:80 nuxt-yuxuan-app</span><br></pre></td></tr></table></figure>

<p>​	这表示容器内 Nginx 启动在 80 端口，宿主机通过 3000 端口访问它。</p>
<hr>
<h2 id="安装宿主机-Nginx-并配置反向代理"><a href="#安装宿主机-Nginx-并配置反向代理" class="headerlink" title="安装宿主机 Nginx 并配置反向代理"></a>安装宿主机 Nginx 并配置反向代理</h2><ol>
<li>安装 Nginx：</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt update</span><br><span class="line"><span class="built_in">sudo</span> apt install nginx</span><br></pre></td></tr></table></figure>

<ol>
<li>新建配置文件 <code>/etc/nginx/sites-available/yuxuan.regenblogs.fun</code>：</li>
</ol>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span> <span class="number">80</span>;</span><br><span class="line">    <span class="attribute">server_name</span> yuxuan.regenblogs.fun;</span><br><span class="line"></span><br><span class="line">    <span class="section">location</span> / &#123;</span><br><span class="line">        <span class="attribute">proxy_pass</span> http://127.0.0.1:3000;</span><br><span class="line">        <span class="attribute">proxy_set_header</span> Host <span class="variable">$host</span>;</span><br><span class="line">        <span class="attribute">proxy_set_header</span> X-Real-IP <span class="variable">$remote_addr</span>;</span><br><span class="line">        <span class="attribute">proxy_set_header</span> X-Forwarded-For <span class="variable">$proxy_add_x_forwarded_for</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol>
<li>启用配置并重启 Nginx：</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> <span class="built_in">ln</span> -s /etc/nginx/sites-available/yuxuan.regenblogs.fun /etc/nginx/sites-enabled/</span><br><span class="line"><span class="built_in">sudo</span> nginx -t</span><br><span class="line"><span class="built_in">sudo</span> systemctl reload nginx</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="域名解析设置"><a href="#域名解析设置" class="headerlink" title="域名解析设置"></a>域名解析设置</h2><p>​	在域名服务商控制台中，将 <code>yuxuan.regenblogs.fun</code> 的 A 记录指向服务器公网 IP。</p>
<p>​	我这里使用的是在阿里云注册的域名，可以直接添加DNS解析，就在控制台中。</p>
<p><img src="/../images/Linux/subdomain/1.png"></p>
<hr>
<h2 id="成功验证"><a href="#成功验证" class="headerlink" title="成功验证"></a>成功验证</h2><p>确保服务器防火墙或云安全组放行 80 端口后，浏览器访问：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://yuxuan.regenblogs.fun</span><br></pre></td></tr></table></figure>

<p>如果一切配置无误，即可正常访问部署的前端页面。</p>
<hr>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>通过将 Docker 部署与宿主机 Nginx 配合使用，实现了：</p>
<ul>
<li>避免容器占用宿主机 80 端口</li>
<li>灵活配置多个二级域名</li>
<li>为日后配置 HTTPS、负载均衡打下基础</li>
</ul>
]]></content>
      <categories>
        <category>软件技术</category>
      </categories>
      <tags>
        <tag>笔记</tag>
        <tag>linux</tag>
        <tag>Nginx</tag>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>Nginx入门基础知识</title>
    <url>/2024/10/31/Nginx%E5%85%A5%E9%97%A8%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/</url>
    <content><![CDATA[<p>最近Nginx部署用的多点，学过的tomcat仅仅适合用于java项目。</p>
<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><blockquote>
<p>开源的高性能 HTTP 服务器和反向代理服务器</p>
<p>IMAP&#x2F;POP3 邮件代理服务器</p>
</blockquote>
<h2 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h2><ol>
<li>高并发处理能力</li>
<li>反向代理和负载均衡</li>
<li>动静分离</li>
<li>高效的静态文件服务</li>
<li>支持多种协议</li>
</ol>
<h2 id="反向代理"><a href="#反向代理" class="headerlink" title="反向代理"></a>反向代理</h2><p>反向代理充当客户端和后端服务器之间的中间层。它的作用是接收客户端的请求，转发给后端服务器处理，然后将处理结果返回给客户端。使用反向代理的主要目的是提高系统性能、安全性和可扩展性。Nginx 和 Apache 等服务器软件通常被配置为反向代理。</p>
<h3 id="单个服务器使用反向代理"><a href="#单个服务器使用反向代理" class="headerlink" title="单个服务器使用反向代理"></a>单个服务器使用反向代理</h3><p>可以用于分发请求、缓存静态资源、隐藏后端服务等</p>
<p><strong>优势：</strong></p>
<p><strong>安全性</strong>：隐藏后端服务器的 IP，防止直接攻击。</p>
<p><strong>可扩展性</strong>：在需要扩展时，可以在同一 Nginx 配置下代理多个应用或服务。</p>
<p><strong>性能优化</strong>：通过缓存静态资源和 SSL 卸载，提升整体性能。</p>
<h3 id="多个服务器使用反向代理"><a href="#多个服务器使用反向代理" class="headerlink" title="多个服务器使用反向代理"></a>多个服务器使用反向代理</h3><p>后端服务器不需要直接连接互联网，只要它们和反向代理服务器（例如 Nginx）在同一个内网中。</p>
<h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><ol>
<li><strong>安全性</strong><ul>
<li>后端服务器的 IP 地址不会暴露在公网上，降低了受到外部攻击的风险。</li>
<li>可以通过 Nginx 过滤和控制访问，进一步增强安全性。</li>
</ul>
</li>
<li><strong>负载均衡和容错</strong><ul>
<li>Nginx 可以使用负载均衡策略在内网中将请求分发到多台服务器上，提高系统的整体并发能力。</li>
<li>通过健康检查，Nginx 可以检测后端服务器的状态，自动跳过故障服务器，提高系统容错能力。</li>
</ul>
</li>
<li><strong>简化配置</strong><ul>
<li>后端服务器只需与反向代理服务器（Nginx）进行通讯，而不需要考虑公网的 IP 和 DNS 配置，简化了网络配置。</li>
<li>通过内网 IP 直接访问，减少了外部因素的影响，通信效率更高。</li>
</ul>
</li>
</ol>
<hr>
<h1 id="Nginx配置案例"><a href="#Nginx配置案例" class="headerlink" title="Nginx配置案例"></a>Nginx配置案例</h1><h2 id="1-静态网站服务"><a href="#1-静态网站服务" class="headerlink" title="1. 静态网站服务"></a>1. 静态网站服务</h2><figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 定义一个虚拟主机(server块)</span></span><br><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="comment"># 监听80端口(HTTP)</span></span><br><span class="line">    <span class="attribute">listen</span> <span class="number">80</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 配置服务器名称，可以匹配多个域名</span></span><br><span class="line">    <span class="attribute">server_name</span> example.com www.example.com;</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 设置网站根目录路径</span></span><br><span class="line">    <span class="attribute">root</span> /var/www/example.com;</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 指定默认索引文件，按顺序尝试</span></span><br><span class="line">    <span class="attribute">index</span> index.html index.htm;</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 主location块，处理所有请求</span></span><br><span class="line">    <span class="section">location</span> / &#123;</span><br><span class="line">        <span class="comment"># 尝试按顺序寻找文件：先找精确URI，再找URI/目录，最后返回404</span></span><br><span class="line">        <span class="attribute">try_files</span> <span class="variable">$uri</span> <span class="variable">$uri</span>/ =<span class="number">404</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 匹配静态资源文件(不区分大小写 ~*)</span></span><br><span class="line">    <span class="section">location</span> <span class="regexp">~* \.(jpg|jpeg|png|gif|ico|css|js)$</span> &#123;</span><br><span class="line">        <span class="comment"># 设置缓存过期时间为30天</span></span><br><span class="line">        <span class="attribute">expires</span> <span class="number">30d</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 关闭访问日志记录(静态资源访问不记录)</span></span><br><span class="line">        <span class="attribute">access_log</span> <span class="literal">off</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 开启gzip压缩(需要nginx配置了gzip模块)</span></span><br><span class="line">        <span class="attribute">gzip_static</span> <span class="literal">on</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 自定义错误页面</span></span><br><span class="line">    <span class="attribute">error_page</span> <span class="number">404</span> /<span class="number">404</span>.html;</span><br><span class="line">    <span class="attribute">error_page</span> <span class="number">500</span> <span class="number">502</span> <span class="number">503</span> <span class="number">504</span> /50x.html;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="2-反向代理"><a href="#2-反向代理" class="headerlink" title="2. 反向代理"></a>2. 反向代理</h2><figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 定义API服务的虚拟主机</span></span><br><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span> <span class="number">80</span>;</span><br><span class="line">    <span class="attribute">server_name</span> api.example.com;</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 客户端请求体最大大小</span></span><br><span class="line">    <span class="attribute">client_max_body_size</span> <span class="number">10m</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># API接口的location配置</span></span><br><span class="line">    <span class="section">location</span> / &#123;</span><br><span class="line">        <span class="comment"># 将请求代理到本地的3000端口服务</span></span><br><span class="line">        <span class="attribute">proxy_pass</span> http://localhost:3000;</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 设置传递给后端的重要HTTP头信息</span></span><br><span class="line">        <span class="attribute">proxy_set_header</span> Host <span class="variable">$host</span>;              <span class="comment"># 原始主机头</span></span><br><span class="line">        <span class="attribute">proxy_set_header</span> X-Real-IP <span class="variable">$remote_addr</span>;  <span class="comment"># 客户端真实IP</span></span><br><span class="line">        <span class="attribute">proxy_set_header</span> X-Forwarded-For <span class="variable">$proxy_add_x_forwarded_for</span>; <span class="comment"># 代理链IP</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 超时设置(单位：秒)</span></span><br><span class="line">        <span class="attribute">proxy_connect_timeout</span> <span class="number">60</span>;  <span class="comment"># 连接后端超时</span></span><br><span class="line">        <span class="attribute">proxy_read_timeout</span> <span class="number">90</span>;     <span class="comment"># 读取响应超时</span></span><br><span class="line">        <span class="attribute">proxy_send_timeout</span> <span class="number">90</span>;     <span class="comment"># 发送请求超时</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment"># WebSocket支持配置</span></span><br><span class="line">        <span class="attribute">proxy_http_version</span> <span class="number">1</span>.<span class="number">1</span>;    <span class="comment"># 使用HTTP/1.1协议</span></span><br><span class="line">        <span class="attribute">proxy_set_header</span> Upgrade <span class="variable">$http_upgrade</span>;      <span class="comment"># 升级头</span></span><br><span class="line">        <span class="attribute">proxy_set_header</span> Connection <span class="string">&quot;upgrade&quot;</span>;       <span class="comment"># 连接类型</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 禁用代理缓冲</span></span><br><span class="line">        <span class="attribute">proxy_buffering</span> <span class="literal">off</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 健康检查端点</span></span><br><span class="line">    <span class="section">location</span> /health &#123;</span><br><span class="line">        <span class="attribute">proxy_pass</span> http://localhost:3000/health;</span><br><span class="line">        <span class="attribute">access_log</span> <span class="literal">off</span>;  <span class="comment"># 不记录健康检查的访问日志</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="3-负载均衡"><a href="#3-负载均衡" class="headerlink" title="3. 负载均衡"></a>3. 负载均衡</h2><figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 定义名为backend的上游服务器组</span></span><br><span class="line"><span class="section">upstream</span> backend &#123;</span><br><span class="line">    <span class="comment"># 负载均衡算法(默认是轮询)</span></span><br><span class="line">    <span class="comment"># 可选：least_conn(最少连接)、ip_hash(IP哈希)、hash(自定义哈希)等</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 后端服务器1，weight表示权重(越高分配越多请求)</span></span><br><span class="line">    <span class="attribute">server</span> backend1.example.com weight=<span class="number">3</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 后端服务器2，默认weight=1</span></span><br><span class="line">    <span class="attribute">server</span> backend2.example.com;</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 备用服务器，只有当其他服务器都不可用时才启用</span></span><br><span class="line">    <span class="attribute">server</span> backend3.example.com backup;</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 连接保持配置</span></span><br><span class="line">    <span class="attribute">keepalive</span> <span class="number">32</span>;  <span class="comment"># 保持的连接数</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 健康检查参数(需要nginx plus或第三方模块)</span></span><br><span class="line">    <span class="comment"># health_check interval=5s fails=3 passes=2;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span> <span class="number">80</span>;</span><br><span class="line">    <span class="attribute">server_name</span> app.example.com;</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 启用gzip压缩</span></span><br><span class="line">    <span class="attribute">gzip</span> <span class="literal">on</span>;</span><br><span class="line">    <span class="attribute">gzip_types</span> text/plain text/css application/json application/javascript;</span><br><span class="line">    </span><br><span class="line">    <span class="section">location</span> / &#123;</span><br><span class="line">        <span class="comment"># 将请求代理到上游服务器组</span></span><br><span class="line">        <span class="attribute">proxy_pass</span> http://backend;</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 设置必要的头信息</span></span><br><span class="line">        <span class="attribute">proxy_set_header</span> Host <span class="variable">$host</span>;</span><br><span class="line">        <span class="attribute">proxy_set_header</span> X-Real-IP <span class="variable">$remote_addr</span>;</span><br><span class="line">        <span class="attribute">proxy_set_header</span> X-Forwarded-Proto <span class="variable">$scheme</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 当后端返回特定状态码时的处理</span></span><br><span class="line">        <span class="attribute">proxy_next_upstream</span> <span class="literal">error</span> timeout invalid_header http_500 http_502 http_503 http_504;</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 连接超时设置</span></span><br><span class="line">        <span class="attribute">proxy_connect_timeout</span> <span class="number">2s</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 负载均衡状态监控页面(需要nginx status模块)</span></span><br><span class="line">    <span class="section">location</span> /nginx_status &#123;</span><br><span class="line">        <span class="attribute">stub_status</span> <span class="literal">on</span>;</span><br><span class="line">        <span class="attribute">access_log</span> <span class="literal">off</span>;</span><br><span class="line">        <span class="attribute">allow</span> <span class="number">192.168.1.0</span>/<span class="number">24</span>;  <span class="comment"># 只允许内网IP访问</span></span><br><span class="line">        <span class="attribute">deny</span> all;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="4-HTTPS安全配置"><a href="#4-HTTPS安全配置" class="headerlink" title="4. HTTPS安全配置"></a>4. HTTPS安全配置</h2><figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="comment"># HTTP强制跳转HTTPS</span></span><br><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span> <span class="number">80</span>;</span><br><span class="line">    <span class="attribute">server_name</span> secure.example.com;</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 301永久重定向到HTTPS版本</span></span><br><span class="line">    <span class="attribute">return</span> <span class="number">301</span> https://<span class="variable">$host</span><span class="variable">$request_uri</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 也可以这样写：</span></span><br><span class="line">    <span class="comment"># location / &#123;</span></span><br><span class="line">    <span class="comment">#     rewrite ^(.*)$ https://$host$1 permanent;</span></span><br><span class="line">    <span class="comment"># &#125;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># HTTPS服务器配置</span></span><br><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span> <span class="number">443</span> ssl http2;  <span class="comment"># 启用HTTP/2协议</span></span><br><span class="line">    <span class="attribute">server_name</span> secure.example.com;</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># SSL证书路径</span></span><br><span class="line">    <span class="attribute">ssl_certificate</span> /etc/letsencrypt/live/secure.example.com/fullchain.pem;</span><br><span class="line">    <span class="attribute">ssl_certificate_key</span> /etc/letsencrypt/live/secure.example.com/privkey.pem;</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 启用OCSP Stapling提高SSL性能</span></span><br><span class="line">    <span class="attribute">ssl_stapling</span> <span class="literal">on</span>;</span><br><span class="line">    <span class="attribute">ssl_stapling_verify</span> <span class="literal">on</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># SSL协议配置(禁用不安全的旧版本)</span></span><br><span class="line">    <span class="attribute">ssl_protocols</span> TLSv1.<span class="number">2</span> TLSv1.<span class="number">3</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># SSL加密套件配置</span></span><br><span class="line">    <span class="attribute">ssl_ciphers</span> <span class="string">&#x27;ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384&#x27;</span>;</span><br><span class="line">    <span class="attribute">ssl_prefer_server_ciphers</span> <span class="literal">on</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># SSL会话缓存设置</span></span><br><span class="line">    <span class="attribute">ssl_session_cache</span> shared:SSL:<span class="number">10m</span>;</span><br><span class="line">    <span class="attribute">ssl_session_timeout</span> <span class="number">1d</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># HSTS头(强制浏览器使用HTTPS)</span></span><br><span class="line">    <span class="attribute">add_header</span> Strict-Transport-Security <span class="string">&quot;max-age=63072000; includeSubDomains; preload&quot;</span> always;</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 其他安全头</span></span><br><span class="line">    <span class="attribute">add_header</span> X-Content-Type-Options nosniff;</span><br><span class="line">    <span class="attribute">add_header</span> X-Frame-Options DENY;</span><br><span class="line">    <span class="attribute">add_header</span> X-XSS-Protection <span class="string">&quot;1; mode=block&quot;</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 网站根目录配置</span></span><br><span class="line">    <span class="attribute">root</span> /var/www/secure.example.com;</span><br><span class="line">    <span class="attribute">index</span> index.html;</span><br><span class="line">    </span><br><span class="line">    <span class="section">location</span> / &#123;</span><br><span class="line">        <span class="attribute">try_files</span> <span class="variable">$uri</span> <span class="variable">$uri</span>/ =<span class="number">404</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 禁止访问隐藏文件</span></span><br><span class="line">    <span class="section">location</span> <span class="regexp">~ /\.</span> &#123;</span><br><span class="line">        <span class="attribute">deny</span> all;</span><br><span class="line">        <span class="attribute">access_log</span> <span class="literal">off</span>;</span><br><span class="line">        <span class="attribute">log_not_found</span> <span class="literal">off</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="5-高级URL重写"><a href="#5-高级URL重写" class="headerlink" title="5. 高级URL重写"></a>5. 高级URL重写</h2><figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span> <span class="number">80</span>;</span><br><span class="line">    <span class="attribute">server_name</span> blog.example.com;</span><br><span class="line">    </span><br><span class="line">    <span class="attribute">root</span> /var/www/blog;</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 默认索引文件(先尝试PHP，再尝试HTML)</span></span><br><span class="line">    <span class="attribute">index</span> index.php index.html index.htm;</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 重定向旧博客路径到新路径(301永久重定向)</span></span><br><span class="line">    <span class="section">location</span> /old-blog &#123;</span><br><span class="line">        <span class="comment"># $request_uri包含原始请求的URI和参数</span></span><br><span class="line">        <span class="attribute">return</span> <span class="number">301</span> /blog<span class="variable">$request_uri</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 也可以使用rewrite实现：</span></span><br><span class="line">        <span class="comment"># rewrite ^/old-blog(.*)$ /blog$1 permanent;</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 博客主路径配置</span></span><br><span class="line">    <span class="section">location</span> /blog &#123;</span><br><span class="line">        <span class="comment"># 重写URL：去掉/blog前缀</span></span><br><span class="line">        <span class="comment"># break标志表示停止后续rewrite处理</span></span><br><span class="line">        <span class="attribute">rewrite</span><span class="regexp"> ^/blog/(.*)$</span> /<span class="variable">$1</span> <span class="literal">break</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 尝试寻找文件：先找精确URI，再找目录，最后交给index.php处理</span></span><br><span class="line">        <span class="attribute">try_files</span> <span class="variable">$uri</span> <span class="variable">$uri</span>/ /index.php?<span class="variable">$args</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># PHP处理配置</span></span><br><span class="line">    <span class="section">location</span> <span class="regexp">~ \.php$</span> &#123;</span><br><span class="line">        <span class="comment"># 包含FastCGI默认参数</span></span><br><span class="line">        <span class="attribute">include</span> fastcgi_params;</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 连接到PHP-FPM套接字</span></span><br><span class="line">        <span class="attribute">fastcgi_pass</span> unix:/var/run/php/php7.4-fpm.sock;</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 设置SCRIPT_FILENAME参数</span></span><br><span class="line">        <span class="attribute">fastcgi_param</span> SCRIPT_FILENAME <span class="variable">$document_root</span><span class="variable">$fastcgi_script_name</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># FastCGI缓存配置(可选)</span></span><br><span class="line">        <span class="attribute">fastcgi_cache</span> my_cache;</span><br><span class="line">        <span class="attribute">fastcgi_cache_valid</span> <span class="number">200</span> <span class="number">301</span> <span class="number">302</span> <span class="number">1h</span>;</span><br><span class="line">        <span class="attribute">fastcgi_cache_use_stale</span> <span class="literal">error</span> timeout invalid_header updating;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 禁止访问敏感文件</span></span><br><span class="line">    <span class="section">location</span> <span class="regexp">~* (\.env|\.git|\.svn)</span> &#123;</span><br><span class="line">        <span class="attribute">deny</span> all;</span><br><span class="line">        <span class="attribute">access_log</span> <span class="literal">off</span>;</span><br><span class="line">        <span class="attribute">log_not_found</span> <span class="literal">off</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 静态文件缓存设置</span></span><br><span class="line">    <span class="section">location</span> <span class="regexp">~* \.(?:ico|css|js|gif|jpe?g|png|webp)$</span> &#123;</span><br><span class="line">        <span class="attribute">expires</span> <span class="number">365d</span>;</span><br><span class="line">        <span class="attribute">access_log</span> <span class="literal">off</span>;</span><br><span class="line">        <span class="attribute">add_header</span> Cache-Control <span class="string">&quot;public&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>软件技术</category>
      </categories>
      <tags>
        <tag>笔记</tag>
        <tag>linux</tag>
        <tag>Nginx</tag>
      </tags>
  </entry>
  <entry>
    <title>Operating System Principles</title>
    <url>/2024/02/27/Operating-System-Principles/</url>
    <content><![CDATA[<p>&#x3D;&#x3D;操作系统原理&#x3D;&#x3D;</p>
<h1 id="1-操作系统概论"><a href="#1-操作系统概论" class="headerlink" title="1.操作系统概论"></a>1.操作系统概论</h1><h1 id="2-操作系统接口"><a href="#2-操作系统接口" class="headerlink" title="2.操作系统接口"></a>2.操作系统接口</h1><h2 id="用户与操作系统接口的分类"><a href="#用户与操作系统接口的分类" class="headerlink" title="用户与操作系统接口的分类"></a>用户与操作系统接口的分类</h2><ol>
<li>用户接口<br> 提供给用户使用，通过该接口取得操作系统的服务。</li>
<li>程序接口<br> 提供给程序员使用，用户程序使用系统服务的唯一途径</li>
</ol>
<h3 id="用户接口（操作接口）"><a href="#用户接口（操作接口）" class="headerlink" title="用户接口（操作接口）"></a>用户接口（操作接口）</h3><ol>
<li>联机用户接口（交互式）</li>
<li>脱机用户接口（批处理 ）</li>
</ol>
<h4 id="联机用户接口（交互式）"><a href="#联机用户接口（交互式）" class="headerlink" title="联机用户接口（交互式）"></a>联机用户接口（交互式）</h4><ol>
<li>字符显示式联机用户接口</li>
</ol>
<ul>
<li>命令行方式：shell 语言</li>
<li>批命令方式：.sh</li>
</ul>
<ol start="2">
<li>图形化联机用户接口</li>
</ol>
<ul>
<li>GUI ：包括窗口，图标，菜单，鼠标和面向对象技术</li>
</ul>
<h4 id="脱机用户接口（批处理-）"><a href="#脱机用户接口（批处理-）" class="headerlink" title="脱机用户接口（批处理 ）"></a>脱机用户接口（批处理 ）</h4><pre><code>由一组作业控制语言组成。
</code></pre>
<ul>
<li>作业：一次应用业务处理中，从输入开始到输入结束。用户要求计算机所做工作的集合。</li>
<li>作业步：作业加工处理的技术</li>
<li>作业分类：脱机作业，联机作业。</li>
<li>作业I&#x2F;O方式：联机IO，脱机IO，SpooLing方式</li>
</ul>
<h2 id="系统调用"><a href="#系统调用" class="headerlink" title="系统调用"></a>系统调用</h2><pre><code>系统调用（System Call），提供了用户程序和操作系统之间的接口。用户不能直接调用，但是用户程序可以。
</code></pre>
<h3 id="作业"><a href="#作业" class="headerlink" title="作业"></a>作业</h3><blockquote>
<ul>
<li>作业：在一次应用业务处理过程中，从输入开始到输出结束，用户要求计算机所做工作的集合。</li>
<li>作业步：作业加工处理的步骤。</li>
<li>作业的分类：脱机作业、联机作业。</li>
<li>作业的I&#x2F;O 方式：联机I&#x2F;O 、脱机I&#x2F;O 、SpooLing方式。</li>
</ul>
</blockquote>
<h3 id="特权指令和非特权指令"><a href="#特权指令和非特权指令" class="headerlink" title="特权指令和非特权指令"></a>特权指令和非特权指令</h3><ul>
<li>特权指令<br>  不允许用户程序直接使用的指令，关系到系统全局。<br>  特点：<ol>
<li>内存访问范围不受限制</li>
<li>用户和系统存储空间都能访问</li>
</ol>
</li>
<li>非特权指令<br>  只能完成一般性的操作和任务，不能直接访问系统的硬件和软件。<br>  访问范围局限于用户空间</li>
</ul>
<h3 id="管态和目态"><a href="#管态和目态" class="headerlink" title="管态和目态"></a>管态和目态</h3><ol>
<li><p>管态（系统态，核心态）：<br> 可以执行包括特权指令的所有机器指令。</p>
</li>
<li><p>目态（用户态）：<br> 不允许执行特权指令。</p>
</li>
</ol>
<h3 id="系统调用-1"><a href="#系统调用-1" class="headerlink" title="系统调用"></a>系统调用</h3><p>​	定义：系统调用是操作系统提供的一组用于实现各种系统功能的子程序，并将它们提供给应用程序调用。 </p>
<p>&#x3D;&#x3D;系统调用是应用程序获得操作系统服务的唯一途径！&#x3D;&#x3D;</p>
<ul>
<li>系统调用会将用户态切换到内核态</li>
<li>执行完成后，系统又将CPU状态从系统态转换到用户态，再继续执行应用程序。</li>
<li>系统调用是一种特殊的过程调用，通常由特殊的机器指令实现。除了提供对操作系统子程序的调用外，这个指令还将系统转入特权方式（管态）。</li>
</ul>
<h1 id="3-进程管理"><a href="#3-进程管理" class="headerlink" title="3. *进程管理"></a>3. *进程管理</h1><h2 id="进程的基本概念"><a href="#进程的基本概念" class="headerlink" title="*进程的基本概念"></a>*进程的基本概念</h2><h3 id="程序"><a href="#程序" class="headerlink" title="程序"></a>程序</h3><ul>
<li>程序的特征</li>
</ul>
<ol>
<li>顺序性，处理机的操作严格按照程序所规定的顺序执行</li>
<li>封闭性，程序运行时独占全机资源</li>
<li>结果的确定性，执行结果和中断次数无关</li>
<li>可再现性，只要程序顺序执行的环境和初始条件相同，不论执行过程如何，都将获得相同的结果</li>
</ol>
<h3 id="进程"><a href="#进程" class="headerlink" title="进程"></a>进程</h3><h4 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h4><ul>
<li>非正式<br>  执行中的程序<br>  运行中的代码段 </li>
<li>正式<br>  可并发执行的程序在一个数据集合上的执行过程，是系统进行资源分配和调度的一个独立单位<br>  注意：进程 !&#x3D; 程序</li>
</ul>
<h3 id="进程与程序的关系"><a href="#进程与程序的关系" class="headerlink" title="进程与程序的关系"></a>进程与程序的关系</h3><h4 id="比较"><a href="#比较" class="headerlink" title="比较"></a>比较</h4><p>｜进程｜程序｜<br>｜——-｜——-｜<br>｜动态｜静态｜<br>｜并发｜顺序｜<br>｜暂时｜永久｜</p>
<ul>
<li>出现原因：支持多道编程</li>
</ul>
<h4 id="进程的特征（属性）"><a href="#进程的特征（属性）" class="headerlink" title="进程的特征（属性）"></a>进程的特征（属性）</h4><p>特征：</p>
<ol>
<li>结构特征<br>进程实体：由程序段、数据段、核心栈及进程控制块部分构成，总称“进程映像”（Process Image）。</li>
<li>动态性(最基本的特征)<br>由“创建”而产生，由“调度”而执行；由得不到资源而阻塞；由撤消而消亡。（而程序是静态的）。</li>
<li>并发性（重要特征）<br>只有建立了进程，才能并发执行。</li>
<li>独立性<br>独立运行，独立获得资源、独立接受调度。</li>
<li>异步性<br>进程按各自独立、不可预知的速度向前推进</li>
</ol>
<h2 id="进状态及转换"><a href="#进状态及转换" class="headerlink" title="*进状态及转换"></a>*进状态及转换</h2><h3 id="进程的三种基本状态"><a href="#进程的三种基本状态" class="headerlink" title="进程的三种基本状态"></a>进程的三种基本状态</h3><ul>
<li>就绪状态</li>
<li>执行&#x2F;运行状态</li>
<li>阻塞&#x2F;等待&#x2F;睡眠&#x2F;暂停&#x2F;封锁状态</li>
</ul>
<p>###进程状态变迁情况及原因：</p>
<ol>
<li>就绪状态→运行状态：由OS中的进程调度程序，按一定的原则调度就绪队列中进程占用CPU。</li>
<li>运行状态→就绪状态：时间片到，高优先进程进入就绪队列，等等。</li>
<li>运行状态→阻塞状态：等待I&#x2F;O传输，申请内存空间，程序运行出错，等等。</li>
<li>阻塞状态→就绪状态： I&#x2F;O传输完成，内存空间获得，程序运行错误处理完成，等等。</li>
</ol>
<h4 id="进程的五态模型"><a href="#进程的五态模型" class="headerlink" title="进程的五态模型"></a>进程的五态模型</h4><ol>
<li>NULL-创建态：新进程的产生</li>
<li>创建态-就绪态：资源允许的情况</li>
<li>执行态-终止态：自然结束，强行终止</li>
<li>终止态-NULL：完成善后操作</li>
<li>阻塞态-终止态：强行终止</li>
<li>就绪态-终止态：强行终止</li>
</ol>
<ul>
<li>程序状态字PSW（程序状态寄存器）又称（标志寄存器）</li>
</ul>
<p>​	PSW用来存放两类信息：一类是体现当前指令执行结果的各种状态信息，称为状态标志，如有无进位（CF位），有无溢出（OF位），结果正负（SF位），结果是否为零（ZF位），奇偶标志位（PF位）等；另一类是存放控制信息，称为控制状态，如允许中断(IF位)，跟踪标志（TF位），方向标志(DF)等。</p>
<h2 id="进程控制"><a href="#进程控制" class="headerlink" title="*进程控制"></a>*进程控制</h2><p>​	进程控制的职责是对系统中的全部进程实施有效的管理，它是处理机管理的一部分。</p>
<h2 id="进程同步"><a href="#进程同步" class="headerlink" title="进程同步"></a>进程同步</h2><h3 id="进程之间的制约关系"><a href="#进程之间的制约关系" class="headerlink" title="进程之间的制约关系"></a>进程之间的制约关系</h3><ol>
<li>间接制约：资源竞争关系</li>
</ol>
<p>需互斥地访问临界资源（进程互斥）</p>
<ul>
<li>临界资源：在一个时间段内只允许一个进程访问的资源。</li>
<li>临界区（Critical Section，CS）进程访问临界资源的一段代码。</li>
</ul>
<ol start="2">
<li>直接制约：相互协作关系</li>
</ol>
<h3 id="进程间资源访问冲突"><a href="#进程间资源访问冲突" class="headerlink" title="进程间资源访问冲突"></a>进程间资源访问冲突</h3><p>-共享变量的修改冲突</p>
<p>-操作顺序中冲突</p>
<h3 id="进程之间的交互关系"><a href="#进程之间的交互关系" class="headerlink" title="进程之间的交互关系"></a>进程之间的交互关系</h3><ol>
<li>互斥：指多个进程不能同时使用同一个资源</li>
<li>同步：进程之间的协作</li>
<li>死锁：指多个进程互不相让，都得不到足够的资源；</li>
</ol>
<h3 id="锁"><a href="#锁" class="headerlink" title="锁"></a>锁</h3><p>锁（共享的变量）阻止了其他进程进入临界区</p>
<h3 id="临界区及其管理"><a href="#临界区及其管理" class="headerlink" title="临界区及其管理"></a>临界区及其管理</h3><p>​	临界区的执行在时间上是互斥的,进程必须请求允许进入临界区</p>
<p>间接同步（互斥）机制应遵循的准则</p>
<p>（1）空闲让进：当无进程处于临界区时，允许一进程立即进入临界区</p>
<p>（2）忙则等待：当某一进程已进入临界区时，其它试图进入临界区进程必须等待</p>
<p>（3）有限等待：应保证为有限等待，不会产生”死等”状态。（4）让权等待：不能进入临界区的执行进程应放弃CPU执行权。</p>
<h4 id="硬件方式-提供的低级原子级操作"><a href="#硬件方式-提供的低级原子级操作" class="headerlink" title="硬件方式-提供的低级原子级操作"></a>硬件方式-提供的低级原子级操作</h4><ol>
<li>关中断</li>
</ol>
<p>​	硬件上的关中断（禁止中断）。</p>
<ul>
<li>缺点：<ul>
<li>影响计算机效率</li>
<li>在多处理器下方法失效</li>
</ul>
</li>
</ul>
<h3 id="进程死锁"><a href="#进程死锁" class="headerlink" title="进程死锁"></a>进程死锁</h3><blockquote>
<p>​	进程死锁是指两个或多个进程在执行过程中，由于竞争系统资源而造成的一种僵局状态，导致它们永远无法继续执行下去。在死锁状态下，每个进程都在等待系统中的某个资源被释放，而释放该资源的操作又被其他进程所持有，从而导致所有进程都无法继续执行。换句话说，每个进程都在等待其他进程释放资源，而它们自身持有的资源又被其他进程等待，从而形成了一个相互等待的循环，无法解开。</p>
</blockquote>
<h3 id="信号量机制（必考）"><a href="#信号量机制（必考）" class="headerlink" title="* 信号量机制（必考）"></a>* 信号量机制（必考）</h3><p>​	<strong>定义</strong>：信号量机制是操作系统中用于控制对共享资源访问的一种同步机制。它通常用于多进程或多线程环境下，以确保对共享资源的访问不会导致竞态条件或数据不一致的问题。</p>
<ol>
<li><strong>P操作</strong><br> 获取信号量（P操作）：当一个线程或进程需要访问共享资源时，它需要首先尝试获取信号量。获取信号量的操作通常称为 P（或 wait）操作。如果信号量的值大于零，表示有可用的资源，线程或进程可以继续执行；如果信号量的值为零，表示资源已经被占用，线程或进程需要等待，直到有资源可用</li>
<li><strong>V操作</strong><br> 释放信号量（V操作）：当线程或进程使用完共享资源后，它需要释放信号量，以允许其他线程或进程继续访问。释放信号量的操作通常称为 V（或 signal）操作。通过增加信号量的值，V操作使得等待中的线程或进程可以继续执行。释放信号量（V操作）：当线程或进程使用完共享资源后，它需要释放信号量，以允许其他线程或进程继续访问。释放信号量的操作通常称为 V（或 signal）操作。通过增加信号量的值，V操作使得等待中的线程或进程可以继续执行。</li>
</ol>
<h4 id="信号量分类"><a href="#信号量分类" class="headerlink" title="* 信号量分类"></a>* 信号量分类</h4><p><strong>信号量分为：互斥信号量和资源信号量</strong></p>
<ul>
<li>互斥信号量用于申请或释放资源的使用权，常初始化为1。</li>
<li>资源信号量用于申请或归还资源，可以初始化为大于1的正整数，表示系统中某类资源的可用个数。</li>
</ul>
<ol>
<li><p>整形信号量</p>
<ol>
<li>设S为一个需要初始化值的整型量，对S的访问仅能通过两个标准的原子操作P(S)和V(S)。<strong>S的初值代表资源的总数</strong>。</li>
<li>如果S的值为1，表示有1个临界资源可以使用。</li>
<li>整型信号量S是一个全局变量（整型初始非负），并发进程都能够访问。S需要在主程序中定义，并赋予初值。</li>
</ol>
</li>
<li><p>记录型信号量</p>
<ol>
<li>在整型信号量的基础上进行改进</li>
<li>让不能进入临界区的进程“让权等待”，即进程状态由运行转换为阻塞状态，进程进入阻塞队列中等待。</li>
<li>Semaphore为一个记录型数据结构<ol>
<li><strong>value：</strong>代表资源数目，具有初值，该初值通常为非负整数。</li>
<li><strong>L</strong>：是一个初始状态为空的进程阻塞队列。</li>
</ol>
</li>
<li>工作流程<ol>
<li>记录型信号量的P操作是先减1，再测试，因此，测试条件是小于0，不是小于等于0；记录型信号量的V操作是先加1，再判断是否有进程阻塞，有进程阻塞则唤醒。</li>
<li>在P(S)操作中，S.value的值小于0时，表示不能访问临界资源，block(S.L)将调用P(S)的进程置成阻塞状态等待。</li>
<li>在V(S)操作中，S.value的值小于等于0时，表示有进程在阻塞队列等待临界资源，wakeup(S.L)将唤醒一个在阻塞队列等待的进程。</li>
</ol>
</li>
</ol>
</li>
<li><p>AND型信号量</p>
<ol>
<li>进程需要的资源越多，出现死锁的可能性也越大</li>
<li>解决的办法：将进程所需要的资源一次性地全部分配给进程，等进程运行完后再全部一起释放。</li>
<li><strong>缺点</strong><ol>
<li>虽然用AND型信号量会避免进程死锁，但是，AND型信号量使得并发进程变为先后执行，进程之间的相互等待，使得系统整体性能降低。</li>
</ol>
</li>
</ol>
</li>
<li><p>信号量集</p>
<ol>
<li>使用原因：<ol>
<li>当进程一次需要N个某类临界资源时，如果用记录型信号量，进程每次只能一次申请或释放一个临界资源，效率较低；每类资源数下限不同；对每类资源需求不同。因此引入信号量集：</li>
</ol>
</li>
</ol>
</li>
</ol>
<h3 id="管程"><a href="#管程" class="headerlink" title="* 管程"></a>* 管程</h3><h4 id="出现原因："><a href="#出现原因：" class="headerlink" title="出现原因："></a>出现原因：</h4><ul>
<li><p>为了避免凡要使用临界资源的进程都自备同步操作P(s)和V(s), 将同步操作的机制和临界资源结合到一起，形成管程。</p>
</li>
<li><p>信号量能够解决的同步问题，用管程同样可以解决，而且更加简单</p>
</li>
<li><p>管程机制作为同步工具，便于在高级语言编程中实现。</p>
</li>
</ul>
<h4 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h4><ul>
<li>一个数据结构和能为并发进程所执行的在该数据结构上的一组操作。</li>
</ul>
<h4 id="结构"><a href="#结构" class="headerlink" title="结构"></a>结构</h4><ul>
<li>管程名</li>
<li>局部于管程内部的共享数据结构说明</li>
<li>对该数据结构进行操作的一组过程</li>
<li>对共享数据结构设置初始值</li>
</ul>
<h4 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h4><p>​	进程可在任何需要的地方调用管程中的过程，但不能在管程外直接访问管程内的数据结构</p>
<p>​	管程本身被作为一种临界区，因此，实现管程时，需要考虑互斥、同步和控制变量等问题</p>
<h4 id="特征"><a href="#特征" class="headerlink" title="特征"></a>特征</h4><ul>
<li>模块化。是基本程序单位，可单独编译；</li>
<li>抽象数据类型。管程中不仅有数据，还有对数据的操作；</li>
<li>信息封装。管程中的数据结构只能被管程中的过程访问，这些过程供管程外的进程调用，而管程中的数据结构以及过程的具体实现外部不可见。</li>
<li>任一时刻，在管程中只能有一个进程运行。调用管程中过程的进程进入管程，如果不能访问临界资源时，则不能继续运行，需要在管程中阻塞等待临界资源。此时，在管程外等待访问管程的另一个进程可以进入管程。</li>
</ul>
<h4 id="管程与进程的比较"><a href="#管程与进程的比较" class="headerlink" title="* 管程与进程的比较"></a>* 管程与进程的比较</h4><ul>
<li>管程定义的是公用数据结构，而进程定义的是私有数据结构;</li>
<li>管程把共享变量上的同步操作集中起来，而临界区却分散在每个进程中；</li>
<li>管程是为管理共享资源而建立的，进程主要是为占有系统资源和实现系统并发性而引入的；</li>
<li>管程是被欲使用共享资源的进程所调用的，管程和调用它的进程不能并行工作，而进程之间能并行工作，并发性是其固有特性；</li>
<li>管程是语言或操作系统的成分，不必创建或撤销，而进程有生命周期，由创建而产生至撤销便消亡。</li>
</ul>
<h2 id="进程通信"><a href="#进程通信" class="headerlink" title="进程通信"></a>进程通信</h2><p>Inter Process Communication</p>
<h3 id="管道"><a href="#管道" class="headerlink" title="管道"></a>管道</h3><ul>
<li>管道（pipe）用于相关进程之间的通信</li>
<li>管道类似于共享文件，位于外存区域，但在文件系统中不可见一个<ul>
<li>进程在文件的一端写入</li>
<li>另一个进程从文件的另一端读出</li>
<li>管道 I&#x2F;O 类似于文件 I&#x2F;O</li>
</ul>
</li>
</ul>
<h4 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h4><ul>
<li>管道通信效率低，不适合进程间频繁地交换数据。</li>
</ul>
<h4 id="记名管道"><a href="#记名管道" class="headerlink" title="记名管道"></a>记名管道</h4><ul>
<li>用途：记名管道用于不相关进程之间的通信</li>
<li>特点<ul>
<li>一个有名字的通信管道 </li>
<li>记名管道和文件系统共享一个名字空间</li>
<li>易于在非相关进程间通信</li>
<li>进程通过调用程序API创建记名管道</li>
</ul>
</li>
</ul>
<h4 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h4><ul>
<li><p>无名管道</p>
<ul>
<li><p>无名管道是一种临时的、单向的通信管道，只能在相关进程之间使用。</p>
</li>
<li><p>无名管道在创建时不需要命名，因此也称为匿名管道。</p>
</li>
<li><p>无名管道通常用于具有父子关系的相关进程之间进行通信。</p>
</li>
</ul>
</li>
<li><p>命名管道</p>
<ul>
<li>命名管道是一种命名的、双向的通信管道，允许无关的进程之间进行通信。</li>
<li>命名管道在创建时会关联一个特定的文件路径名，因此也称为FIFO（First In, First Out）。</li>
<li>命名管道通常用于独立的进程之间进行通信，它们可以是同一台计算机上的不同进程，也可以是不同计算机上的进程。</li>
</ul>
</li>
</ul>
<h3 id="套接字和信号"><a href="#套接字和信号" class="headerlink" title="套接字和信号"></a>套接字和信号</h3><h4 id="信号（signal）"><a href="#信号（signal）" class="headerlink" title="信号（signal）:"></a>信号（signal）:</h4><ul>
<li>向一个进程通知发生异步事件，类似于信号中断，但无优先级</li>
<li>一个进程发送到另一个进程的内核对象或内核数据结构</li>
<li>信号可以被捕获或者忽略</li>
</ul>
<h4 id="套接字（socket）"><a href="#套接字（socket）" class="headerlink" title="套接字（socket）:"></a>套接字（socket）:</h4><ul>
<li>网络中不同主机上的应用进程之间进行双向通信的端点的抽象</li>
<li>一种类似于文件的通信模式</li>
<li>通信双方（服务器和客户端）均需要创建套接字</li>
<li>本地的或远程的</li>
<li>进程通过调用套接字API创建套接字</li>
</ul>
<h3 id="共享内存"><a href="#共享内存" class="headerlink" title="共享内存"></a>共享内存</h3><p>共享存储器系统: 相互通信的进程共享某些数据结构或共享存储区，进程之间能够通过这些空间进行通信。 </p>
<ul>
<li>基于共享数据结构，低效，只能传递少量数据。(生产者-消费者问题) </li>
<li>通过共享存储区  </li>
<li>一个进程创建一段共享内存  </li>
<li>其它进程可以将该片内存映射到自己的地址空间  </li>
<li>共享内存的任何改变对进程都可见</li>
</ul>
<h3 id="消息传递"><a href="#消息传递" class="headerlink" title="消息传递"></a>消息传递</h3><p> 通过消息传递  应用最广泛的进程通信机制</p>
<h5 id="实现方式"><a href="#实现方式" class="headerlink" title="实现方式"></a>实现方式</h5><ol>
<li>直接通信</li>
</ol>
<ul>
<li>发送进程利用OS所提供的发送命令，直接把消息发送给目标进程</li>
<li>发送进程和接收进程都以显式方式提供对方的标识符              Send(Receiver, message); 发送一个消息给接收进程；             Receive(Sender, message); 接收Sender发来的消息；      </li>
<li>例如，原语Send(P2, m1)表示将消息m1发送给接收进程P2; 而原语Receive(P1，m1)则表示接收由P1发来的消息m1</li>
</ul>
<ol start="2">
<li>间接通信</li>
</ol>
<ul>
<li>进程之间的通信需要通过作为共享数据结构的实体（信箱）</li>
</ul>
<blockquote>
<p>信箱：信箱可由操作系统创建，也可由用户进程创建，创建者是信箱的拥有者。据此，可把信箱分为以下三类</p>
<ul>
<li>私用信箱</li>
</ul>
<p>用户进程可为自己建立一个新信箱，并作为该进程的一部分。信箱的拥有者有权从信箱中读取消息，其他用户则只能将自己构成的消息发送到该信箱中。这种私用信箱可采用单向通信链路的信箱来实现。 当拥有该信箱的进程结束时，信箱也随之消失</p>
<ul>
<li>公用信箱</li>
</ul>
<p>由操作系统创建，并提供给系统中所有的核准进程使用。核准进程既可把消息发送到该信箱中，也可从信箱中读取发送给自己的消息。显然，公用信箱应采用双向通信链路的信箱来实现。通常，公用信箱在系统运行期间始终存在。</p>
<ul>
<li>共享信箱</li>
</ul>
<p>它由某进程创建，在创建时或创建后，指明它是可共享的，同时须指出共享进程(用户)的名字。信箱的拥有者和共享者，都有权从信箱中取走发送给自己的消息</p>
<p>信箱通信模式</p>
<ul>
<li>一对一关系。为发送进程和接收进程建立一条两者专用的通信链路，使两者之间的交互不受其他进程的干扰。</li>
<li>多对一关系。允许提供服务的进程与多个用户进程之间进行交互，也称为客户&#x2F;服务器交互，这时信箱称为端口（port）。</li>
<li>一对多关系。允许一个发送进程与多个接收进程进行交互，使发送进程可用广播方式，向多个接收者发送消息。</li>
<li>多对多关系。允许建立一个公用信箱，让多个进程都能向信箱中投递消息；也可从信箱中取走属于自己的消息。</li>
</ul>
</blockquote>
<ul>
<li>信箱的创建和撤消进程可利用信箱创建原语来建立一个新信箱。创建者进程应给出信箱名字、信箱属性(公用、私用或共享)；对于共享信箱， 还应给出共享者的名字。当进程不再需要读信箱时，可用信箱撤消原语将之撤消。</li>
<li>消息的发送和接收当进程之间要利用信箱进行通信时，必须使用共享信箱，并利用系统提供的下述通信原语进行通信。</li>
</ul>
<h5 id="消息传递系统实现中的若干问题"><a href="#消息传递系统实现中的若干问题" class="headerlink" title="消息传递系统实现中的若干问题"></a>消息传递系统实现中的若干问题</h5><ul>
<li>通信链路的建立</li>
</ul>
<blockquote>
<p>发送进程显式建立通信链路，主要用于计算机网络中使用系统的发送命令时，自动建立链路，主要用于单机系统中</p>
<p>通信链路分类:</p>
<ol>
<li><p>按照连接方式: </p>
<ol>
<li>点-点连接</li>
<li>多点连接</li>
</ol>
</li>
<li><p>按照通信方式</p>
<ol>
<li>单向通信链路</li>
<li>双向通信链路</li>
</ol>
</li>
</ol>
</blockquote>
<ul>
<li>消息格式:消息传递系统中所传递的消息，必须具有一定的格式。</li>
</ul>
<blockquote>
<p>格式类型</p>
<ul>
<li><p>定长消息格式</p>
<p>  可减少对消息的处理和存储开销。</p>
</li>
<li><p>变长消息格式</p>
<p>  方便发送较长消息的客户</p>
</li>
</ul>
</blockquote>
<ul>
<li>同步方式</li>
</ul>
<blockquote>
<p>发送接收均阻塞（汇合）：发送进程和接受进程间无缓冲，平时处于阻塞态，直到有消息传递</p>
<p>发送不阻塞，接收阻塞：应用最为广泛。如服务器。</p>
<p>发送接收均不阻塞：不要求任何一方等待。</p>
</blockquote>
<h4 id="三种方式比较"><a href="#三种方式比较" class="headerlink" title="三种方式比较"></a>三种方式比较</h4><p>1.无名管道简单方便．但局限于单向通信的工作方式．并且只能在创建它的进程及其子孙进程之间实现管道的共享：有名管道虽然可以提供给任意关系的进程使用。但是由于其长期存在于系统之中，使用不当容易出错。</p>
<p>2.消息缓冲可以不局限于父子进程．而允许任意进程通过共享消息队列来实现进程间通信．并由系统调用函数来实现消息发送和接收之间的同步．从而使得用户在使用消息缓冲进行通信时不再需要考虑同步问题．使用方便，但是信息的复制需要额外消耗CPU的时间．不适宜于信息量大或操作频繁的场合。</p>
<p>3.共享内存利用内存缓冲区直接交换信息，无须复制，快捷、信息量大是其优点。但是共享内存的通信方式是通过将共享的内存缓冲区直接附加到进程的虚拟地址空间中来实现的．因此，这些进程之间的读写操作的同步问题操作系统无法实现。必须由各进程利用其他同步工具解决。另外，由于内存实体存在于计算机系统中．所以只能由处于同一个计算机系统中的诸进程共享。不方便网络通信。</p>
<h2 id="死锁"><a href="#死锁" class="headerlink" title="死锁"></a>死锁</h2><h3 id="概念-1"><a href="#概念-1" class="headerlink" title="概念"></a>概念</h3><p>多个进程在运行过程中因争夺资源而造成的一种僵局，当进程处于这种僵持状态时，若无外力作用，它们都将无法再向前推进。</p>
<blockquote>
<p>资源：进程运行需要的事物计算机</p>
<p>资源的例子:  打印机，磁盘驱动器，数据表格，锁磁盘空间，内存，信号量，CPU</p>
</blockquote>
<h3 id="产生原因"><a href="#产生原因" class="headerlink" title="产生原因"></a>产生原因</h3><ol>
<li>竞争资源引起死锁</li>
<li>进程间推进顺序非法引起死锁</li>
</ol>
<h4 id="竞争资源引起的进程死锁"><a href="#竞争资源引起的进程死锁" class="headerlink" title="竞争资源引起的进程死锁"></a>竞争资源引起的进程死锁</h4><ul>
<li>可剥夺资源和不可剥夺资源</li>
</ul>
<blockquote>
<ol>
<li><strong>可剥夺资源</strong>：指的是系统可以在任意时刻剥夺并重新分配的资源。当一个进程占用了可剥夺资源时，操作系统可以在必要时将资源从该进程中取走，并分配给其他进程使用，以确保系统的公平性和效率。典型的可剥夺资源包括处理器（CPU）、内存和设备（如磁盘、网络接口）等。</li>
<li><strong>非剥夺资源</strong>：指的是系统不会在任意时刻剥夺的资源。一旦分配给某个进程，就必须等到该进程主动释放资源或者完成执行后，才能将资源分配给其他进程。典型的非剥夺资源包括硬件设备中的某些控制器、I&#x2F;O 设备中的某些部件等。</li>
</ol>
</blockquote>
<ul>
<li>竞争非剥夺性资源，可造成死锁</li>
<li>竞争临时性资源。</li>
</ul>
<blockquote>
<p>临时性资源是指由一个进程产生，被另一个进程使用一段时间后便无用的资源。</p>
</blockquote>
<h4 id="进程推进顺序不当引起死锁"><a href="#进程推进顺序不当引起死锁" class="headerlink" title="进程推进顺序不当引起死锁"></a>进程推进顺序不当引起死锁</h4><h3 id="产生条件"><a href="#产生条件" class="headerlink" title="产生条件"></a>产生条件</h3><ol>
<li>互斥条件: 某资源在一段时间内只能由一个进程占用</li>
<li>持有等待: 线程在请求新的资源时，其已经获得的资源并不释放，而是继续持有</li>
<li>不能抢占不能强迫进程放弃资源</li>
<li>环路等待条件</li>
</ol>
<h3 id="处理死锁的基本方法"><a href="#处理死锁的基本方法" class="headerlink" title="处理死锁的基本方法"></a>处理死锁的基本方法</h3><ol>
<li>不予理睬: 忽略问题的存在</li>
<li>静态预防: 消除死锁发生的4个必要条件中的任何一个。</li>
<li>动态避免: 仔细的资源分配</li>
<li>死锁检测与解除让死锁出现然后采取措施去纠正</li>
</ol>
<h4 id="不予理睬-忽略问题的存在"><a href="#不予理睬-忽略问题的存在" class="headerlink" title="不予理睬: 忽略问题的存在"></a>不予理睬: 忽略问题的存在</h4><ul>
<li><p>假装没有问题，“鸵鸟算法”</p>
</li>
<li><p>此种策略在如下情况下是合理的 </p>
<ol>
<li><p>死锁出现的概率很低 </p>
</li>
<li><p>预防死锁的代价很大</p>
</li>
</ol>
</li>
<li><p>UNIX 和Windows都采取这种方法方便和正确性之间的一种折中</p>
</li>
</ul>
<h4 id="静态预防-消除死锁发生的4个必要条件中的任何一个。"><a href="#静态预防-消除死锁发生的4个必要条件中的任何一个。" class="headerlink" title="静态预防: 消除死锁发生的4个必要条件中的任何一个。"></a>静态预防: 消除死锁发生的4个必要条件中的任何一个。</h4><ul>
<li>消除四个条件中的一个<ul>
<li>消除资源独占条件</li>
</ul>
</li>
</ul>
<blockquote>
<p>原则:</p>
<ol>
<li>不是绝对必须的时候避免分配资源</li>
<li>尽可能少的进程获得资源</li>
</ol>
</blockquote>
<ul>
<li>消除持有和等待条件</li>
</ul>
<blockquote>
<p>进程在启动之前请求所有的资源</p>
<ul>
<li>特点</li>
</ul>
<p>等待所有你需要的资源都被释放然后一次都获取它们B. 如果获取资源失败释放所有已经拥有的资源</p>
<ul>
<li>缺点</li>
</ul>
<p>一次获取所有的资源，造成资源浪费开始运行的时候可能不知道所有需要的资源</p>
</blockquote>
<ul>
<li>消除非抢占条件</li>
</ul>
<blockquote>
<ol>
<li>允许抢占</li>
<li>可以抢占 CPU ：通过将信息保存到进程控制表，之后再恢复它。</li>
<li>可以抢占内存 通过把内存倒出到磁盘上，之后再把它装回</li>
</ol>
<ul>
<li>局限性：有些资源不可以被抢占，比如锁打印机</li>
</ul>
</blockquote>
<ul>
<li>消除环路等待条件</li>
</ul>
<blockquote>
<ul>
<li><p>环路等待的原因是由于进程请求资源的顺序是随机的</p>
</li>
<li><p>可以通过定义资源类型的线性顺序来预防</p>
</li>
</ul>
</blockquote>
<ul>
<li>增加资源从而减少等待<ul>
<li>最小化了死锁的几率</li>
</ul>
</li>
</ul>
<h4 id="动态避免-仔细的资源分配"><a href="#动态避免-仔细的资源分配" class="headerlink" title="动态避免: 仔细的资源分配"></a>动态避免: 仔细的资源分配</h4><h4 id="死锁检测与解除让死锁出现然后采取措施去纠正"><a href="#死锁检测与解除让死锁出现然后采取措施去纠正" class="headerlink" title="死锁检测与解除让死锁出现然后采取措施去纠正"></a>死锁检测与解除让死锁出现然后采取措施去纠正</h4><ul>
<li>注意资源的占有和资源需求</li>
<li>通过查看有向图中的循环来检查死锁</li>
</ul>
<p><strong>矩阵检测</strong></p>
<p>矩阵检测的基本思想是将系统中的资源和进程状态抽象为一个矩阵，其中矩阵的行代表进程，列代表资源。这样，可以通过观察矩阵的状态来分析系统中是否存在资源分配问题（如死锁）或者资源使用情况是否合理。</p>
<p>在矩阵检测中，有两个主要的概念：</p>
<ol>
<li><strong>资源分配矩阵（Resource Allocation Matrix）</strong>：该矩阵显示了系统中各个进程对资源的请求以及已经被分配的资源情况。行表示进程，列表示资源，矩阵中的每个元素表示某个进程对某个资源的请求或分配情况。</li>
<li><strong>需求矩阵（Demand Matrix）</strong>：需求矩阵显示了每个进程对资源的需求情况。与资源分配矩阵相比，需求矩阵中的每个元素表示某个进程对某个资源的需求量。</li>
</ol>
<p>通过分析这些矩阵，可以发现潜在的问题，例如：</p>
<ul>
<li><strong>死锁检测</strong>：通过观察资源分配矩阵和需求矩阵，可以检测系统中是否存在死锁。如果存在某个进程无法满足其资源需求，同时该资源被其他进程占用，那么可能发生死锁。</li>
<li><strong>资源分配优化</strong>：通过观察资源分配矩阵，可以发现资源使用效率低下的情况，进而优化资源分配策略，提高系统整体的性能。</li>
</ul>
<h3 id="死锁的恢复"><a href="#死锁的恢复" class="headerlink" title="死锁的恢复"></a>死锁的恢复</h3><ol>
<li>抢占</li>
</ol>
<ul>
<li>将某个进程所占的资源强行拿走</li>
<li>取决于资源的性质</li>
</ul>
<ol start="2">
<li>上翻</li>
</ol>
<ul>
<li>定期检查进程</li>
<li>上翻到一个安全的状态 </li>
<li>如果发现死锁重启进程</li>
</ul>
<ol start="3">
<li>杀死进程</li>
</ol>
<ul>
<li>中断进程的最简单方法</li>
<li>杀死死锁循环中的一个进程</li>
<li>其他进程获得它的资源 </li>
<li>选择可以重新开始运行的进程</li>
</ul>
<h3 id="死锁的动态避免"><a href="#死锁的动态避免" class="headerlink" title="*死锁的动态避免"></a>*死锁的动态避免</h3><h4 id="死锁的动态避免原则："><a href="#死锁的动态避免原则：" class="headerlink" title="死锁的动态避免原则："></a>死锁的动态避免原则：</h4><p>使用资源规划，确保该资源请求批准后系统不会进入到死锁或者潜在的死锁状态。</p>
<blockquote>
<ul>
<li>状态分类为：<strong>安全状态</strong>和<strong>不安全状态</strong></li>
</ul>
<ol>
<li>安全状态<ul>
<li>指系统能按某种进程顺序（P1，P2，…，Pn），来为每个进程Pi分配其所需要资源，直至满足每个进程对资源的最大需求，使每个进程都可以顺利完成。</li>
</ul>
</li>
<li>不安全状态</li>
</ol>
</blockquote>
<h4 id="银行家算法"><a href="#银行家算法" class="headerlink" title="银行家算法"></a>银行家算法</h4><ul>
<li><p>特点</p>
<ul>
<li>实现动态避免死锁</li>
<li>类似于一开始就预留所有的资源，但是更加高效</li>
</ul>
</li>
<li><p>介绍：</p>
</li>
</ul>
<ol>
<li>事先声明所需的最大资源，但实际上并不获得资源</li>
<li>当之后进程要求资源时, 银行家算法的策略:<ul>
<li>安全状态下满足要求</li>
<li>如果处于不安全状态则阻塞进程</li>
</ul>
</li>
</ol>
<h2 id="线程"><a href="#线程" class="headerlink" title="线程"></a>线程</h2><h3 id="进程的缺陷"><a href="#进程的缺陷" class="headerlink" title="进程的缺陷"></a>进程的缺陷</h3><ul>
<li><p>一个进程在一个时间只能做一件事情</p>
</li>
<li><p>阻塞将使进程挂起，整个进程都无法继续执行</p>
</li>
</ul>
<h3 id="线程产生的原因"><a href="#线程产生的原因" class="headerlink" title="线程产生的原因"></a>线程产生的原因</h3><h4 id="进程的基本属性"><a href="#进程的基本属性" class="headerlink" title="进程的基本属性"></a>进程的基本属性</h4><ol>
<li>进程是拥有资源的独立单位.</li>
<li>进程是独立调度和分派的基本单位</li>
</ol>
<p>进程是资源拥有者，因而在进程的创建、撤消和切换中系统必须为之付出较大的时间、空间开销。因此，系统中所设置的进程的数目不宜过多，进程切换的频率不宜过高。这就限制了进程并发程度的提高。</p>
<p>&#x3D;&gt; 将进程的两个基本属性分开</p>
<h3 id="线程的概念"><a href="#线程的概念" class="headerlink" title="线程的概念"></a>线程的概念</h3><p>线程是进程中的一个实体，是系统独立调度和分派的基本单位。</p>
<h3 id="线程的属性"><a href="#线程的属性" class="headerlink" title="线程的属性"></a>线程的属性</h3><ol>
<li>轻型实体。 </li>
<li>独立调度和分派的基本单位。 </li>
<li>可并发执行。 </li>
<li>共享进程资源。</li>
</ol>
<h3 id="资源的共享与独享"><a href="#资源的共享与独享" class="headerlink" title="资源的共享与独享"></a>资源的共享与独享</h3><ol>
<li><p>有些资源被进程内所有的线程共享</p>
</li>
<li><p>有些资源是每个线程独享的</p>
</li>
</ol>
<table>
<thead>
<tr>
<th><strong>线程共享资源</strong></th>
<th><strong>线程独享资源</strong></th>
</tr>
</thead>
<tbody><tr>
<td>地址空间</td>
<td>程序计数器</td>
</tr>
<tr>
<td>全局变量</td>
<td>寄存器</td>
</tr>
<tr>
<td>打开的文件</td>
<td>栈</td>
</tr>
<tr>
<td>子进程</td>
<td>状态字</td>
</tr>
<tr>
<td>闹铃</td>
<td></td>
</tr>
<tr>
<td>信号及信号服务程序</td>
<td></td>
</tr>
<tr>
<td>记账信息</td>
<td></td>
</tr>
</tbody></table>
<h3 id="线程状态"><a href="#线程状态" class="headerlink" title="线程状态"></a>线程状态</h3><h4 id="状态参数（Threaded-Control-Block，TCB）"><a href="#状态参数（Threaded-Control-Block，TCB）" class="headerlink" title="状态参数（Threaded Control Block，TCB）"></a>状态参数（Threaded Control Block，TCB）</h4><p>在OS中的每一个线程都可以利用线程标识符和一组状态参数进行描述。状态参数通常有：</p>
<p>① 寄存器状态， 它包括程序计数器PC和堆栈指针中的内容； </p>
<p>② 堆栈， 在堆栈中通常保存有局部变量和返回地址； </p>
<p>③ 线程运行状态， 用于描述线程正处于何种运行状态；</p>
<p>④ 优先级， 描述线程执行的优先程度； </p>
<p>⑤ 线程专有存储器， 用于保存线程自己的局部变量拷贝； </p>
<p>⑥ 信号屏蔽， 即对某些信号加以屏蔽。 </p>
<h4 id="三种基本状态"><a href="#三种基本状态" class="headerlink" title="三种基本状态"></a>三种基本状态</h4><p>①执行状态，表示线程正获得处理机而运行；</p>
<p>②就绪状态，指线程已具备了各种执行条件，一旦获得CPU便可执行的状态；</p>
<p>③阻塞状态，指线程在执行中因某事件而受阻，处于暂停执行时的状态。  </p>
<h3 id="线程的创建和终止"><a href="#线程的创建和终止" class="headerlink" title="线程的创建和终止"></a>线程的创建和终止</h3><ul>
<li>创建</li>
</ul>
<p>在多线程OS环境下，应用程序在启动时，通常仅有一个线程在执行，该线程被人们称为“初始化线程”。它可根据需要再去创建若干个线程。在创建新线程时，需要利用一个线程创建函数（或系统调用），并提供相应的参数，如指向线程主程序的入口指针、堆栈的大小，以及用于调度的优先级等。在线程创建函数执行完后，将返回一个线程标识符供以后使用。</p>
<ul>
<li>终止</li>
</ul>
<p>终止线程的方式有两种：一种是在线程完成了自己的工作后自愿退出；另一种是线程在运行中出现错误或由于某种原因而被其它线程强行终止。 </p>
<h3 id="多线程操作系统中的进程"><a href="#多线程操作系统中的进程" class="headerlink" title="多线程操作系统中的进程"></a>多线程操作系统中的进程</h3><p>在多线程OS中，进程是作为拥有系统资源的基本单位，通常的进程都包含多个线程并为它们提供资源，但此时的进程就不再作为一个执行的实体。多线程OS中的进程有以下属性：       </p>
<p>(1) 作为系统资源分配的单位。        </p>
<p>(2) 可包括多个线程。        </p>
<p>(3) 进程不是一个可执行的实体。 </p>
<h3 id="线程的实现方式"><a href="#线程的实现方式" class="headerlink" title="线程的实现方式"></a>线程的实现方式</h3><ol>
<li>内核态线程的实现（Windows XP、IBM OS&#x2F;2）</li>
<li>用户态线程的实现（Java，Informix）</li>
<li>组合实现（Solaris）</li>
</ol>
<h4 id="内核态线程的实现（Windows-XP、IBM-OS-2）"><a href="#内核态线程的实现（Windows-XP、IBM-OS-2）" class="headerlink" title="内核态线程的实现（Windows XP、IBM OS&#x2F;2）"></a>内核态线程的实现（Windows XP、IBM OS&#x2F;2）</h4><ul>
<li>完全在内核空间实现</li>
<li>内核空间设置线程控制块OS </li>
<li>进行线程调度、资源分配等</li>
<li>OS 维护线程的信息</li>
</ul>
<blockquote>
<p>优缺点：</p>
<ul>
<li>优点</li>
</ul>
<ol>
<li>多处理器系统中，内核能同时调度同一进程中多个线程并行执行。</li>
<li>阻塞线程不会阻塞进程。</li>
<li>内核态线程具有很小的数据结构和堆栈，线程切换快，切换开销小。</li>
<li>内核本身可采用多线程技术，提高系统执行速度和效率。</li>
</ol>
<ul>
<li>缺点</li>
</ul>
<ol>
<li>多处理器系统中，内核能同时调度同一进程中多个线程并行执行。</li>
<li>阻塞线程不会阻塞进程。</li>
<li>内核态线程具有很小的数据结构和堆栈，线程切换快，切换开销小。</li>
<li>内核本身可采用多线程技术，提高系统执行速度和效率。</li>
</ol>
</blockquote>
<h4 id="用户态线程的实现（Java，Informix）"><a href="#用户态线程的实现（Java，Informix）" class="headerlink" title="用户态线程的实现（Java，Informix）"></a>用户态线程的实现（Java，Informix）</h4><ul>
<li>在用户空间实现。用户空间建立线程库：一组管理线程的过程</li>
<li>用户自己写执行系统进行调度。</li>
<li>线程自愿合作。</li>
<li>操作系统不知道线程的存在，     其调度仍以进程为单位执行。</li>
</ul>
<blockquote>
<p>优缺点：</p>
<ol>
<li><p>优点</p>
</li>
<li><p>线程切换快：不需要陷入到内核空间</p>
</li>
<li><p>线程调度是应用程序特定的：可以选择最好的算法</p>
</li>
<li><p>灵活性，可以在任何操作系统上实现</p>
</li>
<li><p>缺点</p>
</li>
<li><p>编程困难</p>
</li>
<li><p>多线程应用不能利用多处理机提高并行效率</p>
</li>
<li><p>系统调用的阻塞问题，线程受阻导致整个进程受阻!</p>
</li>
</ol>
</blockquote>
<h4 id="组合实现（Solaris）"><a href="#组合实现（Solaris）" class="headerlink" title="组合实现（Solaris）"></a>组合实现（Solaris）</h4><ul>
<li>执行系统管理用户态线程</li>
<li>操作系统管理内核态线程</li>
<li>用户态线程被多路复用到内核态线程上</li>
</ul>
<h5 id="Solaris"><a href="#Solaris" class="headerlink" title="Solaris"></a>Solaris</h5><p>Solaris的多线程模型中包括四种实体：进程，内核线程，用户线程和轻量级进程（Light Weight Process，LWP）</p>
<ul>
<li>Solaris内核是多线程的<ul>
<li>进程是资源分配和管理的单元</li>
<li>内核级线程是内核的调度单元</li>
<li>用户级线程是程序执行在用户态的抽象</li>
<li>LWP把用户线程和内核线程绑定到一起：</li>
</ul>
</li>
</ul>
<h3 id="多线程"><a href="#多线程" class="headerlink" title="多线程"></a>多线程</h3><p>多线程是指在单个进程内同时执行多个线程的并发编程模型。每个线程是进程中的独立执行路径，它可以独立执行任务，并且共享相同进程的资源，如内存空间、文件句柄等。多线程的主要优势包括提高系统资源利用率、增加程序响应速度、简化编程模型等。</p>
<p>以下是多线程的一些重要概念和特点：</p>
<ol>
<li><strong>并发性</strong>：多线程允许多个任务同时执行，提高了系统的并发性。每个线程独立执行，它们之间可以并发执行，从而实现了程序的并行处理。</li>
<li><strong>共享内存</strong>：在多线程编程中，各个线程共享同一进程的内存空间。这意味着线程可以方便地共享数据，但也需要考虑线程间的同步和互斥，以避免数据竞争和不一致的情况。</li>
<li><strong>轻量级</strong>：与进程相比，线程是更轻量级的执行单元。创建和销毁线程的开销比创建和销毁进程要小得多，因此多线程通常更适合于处理大量的并发任务。</li>
<li><strong>并行性</strong>：多线程可以在多核处理器上实现并行执行，从而提高了程序的性能。在具有多个核心的系统中，不同线程可以在不同的核心上并行执行，从而更有效地利用系统资源。</li>
<li><strong>线程同步</strong>：多线程编程需要考虑线程之间的同步和互斥问题。当多个线程访问共享资源时，需要使用同步机制来保证数据的一致性，例如使用锁、信号量、条件变量等。</li>
<li><strong>线程调度</strong>：线程的调度由操作系统负责，操作系统根据线程的优先级和调度算法来确定线程的执行顺序。不同的操作系统可能有不同的线程调度策略。</li>
</ol>
<p>多线程广泛应用于各种计算机应用中，包括服务器编程、图形界面程序、游戏开发、数据处理等。它提供了一种有效的方式来处理并发任务，提高系统的性能和响应速度。</p>
<h4 id="线程之间的通信"><a href="#线程之间的通信" class="headerlink" title="线程之间的通信"></a>线程之间的通信</h4><h5 id="共享内存-1"><a href="#共享内存-1" class="headerlink" title="共享内存"></a>共享内存</h5><p>在共享内存模型中，多个线程共享同一进程的内存空间。线程可以通过读写共享内存来进行通信。常见的共享内存通信方式包括：</p>
<ol>
<li><strong>互斥锁（Mutex）</strong>：使用互斥锁来保护共享资源，只有获取锁的线程可以访问共享资源，其他线程需要等待直到锁被释放。这样可以防止多个线程同时修改共享资源导致的数据竞争问题。</li>
<li><strong>条件变量（Condition Variable）</strong>：条件变量用于在线程之间传递信号，允许线程等待某个条件变为真。一个线程可以在条件变量上等待，而另一个线程可以通过发送信号来通知等待的线程条件已经满足。</li>
<li><strong>信号量（Semaphore）</strong>：信号量是一种计数器，用于控制对共享资源的访问。它可以确保多个线程不会同时访问临界区，从而避免竞争条件。</li>
</ol>
<h5 id="消息传递-1"><a href="#消息传递-1" class="headerlink" title="消息传递"></a>消息传递</h5><p>在消息传递模型中，线程之间通过发送消息来进行通信，而不共享内存。常见的消息传递通信方式包括：</p>
<ol>
<li><strong>消息队列（Message Queue）</strong>：线程可以通过向消息队列发送消息或者从消息队列接收消息来进行通信。消息队列可以是进程内的，也可以是跨进程的。</li>
<li><strong>管道（Pipe）</strong>：管道是一种特殊的文件，用于进程间通信。线程可以通过管道来发送和接收数据。</li>
<li><strong>套接字（Socket）</strong>：套接字是在网络编程中使用的一种通信机制，它也可以在同一台主机的不同线程之间进行通信。</li>
<li><strong>消息传递接口（MPI）</strong>：MPI是一种用于并行计算的标准通信库，它提供了一套丰富的消息传递函数，用于在并行计算中进行进程间通信。</li>
</ol>
<h4 id="线程之间的同步"><a href="#线程之间的同步" class="headerlink" title="线程之间的同步"></a>线程之间的同步</h4><h5 id="互斥锁（Mutex）"><a href="#互斥锁（Mutex）" class="headerlink" title="互斥锁（Mutex）"></a>互斥锁（Mutex）</h5><p>互斥锁是一种最常见的线程同步机制。它用于保护共享资源，一次只允许一个线程访问共享资源。线程在访问共享资源之前会尝试获取互斥锁，如果成功获取，则可以访问资源，否则会阻塞直到锁可用。</p>
<h5 id="2-条件变量（Condition-Variable）"><a href="#2-条件变量（Condition-Variable）" class="headerlink" title="2. 条件变量（Condition Variable）"></a>2. 条件变量（Condition Variable）</h5><p>条件变量允许一个线程等待某个条件为真，当条件为真时，另一个线程可以通过发送信号来通知等待线程。它通常与互斥锁一起使用，用于实现线程间的等待和唤醒机制。</p>
<h5 id="3-信号量（Semaphore）"><a href="#3-信号量（Semaphore）" class="headerlink" title="3. 信号量（Semaphore）"></a>3. 信号量（Semaphore）</h5><p>信号量是一个计数器，用于控制对共享资源的访问。它可以用来限制同时访问某一资源的线程数量。信号量通常用于解决生产者-消费者问题等场景。</p>
<h5 id="4-屏障（Barrier）"><a href="#4-屏障（Barrier）" class="headerlink" title="4. 屏障（Barrier）"></a>4. 屏障（Barrier）</h5><p>屏障用于等待多个线程都到达某一点之后再继续执行。当所有线程都到达屏障点时，它们会被释放，然后继续执行后续操作。</p>
<h5 id="5-自旋锁（Spin-Lock）"><a href="#5-自旋锁（Spin-Lock）" class="headerlink" title="5. 自旋锁（Spin Lock）"></a>5. 自旋锁（Spin Lock）</h5><p>自旋锁是一种不会阻塞线程的锁，当一个线程尝试获取锁时，如果锁已被其他线程占用，它会一直自旋等待直到锁可用。自旋锁适用于锁被持有时间短、并发度高的情况。</p>
<h5 id="6-读写锁（Read-Write-Lock）"><a href="#6-读写锁（Read-Write-Lock）" class="headerlink" title="6. 读写锁（Read-Write Lock）"></a>6. 读写锁（Read-Write Lock）</h5><p>读写锁允许多个线程同时读取共享资源，但只允许一个线程写入共享资源。这种锁适用于读操作远远多于写操作的情况，可以提高并发性能。</p>
<h5 id="7-原子操作（Atomic-Operation）"><a href="#7-原子操作（Atomic-Operation）" class="headerlink" title="7. 原子操作（Atomic Operation）"></a>7. 原子操作（Atomic Operation）</h5><p>原子操作是一种不可中断的操作，它可以保证在多线程环境下对共享变量的操作是原子的，从而避免了数据竞争问题。</p>
<h2 id="经典例题"><a href="#经典例题" class="headerlink" title="经典例题"></a>经典例题</h2><h3 id="生产者消费者问题"><a href="#生产者消费者问题" class="headerlink" title="生产者消费者问题"></a>生产者消费者问题</h3><h3 id="读者写者问题"><a href="#读者写者问题" class="headerlink" title="读者写者问题"></a>读者写者问题</h3><h3 id="哲学家进餐问题"><a href="#哲学家进餐问题" class="headerlink" title="哲学家进餐问题"></a>哲学家进餐问题</h3><h1 id="4-处理机调度"><a href="#4-处理机调度" class="headerlink" title="4. *处理机调度"></a>4. *处理机调度</h1><h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><p>&#x3D;&#x3D;处理机调度指在多道程序环境下将处理机分配给各<strong>进程</strong>&#x3D;&#x3D;</p>
<h3 id="作业-1"><a href="#作业-1" class="headerlink" title="作业"></a>作业</h3><h4 id="作业概念"><a href="#作业概念" class="headerlink" title="作业概念"></a>作业概念</h4><p>作业：作业是用户在一次解题或一个事务处理过程中要求计算机系统所做工作的集合，包括用户程序、所需的数据及命令等。</p>
<p>作业由一组统一管理和操作的进程集合构成，是用户要求计算机系统完成的一项相对独立的工作。</p>
<h4 id="作业分类"><a href="#作业分类" class="headerlink" title="作业分类"></a>作业分类</h4><h5 id="按需要处理工作的类型"><a href="#按需要处理工作的类型" class="headerlink" title="按需要处理工作的类型"></a>按需要处理工作的类型</h5><ol>
<li><p>计算型作业</p>
<blockquote>
<ul>
<li><strong>特点</strong>：<ul>
<li>计算密集型作业是指需要大量的 CPU 计算资源来完成的任务。</li>
<li>这类作业通常不需要太多的输入输出操作，而是以大量的计算为主。</li>
<li>例如，科学计算、数值模拟、图形渲染等任务就属于计算密集型作业。</li>
</ul>
</li>
<li><strong>特征</strong>：<ul>
<li>需要大量的 CPU 计算时间，但相对较少的 I&#x2F;O 操作。</li>
<li>对 CPU 的利用率较高，但是可能会导致其他任务在等待 CPU 资源时出现阻塞。</li>
</ul>
</li>
<li><strong>优化</strong>：<ul>
<li>优化计算算法和数据结构，以减少计算时间和资源消耗。</li>
<li>可以采用并行计算的方式，利用多核处理器或分布式计算集群来加速计算过程。</li>
</ul>
</li>
</ul>
</blockquote>
</li>
<li><p>I&#x2F;O型作业</p>
<blockquote>
<ul>
<li><strong>特点</strong>：<ul>
<li>I&#x2F;O 密集型作业是指需要大量的输入输出操作来完成的任务。</li>
<li>这类作业通常对 CPU 的要求不高，但需要大量的数据传输和处理。</li>
<li>例如，文件操作、网络通信、数据库查询等任务就属于 I&#x2F;O 密集型作业。</li>
</ul>
</li>
<li><strong>特征</strong>：<ul>
<li>需要大量的输入输出操作，而计算操作相对较少。</li>
<li>对 CPU 的利用率较低，但可能会导致 CPU 等待 I&#x2F;O 操作完成而出现阻塞。</li>
</ul>
</li>
<li><strong>优化</strong>：<ul>
<li>优化 I&#x2F;O 操作，减少等待时间，例如使用异步 I&#x2F;O、缓存等技术。</li>
<li>可以采用多线程或事件驱动的方式来处理并发的 I&#x2F;O 操作，提高系统的响应性。</li>
</ul>
</li>
</ul>
</blockquote>
</li>
</ol>
<h5 id="按作业提交的方式不同"><a href="#按作业提交的方式不同" class="headerlink" title="按作业提交的方式不同"></a>按作业提交的方式不同</h5><ol>
<li><p>批处理作业</p>
<blockquote>
<ul>
<li><strong>特点</strong>：<ul>
<li>批处理作业是一组按顺序排列的任务，通常一次性提交给系统执行，而无需用户交互。</li>
<li>这些作业通常是长时间运行的，不需要实时用户交互。</li>
<li>作业提交后，系统会按照作业的顺序执行，并在完成后将结果输出到指定的输出设备或文件。</li>
</ul>
</li>
<li><strong>应用场景</strong>：<ul>
<li>批处理作业适用于一些需要大量计算和处理时间的任务，如大规模数据处理、科学计算、批量文件处理等。</li>
<li>典型的批处理作业包括数据分析、报表生成、批量图像处理等。</li>
</ul>
</li>
<li><strong>优点</strong>：<ul>
<li>可以高效地利用计算机资源，减少用户等待时间。</li>
<li>可以自动化执行，无需用户交互，提高了系统的整体效率。</li>
</ul>
</li>
</ul>
</blockquote>
</li>
<li><p>终端型作业</p>
<blockquote>
<ul>
<li><strong>特点</strong>：<ul>
<li>交互式作业是需要用户实时交互的任务，用户可以在程序执行过程中输入命令、进行数据输入或查看输出。</li>
<li>这些作业通常需要较短的响应时间，以满足用户实时操作的要求。</li>
</ul>
</li>
<li><strong>应用场景</strong>：<ul>
<li>交互式作业适用于需要用户实时交互和反馈的任务，如命令行界面、图形用户界面、文本编辑器等。</li>
<li>典型的交互式应用包括操作系统的命令行界面、办公软件、图像编辑器等。</li>
</ul>
</li>
<li><strong>优点</strong>：<ul>
<li>提供了实时的用户交互体验，可以根据用户的需求动态调整程序行为。</li>
<li>可以与用户直接交互，满足用户个性化的需求。</li>
</ul>
</li>
</ul>
</blockquote>
</li>
</ol>
<h4 id="作业控制块（Job-Control-Block，JCB）"><a href="#作业控制块（Job-Control-Block，JCB）" class="headerlink" title="作业控制块（Job Control Block，JCB）"></a>作业控制块（Job Control Block，JCB）</h4><p>JCB是作业在系统中存在的标志</p>
<ul>
<li>作业步：每个作业都要经过若干个相对独立而又相互关联的顺序加工步骤才能得到结果，每一个步骤称为一个作业步。</li>
<li>作业流：若干个作业进入系统后被依次存放在外存上，形成了输入的作业流。</li>
<li>作业的状态：一个作业进入系统到运行结束，一般需要经历收容、运行、完成三个阶段，与之相对应的是作业的三种状态（批处理作业）： <ul>
<li>后备状态 </li>
<li>运行状态 </li>
<li>完成状态</li>
</ul>
</li>
</ul>
<h4 id="作业和进程的关系"><a href="#作业和进程的关系" class="headerlink" title="作业和进程的关系"></a>作业和进程的关系</h4><p>&#x3D;&#x3D;作业是任务实体，进程是完成任务的执行实体&#x3D;&#x3D;</p>
<p>&#x3D;&#x3D;作业概念更多地用在批处理操作系统，而进程则可以用在各种多道程序设计系统。&#x3D;&#x3D;</p>
<h2 id="处理机调度的层次"><a href="#处理机调度的层次" class="headerlink" title="处理机调度的层次"></a>处理机调度的层次</h2><h3 id="低级调度（进程调度（Process-Scheduling））"><a href="#低级调度（进程调度（Process-Scheduling））" class="headerlink" title="低级调度（进程调度（Process Scheduling））"></a>低级调度（进程调度（Process Scheduling））</h3><p>低级调度概念</p>
<p>进程调度是处理机调度的最低层次，负责决定哪个<strong>进程</strong>将获得 CPU 的使用权。</p>
<h4 id="低级调度特征"><a href="#低级调度特征" class="headerlink" title="低级调度特征"></a>低级调度特征</h4><ul>
<li>主要任务是按照某种策略和方法选取一个处于就绪状态的进程，将处理机分配给它</li>
<li>低级调度的时间尺度通常是毫秒级的。由于低级调度算法的频繁使用，要求在实现时做到高效</li>
<li>常见的低级调度有非抢占式和抢占式两种</li>
</ul>
<blockquote>
<ul>
<li>**非抢占方式(Non-preemptive)**把处理机分配给某进程后，便让其一直执行，直到该进程完成或发生某事件而被阻塞时，才把处理机分配给其它进程，不允许其他进程抢占已经分配出去的处理机。</li>
</ul>
<blockquote>
<p>**优点:**实现简单、系统开销小，适用于大多数批处理系统环境；</p>
<p>**缺点:**难以满足紧急任务的要求，不适用于实时、分时系统要求</p>
<p><strong>引起进程调度的因素</strong>：</p>
<ol>
<li>正在执行的进程执行完毕，或因发生某事件而不能再继续执行</li>
<li>执行中的进程因提出I&#x2F;O请求而暂停执行</li>
<li>在进程通信或同步过程中执行了某种原语操作，如Block、Wakeup原语</li>
</ol>
</blockquote>
<ul>
<li>**抢占方式(Preemptive)**允许调度程序根据某个原则，去停止某个正在执行的进程，将处理机重新分配给另一个进程。</li>
</ul>
<blockquote>
<p>**优点:**适于时间要求严格的实时系统</p>
<p>**缺点:**调度算法复杂，系统开销大</p>
<p><strong>抢占式调度主要有以下原则：</strong></p>
<ol>
<li>优先权原则：允许高优先权的新到进程抢占当前进程的处理机</li>
<li>短作业(进程)优先原则：允许执行时间短的新到进程抢占当前进程的处理机 </li>
<li>时间片原则：时间片用完后停止执行，重新进行调度，适用于分时系统</li>
</ol>
</blockquote>
</blockquote>
<h3 id="中级调度（Medium-term-Scheduling）"><a href="#中级调度（Medium-term-Scheduling）" class="headerlink" title="中级调度（Medium-term Scheduling）"></a>中级调度（Medium-term Scheduling）</h3><h4 id="目的"><a href="#目的" class="headerlink" title="目的"></a>目的</h4><p>​	为了提高内存利用率和系统吞吐量。使那些暂时不能运行的进程不再占用宝贵的内存资源，而将它们调至外存上去等待。</p>
<h4 id="任务"><a href="#任务" class="headerlink" title="任务"></a>任务</h4><p>​	按照给定的原则和策略，将处于外存对换区中重要的又具备运行条件的就绪进程调入内存，或将处于内存就绪状态或内存阻塞状态的进程交换到外存对换区。</p>
<h3 id="高级调度（作业调度（Job-Scheduling）"><a href="#高级调度（作业调度（Job-Scheduling）" class="headerlink" title="高级调度（作业调度（Job Scheduling）"></a>高级调度（作业调度（Job Scheduling）</h3><h4 id="定义-1"><a href="#定义-1" class="headerlink" title="定义"></a>定义</h4><p>作业调度是处理机调度的最高层次，负责从外存中选择作业并将其调入内存，以便进一步执行。</p>
<h4 id="目的-1"><a href="#目的-1" class="headerlink" title="目的"></a>目的</h4><ol>
<li>最大化系统的吞吐量和效率，即尽可能地保持 CPU 处于忙碌状态，</li>
<li>同时避免资源的空闲浪费。</li>
</ol>
<h4 id="主要任务"><a href="#主要任务" class="headerlink" title="主要任务"></a>主要任务</h4><p>​	按一定的原则对外存上处于后备状态的作业进行选择，给选中的作业分配内存、输入&#x2F;输出设备等必要的资源，并建立相应的进程，放入就绪队列，以使该作业的进程获得竞争处理机的权利</p>
<h4 id=""><a href="#" class="headerlink" title=""></a></h4><h2 id="进程调度的时机"><a href="#进程调度的时机" class="headerlink" title="进程调度的时机"></a>进程调度的时机</h2><ol>
<li>当一个进程运行完毕或由于某种错误而终止运行</li>
<li>当一个进程在运行中处于等待状态（等待I&#x2F;O）</li>
<li>分时系统中时间片到（就绪）</li>
<li>可抢占下，当有一个优先级更高的进程就绪  例如：新创建一个进程，或一个阻塞进程变成就绪</li>
<li>在进程通信中，执行中的进程执行了某种原语操作（P操作，阻塞原语）</li>
</ol>
<h2 id="进程的切换"><a href="#进程的切换" class="headerlink" title="进程的切换"></a>进程的切换</h2><p>只要OS取得对CPU的控制，进程切换就可能发生: </p>
<ol>
<li>超级用户调用来自程序的显式请求 (如：打开文件)，该进程通常会被阻塞 </li>
<li>陷阱最末（新）一条指令导致出错，会引起进程移至退出状态 </li>
<li>中断 外部因素影响当前指令的执行，控制被转移至IH（中断处理程序）</li>
</ol>
<h2 id="调度队列模型"><a href="#调度队列模型" class="headerlink" title="调度队列模型"></a>调度队列模型</h2><h3 id="分类-1"><a href="#分类-1" class="headerlink" title="分类"></a>分类</h3><ol>
<li>仅有进程调度的调度队列模型</li>
<li>具有高级和低级调度的调度队列模型</li>
<li>同时具有三级调度的调度队列模型</li>
</ol>
<h3 id="仅有进程调度的调度队列模型"><a href="#仅有进程调度的调度队列模型" class="headerlink" title="仅有进程调度的调度队列模型"></a>仅有进程调度的调度队列模型</h3><ul>
<li>在分时系统中，通常仅设有进程调度</li>
<li>系统把这些进程组织成一个就绪队列</li>
<li>每个进程在执行时，可能有以下几种情况：进<ul>
<li>程获得CPU正在执行</li>
<li>任务在给定时间片内已完成，释放处理机后为完成状态</li>
<li>任务在时间片内未完成，进入就绪队列末尾</li>
<li>在执行期间因某事件而阻塞</li>
</ul>
</li>
</ul>
<h3 id="具有高级和低级调度的调度队列模型"><a href="#具有高级和低级调度的调度队列模型" class="headerlink" title="具有高级和低级调度的调度队列模型"></a>具有高级和低级调度的调度队列模型</h3><p>在批处理系统中，不仅需要进程调度，而且还要有作业调度</p>
<ul>
<li>就绪队列的形式在批处理系统中，常用高优先权队列。进程进入就绪队列时，按优先权高低插入相应位置，调度程序总是把处理机分配给就绪队列首进程</li>
<li>设置多个阻塞队列根据事件的不同设置多个队列提高效率</li>
</ul>
<h3 id="同时具有三级调度的调度队列模型"><a href="#同时具有三级调度的调度队列模型" class="headerlink" title="同时具有三级调度的调度队列模型"></a>同时具有三级调度的调度队列模型</h3><p>这种模型一般包括以下三个调度队列：</p>
<h4 id="1-高优先级队列（High-Priority-Queue）："><a href="#1-高优先级队列（High-Priority-Queue）：" class="headerlink" title="1. 高优先级队列（High Priority Queue）："></a>1. 高优先级队列（High Priority Queue）：</h4><ul>
<li><strong>特点</strong>：<ul>
<li>这个队列用于存放优先级较高的进程，例如实时进程或紧急任务等。</li>
<li>这些进程通常要求立即执行，因此会被优先调度。</li>
</ul>
</li>
<li><strong>调度策略</strong>：<ul>
<li>可能采用最高响应比优先（HRRN）或优先级调度等策略。</li>
</ul>
</li>
</ul>
<h4 id="2-中优先级队列（Medium-Priority-Queue）："><a href="#2-中优先级队列（Medium-Priority-Queue）：" class="headerlink" title="2. 中优先级队列（Medium Priority Queue）："></a>2. 中优先级队列（Medium Priority Queue）：</h4><ul>
<li><strong>特点</strong>：<ul>
<li>这个队列用于存放普通优先级的进程，即不属于高优先级或低优先级的进程。</li>
<li>这些进程的执行不是很紧急，但也不能被忽视。</li>
</ul>
</li>
<li><strong>调度策略</strong>：<ul>
<li>可能采用轮转调度（Round Robin）等策略，以平衡各个进程之间的执行时间。</li>
</ul>
</li>
</ul>
<h4 id="3-低优先级队列（Low-Priority-Queue）："><a href="#3-低优先级队列（Low-Priority-Queue）：" class="headerlink" title="3. 低优先级队列（Low Priority Queue）："></a>3. 低优先级队列（Low Priority Queue）：</h4><ul>
<li><strong>特点</strong>：<ul>
<li>这个队列用于存放优先级较低的进程，例如后台任务或者长时间运行的任务。</li>
<li>这些进程的执行不紧急，通常在其他任务执行完毕后才会被调度执行。</li>
</ul>
</li>
<li><strong>调度策略</strong>：<ul>
<li>可能采用先来先服务（FCFS）等策略，确保这些任务不会长时间被阻塞。</li>
</ul>
</li>
</ul>
<h4 id="调度过程："><a href="#调度过程：" class="headerlink" title="调度过程："></a>调度过程：</h4><ul>
<li>当系统空闲时，调度器会首先从高优先级队列中选择一个进程执行。</li>
<li>如果高优先级队列为空，调度器则会从中优先级队列中选择进程执行。</li>
<li>当高优先级或中优先级队列中的进程执行完毕或者发生阻塞时，调度器会从低优先级队列中选择一个进程执行。</li>
<li>进程从低优先级队列中执行完毕后，如果没有更高优先级的进程需要执行，则继续选择低优先级队列中的下一个进程执行。</li>
</ul>
<h2 id="调度目标"><a href="#调度目标" class="headerlink" title="调度目标"></a>调度目标</h2><h3 id="不同类型系统的调度目标"><a href="#不同类型系统的调度目标" class="headerlink" title="不同类型系统的调度目标"></a>不同类型系统的调度目标</h3><ol>
<li><p>批处理系统</p>
<blockquote>
<p>系统吞吐率:最大化单位时间的工作量</p>
<p>周转时间:最小化任务提交到结束之间的时间</p>
<p>CPU 利用率:保持CPU始终处在繁忙工作状态</p>
</blockquote>
</li>
<li><p>交互式系统</p>
<blockquote>
<p>响应时间—快速响应需求</p>
<p>适度性—满足用户期望</p>
</blockquote>
</li>
<li><p>实时系统</p>
<blockquote>
<p>满足截止时间—避免丢失数据</p>
<p>提供性能可预测性</p>
</blockquote>
</li>
</ol>
<h3 id="不同使用模式的调度目标"><a href="#不同使用模式的调度目标" class="headerlink" title="不同使用模式的调度目标"></a>不同使用模式的调度目标</h3><ol>
<li><p>对于计算密集型程序，极大化系统吞吐量</p>
<ul>
<li>单位时间内完成尽可能多的程序</li>
</ul>
</li>
<li><p>对于I&#x2F;O密集型程序，极小化平均响应时间</p>
<p> ​	* 平均化完成每项工作的时间</p>
</li>
<li><p>对于平衡性程序，响应时间和周转时间之间的平衡</p>
<ul>
<li>各进程之间以某种平等的方式共享 CPU</li>
</ul>
</li>
</ol>
<h2 id="调度算法"><a href="#调度算法" class="headerlink" title="调度算法"></a>调度算法</h2><h3 id="先来先服务-First-Come-First-Served，FCFS"><a href="#先来先服务-First-Come-First-Served，FCFS" class="headerlink" title="先来先服务(First Come First Served，FCFS)"></a>先来先服务(First Come First Served，FCFS)</h3><p>按照作业&#x2F;进程进入系统的先后次序进行调度，先进入系统者先调度；即启动等待时间最长的作业&#x2F;进程</p>
<p>是一种最简单的调度算法，既可用于作业调度，也可用于进程调度</p>
<ul>
<li><p>周转时间：完成时间-到达时间</p>
</li>
<li><p>带权周转时间：周转时间&#x2F;服务时间</p>
</li>
</ul>
<h4 id="优缺点"><a href="#优缺点" class="headerlink" title="优缺点"></a>优缺点</h4><ol>
<li>优点<ol>
<li>有利于长作业（进程）</li>
<li>有利于CPU繁忙型作业（进程）</li>
<li>用于批处理系统</li>
</ol>
</li>
<li>缺点<ol>
<li>不利于短作业（进程）</li>
<li>不利于I&#x2F;O繁忙型作业（进程）</li>
<li>不适于分时系统</li>
</ol>
</li>
</ol>
<h3 id="短作业-进程-优先（Short-Job-Process-First，SJF-SPF）"><a href="#短作业-进程-优先（Short-Job-Process-First，SJF-SPF）" class="headerlink" title="短作业(进程)优先（Short Job\Process First，SJF\SPF）"></a>短作业(进程)优先（Short Job\Process First，SJF\SPF）</h3><p>以要求运行时间长短进行调度，即启动要求运行时间最短的作业</p>
<ul>
<li><p>短作业优先调度算法SJF，是从后备队列中选择一个或若干个估计运行时间最短的作业，将它们调入内存运行； </p>
</li>
<li><p>短进程优先调度算法SPF，则是从就绪队列中选出一估计运行时间最短的进程，将处理机分配给它，使它立即执行并一直执行到完成，或发生某事件而被阻塞放弃处理机时，再重新调度。</p>
</li>
</ul>
<h4 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h4><ol>
<li>对长作业不利。严重的是，若一长作业(进程)进入系统的后备队列(就绪队列)，由于调度程序总是优先调度那些(即使是后进来的)短作业(进程)，将导致长作业(进程)长期不被调度——饥饿</li>
<li>完全未考虑作业(进程)的紧迫程度，因而不能保证紧迫性作业(进程)会被及时处理</li>
<li>由于作业(进程)的长短只是根据用户所提供的估计执行时间而定的，而用户又可能会有意或无意地缩短其作业的估计运行时间，致使该算法不一定能真正做到短作业优先调度。</li>
</ol>
<h3 id="高优先权优先（Highest-Priority-First，HPF）"><a href="#高优先权优先（Highest-Priority-First，HPF）" class="headerlink" title="高优先权优先（Highest Priority First，HPF）"></a>高优先权优先（Highest Priority First，HPF）</h3><p>优先权调度算法的类型</p>
<ol>
<li>非抢占式优先权调度算法</li>
<li>抢占式优先权调度算法</li>
</ol>
<h4 id="非抢占式优先权调度算法"><a href="#非抢占式优先权调度算法" class="headerlink" title="非抢占式优先权调度算法"></a>非抢占式优先权调度算法</h4><p>特点：系统一旦把处理机分配给就绪队列中优先权最高的进程后，该进程便一直执行下去，直至完成，或因发生某事件使该进程放弃处理机时，系统才将处理机重新分配给另一优先权最高的进程</p>
<p>主要用于批处理系统中，也可用于某些对实时性要求不严格的实时系统中</p>
<h4 id="抢占式优先权调度算法"><a href="#抢占式优先权调度算法" class="headerlink" title="抢占式优先权调度算法"></a>抢占式优先权调度算法</h4><p>特点：把处理机分配给优先权最高的进程，但在执行期间，只要出现另一个优先权更高的进程，则进程调度程序就立即停止当前进程的执行，并将处理机分配给新到的优先权最高的进程</p>
<p>注意：只要系统中出现一个新的就绪进程，就进行优先权比较</p>
<p>该调度算法，能更好地满足紧迫作业的要求，故而常用于要求比较严格的实时系统中，以及对性能要求较高的批处理和分时系统中</p>
<h4 id="优先权的类型"><a href="#优先权的类型" class="headerlink" title="优先权的类型"></a>优先权的类型</h4><ol>
<li><p>静态优先权</p>
<blockquote>
<p>静态优先权在创建进程时确定，且在进程的整个运行期间保持不变。一般地，优先权是利用某一范围内的一个整数来表示的，例如，0～7或0～255， 又把该整数称为优先数</p>
<p>特点：系统开销小、不够精确、一般用在要求不高的系统中</p>
</blockquote>
</li>
<li><p>动态优先权</p>
</li>
</ol>
<blockquote>
<p>随进程的推进或随其等待时间的增加而改变，以获得更好的调度性能</p>
<p>具有相同优先权初值的进程，则最先进入就绪队列的进程，将因其动态优先权变得最高而优先获得处理机，此即FCFS算法</p>
<p>具有各不相同的优先权初值的就绪进程，则优先权初值低的进程，在等待了足够的时间后，其优先权便可能升为最高，从而可以获得处理机</p>
<p>当采用抢占式优先权调度算法时，如果再规定当前进程的优先权以速率b下降，则可防止一个长作业长期地垄断处理机</p>
</blockquote>
<h3 id="高响应比优先（Highest-Response-First，HRF）"><a href="#高响应比优先（Highest-Response-First，HRF）" class="headerlink" title="高响应比优先（Highest Response First，HRF）"></a>高响应比优先（Highest Response First，HRF）</h3><p>高响应比优先调度算法是FCFS和SJF的结合，克服了两种算法的缺点</p>
<p>调度策略：响应比最高的作业优先启动<br>$$<br>优先权&#x3D;\frac{等待时间+要求服务时间}{要求服务时间}<br>$$<br>又可表示为<br>$$<br>优先权&#x3D;\frac{响应时间}{要求服务时间}<br>$$</p>
<h4 id="缺点：要进行响应比计算，增加了系统开销"><a href="#缺点：要进行响应比计算，增加了系统开销" class="headerlink" title="缺点：要进行响应比计算，增加了系统开销"></a>缺点：要进行响应比计算，增加了系统开销</h4><h3 id="基于时间片的轮转调度算法-Round-Robin，RR"><a href="#基于时间片的轮转调度算法-Round-Robin，RR" class="headerlink" title="基于时间片的轮转调度算法(Round Robin，RR)"></a>基于时间片的轮转调度算法(Round Robin，RR)</h3><p>系统将所有的就绪进程按先来先服务的原则排成一个队列，每次调度时，把CPU分配给队首进程，并令其执行一个时间片；当执行的时间片用完时，由一个计时器发出时钟中断请求，调度程序便停止该进程的执行，并将其放就绪队列尾；然后，再把处理机分配给就绪队列中新的队首；</p>
<p>时间片的大小从几ms到几百ms。</p>
<h4 id="优缺点-1"><a href="#优缺点-1" class="headerlink" title="优缺点"></a>优缺点</h4><ul>
<li>优点：公平。保证就绪队列中所有进程在一给定的时间内，均能获得一时间片的处理机执行时间</li>
<li>缺点：紧迫任务响应慢。UNIX中采用：时间片+优先权</li>
<li>时间片轮转策略特别适合于分时系统中使用</li>
</ul>
<h4 id="时间片长度的确定"><a href="#时间片长度的确定" class="headerlink" title="时间片长度的确定"></a>时间片长度的确定</h4><ul>
<li>过长：退化为FCFS 算法，进程在一个时间片内都执行完，响应时间长。  </li>
<li>过短：用户的一次请求需要多个时间片才能处理完，上下文切换次数增加，系统开销大。</li>
<li>最佳的时间片量值应能使分时用户得到好的响应时间</li>
</ul>
<h3 id="多级反馈队列调度算法"><a href="#多级反馈队列调度算法" class="headerlink" title="多级反馈队列调度算法"></a>多级反馈队列调度算法</h3><h4 id="概念-2"><a href="#概念-2" class="headerlink" title="概念"></a>概念</h4><p>设置多个就绪队列，并为各个队列赋予不同的优先级</p>
<p>第一个队列的优先级最高，第二个队列次之，其余各队列的优先权逐个降低</p>
<p>该算法赋予各个队列中进程执行时间片的大小也各不相同，在优先权愈高的队列中，为每个进程所规定的执行时间片就愈小。例如，第二个队列的时间片要比第一个队列的时间片长一倍，……，第i+1个队列的时间片要比第i个队列的时间片长一倍</p>
<ul>
<li>一个进程永久分到一个队列，每个队列有自己的调度算法</li>
<li>前台的就绪队列是交互性作业的进程，采用时间片轮转。</li>
<li>后台的就绪队列是批处理作业的进程，采用优先权或短作业优先算法。</li>
<li><strong>调度方式</strong>有两种： 优先调度前台，若前台无可运行进程，才调度后台 分配占用CPU的时间比例，如：前台80%，后台20%</li>
</ul>
<h4 id="性能"><a href="#性能" class="headerlink" title="性能"></a>性能</h4><ul>
<li>终端型作业用户终端型作业用户所提交的作业多属于交互型作业，通常较小，系统只要能使这些作业在第一队列所规定的时间片内完成即可 </li>
<li>短批处理作业用户若在第1队列中执行一个时间片即可完成，便可获得与终端型作业一样的响应时间如在第一个队列中不能完成，只需在第2、3队列中各执行一个时间片 </li>
<li>长批处理作业用户长作业将依次在第1，2，3…，n队列中执行，最终按轮转方式运行</li>
</ul>
<h3 id="其他调度算法"><a href="#其他调度算法" class="headerlink" title="其他调度算法"></a>其他调度算法</h3><ol>
<li><strong>保证调度</strong>保证每个进程享用CPU的时间完全一样，即如果系统中共有n个进程，保证每个进程使用 1&#x2F;n  CPU 时间（需要计算CPU获得比率）。</li>
<li>彩票调度概率调度算法，发布一定数量的彩票给相应的进程，调度器每次随机抽取一张，彩票数量多的进程获得CPU的概率就大。</li>
<li><strong>用户公平调度</strong>按照每个用户而不是每个进程来公平分配CPU。如果一个用户的进程数量多，则其所拥有的每个进程获得CPU时间将短。</li>
<li><strong>混合调度算法</strong> (Multiple queue)将优先级分类各类内部采用轮转调度动态调整进程的优先级类别（否则产生饥饿）</li>
</ol>
<h3 id="实时调度"><a href="#实时调度" class="headerlink" title="实时调度"></a>实时调度</h3><h4 id="基本条件"><a href="#基本条件" class="headerlink" title="基本条件"></a>基本条件</h4><ol>
<li>提供必要的调度信息<ul>
<li>就绪时间</li>
<li>开始&#x2F;完成截止时间；</li>
<li>处理时间；</li>
<li>资源要求；</li>
<li>优先级；</li>
</ul>
</li>
<li>系统处理能力强</li>
<li>采用抢占调度方式</li>
<li>具有快速切换机制</li>
</ol>
<h4 id="最早截止时间优先算法（EDF）"><a href="#最早截止时间优先算法（EDF）" class="headerlink" title="最早截止时间优先算法（EDF）"></a>最早截止时间优先算法（EDF）</h4><p>最早截止时间优先算法（EDF）根据任务的截止时间来确定任务的优先级</p>
<p>总是运行最早结束的作业</p>
<p>如果一个新到达的进程比正在运行的进程截止期靠前非抢占：非周期实时任务抢占：周期实时任务</p>
<h4 id="最低松弛度优先LLF算法"><a href="#最低松弛度优先LLF算法" class="headerlink" title="最低松弛度优先LLF算法"></a>最低松弛度优先LLF算法</h4><p>松弛度：若A进程需在200ms时完成，其本身运行需要100ms，当前时刻是10ms，则A的松弛度为：200－100－10＝90松弛度&#x3D;截止时间-要求服务时间-当前时刻主要用于可抢占的调度方式中例：两个周期性实时任务A、B，任务A每20ms执行一次，执行时间是10ms；任务B每50ms执行一次，执行时间是25ms。</p>
<h1 id="5-存储管理"><a href="#5-存储管理" class="headerlink" title="5. *存储管理"></a>5. *存储管理</h1><h2 id="存储器的层次结构"><a href="#存储器的层次结构" class="headerlink" title="存储器的层次结构"></a>存储器的层次结构</h2><ul>
<li>内存架构<ol>
<li>CPU寄存器: 低容量、高速度、高价格</li>
<li>主存: 中容量、中速度、中价格</li>
<li>辅存: 大容量、低速度、低成本</li>
</ol>
</li>
</ul>
<h3 id="1-处理器寄存器-register"><a href="#1-处理器寄存器-register" class="headerlink" title="1. 处理器寄存器 register"></a>1. 处理器寄存器 register</h3><p>​	用于存储处理器中与控制流和数据流相关的信息。访问速度最快，价格十分昂贵，存储空间非常有限，只能存储少量信息。</p>
<h3 id="2-高速缓存cache"><a href="#2-高速缓存cache" class="headerlink" title="2. 高速缓存cache"></a>2. 高速缓存cache</h3><p>​	为了解决处理器与内存之间速度不匹配而引入的存储空间。其存储容量比处理器寄存器大，访问速度比内存快。如果高速缓存的访问命中率高，则处理器从整体上以接近高速缓存的速度访问存储器，明显快于访问内存。</p>
<h3 id="3-内存-main-memory"><a href="#3-内存-main-memory" class="headerlink" title="3. 内存  main memory"></a>3. 内存  main memory</h3><p>​	也称为主存。内存中存放有处理器执行时所需要的代码和数据。内存空间远远大于高速缓存空间。一个计算机系统中所配置内存的大小是衡量计算机系统性能的一个非常重要的指标。</p>
<h3 id="4-外存-secondary-memory"><a href="#4-外存-secondary-memory" class="headerlink" title="4. 外存 secondary memory"></a>4. 外存 secondary memory</h3><p>​	外存是计算机系统中最大规模的存储器，存储有计算机系统所需要的各种软件资源。包括各种磁盘、磁带、光盘以及其他移动存储设备。磁盘中的硬盘是计算机系统中大量联机信息的保存者。在存储器管理和设备管理中，硬盘又被作为内存的补充，实现虚拟存储器和虚拟设备的管理</p>
<h2 id="程序的装入与链接"><a href="#程序的装入与链接" class="headerlink" title="程序的装入与链接"></a>程序的装入与链接</h2><p>​	用户用高级语言编写的源程序，需要经过编译、链接和装入之后，才能被处理器运行。</p>
<ul>
<li><strong>编译</strong>将用户用高级语言编写的源程序转换为目标模块；</li>
<li><strong>链接</strong>将用户程序需要的所有目标模块链接在一起，形成一个可执行模块，即装入模块；</li>
<li><strong>装入</strong>将装入模块放入内存</li>
</ul>
<h3 id="地址"><a href="#地址" class="headerlink" title="地址"></a>地址</h3><p>​	在程序装入内存前，装入模块中给出的程序地址为程序的逻辑地址或相对地址。一个用户作业的所有装入模块的逻辑地址集合称为该作业的逻辑地址空间。</p>
<p>​	当用户作业被装入内存后，其物理地址由用户作业所对应的进程物理地址体现，进程物理地址的总体构成了用户程序实际运行的物理地址空间。</p>
<p>​	为了保证用户作业的正确运行，必须把用户作业的逻辑地址转换为物理地址，这一工作由操作系统的存储管理单元（MMU）在作业装入内存的过程中完成，称为<strong>地址变换</strong>或<strong>重定位</strong>。</p>
<h4 id="逻辑地址"><a href="#逻辑地址" class="headerlink" title="逻辑地址"></a>逻辑地址</h4><p>​	逻辑地址是指由程序产生的与段相关的偏移地址部分。由CPU所生成的地址。逻辑地址是内部和编程使用的、并不唯一。也称为虚拟地址。如C语言中的&amp;操作（取地址），得到的是相对于当前进程数据段的地址（偏移地址），与物理地址无关。</p>
<h4 id="物理地址"><a href="#物理地址" class="headerlink" title="物理地址"></a>物理地址</h4><p>​	在操作系统中，存储器管理功能负责为进程分配和回收内存，实现内存空间在时间和空间上的复用，在某一进程结束或撤销后，进程的内存空间可以由其它进程覆盖；		</p>
<p>​	从内部结构上看，计算机存储器由大量的字节阵列或字阵列组成，每个字节或字都有自己的地址，要访问存储器中的信息必须知道信息的地址。计算机的内存也称为物理内存，其地址从最低开始到最高上界，按照顺序编号，是一个一维线性存储空间。</p>
<p>​	内存中的地址称为物理地址。  物理地址就是物理存储器实际的寻址范围。</p>
<h4 id="地址空间"><a href="#地址空间" class="headerlink" title="地址空间"></a>地址空间</h4><p>​	地址空间是一个进程可用于寻址内存的一套地址集合，并且这个地址空间独立于其他进程的地址空间（除了在一些特殊情况下进程需要共享它们的地址空间外）。      </p>
<p>​	当内存空间占满时，通过外存与内存的对换实现内存空间的虚拟扩充（虚拟空间）。存储器管理在提供多进程共享内存的同时，还通过可靠的隔离机制阻止一个进程读写另一个进程的内存，实现内存地址空间的保护。</p>
<h3 id="程序链接"><a href="#程序链接" class="headerlink" title="程序链接"></a>程序链接</h3><p>​	链接是将用户程序所需要的所有目标模块链接在一起的过程。</p>
<ol>
<li><p>静态链接</p>
<blockquote>
<p>​	静态链接指链接过程在程序装入内存前完成并形成整个程序的逻辑地址空间。</p>
<p>​	通常，由编译产生的所有目标模块的起始地址可能都是从0开始，每个模块中的程序代码地址都是相对于模块的起始地址。     例如，如果一个用户作业由3个目标模块A、B、C组成，长度分别为m、n、k，每个模块在链接前的起始地址都从0开始，</p>
<p>​	经过静态链接后，模块A、B和C被链接为一个大的模块，原来的模块B和C的起始地址根据模块A的地址进行了调整，分别为m和m + n.</p>
</blockquote>
</li>
<li><p>装入时动态链接</p>
<blockquote>
<p>​	装入时动态链接将目标模块的链接过程放在这些目标模块装入内存的过程中完成。目标模块在装入内存时，采用边装入边链接的方式。</p>
<p>​	优点：</p>
<ol>
<li>便于模块的修改和更新<ul>
<li>静态链接会使得系统每次修改或更新某个模块，都要重新完成所有模块的链接。装入时动态链接，只要模块没有装入内存，系统都可以随时修改和更新模块。</li>
</ul>
</li>
<li>便于实现目标模块的共享<ul>
<li>静态链接只要有某个目标模块被多个模块共享，会多次链接该目标模块，装入内存后，在内存中存在共享模块的多个副本。而装入时动态链接将共享模块只放一个版本在内存中，节约了内存，实现了真正的模块共享。</li>
</ul>
</li>
</ol>
</blockquote>
</li>
<li><p>运行时动态链接</p>
<blockquote>
<p>​	运行时动态链接是一种较先进的链接方式，在程序装入内存时不链接模块，将链接过程推迟到程序运行时进行。在程序运行过程中，若发现被调用的某个模块尚未装入内存，操作系统找到该模块，将其装入内存，同时链接到调用模块上。</p>
<p>​	运行时动态链接的优点除了具有装入时动态链接的优点外，还可以做到<strong>不运行的模块，不需要链接</strong>。与静态链接和装入时动态链接相比，更节约内存。静态链接和装入时动态链接都需要将程序的全部目标模块进行链接，使得某些在运行时不需要的目标模块也进行了链接，造成了内存空间的浪费。</p>
</blockquote>
</li>
</ol>
<h3 id="程序装入"><a href="#程序装入" class="headerlink" title="程序装入"></a>程序装入</h3><p>​	目标模块放入内存的过程为装入过程。</p>
<p>装入方式</p>
<ol>
<li><p>绝对装入方式、</p>
<blockquote>
<p>​	在编译前程序员写源程序的时候如果知道程序所对应的进程驻留在内存中的物理地址，则链接会按照模块在内存中的物理地址生成逻辑地址，装入程序根据装入模块中的逻辑地址将程序装入内存，这样的装入方式称为绝对装入方式。绝对装入方式下程序的逻辑地址和物理地址相同。</p>
<p>​	绝对装入方式对程序员的要求很高。程序员在编程时必须熟悉内存的使用情况，知道程序的物理地址，能够在内存中调整程序和数据的地址。</p>
<p>​	绝对装入方式适合用于实时操作系统和嵌入式操作系统，其他的操作系统很少采用。</p>
</blockquote>
</li>
<li><p>静态重定位装入方式</p>
<blockquote>
<p>​	静态重定位装入方式将程序装入内存时，<strong>系统根据内存当时的实际使用情况，将装入模块装入到内存的适当位置。</strong></p>
<p>​	“重定位”是指程序在内存中的物理地址不再是原来程序的逻辑地址，而是根据内存的情况被重新定位。  </p>
<p>​	“静态”指的是用户程序从逻辑地址到物理地址的变换过程在程序执行前完成，在执行期间不再改变。如果物理地址要发生改变，则需要进行重新装入。 </p>
<p>​	   优点：</p>
<ol>
<li><p>实现简单，从逻辑地址到物理地址变换不需要专门的硬件便能完成；</p>
</li>
<li><p>可用于多道程序环境。</p>
<p> 缺点：</p>
</li>
<li><p>程序在执行过程中不能在内存中移动。</p>
</li>
</ol>
</blockquote>
</li>
<li><p>动态重定位装入方式</p>
</li>
</ol>
<blockquote>
<p>​	动态重定位装入方式可以使程序运行时，CPU访问内存前，重新定位程序在内存中的地址，实现内存管理的灵活性，提高内存空间的利用率</p>
<p>​	优点：</p>
<ol>
<li><p>目标模块装入内存时无需任何修改，因而装入之后再搬迁也不会影响其正确执行，这对于存储器紧缩、解决碎片问题是非常有利的；</p>
</li>
<li><p>一个程序由若干个相对独立的目标模块组成时，每个目标模块各装入一个存储区域，这些存储区域可以不是顺序相邻的，只要各个模块有自己对应的定位寄存器就行。</p>
</li>
</ol>
<p>缺点：	实现过程中需要附加硬件（重定位寄存器）支持，内存管理更加复杂。</p>
</blockquote>
<hr>
<p>​	在操作系统中，存储器管理功能负责为进程分配和回收内存，实现内存空间在时间和空间上的复用，在某一进程结束或撤销后，进程的内存空间可以由其它进程覆盖</p>
<p>​	达到两个目标:</p>
<ol>
<li>地址独立：程序发出的地址应与物理主存地址无关</li>
<li>地址保护：一个进程不能访问另一个进程的地址空间</li>
</ol>
<h2 id="连续分配方式"><a href="#连续分配方式" class="headerlink" title="连续分配方式"></a>连续分配方式</h2><p>​	为一个用户程序分配一个连续的内存空间。</p>
<ol>
<li><p>单一连续分配</p>
<ul>
<li><p>应用于单道编程</p>
</li>
<li><blockquote>
<p>最简单的存储管理方式</p>
<p>内存分为：系统区和用户区</p>
<p>缺点：</p>
<ol>
<li>将整个程序加载到内存空间</li>
<li>浪费资源 (CPU 和 Memory)</li>
</ol>
</blockquote>
</li>
</ul>
</li>
<li><p>固定分区分配</p>
<ul>
<li><p>应用于多道编程</p>
</li>
<li><blockquote>
<p>多道编程中最简单的内存管理方式</p>
<ol>
<li><p>将内存划分为几个固定的区域，可同时装入多个作业&#x2F;任务</p>
</li>
<li><p>程序被加载到固定的分区</p>
</li>
</ol>
<p>将分区按大小排队，并将其地址、分配标识做记录</p>
<p>与单一连续分配方式比较，固定分区分配方式使得系统的资源利用率和吞吐量有一定程度的提高。</p>
<p>缺点：</p>
<ol>
<li>内存利用率不高      由于分区大小固定，装入进程的大小受到限制。超过最大分区的进程，只有采用覆盖技术才能在内存中运行，降低了系统的运行效率；较小的进程，造成内存“碎片”（内碎片、内零头），降低了内存的利用率。</li>
<li>划分分区大小困难      划分分区的大小对系统性能有很大影响，合理划分分区的大小很困难。</li>
<li>需要预先知道进程大小      固定分区分配方式适合进程大小已知的情况，如果进程大小不知或进程大小变化很大，则采用固定分区分配不是特别适合。</li>
</ol>
</blockquote>
</li>
</ul>
</li>
<li><p>可变分区分配</p>
<ul>
<li><p>应用于多道编程</p>
<ul>
<li><blockquote>
<p>​	根据作业的实际需要，动态地为之分配内存空间不在系统初始化时进行分区划分，而在每个用户作业装入内存时，根据作业的大小和内存的使用情况，动态划分分区并分配。克服了固定分区分配的内存利用率低的问题，更适合多道程序环境。</p>
<p>​	为了完成有效分配和回收分区，需要构建对分区信息进行描述的数据结构，并在已知分区数据结构的基础上完成分区分配算法与回收方法。</p>
<p>​	空闲分区表：包括分区序号、分区始址、分区大小等</p>
<p>​	空闲分区链：空闲分区链是空闲分区最常用的组织形式，操作系统将所有的空闲分区通过前向和后向指针串在一起组成双向空闲分区链。</p>
</blockquote>
</li>
</ul>
</li>
</ul>
</li>
<li><p>覆盖与交换（动态重定位分区分配）</p>
</li>
</ol>
<h4 id="可变分区分配：基于顺序搜索"><a href="#可变分区分配：基于顺序搜索" class="headerlink" title="可变分区分配：基于顺序搜索"></a>可变分区分配：基于顺序搜索</h4><h5 id="1-首次适应法first-fit，FF"><a href="#1-首次适应法first-fit，FF" class="headerlink" title="1. 首次适应法first fit，FF"></a>1. 首次适应法first fit，FF</h5><p>首先将空闲分区按照地址递增的顺序组织成空闲分区链。为作业分配内存时，系统根据作业大小，从空闲分区链的第一个空闲分区开始查找，只要找到第一个满足作业大小的空闲分区，从该空闲分区中分割一部分分配给作业，另一部分仍作为空闲分区；如果空闲分区链全部查找完也不能满足作业要求，则系统不能为作业分配内存。</p>
<p>缺点：</p>
<ol>
<li>系统每次都是从链首开始查找空闲分区，低地址段的大空闲分区被分配或被分割，剩下了小空闲分区或空闲分“碎片”；</li>
<li>系统每次从链首开始查找空闲分区，增加查找开销。</li>
</ol>
<h5 id="2-循环首次适应算法next-fit，NF"><a href="#2-循环首次适应算法next-fit，NF" class="headerlink" title="2. 循环首次适应算法next fit，NF"></a>2. 循环首次适应算法next fit，NF</h5><p>​	将空闲分区按照地址递增的顺序组织成空闲分区链。为作业分配内存时，系统不是从空闲分区链的第一个空闲分区开始查找，而是从空闲分区链上，上次为作业分配分区后的位置开始查找，找到第一个满足作业大小的空闲分区，分割并分配该空闲分区。如果找到空闲分区链的链尾还没有找到，系统可以再从链首开始查找。</p>
<p>优点：克服了首次适应算法的缺点，使得空闲分区的分布更加均匀，查找空闲分区所需要的时间更短，</p>
<p>缺点：空闲分区链中的小分区或“碎片”问题仍然不能解决</p>
<h5 id="3-最佳适应算法best-fit，BF"><a href="#3-最佳适应算法best-fit，BF" class="headerlink" title="3. 最佳适应算法best fit，BF"></a>3. 最佳适应算法best fit，BF</h5><p>​	空闲分区链需要按照分区大小递增的顺序组织扫描整个空闲分区链，从中挑选出一个满足进程要求的最小分区进行分配，因此，被分配的空闲分区是大小最适合的分区。避免分割大空闲分区，使得内存“碎片”更小。</p>
<p>​	该算法克服了FF算法和NF算法的缺点，是一种较优的分区分配算法。该算法由于找到的空闲分区是最小能够满足要求的分区，剩余的空闲分区很小，这一部分很小的“碎片”，难以再次利用。</p>
<h5 id="4-最坏适应算法worst-fit，WF"><a href="#4-最坏适应算法worst-fit，WF" class="headerlink" title="4. 最坏适应算法worst fit，WF"></a>4. 最坏适应算法worst fit，WF</h5><p>​	空闲分区链需要按照分区大小递减的顺序组织，</p>
<p>每次从链首最大的分区开始分配，挑选满足作业要求的最大分区，使得分配的空闲分区分配给作业后剩下的部分比较大，能够再作为空闲分区进行分配。减少了内存中“碎片”的大小和个数。</p>
<p>优点：查找效率高</p>
<p>缺点：该算法存在的问题是最后会导致系统缺乏较大的空闲分区。</p>
<h4 id="可变分区分配：基于索引搜索"><a href="#可变分区分配：基于索引搜索" class="headerlink" title="可变分区分配：基于索引搜索"></a>可变分区分配：基于索引搜索</h4><h5 id="5-快速适应算法quick-fit，QF"><a href="#5-快速适应算法quick-fit，QF" class="headerlink" title="5. 快速适应算法quick fit，QF"></a>5. 快速适应算法quick fit，QF</h5><p>​	将空闲分区根据进程常用空间大小进行分类，并单独设立空闲分区链。</p>
<p>​	内存中设立一张管理索引表，每一个表项对应了空闲分区类型</p>
<p>​	空闲分区管理索引表有每个空闲分区链的长度范围和开始指针。为作业分配内存时，首先根据作业大小查找空闲分区管理索引表，得到空闲分区链的起始指针，然后再从相应的空闲分区链中为作业分配一个空闲分区</p>
<p>​	该算法的<strong>优点</strong>是能够快速得到空闲分区，查找效率高，不会分割空闲分区，并能够保留大的空闲分区，对大的作业也不会产生内存“碎片”。该算法的<strong>缺点</strong>是回收分区较困难，算法复杂，系统的开销较大。</p>
<h4 id="可变分区分配与回收"><a href="#可变分区分配与回收" class="headerlink" title="可变分区分配与回收"></a>可变分区分配与回收</h4><p>​	分区分配：分区分配操作首先根据分配算法从空闲分区表中查找所需大小的分区，如果用户进程的大小为u.size，空闲分区的大小为m.size，则m.size与u.size之差为分配后的剩余部分size，首次适应法和循环首次适应法只需要该差值大于0即可，最佳适应法需要该差值为最小，最差适应法需要该差值为最大。如果能够分配分区，则分区分配成功后会将分配区的首址返回给分配过程的调用者。</p>
<p>​	分区回收当作业完成时会释放内存，系统需要回收为作业分配的内存，回收的内存需要进入空闲分区链中才能被再次分配。根据回收区的首址，采取不同的回收方法。</p>
<ol>
<li>上邻空闲区：合并，修改大小</li>
<li>下邻空闲区：合并，修改大小、首址</li>
<li>上、下邻空闲区：合并，修改大小</li>
<li>不邻接：则建立一新表项，插入空闲链的适当位置。</li>
</ol>
<h4 id="动态可重定位分区分配"><a href="#动态可重定位分区分配" class="headerlink" title="动态可重定位分区分配"></a>动态可重定位分区分配</h4><p>​	紧凑&#x2F;拼接&#x2F;紧缩 compaction通过作业移动将原来分散的小分区拼接成一个大分区，拼接时要耗费较多的时间。作业的移动需重定位。只有重定位是动态的时候，才有可能进行紧缩，紧缩在执行时期进行I&#x2F;O problem1. Latch job in memory while it is involved in I&#x2F;O.（当I&#x2F;O的时候，把作业锁定在内存中。）2. Do I&#x2F;O only into OS buffers.（只在操作系统的缓冲区进行I&#x2F;O。）</p>
<h4 id="交换-对换（swapping）"><a href="#交换-对换（swapping）" class="headerlink" title="交换&#x2F;对换（swapping）"></a>交换&#x2F;对换（swapping）</h4><p>​	把内存中暂时不能运行的进程或者暂时不用的程序和数据调出到外存上，以便腾出足够的内存空间，再把已具备运行条件的进程或进程所需要的程序和数据调入内存。</p>
<pre><code>1. 是提高内存利用率的有效措施
</code></pre>
<p>对换类型：</p>
<ol>
<li>整体对换（中级调度）：以整个进程为单位，也称“进程对换”，解决内存紧张</li>
<li>部分对换（分页&#x2F;分段对换）：以页或段为单位，也称页面对换&#x2F;分段对换：提供虚存支持。</li>
</ol>
<p>为实现进程对换，系统须实现三方面功能：</p>
<ol>
<li><p>对换空间的管理</p>
<blockquote>
<p>外存分为：文件区和对换区    </p>
<p>文件区侧重存储空间利用率，对换区侧重于换入换出速度。</p>
<p>因此，文件区一般采用离散分配方式，对换区一般采用连续分配方式。采用数据结构和分配回收类似于动态分区分配。</p>
</blockquote>
</li>
<li><p>进程的换出</p>
<blockquote>
<p>选择被换出进程：      </p>
<p>考虑因素：进程状态，优先级，驻留时间</p>
<p>换出过程： 对于共享段：计数减1， 是0则换出，否则不换 修改PCB</p>
</blockquote>
</li>
<li><p>进程的换入</p>
<blockquote>
<p>选择换入进程：进程就绪，优先级，换出时间等。申请内存。</p>
</blockquote>
</li>
</ol>
<p>换系统中，进程的进入和退出留下一个可用内存空间的混杂区有些区域可能太小而无法利用，外部碎片</p>
<h4 id="覆盖"><a href="#覆盖" class="headerlink" title="覆盖"></a>覆盖</h4><p>让进程比它所分配到的内存空间大，可以使用覆盖（overlay）技术。覆盖的思想是在任何时侯只在内存中保留所需的指令和数据。当需要其他指令时，将其装入到不再需要的指令所占用的内存空间。</p>
<h2 id="基本分页存储管理方式"><a href="#基本分页存储管理方式" class="headerlink" title="基本分页存储管理方式"></a>基本分页存储管理方式</h2><p>​	将物理内存分配成固定大小的块 (或页框)固定单元易于分配任何空闲物理页可以存储任何逻辑页</p>
<p>​	将逻辑地址空间分成相同大小的页（或页面）每个逻辑页可以存在物理内存中或者倒出到磁盘上</p>
<p>​	进程通过逻辑地址访问内存每个逻辑地址引用被MMU翻译成物理内存地址</p>
<p>​	页面大小页太大：页内碎片大页太小：进程页表很长，占用大量内存；换入&#x2F;换出效率低页面大小应适中，是2的幂，一般1kB~8kB</p>
<h3 id="页表"><a href="#页表" class="headerlink" title="页表"></a>页表</h3><ul>
<li>页表是分页系统中的关键组件</li>
<li>用于实现逻辑页面到物理页面的地址映射（MMU 用页表执行地址翻译）</li>
</ul>
<h3 id="地址变换机构"><a href="#地址变换机构" class="headerlink" title="地址变换机构"></a>地址变换机构</h3><ul>
<li><p>实现从逻辑地址到物理地址的转换</p>
</li>
<li><p>系统设置一个页表寄存器(page-table register, PTR)，存放页表在内存的首址和页表长度。</p>
</li>
</ul>
<h3 id="快表"><a href="#快表" class="headerlink" title="快表"></a>快表</h3><ul>
<li><p>具有并行查寻能力的特殊高速缓冲寄存器</p>
</li>
<li><p>加快了内存访问速度，缓存了从虚拟页面到物理页面的映射</p>
</li>
</ul>
<p>使用过程</p>
<blockquote>
<ol>
<li>在使用快表的情况下，当处理器给出进程的逻辑地址后，从逻辑地址中得到页号，地址变换机构查询快表，如果该页已在快表中，从快表得到物理块号；</li>
<li>如果该页不在快表中，再查询内存中的页表，得到物理块号，同时将该页信息写入快表以便以后使用；</li>
<li>如果此时快表已满，处理器需要将快表中不需要的表项换到内存页表中再写入快表。</li>
</ol>
</blockquote>
<h3 id="分页存储管理的优缺点"><a href="#分页存储管理的优缺点" class="headerlink" title="分页存储管理的优缺点"></a>分页存储管理的优缺点</h3><h4 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h4><ol>
<li>简单的内存分配 </li>
<li>可以共享许多小片地址空间</li>
<li>容易增长地址空间</li>
<li>没有外碎片，每个内碎片不超过页的大小。</li>
<li>一个程序不必连续存放。</li>
<li>便于改变程序占用空间的大小(主要指随着程序运行而动态生成的数据增多，要求地址空间相应增长，通常由系统调用完成而不是操作系统自动完成)。</li>
</ol>
<h4 id="缺点-1"><a href="#缺点-1" class="headerlink" title="缺点"></a>缺点</h4><p>页表的尺寸可能很大</p>
<ol>
<li>程序要全部装入内存。</li>
<li>采用动态地址变换机构会增加计算机的成本和降低处理机的速度。</li>
<li>各种表格要占用一定的内存空间，而且要花费一定的时间来建立和管理这些表格。 </li>
<li>存储扩充问题没有得到解决。  </li>
<li>不便于动态连接。 </li>
<li>不易实现共享（相对于段式存储管理）。</li>
</ol>
<h3 id="两级或多级页表"><a href="#两级或多级页表" class="headerlink" title="两级或多级页表"></a>两级或多级页表</h3><ul>
<li>把页表分成2个或更多个级<ul>
<li>一级页表总是驻留在内存</li>
<li>二级页表在需要的时候放入内存</li>
</ul>
</li>
</ul>
<p>一级页表存放二级页表的信息，二级页表存放三级页表的信息 最后一级页表存放的才是逻辑页面到物理页面的映射</p>
<h4 id="两级页表"><a href="#两级页表" class="headerlink" title="两级页表"></a>两级页表</h4><p>​	为了能够快速查找页表页面在内存中的物理块号，这些页表页面设计有一个地址索引表，即页目录表（外部页表）页目录表的表项为每个页表页面所在的内存物理块号和相关信息      这样，系统将页表分为了两级：一级为页目录表，二级为页表页面。页表页面中的每项是每个页面所在的页号和物理块号</p>
<p>两级页表的逻辑地址被划分为三部分：	</p>
<ol>
<li>页目录<ol>
<li>由页目录表（一级页表）在内存中的起始地址加上页目录号（即需要查找的页表某页在页目录中的编号）,得到页表某页的物理块号；</li>
</ol>
</li>
<li>页表页<ol>
<li>通过页表某页的物理块号得到页表页（二级页表中的一页），由页表页号（某页在页表页中的编号）查询该页表页项（二级页表中的一页），得到对应的物理块号；</li>
</ol>
</li>
<li>页表页内<ol>
<li>将该物理块号加上页表页内号（页内偏移）则为所需要的物理地址。</li>
</ol>
</li>
</ol>
<h2 id="基本分段存储管理方式"><a href="#基本分段存储管理方式" class="headerlink" title="基本分段存储管理方式"></a>基本分段存储管理方式</h2><p>分段管理把一个程序按照逻辑单元分成多个程序段（逻辑分段）连续的逻辑内存空间区域，每个段定义一组逻辑信息</p>
<p>每一个段使用自己单独的虚地址空间独立的逻辑单位, 比如数据, 代码, 栈等</p>
<p>纯粹分段中整个程序占有一个虚拟地址空间</p>
<blockquote>
<p>好处：方便编程；信息共享；信息保护；动态链接；动态增长（如数据段的增长）。</p>
</blockquote>
<h2 id="虚拟存储器的基本概念"><a href="#虚拟存储器的基本概念" class="headerlink" title="虚拟存储器的基本概念"></a>虚拟存储器的基本概念</h2><p>将外存作为内存的补充，从逻辑上扩充内存</p>
<p>概念：在具有层次结构存储器的计算机系统中，采用自动实现部分装入和部分对换功能，为用户提供一个比物理内存容量大得多的，可寻址的一种“内存储器”。</p>
<h3 id="局部性原理"><a href="#局部性原理" class="headerlink" title="局部性原理"></a>局部性原理</h3><ol>
<li>程序中只有少量分支和过程调用，大部分是顺序执行的，即要执行的下一条指令紧跟在当前执行指令之后。 </li>
<li>程序往往包含若干个循环，这些是由相对较少的几个指令重复若干次组成的，在循环过程中，计算被限制在程序中一个很小的相邻部分中（如计数循环）。</li>
<li>很少会出现连续不断的过程调用序列，相反，程序中过程调用被限制在一个小的范围内，因而，一段时间内，指令引用被局限在很少几个过程中。</li>
<li>对于连续访问数组之类的数据结构，往往是对存储区域中的数据或相邻位置的数据（如动态数组）的操作。 </li>
<li>程序中有些部分是彼此互斥的，不是每次运行时都用到的，例如，出错处理程序，仅当在数据和计算中出现错误时才会用到，正常情况下，出错处理程序不放在内存，不会影响整个程序的运行。</li>
</ol>
<h3 id="虚拟存储器特征"><a href="#虚拟存储器特征" class="headerlink" title="虚拟存储器特征"></a>虚拟存储器特征</h3><ul>
<li>多次性<ul>
<li>最重要的特征   虚拟存储器在实现上需要将一个作业分多次调入内存运行。</li>
</ul>
</li>
<li>对换性   <ul>
<li>虚拟存储器允许作业在运行过程中将暂时不运行的部分换出，在需要时再换入，对换性使得作业运行所需内存更少，系统的多道度提高。</li>
</ul>
</li>
<li>虚拟性  <ul>
<li>虚拟存储器从逻辑上扩充内存容量，使得用户能够使用的内存容量远远大于实际内存容量，提高了系统运行程序的能力。</li>
</ul>
</li>
</ul>
<h3 id="虚拟地址"><a href="#虚拟地址" class="headerlink" title="虚拟地址"></a>虚拟地址</h3><p>计算机系统的可寻址范围为虚拟存储器的最大范围</p>
<h2 id="虚拟存储管理方式"><a href="#虚拟存储管理方式" class="headerlink" title="虚拟存储管理方式"></a>虚拟存储管理方式</h2><h3 id="请求分页方式"><a href="#请求分页方式" class="headerlink" title="请求分页方式"></a>请求分页方式</h3><h4 id="优点："><a href="#优点：" class="headerlink" title="优点："></a>优点：</h4><ol>
<li>作业的程序和数据可以按页分散存放在内存中，减少了移动的开销，有效地解决了碎片问题；</li>
<li>由于采用请求分页虚存管理，用户可用的内存空间大大扩展，既有利于改进内存利用率，又有利于多道程序运行。</li>
</ol>
<h4 id="缺点："><a href="#缺点：" class="headerlink" title="缺点："></a>缺点：</h4><ol>
<li>要有一定硬件支持，要进行缺页中断处理，成本增加，系统开销加大;</li>
<li>页内会出现碎片，如果页面较大，则内存的损失仍然较大。</li>
</ol>
<p>以页为单位置换</p>
<p>需求：</p>
<ol>
<li><p>硬件支持</p>
<ol>
<li>请求分页的页表机构（页表中增加用于请求分页的控制位）</li>
<li>缺页中断机构（待访问页面不在内存中，产生缺页中断）</li>
<li>地址变换机构（查询&#x2F;修改快表、页表，修改控制位，缺页中断处理）</li>
</ol>
</li>
<li><p>软件支持</p>
<ol>
<li>用于实现请求调页的软件</li>
<li>实现页面置换的软件</li>
</ol>
</li>
</ol>
<p>内存管理单元MMU（Memory Management Unit）</p>
<p>请求分页虚拟存储系统是将作业信息的副本存放在磁盘中，当作业被调度投入运行时，并不把作业的程序和数据全部装入内存，而仅仅装入即将使用的那些页面，在执行过程中访问到不在内存的页面时，再把它们动态地装入。</p>
<h4 id="页面置换算法存储管理"><a href="#页面置换算法存储管理" class="headerlink" title="页面置换算法存储管理"></a>页面置换算法存储管理</h4><ol>
<li><p>最佳置换算法</p>
<blockquote>
<p>最佳置换算法（Belady算法）选择一个不再访问或最长时间不会被访问的页面进行替换</p>
</blockquote>
</li>
<li><p>LRU (least recently used) 置换算法</p>
<blockquote>
<p>替换一个最近最久未被访问的旧页面</p>
</blockquote>
</li>
<li><p>FIFO (first in first out) 先进先出页面置换算法</p>
<blockquote>
<p>更换最早进入内存的页面（替换当前内存中存在时间最久的页面）</p>
</blockquote>
</li>
<li><p>第二次机会页面置换算法</p>
</li>
<li><p>时钟置换（clock）</p>
</li>
</ol>
<h3 id="请求分段存储管理"><a href="#请求分段存储管理" class="headerlink" title="请求分段存储管理"></a>请求分段存储管理</h3><h3 id="段页式虚拟存储管理"><a href="#段页式虚拟存储管理" class="headerlink" title="段页式虚拟存储管理"></a>段页式虚拟存储管理</h3><h1 id="6-设备管理"><a href="#6-设备管理" class="headerlink" title="6. *设备管理"></a>6. *设备管理</h1><h2 id="I-O"><a href="#I-O" class="headerlink" title="I&#x2F;O"></a>I&#x2F;O</h2><p>操作系统中负责管理输入输出设备的部分称为I&#x2F;O系统</p>
<p>I&#x2F;O系统管理的主要对象是：</p>
<ol>
<li>I&#x2F;O设备</li>
<li>相应的设备控制器</li>
<li>I&#x2F;O操作有关的软硬件</li>
</ol>
<p>目的：</p>
<ol>
<li>完成用户提出的I&#x2F;O请求</li>
<li>提高I&#x2F;O速率</li>
<li>提高设备的利用率</li>
<li>为更高层的进程方便地使用这些设备提供手段。</li>
</ol>
<h3 id="I-O-设备"><a href="#I-O-设备" class="headerlink" title="I&#x2F;O 设备"></a>I&#x2F;O 设备</h3><h4 id="分类-2"><a href="#分类-2" class="headerlink" title="分类"></a>分类</h4><ol>
<li>按设备使用特性分类：<ol>
<li>存储设备，外存或辅助存储器</li>
<li>输入输出设备，包括输入设备、输出设备、交互式设备</li>
</ol>
</li>
<li>按信息交换单位分类:<ol>
<li>块设备，以数据块为单位存储和传输数据，数据块可寻址，	如磁盘（DMA方式）</li>
<li>字符设备，以字符为单位存放和传输数据，字符是不可寻址的，如交互式终端，打印机等（中断驱动方式）</li>
</ol>
</li>
<li>按设备的共享属性分类<ol>
<li>独占设备，即临界资源</li>
<li>共享设备，可寻址和可随机访问的设备，如磁盘</li>
<li>虚拟设备，通过虚拟技术把一台独占设备变换为若干台逻辑设备（spooling技术）</li>
</ol>
</li>
<li>按从属关系分类<ol>
<li>系统设备：计算机系统标准设备</li>
<li>用户设备：用户自行安装配置后由OS统一管理的设备</li>
</ol>
</li>
<li>按传输速率分类：<ol>
<li>低速设备：如键盘、鼠标中速设备：如打印机</li>
<li>高速设备：如磁带、磁盘、光盘</li>
</ol>
</li>
</ol>
<h3 id="设备控制器"><a href="#设备控制器" class="headerlink" title="设备控制器"></a>设备控制器</h3><p>设备控制器是计算机中的一个实体（IO设备的电子部分）</p>
<ol>
<li>控制一个或多个I&#x2F;O设备</li>
<li>实现设备和计算机之间的数据交换</li>
<li>也称为适配器（adapter），是CPU和I&#x2F;O设备之间的接口</li>
<li>通常是一块印刷电路板，也叫接口卡</li>
</ol>
<h4 id="基本功能"><a href="#基本功能" class="headerlink" title="基本功能"></a>基本功能</h4><ol>
<li>接收和识别处理器命令      设备控制器具有控制（命令）寄存器和命令译码器，将处理器的命令接收到控制寄存器中并对命令进行译码。</li>
<li>数据交换      具备数据寄存器。实现处理器与设备控制器之间（数据总线）、设备控制器与设备之间的数据交换。</li>
<li>了解和报告设备的状态      设备控制器中的状态寄存器能够存储接收到的设备状态信息，并将信息上传给处理器。</li>
<li>识别设备地址      配置地址译码器。系统中的每一个设备都有一个地址,设备控制器能够识别所控制设备的地址。</li>
<li>数据缓冲      设备控制器中设置缓冲以解决I&#x2F;O设备与CPU速度不匹配的问题。</li>
<li>差错控制      设备控制器兼管从设备传送来的数据差错检查，保证数据的正确性。</li>
</ol>
<h3 id="I-O通道"><a href="#I-O通道" class="headerlink" title="I&#x2F;O通道"></a>I&#x2F;O通道</h3><h4 id="通道概念"><a href="#通道概念" class="headerlink" title="通道概念"></a>通道概念</h4><p>​	通道是一种特殊的执行I&#x2F;O指令的处理机，用于代替处理器实现外部设备的输入&#x2F;输出操作和管理，实现外部设备与处理器的并行操作。</p>
<p>引入目的：解脱CPU对I&#x2F;O的组织和管理，建立独立的I&#x2F;O操作。</p>
<p>采用通道后计算机系统可以实现三级并行：</p>
<ol>
<li>通道与处理器并行执行，</li>
<li>通道与通道之间并行操作，</li>
<li>不同通道上的外围设备并行操作。</li>
</ol>
<p>因此，通道使得系统的并行工作能力大大提高。</p>
<h4 id="通道类型"><a href="#通道类型" class="headerlink" title="通道类型"></a>通道类型</h4><p>按照信息交换方式和设备连接方式的不同，通道分为</p>
<ol>
<li><p>字节多路通道</p>
<blockquote>
<p>连接设备控制器的每个子通道，以字节为单位，分时共享方式传输数据，主要连接大量<strong>低速</strong>外围设备，如终端、打印机。</p>
</blockquote>
</li>
<li><p>数组选择通道</p>
<blockquote>
<p>选择通道每个子通道以一组数据为单位，对一个子通道而言，传送效率更高。</p>
<p>数组选择通道在一段时间内只能执行一个通道程序，只允许一台设备进行数据传输。当一台设备数据传输完成后，再选择另一个子通道的设备进行数据传输。</p>
<p>主要用于连接磁盘等高速输入&#x2F;输出设备。</p>
</blockquote>
</li>
<li><p>数组多路通道</p>
<blockquote>
<p>结合了数组选择通道传送速度高和字节多路通道能进行分时并发传送多个设备数据的优点</p>
<p>数组多路通道主要用于连接高、中速设备。</p>
</blockquote>
</li>
</ol>
<h3 id="I-O控制方式"><a href="#I-O控制方式" class="headerlink" title="I&#x2F;O控制方式"></a>I&#x2F;O控制方式</h3><ol>
<li><p>可编程 I&#x2F;O 是最简单的</p>
<blockquote>
<p>CPU 等待 I&#x2F;O 完成</p>
<p>这种模式称为轮询或者繁忙等待 </p>
<p>性能低，编程简单</p>
</blockquote>
</li>
<li><p>中断驱动 I&#x2F;O 是最常用的</p>
<blockquote>
<p>CPU 初始化 I&#x2F;O并启动第一次I&#x2F;O操作</p>
<p>CPU 去忙别的事情</p>
<p>I&#x2F;O完成时, CPU 将被中断</p>
<p>CPU 处理中断</p>
<p>CPU 恢复被中断的程序</p>
</blockquote>
</li>
<li><p>直接内存访问I&#x2F;O 用于改进效率</p>
<blockquote>
<p>数据传输的基本单位是块</p>
<p>用 DMA 控制器处理 I&#x2F;O 中断</p>
<p>降低CPU响应中断的频率</p>
<p><strong>DMA控制器组成</strong></p>
<ol>
<li>主机与DMA控制器接口</li>
<li>DMA控制器与块设备接口</li>
<li>I&#x2F;O控制逻辑</li>
</ol>
</blockquote>
</li>
<li><p>I&#x2F;O通道控制方式</p>
<blockquote>
<p>把对一个数据块为单位的读写干预减少为对一组数据块的读写及有关的控制和管理为单位的干预</p>
<p>I&#x2F;O通道控制方式，CPU只需给出：</p>
<ol>
<li>通道程序首址</li>
<li>要访问I&#x2F;O设备后，通道程序就可完成一组块操作</li>
<li>通道是通过执行通道程序并与设备控制器共同实现对I&#x2F;O设备的控制的</li>
</ol>
</blockquote>
</li>
</ol>
<h2 id="DIsk"><a href="#DIsk" class="headerlink" title="DIsk"></a>DIsk</h2><h1 id="7-文件系统管理"><a href="#7-文件系统管理" class="headerlink" title="7. *文件系统管理"></a>7. *文件系统管理</h1><h1 id="8-操作系统安全"><a href="#8-操作系统安全" class="headerlink" title="8. 操作系统安全"></a>8. 操作系统安全</h1>]]></content>
      <categories>
        <category>软件技术</category>
      </categories>
      <tags>
        <tag>笔记</tag>
        <tag>Operating System</tag>
      </tags>
  </entry>
  <entry>
    <title>MySql与Nginx容器化部署实现持久化存储</title>
    <url>/2025/06/27/MySql%E5%AE%B9%E5%99%A8%E5%8C%96%E9%83%A8%E7%BD%B2%E5%AE%9E%E7%8E%B0%E6%8C%81%E4%B9%85%E5%8C%96%E5%AD%98%E5%82%A8/</url>
    <content><![CDATA[<ol>
<li>Docker部署的mysql实现持久存储</li>
<li>Docker部署的nginx实现持久存储</li>
</ol>
<hr>
<h1 id="1-情况一：还未开始进行docker部署mysql"><a href="#1-情况一：还未开始进行docker部署mysql" class="headerlink" title="1. 情况一：还未开始进行docker部署mysql"></a>1. 情况一：还未开始进行docker部署mysql</h1><hr>
<h2 id="1-准备mysql镜像"><a href="#1-准备mysql镜像" class="headerlink" title="1. 准备mysql镜像"></a>1. 准备mysql镜像</h2><ul>
<li>查看是否已经有了镜像</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker images</span><br></pre></td></tr></table></figure>

<p><img src="/../images/Linux/%E8%BF%90%E7%BB%B4/day02/1.png"></p>
<ul>
<li>可以发现我这里已经下载好了。</li>
<li>如果没有下载好则可以拉取</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker pull mysql:5.7</span><br></pre></td></tr></table></figure>



<h2 id="2-使用命令起一个容器，并且设置好持久化存储的卷路径"><a href="#2-使用命令起一个容器，并且设置好持久化存储的卷路径" class="headerlink" title="2. 使用命令起一个容器，并且设置好持久化存储的卷路径"></a>2. 使用命令起一个容器，并且设置好持久化存储的卷路径</h2><ul>
<li>目录结构</li>
</ul>
<p><img src="/../images/Linux/%E8%BF%90%E7%BB%B4/day02/10.png"></p>
<ul>
<li>在对应目录下准备好<code>my.cnf</code></li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[client]</span><br><span class="line">port=3307</span><br><span class="line">socket=/var/lib/mysql/mysql.sock</span><br><span class="line"></span><br><span class="line">[mysqld]</span><br><span class="line"># 基础配置</span><br><span class="line">user=mysql</span><br><span class="line">port=3306</span><br><span class="line">bind-address=0.0.0.0</span><br><span class="line">datadir=/var/lib/mysql</span><br><span class="line">socket=/var/lib/mysql/mysql.sock</span><br><span class="line">pid-file=/var/run/mysqld/mysqld.pid</span><br><span class="line"></span><br><span class="line"># 字符集设置</span><br><span class="line">character-set-server=utf8mb4</span><br><span class="line">collation-server=utf8mb4_unicode_ci</span><br><span class="line"></span><br><span class="line"># 错误日志</span><br><span class="line">log-error=/var/log/mysql/mysql.err</span><br><span class="line"></span><br><span class="line"># 一般日志（可选）</span><br><span class="line">general_log=1</span><br><span class="line">general_log_file=/var/log/mysql/general.log</span><br><span class="line"></span><br><span class="line"># 二进制日志（用于主从复制或 point-in-time recovery）</span><br><span class="line">log-bin=mysql-bin</span><br><span class="line">binlog-format=ROW</span><br><span class="line">server-id=1</span><br><span class="line"></span><br><span class="line"># 启用一些推荐参数</span><br><span class="line">sql_mode=STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION</span><br><span class="line">explicit_defaults_for_timestamp=true</span><br><span class="line">max_connections=512</span><br><span class="line"></span><br><span class="line"># 其他</span><br><span class="line">symbolic-links=0</span><br></pre></td></tr></table></figure>

<ul>
<li><h2 id="使用docker命令进行持久化部署"><a href="#使用docker命令进行持久化部署" class="headerlink" title="使用docker命令进行持久化部署"></a><strong>使用docker命令进行持久化部署</strong></h2></li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker run -d \</span><br><span class="line">  --name mysql-case1 \</span><br><span class="line">  -e MYSQL_ROOT_PASSWORD=regen \</span><br><span class="line">  -p 3307:3306 \</span><br><span class="line">  -v /opt/persistence/case1/data:/var/lib/mysql \</span><br><span class="line">  -v /opt/persistence/case1/logs:/var/log/mysql \</span><br><span class="line">  -v /opt/persistence/case1/my.cnf:/etc/mysql/my.cnf:ro \</span><br><span class="line">  mysql:5.7</span><br></pre></td></tr></table></figure>

<h3 id="3-检查是否成功"><a href="#3-检查是否成功" class="headerlink" title="3. 检查是否成功"></a>3. 检查是否成功</h3><ul>
<li>查看对应目录下的文件是否存在</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ls /opt/persistence/case1/data</span><br><span class="line">ls /opt/persistence/case1/data</span><br></pre></td></tr></table></figure>

<p><img src="/../images/Linux/%E8%BF%90%E7%BB%B4/day02/2.png"></p>
<p>至此持久化存储功能已结束。</p>
<h1 id="2-情况二：容器运行中，并且已有数据"><a href="#2-情况二：容器运行中，并且已有数据" class="headerlink" title="2. 情况二：容器运行中，并且已有数据"></a>2. 情况二：容器运行中，并且已有数据</h1><ul>
<li>情景：已经有了一个容器化的数据库，需要使它增加持久化的功能。</li>
</ul>
<h2 id="1-进行数据转移"><a href="#1-进行数据转移" class="headerlink" title="1. 进行数据转移"></a>1. 进行数据转移</h2><p>进入容器内并进行数据备份</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker <span class="built_in">exec</span> mysql-case2 mysqldump -uroot -pregen --all-databases &gt; all-databases.sql</span><br></pre></td></tr></table></figure>

<p><img src="/../images/Linux/%E8%BF%90%E7%BB%B4/day02/3.png"></p>
<h2 id="2-停止旧的容器"><a href="#2-停止旧的容器" class="headerlink" title="2. 停止旧的容器"></a>2. 停止旧的容器</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker stop mysql-case2</span><br></pre></td></tr></table></figure>

<ul>
<li>可以不用删除</li>
</ul>
<h2 id="3-准备持久化目录"><a href="#3-准备持久化目录" class="headerlink" title="3. 准备持久化目录"></a>3. 准备持久化目录</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mkdir -p /opt/mysql-case2/data</span><br><span class="line">mkdir -p /opt/mysql-case2/logs</span><br></pre></td></tr></table></figure>

<p><img src="/../images/Linux/%E8%BF%90%E7%BB%B4/day02/4.png"></p>
<h2 id="4-启动挂载了持久化目录的新容器"><a href="#4-启动挂载了持久化目录的新容器" class="headerlink" title="4. 启动挂载了持久化目录的新容器"></a>4. 启动挂载了持久化目录的新容器</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker run -d \</span><br><span class="line">  --name mysql-case2-persistent \</span><br><span class="line">  -e MYSQL_ROOT_PASSWORD=regen \</span><br><span class="line">  -p 3308:3306 \</span><br><span class="line">  -v /opt/persistence/case2/data:/var/lib/mysql \</span><br><span class="line">  -v /opt/persistence/case2/logs:/var/log/mysql \</span><br><span class="line">  -v /opt/persistence/case2/my.cnf:/etc/mysql/my.cnf:ro \</span><br><span class="line">  mysql:5.7</span><br></pre></td></tr></table></figure>



<h2 id="5-检查挂载目录是否成功"><a href="#5-检查挂载目录是否成功" class="headerlink" title="5. 检查挂载目录是否成功"></a>5. 检查挂载目录是否成功</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ls /opt/persistence/case2/logs</span><br><span class="line">ls /opt/persistence/case2/data</span><br></pre></td></tr></table></figure>

<p><img src="/../images/Linux/%E8%BF%90%E7%BB%B4/day02/5.png"></p>
<h2 id="6-恢复数据库数据"><a href="#6-恢复数据库数据" class="headerlink" title="6. 恢复数据库数据"></a>6. 恢复数据库数据</h2><ol>
<li>复制之前生成的sql文件到docker容器内部</li>
<li>进入容器内部</li>
<li>迁移数据</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker cp all-databases.sql mysql-case2-persistent:/all-databases.sql</span><br><span class="line">docker exec -it mysql-case2-persistent bash</span><br><span class="line">mysql -uroot -pregen &lt; /all-databases.sql</span><br></pre></td></tr></table></figure>

<p><img src="/../images/Linux/%E8%BF%90%E7%BB%B4/day02/6.png"></p>
<h2 id="7-检查数据"><a href="#7-检查数据" class="headerlink" title="7. 检查数据"></a>7. 检查数据</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql -h 127.0.0.1 -P3307 -uroot -p</span><br></pre></td></tr></table></figure>

<p><img src="/../images/Linux/%E8%BF%90%E7%BB%B4/day02/13.png" alt="image-20250626144852682"></p>
<p>数据成功恢复。</p>
<h1 id="Docker部署Nginx"><a href="#Docker部署Nginx" class="headerlink" title="Docker部署Nginx"></a>Docker部署Nginx</h1><hr>
<h2 id="一、准备工作"><a href="#一、准备工作" class="headerlink" title="一、准备工作"></a>一、准备工作</h2><h3 id="1-创建目录结构："><a href="#1-创建目录结构：" class="headerlink" title="1. 创建目录结构："></a>1. 创建目录结构：</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> -p /opt/docker-nginx/conf.d</span><br><span class="line"><span class="built_in">mkdir</span> -p /opt/docker-nginx/html</span><br><span class="line"><span class="built_in">mkdir</span> -p /opt/docker-nginx/logs</span><br></pre></td></tr></table></figure>

<p><img src="/../images/Linux/%E8%BF%90%E7%BB%B4/day02/7.png"></p>
<h3 id="2-准备网页文件（静态内容）："><a href="#2-准备网页文件（静态内容）：" class="headerlink" title="2. 准备网页文件（静态内容）："></a>2. 准备网页文件（静态内容）：</h3><p><code>/opt/docker-nginx/html/index.html</code>：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span><span class="tag">&lt;<span class="name">title</span>&gt;</span>Hello<span class="tag">&lt;/<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello regen<span class="tag">&lt;/<span class="name">h1</span>&gt;</span><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><img src="/../images/Linux/%E8%BF%90%E7%BB%B4/day02/8.png"></p>
<h3 id="3-准备-Nginx-配置（静态服务）："><a href="#3-准备-Nginx-配置（静态服务）：" class="headerlink" title="3. 准备 Nginx 配置（静态服务）："></a>3. 准备 Nginx 配置（静态服务）：</h3><p><code>/opt/docker-nginx/conf.d/default.conf</code>：</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span> <span class="number">80</span>;</span><br><span class="line">    <span class="attribute">server_name</span> localhost;</span><br><span class="line"></span><br><span class="line">    <span class="section">location</span> / &#123;</span><br><span class="line">        <span class="attribute">root</span> /usr/share/nginx/html;</span><br><span class="line">        <span class="attribute">index</span> index.html;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="4-主配置文件nginx-conf"><a href="#4-主配置文件nginx-conf" class="headerlink" title="4. 主配置文件nginx.conf"></a>4. 主配置文件nginx.conf</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">worker_processes  1;</span><br><span class="line"></span><br><span class="line">events &#123;</span><br><span class="line">    worker_connections  1024;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">http &#123;</span><br><span class="line">    include       /etc/nginx/mime.types;</span><br><span class="line">    default_type  application/octet-stream;</span><br><span class="line"></span><br><span class="line">    access_log  /var/log/nginx/access.log;</span><br><span class="line">    error_log   /var/log/nginx/error.log;</span><br><span class="line"></span><br><span class="line">    sendfile        on;</span><br><span class="line">    keepalive_timeout  65;</span><br><span class="line"></span><br><span class="line">    include /etc/nginx/conf.d/*.conf;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<hr>
<h2 id="二、运行-Nginx-容器（挂载配置、网页和日志）"><a href="#二、运行-Nginx-容器（挂载配置、网页和日志）" class="headerlink" title="二、运行 Nginx 容器（挂载配置、网页和日志）"></a>二、运行 Nginx 容器（挂载配置、网页和日志）</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run --name mynginx \</span><br><span class="line">  -p 80:80 \</span><br><span class="line">  -v /opt/docker-nginx/conf.d:/etc/nginx/conf.d:ro \</span><br><span class="line">  -v /opt/docker-nginx/html:/usr/share/nginx/html:ro \</span><br><span class="line">  -v /opt/docker-nginx/logs:/var/log/nginx \</span><br><span class="line">  -d nginx</span><br></pre></td></tr></table></figure>

<p>说明：</p>
<ul>
<li><code>-v /opt/docker-nginx/conf.d:/etc/nginx/conf.d:ro</code> 挂载配置目录（只读）</li>
<li><code>-v /opt/docker-nginx/html:/usr/share/nginx/html:ro</code> 挂载网页目录（只读）</li>
<li><code>-v /opt/docker-nginx/logs:/var/log/nginx</code> 持久化日志目录（可写）</li>
</ul>
<h2 id="三、查看持久化效果"><a href="#三、查看持久化效果" class="headerlink" title="三、查看持久化效果"></a>三、查看持久化效果</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ls /opt/docker-nginx/test2/logs</span><br></pre></td></tr></table></figure>



<h2 id=""><a href="#" class="headerlink" title=""></a><img src="/../images/Linux/%E8%BF%90%E7%BB%B4/day02/9.png"></h2><h2 id="-1"><a href="#-1" class="headerlink" title=""></a><img src="/../images/Linux/%E8%BF%90%E7%BB%B4/day02/12.png"></h2><hr>
<h2 id="三、测试效果"><a href="#三、测试效果" class="headerlink" title="三、测试效果"></a>三、测试效果</h2><ul>
<li><code>http://192.168.72.128/</code></li>
</ul>
<p><img src="/../images/Linux/%E8%BF%90%E7%BB%B4/day02/11.png"></p>
<p><img src="/../images/Linux/%E8%BF%90%E7%BB%B4/day02/12.png"></p>
]]></content>
      <categories>
        <category>软件技术</category>
      </categories>
      <tags>
        <tag>笔记</tag>
        <tag>linux</tag>
        <tag>system</tag>
        <tag>command</tag>
        <tag>运维</tag>
        <tag>docker</tag>
        <tag>Anolis</tag>
        <tag>MySql</tag>
      </tags>
  </entry>
  <entry>
    <title>PHOTO</title>
    <url>/2024/02/27/PHOTO/</url>
    <content><![CDATA[<h1 id="说走就走（南昌）"><a href="#说走就走（南昌）" class="headerlink" title="说走就走（南昌）"></a>说走就走（南昌）</h1><p>​	去完南昌回来之后几天。想了想，果然还是想记下来当时间胶囊。</p>
<p>​	回家那一刻我就知道了2024的寒假注定是灰色的，看到最近天气15日阴天，以及温度逐渐下降甚至出现下雪的时候，我心情是复杂的。</p>
<p>​	上学期因荒废暑假后在学期中越想越痛，于是就发誓要好好利用寒假出去逛一逛，看看不同城市的风景。看到这天气后就有点挫伤。</p>
<p>​	于是就怀着这越来越渺茫的希望，打了把又一把游戏。</p>
<p>​	时机已到！那天下午，澡后我感到十分清爽，应该是内啡肽的作用。恰巧温度回升，下午的太阳也很舒服，就是现在！出发！</p>
<p>​	然而刚到市里就开始下雨了。。。。。。我还没带伞，包里就一个没电的相机和一本书。（《杀死一只知更鸟》英文原著）</p>
<p><img src="/../images/nanchang/Nikon2023_5_3_332023_6_1163.jpg"></p>
<p><img src="/../images/nanchang/Nikon2023_5_3_332023_6_1164.jpg"></p>
<p>​	好在火车上比较舒服，看看书，打了个盹就到了。刚好看完前半部分。看到了高中时期最喜欢的一段。</p>
<blockquote>
<p><strong>我想让你见识一下什么是真正的勇敢，而不要错误地认为一个人手握枪支就是勇敢。勇敢是：当你还未开始就已知道自己会输，可你依然要去做，而且无论如何都要把它坚持到底。你很少能贏，但有时也会。杜博斯太太赢了，用她那仅仅九十八磅重的身躯。按照她的观点，她死得无怨无悔，不欠任何人，也不依赖任何东西。她是我见过的最勇敢的人。</strong></p>
</blockquote>
<blockquote>
<p><strong>“ I wanted you to see what real courage is, instead of getting the idea that courage is a man with a gun in his hand. It’s when you know you’re licked before you begin but you begin anyway and you see it through no matter what. You rarely win, but sometimes you do. Mrs. Dubose won, all ninety-eight pounds of her. According to her views, she died beholden to nothing and nobody. She was the bravest person I ever knew. “</strong></p>
</blockquote>
<p>​	第二天早上，大雨，开始后悔。</p>
<p>​	在滕王阁附近的洪都大拇指奶茶店点了一杯推荐，坐在墙角的小板凳上，看着越下越大的雨，耳边Ólafur Arnalds的《1440》更增加了凄惨的氛围。 能够稍微安慰我的也就只有 手上的 “雪顶幽兰”逐渐散去的余热了。</p>
<p><img src="/../images/nanchang/Nikon2023_5_3_332023_6_1165.jpg" alt="路上"></p>
<p><img src="/../images/nanchang/Nikon2023_5_3_332023_6_1166.jpg"></p>
<p><img src="/../images/nanchang/Nikon2023_5_3_332023_6_1170.jpg" alt="远处"></p>
<p>​	走近看才发现滕王阁原来这么大 ，虽然古人上滕王阁是用爬的，但是时代不一样了，有电梯了。 但是迁客骚人的览物之情却没怎么变化（古今对比），从最顶楼的许愿牌便可得出此结论。</p>
<p><img src="/../images/nanchang/Nikon2023_5_3_332023_6_1172.jpg" alt="顶"></p>
<p><img src="/../images/nanchang/Nikon2023_5_3_332023_6_1168.jpg" alt="檐"></p>
<p>​	越下越大的雨好像放大了览物之情，让我突然想念起了坐在电炉前乱弹吉他的温暖。于是便回家了······</p>
<hr>
]]></content>
      <categories>
        <category>生活</category>
        <category>摄影</category>
      </categories>
      <tags>
        <tag>旅行</tag>
        <tag>摄影</tag>
        <tag>photo</tag>
      </tags>
  </entry>
  <entry>
    <title>PCB Technique</title>
    <url>/2024/03/03/PCB-Technique/</url>
    <content><![CDATA[<h1 id="PCB-Technique"><a href="#PCB-Technique" class="headerlink" title="PCB Technique"></a>PCB Technique</h1><p>​	本篇课程基于B站UP主<code>Expert电子实验室</code>的教学视频，同时加上本人思考与总结汇总而成。</p>
<p>​	<a href="https://www.bilibili.com/video/BV1At421h7Ui/?spm_id_from=333.1007.top_right_bar_window_default_collection.content.click&vd_source=c33a47a3f08b3b6b6c1614d37f34903f">零基础入门PCB设计保姆级教学</a></p>
<p>​	<a href="https://space.bilibili.com/346179450">Expert电子实验室</a></p>
<iframe src="//player.bilibili.com/player.html?isOutside=true&aid=1800822510&bvid=BV1At421h7Ui&cid=1445021959&p=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"></iframe>

<p>​	本部分笔记为扫盲篇（基础篇）</p>
<h6 id="进阶需实战，纸上得来终觉浅，绝知此事要躬行。"><a href="#进阶需实战，纸上得来终觉浅，绝知此事要躬行。" class="headerlink" title="&#x3D;&#x3D;进阶需实战，纸上得来终觉浅，绝知此事要躬行。&#x3D;&#x3D;"></a>&#x3D;&#x3D;进阶需实战，纸上得来终觉浅，绝知此事要躬行。&#x3D;&#x3D;</h6><p>​	</p>
<h2 id="1-电路设计"><a href="#1-电路设计" class="headerlink" title="1. 电路设计"></a>1. 电路设计</h2><h2 id="1-1-原理图四要素"><a href="#1-1-原理图四要素" class="headerlink" title="1.1 原理图四要素"></a>1.1 原理图四要素</h2><ol>
<li>元件符号</li>
<li>连接线</li>
<li>结点</li>
<li>注释</li>
</ol>
<h2 id="1-2-基本原件介绍"><a href="#1-2-基本原件介绍" class="headerlink" title="1.2 基本原件介绍"></a>1.2 基本原件介绍</h2><h3 id="1-2-1-电阻"><a href="#1-2-1-电阻" class="headerlink" title="1.2.1 电阻"></a>1.2.1 电阻</h3><ul>
<li>对于贴片电阻的读数</li>
</ul>
<blockquote>
<p>1）3位读数：前2位为有效数字，第3位表示10的n次幂(也可以理解为0的个数)。精度为±5%</p>
<p>2）4位读数：前3位为有效数字，第4位表示10的n次幂(也可以理解为0的个数)。读法和3位的原理一样，精度为±1%</p>
<p>3）阻值小于10的读数：通常在两个数之间插入一个字母R，用字母R来代替小数点</p>
</blockquote>
<h3 id="1-2-2-电容"><a href="#1-2-2-电容" class="headerlink" title="1.2.2 电容"></a>1.2.2 电容</h3><ul>
<li><p>主要功能：<strong>储能和滤波</strong></p>
</li>
<li><p>单位计算</p>
</li>
</ul>
<p><code>1uF=1000nF；1nF=1000pF</code></p>
<ul>
<li>分类</li>
</ul>
<p><img src="/../images/PCB/capacityType.png" alt="Type"></p>
<ul>
<li>读数以及含义</li>
</ul>
<p><img src="/../images/PCB/%E5%9B%BE%E7%89%872.png" alt="Type—1"></p>
<p><img src="/../images/PCB/%E5%9B%BE%E7%89%873.png" alt="Type—2"></p>
<p><img src="/../images/PCB/%E5%9B%BE%E7%89%874.png" alt="Type—3"></p>
<p><img src="/../images/PCB/%E5%9B%BE%E7%89%875.png" alt="Type—4"></p>
<h3 id="1-2-3-电感"><a href="#1-2-3-电感" class="headerlink" title="1.2.3 电感"></a>1.2.3 电感</h3><p>​	Inductor，</p>
<ul>
<li>单位换算</li>
</ul>
<p><code>1H=1000mH；1mH=1000uH；</code></p>
<ul>
<li>主要功能：滤波，扼流，谐振，储能</li>
<li>分类</li>
</ul>
<p><img src="/../images/PCB/6.png" alt="Inductors"></p>
<ul>
<li>读数以及含义</li>
</ul>
<p><img src="/../images/PCB/7.png" alt="Type1"></p>
<p><img src="/../images/PCB/8.png" alt="Type2"></p>
<h3 id="1-2-4-二极管"><a href="#1-2-4-二极管" class="headerlink" title="1.2.4 二极管"></a>1.2.4 二极管</h3><ul>
<li>主要功能</li>
</ul>
<p>​	实现对交流电整流、对调制信号检波、限幅和钳位以及对电源电压的稳压等多种功能 。</p>
<ul>
<li>分类以及简单介绍</li>
</ul>
<p><img src="/../images/PCB/%E4%BA%8C%E6%9E%81%E7%AE%A1%E5%88%86%E7%B1%BB.png" alt="二极管种类以及介绍"></p>
<ul>
<li>外观（判断正负极）</li>
</ul>
<ol>
<li>对于直插式发光二极管：长脚为正极，内部小块为正极。</li>
<li>一般封装类型的正负极判断</li>
</ol>
<p><img src="/../images/PCB/%E5%9B%BE%E7%89%879.png" alt="二极管一般封装类型的正负极判断"></p>
<h3 id="1-2-5-三极管"><a href="#1-2-5-三极管" class="headerlink" title="1.2.5 三极管"></a>1.2.5 三极管</h3><ul>
<li><p>分类：NPN（控地） 和 PNP（控电源）</p>
</li>
<li><p>工作状态</p>
</li>
</ul>
<ol>
<li>截止状态</li>
</ol>
<p>​	发射结反偏，集电结反偏。即：I ce&#x3D;0</p>
<ol start="2">
<li>放大状态</li>
</ol>
<p>​	发射结正偏，集电结反偏。</p>
<ol start="3">
<li><p>饱和状态</p>
<p> 发射结正偏，集电结正偏</p>
</li>
</ol>
<ul>
<li>常见封装</li>
</ul>
<p><img src="/../images/PCB/%E5%9B%BE%E7%89%8710.png" alt="三极管一般封装类型"></p>
<h3 id="1-2-6-场效应管（尚未掌握）"><a href="#1-2-6-场效应管（尚未掌握）" class="headerlink" title="1.2.6 场效应管（尚未掌握）"></a>1.2.6 场效应管（尚未掌握）</h3><ul>
<li>基本介绍</li>
</ul>
<p>​	场效应晶体管（Field Effect Transistor缩写(FET)）简称场效应管。它是利用控制输入回路的电场效应来控制输出回路电流的一种半导体器件。</p>
<ul>
<li>特点</li>
</ul>
<p>​	具有输入电阻高、噪声小、功耗低、动态范围大、易于集成、没有二次击穿现象、安全工作区域宽等优点。</p>
<ul>
<li>类型</li>
</ul>
<ol>
<li><p>结型场效应管（junction FET—JFET) </p>
</li>
<li><p>金属 - 氧化物半导体场效应管（metal-oxide semiconductor FET，简称MOS-FET）</p>
</li>
</ol>
<ul>
<li>与三极管的对比</li>
</ul>
<p><img src="/../images/PCB/%E5%9B%BE%E7%89%8711.png" alt="compare"></p>
<ul>
<li>封装</li>
</ul>
<p><img src="/../images/PCB/MOS.png" alt="MOS"></p>
<p><img src="/../images/PCB/%E5%9B%BE%E7%89%8712.png" alt="MOS"></p>
<p><img src="/../images/PCB/%E5%9B%BE%E7%89%8713.png" alt="MOS"></p>
<h3 id="1-2-7-芯片-IC"><a href="#1-2-7-芯片-IC" class="headerlink" title="1.2.7 芯片 &#x2F; IC"></a>1.2.7 芯片 &#x2F; IC</h3><p><strong>&#x3D;&#x3D;具体见数据手册&#x3D;&#x3D;</strong></p>
<h2 id="1-3-数据手册"><a href="#1-3-数据手册" class="headerlink" title="1.3 数据手册"></a>1.3 数据手册</h2><p>自己找去</p>
<h2 id="1-4-电路原理图设计"><a href="#1-4-电路原理图设计" class="headerlink" title="1.4 电路原理图设计"></a>1.4 电路原理图设计</h2><h3 id="网络标签"><a href="#网络标签" class="headerlink" title="网络标签"></a>网络标签</h3><p>​	网络标签 (Net Label)：网络标号表示一个电器连接点，具有相同网络标号的器件表明是电气连接在一起。</p>
<h3 id="模块化"><a href="#模块化" class="headerlink" title="模块化"></a>模块化</h3><h3 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h3><h3 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h3><blockquote>
<ol>
<li><p>分模块、分图页</p>
</li>
<li><p>标注重要参数</p>
</li>
<li><p>标注元件特殊&#x2F;重要功能</p>
</li>
<li><p>标注注意事项</p>
</li>
<li><p>合理的网络标签</p>
</li>
<li><p>标注LOGO&#x2F;版本号</p>
</li>
</ol>
</blockquote>
<p>&#x3D;&#x3D;<strong>成功的原理图设计&#x3D;合理的元件选型+正确的电路设计</strong>&#x3D;&#x3D;</p>
<h2 id="2-PCB设计"><a href="#2-PCB设计" class="headerlink" title="2. PCB设计"></a>2. PCB设计</h2><ul>
<li>PCB基本介绍</li>
</ul>
<blockquote>
<p>​	PCB板就是印制电路板，又称印刷电路板，是电子元器件电气连接的提供者。PCB根据其基板材料的不同而不同，高频微波板、金属基板，铝基板、铁基板、铜基板、双面板及多层板PCB是英文Printed Circuit Board的缩写，中文名称为印制电路板，又称印刷电路板、印刷线路板，是重要的电子部件。</p>
</blockquote>
<h3 id="2-1PCB-组成"><a href="#2-1PCB-组成" class="headerlink" title="2.1PCB 组成"></a>2.1PCB 组成</h3><h4 id="2-1-1铺铜"><a href="#2-1-1铺铜" class="headerlink" title="2.1.1铺铜"></a>2.1.1铺铜</h4><ul>
<li>作用</li>
</ul>
<p>​	将PCB上闲置的空间作为基准面，然后用固体铜填充，这些铜区又称为灌铜。覆铜的意义在于，减小地线阻抗，提高抗干扰能力；降低压降，提高电源效率；与地线相连，还可以减小环路面积。</p>
<ul>
<li>方式</li>
</ul>
<ol>
<li>大面积覆铜</li>
</ol>
<p>​	大面积覆铜，具备了加大电流和屏蔽双重作用，但是大面积覆铜，如果过波峰焊时，板子就可能会翘起来，甚至会起泡。因此大面积覆铜，一般也会开几个槽，缓解铜箔起泡。低频电路、有大电流的电路等常用大面积的覆铜。</p>
<ol>
<li>网格覆铜</li>
</ol>
<p>从散热的角度说，它降低了铜的受热面，又起到了一定的电磁屏蔽的作用。因此，高频电路对抗干扰要求高的多用网格覆铜</p>
<h4 id="2-1-2过孔"><a href="#2-1-2过孔" class="headerlink" title="2.1.2过孔"></a>2.1.2过孔</h4><ul>
<li>功能</li>
</ul>
<ol>
<li>电气连接：过孔用于将不同层面的电路连接起来，使得电路板能够在不同的层次上进行有效的信号和电源传输。</li>
<li>器件固定或定位：过孔还可以用作固定电子部件的位置，如电阻、电容等，确保其在电路板上的正确布局。</li>
</ol>
<ul>
<li>分类</li>
</ul>
<ol>
<li>通孔：从PCB的上层钻到底层的机械钻孔。</li>
<li>盲孔：从 PCB 的上层或底层到内层钻孔和电镀的孔。</li>
<li>埋孔：指位于印刷线路板内层的连接孔，它不会延伸到线路板的表面。</li>
</ol>
<h4 id="2-1-3焊盘"><a href="#2-1-3焊盘" class="headerlink" title="2.1.3焊盘"></a>2.1.3焊盘</h4><ul>
<li>定义：</li>
</ul>
<p>​	元件通过PCB上的引线孔，用焊锡焊接固定在PCB上，印制导线把焊盘连接起来，实现元件在电路中的电气连接。引线孔及周围的铜箔称为焊盘。</p>
<h4 id="2-1-4丝印"><a href="#2-1-4丝印" class="headerlink" title="2.1.4丝印"></a>2.1.4丝印</h4><p>​	PCB丝印是指在电子线路板（Printed Circuit Board）上印刷的信息，如文字、标志、图形等。这些丝印具有重要的功能，它们可以帮助标识电子元件的位置、数值、型号等信息，以及元件的方向和正确的安装方式。</p>
<h4 id="2-1-5阻焊"><a href="#2-1-5阻焊" class="headerlink" title="2.1.5阻焊"></a>2.1.5阻焊</h4><p>​	在铜层上面覆盖油墨层，油墨层覆盖住铜层上面不需要焊接的线路，防止PCB上的线路和其他的金属、焊锡或者其它的导电物体接触导致短路，起到绝缘及保护铜层作用，选择性露出焊接需要的铜PAD、IC等。</p>
<h3 id="2-2PCB结构"><a href="#2-2PCB结构" class="headerlink" title="2.2PCB结构"></a>2.2PCB结构</h3><ul>
<li>叠层结构</li>
</ul>
<p>​	PCB材料的组成主要有PP半固态片和Core芯板两部分组成，这就构成了所看到的绿色、红色或者黑色等的板子，再加上敷铜线路层，器件，就构成了电路板。</p>
<ul>
<li>&#x3D;&#x3D;叠层结构布局有讲究&#x3D;&#x3D;，但是一般的二层板双面都可能需要走底地线和电源。</li>
<li>图示</li>
</ul>
<p><img src="/../images/PCB/%E5%9B%BE%E7%89%8714.png" alt="PCB叠层结构"></p>
<h3 id="2-3-PCB设计流程"><a href="#2-3-PCB设计流程" class="headerlink" title="2.3  PCB设计流程"></a>2.3  PCB设计流程</h3><p><img src="/../images/PCB/%E5%9B%BE%E7%89%8715.png" alt="设计流程"></p>
<h3 id=""><a href="#" class="headerlink" title=""></a></h3><h3 id="2-end-1PCB设计规则总览（持续添加ing）"><a href="#2-end-1PCB设计规则总览（持续添加ing）" class="headerlink" title="2.end.1PCB设计规则总览（持续添加ing）"></a>2.end.1PCB设计规则总览（持续添加ing）</h3><ol>
<li><p><strong>电路布局与元器件安放</strong>：</p>
<ul>
<li><p>电路布局是否合理？</p>
</li>
<li><p>元器件之间的距离是否足够？</p>
</li>
<li><p>元器件的放置方向是否一致？</p>
</li>
<li><p>是否合理安排了元器件的布局顺序？</p>
</li>
<li><p>是否考虑了元器件的封装形式和选择？</p>
</li>
<li><p>是否进行了元器件的标注和排列规范？</p>
</li>
<li><p>是否考虑了元器件的插拔次数和位置？</p>
</li>
<li><p>是否进行了元器件的冗余设计？</p>
</li>
<li><p>是否考虑了元器件的热管理和散热问题？</p>
</li>
<li><p>是否进行了元器件的可靠性分析？</p>
</li>
</ul>
</li>
<li><p><strong>信号管理：</strong></p>
<ol>
<li><blockquote>
<p><strong>线宽与过孔</strong></p>
<p>1）8&#x2F;8mil，过孔选择12mil（0.3mm）。<br>2）6&#x2F;6mil，过孔选择12mil（0.3mm）。<br>3）4&#x2F;4mil，过孔选择8mil（0.2mm）。<br>4）3.5&#x2F;3.5mil，过孔选择8mil（0.2mm）。<br>5）3.5&#x2F;3.5mil，过孔选择4mil（0.1mm，激光打孔）。<br>6）2&#x2F;2mil，过孔选择4mil（0.1mm，激光打孔）。<br>参考过孔：内径12mil、外径20mil<br>参考内径20mil、外径30mil</p>
</blockquote>
</li>
<li><p>是否进行了信号完整性分析？</p>
</li>
<li><p>是否进行了阻抗匹配设计？</p>
</li>
<li><p>是否进行了信号线路的优化布局和仿真验证？</p>
</li>
<li><p>是否考虑了电磁干扰和射频干扰的影响？</p>
</li>
<li><p>是否进行了电磁场模拟分析？</p>
</li>
<li><p>是否考虑了信号传输速率和衰减问题？</p>
</li>
<li><p>是否考虑了线路的阻抗匹配和信号损耗？</p>
</li>
<li><p>是否进行了线路的阻抗匹配设计？</p>
</li>
</ol>
</li>
<li><p><strong>电源管理：</strong></p>
<ol>
<li><p>电流与布线宽度</p>
<blockquote>
<p>电源线、地线的宽度最好尽可能宽，地线比电源线宽。这些关系为：地线&gt;电源线&gt;信号线，通常信号线的宽度为0.2-0.3mm(8-12mil)，最细的宽度为0.05-0.07mm(2-2.8mil)，电源线为1.2-2.5mm(48-100mil)。(0.025mm&#x3D;1mil).</p>
<p><a href="https://eda365.com/article-12-1.html">PCB走线载流计算器-EDA365电子论坛通信数码-人工智能-计算机-半导体-手机家电消费电子硬件门户网站</a></p>
<p><img src="/../images/pcb/1.png"></p>
</blockquote>
</li>
<li><p>是否考虑了电源的滤波和稳压？</p>
</li>
<li><p>是否进行了电源线和地线的分离和规范设计？</p>
</li>
<li><p>是否考虑了过压和过流保护的设计？</p>
</li>
<li><p>是否进行了电源供应的充足性和稳定性分析？</p>
</li>
</ol>
</li>
<li><p><strong>PCB工艺与环境因素：</strong></p>
<ul>
<li><p>是否考虑了PCB的工作环境和应用场景</p>
</li>
<li><p>是否进行了PCB的加工工艺和成本分析？</p>
</li>
<li><p>是否进行了PCB布线的仿真验证？</p>
</li>
<li><p>是否考虑了PCB的防火、加固、环境友好等设计因素？</p>
</li>
</ul>
</li>
</ol>
<p>​    </p>
]]></content>
      <categories>
        <category>硬件技术</category>
      </categories>
      <tags>
        <tag>笔记</tag>
        <tag>PCB</tag>
        <tag>电路设计</tag>
      </tags>
  </entry>
  <entry>
    <title>PHOTOGRAPHY!</title>
    <url>/2023/09/20/PHOTOGRAPHY/</url>
    <content><![CDATA[<h1 id="星空拍摄笔记"><a href="#星空拍摄笔记" class="headerlink" title="星空拍摄笔记"></a>星空拍摄笔记</h1><p><strong>一定要带快门线！</strong></p>
<h2 id="参数的选择"><a href="#参数的选择" class="headerlink" title="参数的选择"></a>参数的选择</h2><h3 id="一，焦段："><a href="#一，焦段：" class="headerlink" title="一，焦段："></a>一，焦段：</h3><p>​	一般常见焦段为12-40，使用广角&amp;超广角镜头最佳。</p>
<h3 id="二，光圈："><a href="#二，光圈：" class="headerlink" title="二，光圈："></a>二，光圈：</h3><p>​	直接拉到最大，不过有一些镜头西需要收一收获得更好的成像。</p>
<h3 id="三，对焦："><a href="#三，对焦：" class="headerlink" title="三，对焦："></a>三，对焦：</h3><p>​	手动直接拉到无穷远，但是可能不够准确，可以打开屏幕，放大一颗比较亮的星星进行微调。</p>
<h3 id="四，曝光："><a href="#四，曝光：" class="headerlink" title="四，曝光："></a>四，曝光：</h3><p>​	“500”法则：500除以镜头的焦段（全画幅焦段），得到的数字便是你可以使用的最长快门时间。</p>
<p>​	例如：</p>
<p>200mm（全画幅）：理想快门速度约为2.5秒（500除以200mm）</p>
<p>24mm（全画幅）：理想快门速度约为20秒（500除以24mm）</p>
<p>16mm（全画幅）：理想快门速度约为31秒（500除以16mm）</p>
<p>14mm（全画幅）：理想快门速度约为35秒（500除以14mm）</p>
<h3 id="五，感光度："><a href="#五，感光度：" class="headerlink" title="五，感光度："></a>五，感光度：</h3><p>​	常用2000-6400的感光度拍摄银河（偶尔1600）<br>​	如果是拍摄星轨的话建议直接100，拉长曝光时间。</p>
<h3 id="六，白平衡："><a href="#六，白平衡：" class="headerlink" title="六，白平衡："></a>六，白平衡：</h3><p>（相机内的色温值越低，拍摄的照片色调越冷，颜色越蓝；反之，色调越暖，颜色越黄）</p>
<h1 id="烟花拍摄笔记"><a href="#烟花拍摄笔记" class="headerlink" title="烟花拍摄笔记"></a>烟花拍摄笔记</h1><h2 id="1-准备"><a href="#1-准备" class="headerlink" title="1. 准备"></a>1. 准备</h2><ul>
<li>注意风向，别去下风处</li>
<li>采用长曝光，需要三脚架，快门线</li>
</ul>
<h2 id="2-参数的选择"><a href="#2-参数的选择" class="headerlink" title="2.参数的选择"></a>2.参数的选择</h2><ul>
<li>iso 最低</li>
<li>小光圈 f&#x2F;8 到 f&#x2F;16</li>
</ul>
<blockquote>
<p><em>光圈越大，烟火的线条越粗；光圈越小，烟火的线条越细</em></p>
<p><em>距离施放点越<strong>近</strong>、亮度越<strong>高</strong>→ 使用f&#x2F;13-18的小光圈，减少进光量、并可使烟火线条较细</em></p>
<p><em>距离施放点越<strong>远</strong>、亮度越<strong>低</strong>→ 使用f&#x2F;8-11的大光圈，增加进光量、并可使烟火线条较明显</em></p>
</blockquote>
<blockquote>
<p>快门速度需要根据<strong>拍摄远近</strong>和<strong>光圈大小</strong>来微调，但秒数至少要大于「烟火从升空到完整爆开」的时间，如此才能拍出一个完整的烟火形状；若时间太短，只会拍出部分绽放的烟火；时间太长则可能会过曝。</p>
</blockquote>
<h1 id="2023-8-28"><a href="#2023-8-28" class="headerlink" title="2023.8.28"></a>2023.8.28</h1><img src=" /images/2023828.jpg" width="400" height="400" alt="With Guitar In The Rain">

<p>​	小雨，很喜欢下雨的时候路灯下的氛围感。于是就拿起三脚架背上吉他就出发咯。要是有灯就好了qwq.hexo</p>
<h1 id="2023-10-2"><a href="#2023-10-2" class="headerlink" title="2023.10.2"></a>2023.10.2</h1><p><img src="../images/bookintheleaves.jpg" width="400" height="400" alt="bookInTheLeaves"/><br/></p>
<p>​	这本书的名字是《杀死一只知更鸟》，那天下午阳光正好，所以我就踩着脚踏车愉快地出门了。带着我的小单反，不过过几天我应该就能换新镜头了。希望那时可以拍出更好看的照片。不过同时，还得好好学摄影，毕竟打铁还需自身硬。</p>
<h1 id="2023-10-28"><a href="#2023-10-28" class="headerlink" title="2023.10.28"></a>2023.10.28</h1><p><img src="/../images/202310281.jpg" alt="gentle sunlight cheers me up"></p>
<p><img src="/../images/202310282.jpg" alt="one building&#39;s glow"></p>
<p>​	阳台外面就是一个小湖，每天都能看到日落。中午时光练练吉他，看看书，简单的快乐。</p>
<h1 id="2023-11-11"><a href="#2023-11-11" class="headerlink" title="2023.11.11"></a>2023.11.11</h1><img src=" ../images/202311111.jpg"  alt="NIKON GUYS">
]]></content>
      <categories>
        <category>生活</category>
        <category>摄影</category>
      </categories>
      <tags>
        <tag>旅行</tag>
        <tag>摄影</tag>
      </tags>
  </entry>
  <entry>
    <title>RPA-机器人流程自动化</title>
    <url>/2025/02/18/RPA-%E6%9C%BA%E5%99%A8%E4%BA%BA%E6%B5%81%E7%A8%8B%E8%87%AA%E5%8A%A8%E5%8C%96/</url>
    <content><![CDATA[<h1 id="RPA（Robotic-Process-Automation）"><a href="#RPA（Robotic-Process-Automation）" class="headerlink" title="RPA（Robotic Process Automation）"></a>RPA（Robotic Process Automation）</h1><blockquote>
<p>RPA（Robotic Process Automation）即机器人流程自动化，是一种利用软件机器人来模拟人类在计算机上的操作行为，从而实现业务流程自动化的技术。</p>
</blockquote>
<h2 id="技术原理"><a href="#技术原理" class="headerlink" title="技术原理"></a>技术原理</h2><ul>
<li><strong>流程设计</strong>：通过专门的 RPA 设计工具，业务人员或开发人员可以以可视化的方式定义需要自动化的流程。这包括确定流程的起点、终点，以及在流程中需要执行的各种操作和步骤，如数据输入、文件读取、按钮点击等。</li>
<li><strong>屏幕抓取与识别</strong>：RPA 软件能够识别计算机屏幕上的各种元素，如窗口、菜单、按钮、文本框等。通过图像识别、光学字符识别（OCR）等技术，它可以准确地定位和获取这些元素的信息，以便进行后续的操作。</li>
<li><strong>操作模拟</strong>：一旦识别出目标元素，RPA 机器人就可以模拟人类的操作行为，如鼠标点击、键盘输入、数据复制粘贴等。它按照预先设计的流程，自动执行这些操作，完成各项任务。</li>
<li><strong>数据处理与交互</strong>：RPA 可以与各种应用程序和系统进行数据交互。它能够从一个系统中提取数据，进行必要的处理和转换，然后将数据输入到另一个系统中，实现数据在不同系统之间的流动和共享。</li>
</ul>
<h2 id="发展趋势"><a href="#发展趋势" class="headerlink" title="发展趋势"></a>发展趋势</h2><ul>
<li><strong>与 AI 技术融合</strong>：RPA 与人工智能技术（如机器学习、自然语言处理等）的融合将成为未来的重要趋势。通过结合 AI 技术，RPA 机器人将具备更强大的认知能力和决策能力，能够处理更复杂的任务和场景。</li>
<li><strong>云原生 RPA</strong>：随着云计算技术的发展，云原生 RPA 解决方案将越来越受到青睐。云原生 RPA 具有更高的可扩展性、灵活性和安全性，能够更好地满足企业在数字化转型过程中的需求。</li>
<li><strong>行业定制化</strong>：不同行业具有不同的业务特点和需求，未来 RPA 将更加注重行业定制化。针对特定行业的业务流程和规范，开发出更具针对性的 RPA 解决方案，为企业提供更精准、更高效的服务。</li>
</ul>
]]></content>
      <categories>
        <category>软件技术</category>
      </categories>
      <tags>
        <tag>自动化</tag>
        <tag>可视化操作</tag>
      </tags>
  </entry>
  <entry>
    <title>Raspberry Pi</title>
    <url>/2024/03/16/Raspberry-Pi/</url>
    <content><![CDATA[<h1 id="嘿嘿开新坑！（目前基于python）"><a href="#嘿嘿开新坑！（目前基于python）" class="headerlink" title="嘿嘿开新坑！（目前基于python）"></a>嘿嘿开新坑！（目前基于python）</h1><p>​	早就久仰树莓派大名，奈何前两年芯片减产导致树莓派价格居高不下，甚至翻倍。现在终于降下来了，于是斥巨资买了一块3B前来学习。本篇Blog用于记录我的探索历程。</p>
<p>​	目前打算先使用python进行学习，待到有一定理解之后再使用C。</p>
<h2 id="1-装系统！"><a href="#1-装系统！" class="headerlink" title="1. 装系统！"></a>1. 装系统！</h2><p>​	要什么桌面环境，直接上命令行！</p>
<h2 id="2-联网-WIFI"><a href="#2-联网-WIFI" class="headerlink" title="2.联网-WIFI"></a>2.联网-WIFI</h2><ul>
<li>方法一：使用系统工具</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> raspi-config</span><br></pre></td></tr></table></figure>

<p>选择系统选项，地区之后就可以通过<code>ssid</code>和<code>pask</code>进行联网</p>
<p>再使用<code>ifconfig</code>查看是否连接成功（会分配新的 ip 地址）</p>
<ul>
<li>方法二：使用系统配置<code>/etc/</code></li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 一开始没有VIM</span></span><br><span class="line"><span class="built_in">sudo</span> nano /etc/wpa_supplicant/wpa_supplicant.conf</span><br><span class="line"></span><br><span class="line"><span class="comment"># add </span></span><br><span class="line"></span><br><span class="line">network=&#123;</span><br><span class="line">        ssid=<span class="string">&quot;ssid_name&quot;</span></span><br><span class="line">        key_mgmt=WPA-PSK</span><br><span class="line">        psk=<span class="string">&quot;password&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="3-创建新用户并授权"><a href="#3-创建新用户并授权" class="headerlink" title="3. 创建新用户并授权"></a>3. 创建新用户并授权</h2><p>​	总不能一直用root吧，qwq</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># add user</span></span><br><span class="line">adduser regen</span><br><span class="line"><span class="comment"># grant privilege</span></span><br><span class="line">visudo</span><br><span class="line"><span class="comment"># add regen to sudoers</span></span><br><span class="line">regen   ALL=(ALL:ALL)       ALL</span><br></pre></td></tr></table></figure>

<h2 id="4-来点个灯吧！"><a href="#4-来点个灯吧！" class="headerlink" title="4.来点个灯吧！"></a>4.来点个灯吧！</h2><ol>
<li>代码界的点灯</li>
</ol>
<p>先看看这个gcc工具</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">gcc -v</span><br></pre></td></tr></table></figure>

<p>嘿嘿，是<code>aarch-linux-gnu</code>也就是arm架构的gcc版本啦，终于不是<code> x86_64-w64-mingw32</code>啦。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim hello_RaspberryPi.c</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>物理点灯</li>
</ol>
<h3 id="4-1-引脚信息"><a href="#4-1-引脚信息" class="headerlink" title="4.1 引脚信息"></a>4.1 引脚信息</h3><ul>
<li>看看引脚配置</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pinout</span><br></pre></td></tr></table></figure>

<p>或者</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">gpio readall</span><br></pre></td></tr></table></figure>

<p>然后就报错了。。。</p>
<p>没有安装</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt install wiringpi</span><br></pre></td></tr></table></figure>

<p>又报错了。。。没有依赖</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt --fix-broken install</span><br></pre></td></tr></table></figure>

<p>解决</p>
<h3 id="4-2-代码控制"><a href="#4-2-代码控制" class="headerlink" title="4.2  代码控制"></a>4.2  代码控制</h3><h4 id="4-2-1-使用Python的命令模式"><a href="#4-2-1-使用Python的命令模式" class="headerlink" title="4.2.1 使用Python的命令模式"></a>4.2.1 使用Python的命令模式</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> RPi.GPIO <span class="keyword">as</span> GPIO</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>GPIO.setmode(GPIO.BOARD)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>GPIO.setup(<span class="number">11</span>,GPIO.OUT)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>GPIO.output(<span class="number">11</span>,<span class="literal">True</span>)</span><br></pre></td></tr></table></figure>

<p>于是报错了，没有权限，直接换root就好了。好了现在又精通一个开发板的点灯了嘿嘿</p>
<h2 id="5-远程ssh"><a href="#5-远程ssh" class="headerlink" title="5. 远程ssh"></a>5. 远程ssh</h2><p>​	学以致用，之前在<code> Linux Projects</code>里面学习了使用<code>ZeroTier</code>进行内网穿透以提供远程服务。试试在我的内网频道加入新的成员<code>Raspberry PI</code>吧 ！</p>
<ul>
<li>开头也需要加<code>sudo</code>，否则报错</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> curl -s https://install.zerotier.com | <span class="built_in">sudo</span> bash</span><br></pre></td></tr></table></figure>

<ul>
<li>加入我的内网</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">zerotier-cli <span class="built_in">join</span> &lt;NETWORK ID&gt;</span><br></pre></td></tr></table></figure>

<ul>
<li>开机自启动</li>
</ul>
<ol>
<li>新建一个脚本</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim AutoStart/ZeroTierAutoStart.sh</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line"><span class="built_in">sudo</span> zerotier-cli <span class="built_in">join</span> &lt;network ID&gt;</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;zerotier network joined successfully&quot;</span></span><br></pre></td></tr></table></figure>

<ol start="2">
<li>添加自启动</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vim /etc/rc.local</span><br></pre></td></tr></table></figure>

<p>添加</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">su regen -c <span class="string">&quot;exec /home/regen/AutoStart/ZeroTierAutoStart.sh&quot;</span></span><br></pre></td></tr></table></figure>

<ol start="3">
<li>结束！</li>
</ol>
<p>​	现在就可以只需要给树莓派供个电就行了，可以远程写脚本，玩树莓派咯。</p>
<h1 id="基础操作"><a href="#基础操作" class="headerlink" title="基础操作"></a>基础操作</h1><h3 id="1-查看系统版本"><a href="#1-查看系统版本" class="headerlink" title="1. 查看系统版本"></a>1. 查看系统版本</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cat</span> /etc/os-release</span><br></pre></td></tr></table></figure>

<h3 id="2-查看CPU信息"><a href="#2-查看CPU信息" class="headerlink" title="2. 查看CPU信息"></a>2. 查看CPU信息</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cat</span> /proc/cpuinfo</span><br></pre></td></tr></table></figure>

<h3 id="3-查看内存使用情况"><a href="#3-查看内存使用情况" class="headerlink" title="3. 查看内存使用情况"></a>3. 查看内存使用情况</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">free -h</span><br></pre></td></tr></table></figure>

<h3 id="4-查看磁盘空间使用情况"><a href="#4-查看磁盘空间使用情况" class="headerlink" title="4. 查看磁盘空间使用情况"></a>4. 查看磁盘空间使用情况</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">df</span> -h</span><br></pre></td></tr></table></figure>

<h3 id="5-查看当前系统负载"><a href="#5-查看当前系统负载" class="headerlink" title="5. 查看当前系统负载"></a>5. 查看当前系统负载</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">top</span><br></pre></td></tr></table></figure>

<p>或</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">htop  <span class="comment"># (需要先安装：`sudo apt install htop`)</span></span><br></pre></td></tr></table></figure>

<h3 id="6-查看树莓派的温度"><a href="#6-查看树莓派的温度" class="headerlink" title="6. 查看树莓派的温度"></a>6. 查看树莓派的温度</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vcgencmd measure_temp</span><br></pre></td></tr></table></figure>

<h3 id="7-查看网络信息"><a href="#7-查看网络信息" class="headerlink" title="7. 查看网络信息"></a>7. 查看网络信息</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ifconfig</span><br></pre></td></tr></table></figure>

<h3 id="8-查看启动时间和运行时长"><a href="#8-查看启动时间和运行时长" class="headerlink" title="8. 查看启动时间和运行时长"></a>8. 查看启动时间和运行时长</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">uptime</span></span><br></pre></td></tr></table></figure>



<h2 id="系统特有命令-GNU-Linux-Debian-11-Bullseye"><a href="#系统特有命令-GNU-Linux-Debian-11-Bullseye" class="headerlink" title="系统特有命令 GNU&#x2F;Linux Debian 11 (Bullseye)"></a>系统特有命令 GNU&#x2F;Linux Debian 11 (Bullseye)</h2><h3 id="1-改进的-apt-命令"><a href="#1-改进的-apt-命令" class="headerlink" title="1. 改进的 apt 命令"></a>1. <strong>改进的 <code>apt</code> 命令</strong></h3><ul>
<li><p>Bullseye 使用改进版的 </p>
  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">apt</span><br></pre></td></tr></table></figure>

<p>  ，可以更简便地更新和管理软件包：</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt update        <span class="comment"># 更新软件源列表</span></span><br><span class="line"><span class="built_in">sudo</span> apt upgrade       <span class="comment"># 升级已安装的软件包</span></span><br><span class="line"><span class="built_in">sudo</span> apt full-upgrade  <span class="comment"># 升级并处理依赖关系（更适合大版本更新）</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="2-查看系统信息的改进命令"><a href="#2-查看系统信息的改进命令" class="headerlink" title="2. 查看系统信息的改进命令"></a>2. <strong>查看系统信息的改进命令</strong></h3><ul>
<li><p>Debian 11 引入了一些新工具，例如 </p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">neofetch</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="3-硬件信息查询工具-lscpu-和-lsblk"><a href="#3-硬件信息查询工具-lscpu-和-lsblk" class="headerlink" title="3. 硬件信息查询工具 lscpu 和 lsblk"></a>3. <strong>硬件信息查询工具 <code>lscpu</code> 和 <code>lsblk</code></strong></h3><ul>
<li><p>这些命令在 Bullseye 上改进，可以详细查看硬件信息：</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">lscpu    <span class="comment"># 查看 CPU 信息</span></span><br><span class="line">lsblk    <span class="comment"># 查看存储设备信息</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="4-网络管理工具-nmcli-和-nmtui"><a href="#4-网络管理工具-nmcli-和-nmtui" class="headerlink" title="4. 网络管理工具 nmcli 和 nmtui"></a>4. <strong>网络管理工具 <code>nmcli</code> 和 <code>nmtui</code></strong></h3><ul>
<li><p>Network Manager 提供的 </p>
  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nmcli</span><br></pre></td></tr></table></figure>

<p>   和 </p>
  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nmtui</span><br></pre></td></tr></table></figure>

<p>   命令方便管理网络连接，特别适合命令行环境：</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nmcli device status     <span class="comment"># 查看网络设备状态</span></span><br><span class="line">nmtui                    <span class="comment"># 图形化界面配置网络连接（基于终端）</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="5-防火墙设置：ufw-简化版"><a href="#5-防火墙设置：ufw-简化版" class="headerlink" title="5. 防火墙设置：ufw 简化版"></a>5. <strong>防火墙设置：<code>ufw</code> 简化版</strong></h3><ul>
<li><p>Debian 11 支持 </p>
  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ufw</span><br></pre></td></tr></table></figure>

<p>  （Uncomplicated Firewall），可以简化防火墙管理：</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt install ufw</span><br><span class="line"><span class="built_in">sudo</span> ufw <span class="built_in">enable</span>            <span class="comment"># 启用防火墙</span></span><br><span class="line"><span class="built_in">sudo</span> ufw status            <span class="comment"># 查看防火墙状态</span></span><br><span class="line"><span class="built_in">sudo</span> ufw allow 22/tcp      <span class="comment"># 允许端口，例如 SSH</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="6-进程监控工具-bpytop"><a href="#6-进程监控工具-bpytop" class="headerlink" title="6. 进程监控工具 bpytop"></a>6. <strong>进程监控工具 <code>bpytop</code></strong></h3><ul>
<li><pre><code>  bpytop
  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">是 Bullseye 上一个增强的进程监控工具，提供类似 </span><br><span class="line"></span><br></pre></td></tr></table></figure>
  htop
  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">的界面但更加丰富：</span><br><span class="line"></span><br></pre></td></tr></table></figure>
  bash复制代码sudo apt install bpytop
  bpytop
  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">### 7. **系统日志管理 `journalctl`**</span><br><span class="line"></span><br><span class="line">- ```</span><br><span class="line">    journalctl</span><br></pre></td></tr></table></figure>

   是查看系统日志的命令行工具，可以通过以下方式查询系统状态和故障信息：

  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">bash复制代码journalctl -b            # 查看本次启动的所有日志</span><br><span class="line">journalctl -u ssh        # 查看 SSH 服务日志</span><br><span class="line">journalctl --disk-usage  # 查看日志占用的磁盘空间</span><br></pre></td></tr></table></figure>
</code></pre>
</li>
</ul>
<h3 id="8-时间同步-timedatectl"><a href="#8-时间同步-timedatectl" class="headerlink" title="8. 时间同步 timedatectl"></a>8. <strong>时间同步 <code>timedatectl</code></strong></h3><ul>
<li><p>Bullseye 默认使用 </p>
  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">systemd-timesyncd</span><br></pre></td></tr></table></figure>

<p>   来管理时间同步，</p>
  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">timedatectl</span><br></pre></td></tr></table></figure>

<p>   可查询和调整时间设置：</p>
  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">bash复制代码timedatectl status       # 查看时间状态</span><br><span class="line">sudo timedatectl set-timezone Asia/Shanghai  # 设置时区</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="9-用户和权限管理"><a href="#9-用户和权限管理" class="headerlink" title="9. 用户和权限管理"></a>9. <strong>用户和权限管理</strong></h3><ul>
<li><p>可以通过 </p>
  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">usermod</span><br></pre></td></tr></table></figure>

<p>   等命令快速配置用户权限：</p>
  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">bash复制代码sudo usermod -aG sudo username  # 添加用户到 sudo 组</span><br><span class="line">sudo passwd username            # 设置或更改用户密码</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="10-软件包清理-autoremove-和-clean"><a href="#10-软件包清理-autoremove-和-clean" class="headerlink" title="10. 软件包清理 autoremove 和 clean"></a>10. <strong>软件包清理 <code>autoremove</code> 和 <code>clean</code></strong></h3><ul>
<li><p>可以清理不再需要的依赖包和缓存，以释放系统空间：</p>
  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">bash复制代码sudo apt autoremove      # 移除不再使用的依赖</span><br><span class="line">sudo apt clean           # 清理软件包缓存</span><br></pre></td></tr></table></figure></li>
</ul>
<p>这些命令和工具在 Bullseye 上都能流畅使用，适合从硬件到网络的各种管理需求。如果有具体需求，还可以深入某个方面进行详细配置。</p>
<h1 id="作为硬件加速器"><a href="#作为硬件加速器" class="headerlink" title="作为硬件加速器"></a>作为硬件加速器</h1><ul>
<li>硬件加速器</li>
</ul>
<blockquote>
<p>专门设计用于加速特定计算任务的硬件设备。在这里主要用于网络优化，进行流量优化，缓存，路由优化。</p>
</blockquote>
<ul>
<li><strong>代理服务器</strong>：例如Shadowsocks、V2Ray等，可以作为本地代理服务，转发流量到远程服务器。</li>
<li><strong>缓存服务器</strong>：例如Squid，可以作为缓存代理，存储常用的数据来减少对外网的访问。</li>
<li><strong>TCP优化工具</strong>：如安装TCP BBR加速算法，优化数据传输效率。</li>
</ul>
]]></content>
      <categories>
        <category>软硬件技术</category>
      </categories>
      <tags>
        <tag>笔记</tag>
        <tag>linux</tag>
        <tag>Raspberry Pi</tag>
      </tags>
  </entry>
  <entry>
    <title>PID算法入门</title>
    <url>/2024/11/26/PID%E7%AE%97%E6%B3%95%E5%85%A5%E9%97%A8/</url>
    <content><![CDATA[<h1 id="PID基本概念"><a href="#PID基本概念" class="headerlink" title="PID基本概念"></a>PID基本概念</h1><p>PID 控制器通过以下三部分组成调整行为：</p>
<ul>
<li><strong>比例控制（P）：快速响应当前误差</strong><ul>
<li>根据误差的大小调整输出，误差越大，输出越强。</li>
<li>简单但可能存在偏差。</li>
</ul>
</li>
<li><strong>积分控制（I）：消除长期误差</strong><ul>
<li>累计误差的总和，让输出逐渐补偿偏差。</li>
</ul>
</li>
<li><strong>微分控制（D）：预测趋势减少震荡</strong><ul>
<li>根据误差变化的速度，平滑输出，避免过度反应。</li>
</ul>
</li>
</ul>
<h1 id="PID基本原理"><a href="#PID基本原理" class="headerlink" title="PID基本原理"></a>PID基本原理</h1><ul>
<li><p>稳态误差</p>
<blockquote>
<p>系统达到稳定后与目标值之间的偏差</p>
</blockquote>
</li>
<li><p>历史误差</p>
<blockquote>
<p>系统运行过程中误差的累积总和</p>
</blockquote>
</li>
<li><p>超调</p>
<blockquote>
<p>系统响应首次超过目标值的最大幅度</p>
</blockquote>
</li>
<li><p>震荡</p>
<blockquote>
<p>系统输出围绕目标值反复波动，未能稳定</p>
</blockquote>
</li>
</ul>
<blockquote>
<p>P</p>
<blockquote>
<p><strong>Proportional Control</strong></p>
<p>比例控制根据当前误差 e(t)e(t)e(t) 调整输出：</p>
<p><img src="/../images/algorithm/pid/1.png"></p>
<ul>
<li><strong>优点</strong>：快速响应当前误差，简单直观。</li>
<li><strong>缺点</strong>：可能存在稳态误差，即系统到达目标附近但不能完全达到。</li>
</ul>
<p><strong>形象理解</strong>：像一个弹簧，偏离目标越远，弹簧拉力越大。</p>
</blockquote>
<p>I</p>
<blockquote>
<p><strong>Integral Control</strong></p>
<p>积分控制根据误差的累计值调整输出：</p>
<p><img src="/../images/algorithm/pid/2.png"><br>$$</p>
<p>$$</p>
<ul>
<li><strong>优点</strong>：消除稳态误差，确保系统最终达到目标值。</li>
<li><strong>缺点</strong>：<ul>
<li><strong>积分饱和</strong>：如果误差持续存在，积分项的累积会无限增加，导致控制信号过大，甚至会导致控制系统的<strong>振荡</strong>。这是因为积分会在误差存在时不断增加，即使误差已经很小，积分项依然很大。</li>
<li><strong>引起过度反应</strong>：积分项的过度增大可能导致系统的过度调整（比如温度突然快速上升或下降），从而产生不稳定的行为或<strong>超调</strong>。</li>
</ul>
</li>
</ul>
<blockquote>
<p>积分部分主要用来<strong>消除稳态误差</strong>（steady-state error），即当系统误差存在较长时间时，积分部分会逐渐积累误差，推动系统调整，直到误差为零为止。</p>
<p>积分部分通过<strong>累积误差</strong>来对系统进行调整。它会随着时间的推移逐渐增大或减小，直到误差消除。假设在系统中存在一个持续的小误差，积分部分会随着时间的积累，产生越来越大的控制信号，从而帮助系统摆脱稳态误差。</p>
</blockquote>
</blockquote>
<p>D</p>
<blockquote>
<p><strong>Derivative Control</strong></p>
<p>微分控制根据误差的变化率调整输出：</p>
<p><img src="/../images/algorithm/pid/3.png"></p>
<ul>
<li><strong>优点</strong>：预测误差变化趋势，减少震荡，提高系统稳定性。</li>
<li><strong>缺点</strong>：对噪声敏感，可能引入高频抖动。</li>
</ul>
<p><strong>形象理解</strong>：像一辆车的刹车系统，车速变化越快，刹车越强。</p>
<blockquote>
<p>微分部分主要关注<strong>误差变化的速率</strong>，即系统如何快速变化。它的目的是通过“预见”误差的变化趋势来<strong>减少系统的超调和震荡</strong>，使系统更平稳地达到目标值。</p>
<p>微分部分计算的是<strong>误差变化率</strong>，即误差在单位时间内的变化。它可以对误差变化的速度作出反应。如果误差变化很快，微分部分会增加控制信号来阻止系统反应过度；如果误差变化缓慢，微分部分的作用较小。</p>
</blockquote>
</blockquote>
</blockquote>
<h1 id="PID性能指标"><a href="#PID性能指标" class="headerlink" title="PID性能指标"></a>PID性能指标</h1><h3 id="1-稳态误差-Steady-State-Error"><a href="#1-稳态误差-Steady-State-Error" class="headerlink" title="1. 稳态误差 (Steady-State Error)"></a>1. <strong>稳态误差 (Steady-State Error)</strong></h3><p>稳态误差是指系统在达到稳定状态后，输出与目标值之间的差异。一个好的 PID 控制器应该尽量使稳态误差接近于零。</p>
<ul>
<li><strong>计算方法</strong>：稳态误差可以通过系统长期运行后的输出和设定点（目标值）进行比较，计算两者的差值。</li>
<li><strong>理想情况</strong>：PID 控制器的目标是使稳态误差最小化，最好为零（虽然在一些情况下可能会有一个微小的误差）。</li>
</ul>
<h3 id="2-超调-Overshoot"><a href="#2-超调-Overshoot" class="headerlink" title="2. 超调 (Overshoot)"></a>2. <strong>超调 (Overshoot)</strong></h3><p>超调是指系统响应在超过目标值后再回落的现象。PID 控制器的超调应尽可能小，避免系统响应过度。</p>
<ul>
<li><strong>计算方法</strong>：从系统响应的图像中可以看到，系统超过目标值后的最大偏差，即为超调量。一般来说，超调量越小越好。</li>
<li><strong>理想情况</strong>：超调应该接近零或者非常小，避免过度反应。</li>
</ul>
<h3 id="3-振荡-Oscillation"><a href="#3-振荡-Oscillation" class="headerlink" title="3. 振荡 (Oscillation)"></a>3. <strong>振荡 (Oscillation)</strong></h3><p>振荡是指系统输出在目标值附近来回波动，导致系统无法稳定在设定点附近。PID 控制器的输出应尽量减少振荡。</p>
<ul>
<li><strong>计算方法</strong>：通过绘制系统响应曲线，如果系统频繁地上下波动且没有快速收敛到目标值，则存在振荡。可以通过系统的频率和幅度来判断振荡的严重性。</li>
<li><strong>理想情况</strong>：没有明显的振荡，系统响应应平稳。</li>
</ul>
<h3 id="4-响应时间-Settling-Time"><a href="#4-响应时间-Settling-Time" class="headerlink" title="4. 响应时间 (Settling Time)"></a>4. <strong>响应时间 (Settling Time)</strong></h3><p>响应时间是指系统输出从开始到稳定在设定点附近所需的时间。响应时间越短，系统反应越快。</p>
<ul>
<li><strong>计算方法</strong>：从系统响应曲线中测量，从起始时间到系统最终稳定在目标值附近的时间。</li>
<li><strong>理想情况</strong>：响应时间越短越好，但必须与其他指标（如超调、振荡）平衡。</li>
</ul>
<h3 id="5-积分时间-Integral-Time-IT"><a href="#5-积分时间-Integral-Time-IT" class="headerlink" title="5. 积分时间 (Integral Time, IT)"></a>5. <strong>积分时间 (Integral Time, IT)</strong></h3><p>积分时间是系统从零误差到稳态时误差累积的时间。积分时间短意味着控制器在达到稳态时能迅速消除累积的误差。</p>
<ul>
<li><strong>计算方法</strong>：计算系统的积分误差时间，即误差在时间上的累计，较短的积分时间有助于快速消除误差。</li>
<li><strong>理想情况</strong>：积分时间越短越好，但要平衡可能引发的振荡和超调。</li>
</ul>
<h3 id="6-控制信号的饱和-Saturation-of-Control-Signal"><a href="#6-控制信号的饱和-Saturation-of-Control-Signal" class="headerlink" title="6. 控制信号的饱和 (Saturation of Control Signal)"></a>6. <strong>控制信号的饱和 (Saturation of Control Signal)</strong></h3><p>控制信号饱和是指控制器的输出值达到最大限制，不能进一步增大，这通常会导致系统反应迟缓，甚至无法达到设定目标。</p>
<ul>
<li><strong>计算方法</strong>：观察控制信号的输出，如果系统经常达到最大或最小输出限制，则表示控制信号饱和。</li>
<li><strong>理想情况</strong>：控制信号应尽量避免饱和，控制器的输出应适应系统需求。</li>
</ul>
<h3 id="7-控制器的稳定性"><a href="#7-控制器的稳定性" class="headerlink" title="7. 控制器的稳定性"></a>7. <strong>控制器的稳定性</strong></h3><p>稳定性是指系统在受到扰动或变化时是否能够保持其稳定性，并最终收敛到目标值。一个不稳定的 PID 控制器会导致系统过度波动，甚至无法收敛到设定点。</p>
<ul>
<li><strong>计算方法</strong>：观察系统响应，是否会在目标值附近发生不规则的波动，是否会收敛到目标值。</li>
<li><strong>理想情况</strong>：系统应稳定且快速收敛。</li>
</ul>
<h1 id="PID三个参数的调整"><a href="#PID三个参数的调整" class="headerlink" title="PID三个参数的调整"></a>PID三个参数的调整</h1><blockquote>
<p>**增加比例增益 (Kp)**：可以减少稳态误差，但可能导致系统超调和振荡。</p>
<p>**增加积分增益 (Ki)**：可以减少稳态误差，尤其是在误差为零时；但过高会导致系统振荡。</p>
<p>**增加微分增益 (Kd)**：可以减少超调并提高响应速度，但过高的微分增益可能导致控制信号的噪声增大。</p>
</blockquote>
<h2 id="一般流程"><a href="#一般流程" class="headerlink" title="一般流程"></a>一般流程</h2><blockquote>
<p><strong>第一步：确定比例增益P</strong></p>
<p>确定比例增益 P 时，首先去掉 PID 的积分项和微分项，一般是令 Ti&#x3D;0、 Td&#x3D;0（具体见PID 的参数设定说明），使PID 为纯比例调节。</p>
<p>输入设定为系统允许的最大值60%<del>70%，由0逐渐加大比例增益 P，直至系统出现振荡；再反过来，从此时的比例增益 P 逐渐减小，直至系统振荡消失，记录此时的比例增益 P，设定 PID 的比例增益 P 为当前值60%</del>70%。比例增益 P 调试完成。</p>
<p><strong>第二步：确定比例增益I</strong></p>
<p>比例增益 P 确定后，设定一个较大的积分时间常数 Ti 的初值，然后逐渐减小 Ti，直至系统出现振荡，之后在反过来，逐渐加大 Ti，直至系统振荡消失。记录此时的 Ti，设定 PID的积分时间常数 Ti 为当前值的150%~180%。积分时间常数 Ti 调试完成</p>
<p><strong>第三步：确定比例增益d</strong></p>
<p>积分时间常数 Td 一般不用设定，为0即可。若要设定，与确定 P 和 Ti 的方法相同，取不振<br>荡时的30%。</p>
<p><strong>第四步：进一步调整参数</strong></p>
<p>系统空载、带载联调，再对 PID 参数进行微调，直至满足要求。</p>
</blockquote>
]]></content>
      <categories>
        <category>软件技术</category>
      </categories>
      <tags>
        <tag>笔记</tag>
        <tag>python</tag>
        <tag>plt</tag>
        <tag>控制技术</tag>
        <tag>PID算法</tag>
      </tags>
  </entry>
  <entry>
    <title>RUST basic</title>
    <url>/2024/03/25/RUST-basic/</url>
    <content><![CDATA[<h1 id="RUST简介"><a href="#RUST简介" class="headerlink" title="RUST简介"></a>RUST简介</h1><h2 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h2><h3 id="内存安全性："><a href="#内存安全性：" class="headerlink" title="内存安全性："></a>内存安全性：</h3><blockquote>
<p>​	Rust 提供了内存安全的保证，通过所有权系统、借用检查器和生命周期检查器，可以在编译时捕获大多数常见的内存安全问题，如空指针解引用、数据竞争等。</p>
</blockquote>
<h3 id="并发安全性："><a href="#并发安全性：" class="headerlink" title="并发安全性："></a>并发安全性：</h3><blockquote>
<p>​	Rust 的所有权和借用系统使得编写并发程序更加容易和安全。它通过编译时检查来避免数据竞争和多线程错误，使得编写并行代码更加可靠。</p>
</blockquote>
<h3 id="性能："><a href="#性能：" class="headerlink" title="性能："></a>性能：</h3><blockquote>
<pre><code> Rust 允许开发者获得接近底层语言（如 C 和 C++）的性能，因为它提供了对内存和并发的细粒度控制，同时不需要牺牲安全性和抽象性。
</code></pre>
</blockquote>
<h3 id="表达能力："><a href="#表达能力：" class="headerlink" title="表达能力："></a>表达能力：</h3><blockquote>
<p>​	Rust 具有功能强大的类型系统和模式匹配功能，使得开发者可以以一种清晰、灵活的方式表达复杂的数据结构和逻辑。</p>
</blockquote>
<h3 id="资源管理："><a href="#资源管理：" class="headerlink" title="资源管理："></a>资源管理：</h3><blockquote>
<p>​	Rust 的所有权模型允许开发者在编写代码时显式地管理资源，避免了像内存泄漏和使用后释放的问题。它还通过 RAII（资源获取即初始化）模式自动管理资源生命周期。</p>
</blockquote>
<h3 id="生态系统："><a href="#生态系统：" class="headerlink" title="生态系统："></a>生态系统：</h3><blockquote>
<p>​	虽然相对较年轻，但 Rust 生态系统不断壮大，拥有丰富的库和工具，支持各种应用场景，从嵌入式系统到网络服务都有涉及。</p>
</blockquote>
<h3 id="跨平台性："><a href="#跨平台性：" class="headerlink" title="跨平台性："></a>跨平台性：</h3><blockquote>
<p>​	Rust 具有良好的跨平台支持，可以轻松地在各种操作系统和硬件架构上进行开发和部署。</p>
</blockquote>
<h3 id="社区支持："><a href="#社区支持：" class="headerlink" title="社区支持："></a>社区支持：</h3><blockquote>
<p>​	Rust 社区活跃，开发者可以从丰富的文档、教程和社区资源中获得支持和帮助。</p>
</blockquote>
<h1 id="RUST-启动！"><a href="#RUST-启动！" class="headerlink" title="RUST 启动！"></a>RUST 启动！</h1><h2 id="1-变量类型"><a href="#1-变量类型" class="headerlink" title="1.变量类型"></a>1.变量类型</h2>]]></content>
      <categories>
        <category>软件技术</category>
      </categories>
      <tags>
        <tag>笔记</tag>
        <tag>rust</tag>
        <tag>language</tag>
      </tags>
  </entry>
  <entry>
    <title>Regen&#39;s first page</title>
    <url>/2023/09/12/Regen-s-first-page/</url>
    <content><![CDATA[<blockquote>
<p>The notes tucked in drawers shall fade<br>Like ink dissolving in time’s charade<br>Yellowed pages where whispers once bled—<br>Embers of a fiery soul now shed.</p>
<p>Yet when memory’s tide ebbs low<br>And weathered hands tremble slow<br>If digital pages breathe anew<br>Echoes of today might shimmer through—</p>
<p>A flicker of solace, faint yet bright<br>In the gloaming of forgotten light<br>Where fading scripts and mortal clay<br>Meet dawn’s first blush of yesterday.</p>
</blockquote>
<p>多年以后，抽屉里的纸条会消失不见，那些写满了的笔记本，里面曾有我炽热灵魂的痕迹，也会消失不见。但是某一天，在我记忆不再清晰，身躯不再健壮的时候，能再打开这个博客，看一看现在活着的痕迹也许会感到一丝欣慰。</p>
<h1 id="HOLA"><a href="#HOLA" class="headerlink" title="HOLA!!!!"></a><strong>HOLA!!!!</strong></h1><h1 id="INTRODUCTION-TOTHISBLOG"><a href="#INTRODUCTION-TOTHISBLOG" class="headerlink" title="INTRODUCTION 	TO	THIS	BLOG !!!!!!"></a>INTRODUCTION 	TO	THIS	BLOG !!!!!!</h1><p>​	<strong>这个博客目前是由国内代码平台 Gitee 托管。Gitee（码云）相当于中国国内的github,所以在这里托管可以不用挂代理。访问速度也是比较快的</strong>。</p>
<p>​	<strong>这个博客是基于开源框架HEXO,全站都是静态的，也许后续会更换框架试试WordPress等开源框架，不过需要购买云服务器了，这都是后话。</strong></p>
<p>​		查看链接：<a href="(https://github.com/hexojs/hexo)">HEXO</a></p>
<p>​	<strong>同时这个博客的主题也是开源的。名字是ayer。可以在github上面搜到。</strong></p>
<p>​		查看链接：<a href="(https://github.com/Shen-Yu/hexo-theme-ayer)">AYER</a></p>
<p>​	<strong>本网站所有的笔记（MarkDowm格式）都同步更新到了github</strong></p>
<p>​		查看链接：<a href="https://github.com/regenm/BlogMarkDown">regenm&#x2F;BlogMarkDown: Notes</a></p>
<p>​	感谢开源大佬们的贡献，让我这样的小白也可以有自己的博客，同时也希望自己在不久的将来也能在开源社区做出一点贡献。</p>
<hr>
<h1 id="Blog-转到了github"><a href="#Blog-转到了github" class="headerlink" title="Blog 转到了github !"></a>Blog 转到了github !</h1><ul>
<li><p>原因</p>
<p> 由于最近gitee的gitee pages服务不太稳定，可能是不让用了？因此转到了github，发现速度不比gitee慢！打算以后长期使用github了！</p>
<p> <img src="/images/gitee_issue_pages.png" alt="gitee issues pages can not update"></p>
</li>
</ul>
<p><a href="https://github.com/regenm/regenm.github.io">new Blog repo</a></p>
<h1 id="Important-Update"><a href="#Important-Update" class="headerlink" title="Important Update"></a><strong>Important Update</strong></h1><p>更新Theme！</p>
<p>这是以前的博客样式：</p>
<p><img src="/../images/oldBlog/1.png" alt="1"></p>
<p><img src="/../images/oldBlog/2.png" alt="2"></p>
]]></content>
      <categories>
        <category>生活</category>
      </categories>
      <tags>
        <tag>笔记</tag>
        <tag>about</tag>
      </tags>
  </entry>
  <entry>
    <title>STM32_Menu_frameV1.0</title>
    <url>/2024/05/09/STM32-Menu-frameV1-0/</url>
    <content><![CDATA[<p>Record project  <strong>STM32_Menu_frame</strong></p>
<p>[STM32_Menu_frame](to be added)</p>
<h1 id="Requirement-Analysis"><a href="#Requirement-Analysis" class="headerlink" title="Requirement Analysis"></a>Requirement Analysis</h1><h2 id="Version-1"><a href="#Version-1" class="headerlink" title="Version 1"></a>Version 1</h2><ol>
<li>实现单级菜单</li>
<li>按键选择</li>
<li>SPI或IIC的oled屏显示</li>
</ol>
<h2 id="Version-2"><a href="#Version-2" class="headerlink" title="Version 2"></a>Version 2</h2><p>based on Version 1</p>
<ol>
<li>多级菜单</li>
<li>UI美化</li>
</ol>
]]></content>
      <categories>
        <category>软硬件技术</category>
      </categories>
      <tags>
        <tag>project</tag>
        <tag>STM32</tag>
        <tag>IIC</tag>
        <tag>OLED</tag>
        <tag>notes</tag>
        <tag>笔记</tag>
        <tag>spi</tag>
        <tag>UI</tag>
        <tag>stdlib</tag>
      </tags>
  </entry>
  <entry>
    <title>STM32 IIC with 0.96 OLED</title>
    <url>/2024/05/06/STM32-IIC-with-0-96-OLED/</url>
    <content><![CDATA[<h1 id="IIC-通信原理"><a href="#IIC-通信原理" class="headerlink" title="IIC 通信原理"></a>IIC 通信原理</h1><h2 id="基本介绍"><a href="#基本介绍" class="headerlink" title="基本介绍"></a>基本介绍</h2><p><a href="https://regenm.github.io/2024/01/29/%E5%B8%B8%E8%A7%81%E9%80%9A%E4%BF%A1%E5%8D%8F%E8%AE%AE%E4%BB%A5%E5%8F%8A%E9%80%9A%E4%BF%A1%E6%96%B9%E5%BC%8F/">点击跳转</a></p>
<h2 id="原理介绍"><a href="#原理介绍" class="headerlink" title="原理介绍"></a>原理介绍</h2><h3 id="Init"><a href="#Init" class="headerlink" title="Init"></a>Init</h3><h4 id="硬件层"><a href="#硬件层" class="headerlink" title="硬件层"></a>硬件层</h4><p>​	需要接上拉电阻（保证传输稳定性）</p>
<h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">IIC_Init</span><span class="params">()</span>&#123;</span><br><span class="line">  IIC_SCL=<span class="number">1</span>;</span><br><span class="line">  IIC_SDA=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h3 id="Start"><a href="#Start" class="headerlink" title="Start"></a>Start</h3><h4 id="物理层"><a href="#物理层" class="headerlink" title="物理层"></a>物理层</h4><p>​	IIC总线的SCL保持高电平，SDA由高电平变为低电平后，延时(&gt;4.7us)，SCL变为低电平。</p>
<ul>
<li>步骤</li>
</ul>
<ol>
<li>SCL 高</li>
<li>SDA 高-&gt;低 + 延时（&gt;4.7us）</li>
<li>SCL 高-&gt;低</li>
</ol>
<h4 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">IIC_Start</span><span class="params">()</span>&#123;</span><br><span class="line">  IIC_SCL=<span class="number">1</span>;</span><br><span class="line">  IIC_SDA=<span class="number">1</span>;</span><br><span class="line">  delay_us(<span class="number">5</span>);</span><br><span class="line">  IIC_SDA=<span class="number">0</span>;</span><br><span class="line">  delay_us(<span class="number">5</span>);</span><br><span class="line">  IIC_SCL=<span class="number">0</span>;</span><br><span class="line">  </span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>

<h3 id="Tramsmit-Data"><a href="#Tramsmit-Data" class="headerlink" title="Tramsmit Data"></a>Tramsmit Data</h3><h4 id="物理层-1"><a href="#物理层-1" class="headerlink" title="物理层"></a>物理层</h4><pre><code> 传输时，SDA的宽度应该大于SCL的宽度，在SCL为高时读取SDA，SCL为低时改变SDA的电平。
 ==注意：==传输数据过程总不允许SDA变化（否则会被视为开始或停止信号）
</code></pre>
<ul>
<li>步骤</li>
</ul>
<ol>
<li>拉低SCL进行数据传输</li>
<li>SDA传送高低电平（0或1）</li>
<li>SCL在高电平时期读取SDA的数据</li>
<li>响应信号</li>
</ol>
<h4 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">IIC_Transmit</span><span class="params">(u8 data)</span>&#123;</span><br><span class="line">  IIC_SCL=<span class="number">0</span>;  <span class="comment">// </span></span><br><span class="line">  u8 i=<span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">8</span>;i++)&#123;</span><br><span class="line">    <span class="keyword">if</span>(data &amp; <span class="number">0x80</span> )&#123; </span><br><span class="line">      IIC_SDA=<span class="number">1</span>;	    <span class="comment">// transmit 1</span></span><br><span class="line">      delay_us(<span class="number">2</span>);</span><br><span class="line">      IIC_SCL=<span class="number">1</span>;</span><br><span class="line">      delay_us(<span class="number">2</span>);</span><br><span class="line">      IIC_SCL=<span class="number">0</span>;</span><br><span class="line">      delay_us(<span class="number">2</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">      IIC_SDA=<span class="number">0</span>;  	   <span class="comment">// tramsmit 0	</span></span><br><span class="line">      delay_us(<span class="number">2</span>);</span><br><span class="line">      IIC_SCL=<span class="number">1</span>;</span><br><span class="line">      delay_us(<span class="number">2</span>);</span><br><span class="line">      IIC_SCL=<span class="number">0</span>;</span><br><span class="line">      delay_us(<span class="number">2</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    data&lt;&lt;=<span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h3 id="Stop"><a href="#Stop" class="headerlink" title="Stop"></a>Stop</h3><h4 id="物理层-2"><a href="#物理层-2" class="headerlink" title="物理层"></a>物理层</h4><p>​	与Start相反：SCL为高时SDA由低到高</p>
<ol>
<li>SCL &#x3D; 1</li>
<li>SDA &#x3D; 0</li>
<li>SDA &#x3D; 1 + 延时(&gt;4.7us)</li>
</ol>
<h4 id="代码-3"><a href="#代码-3" class="headerlink" title="代码"></a>代码</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">IIC_Stop</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">  IIC_SCL=<span class="number">0</span>;</span><br><span class="line">  IIC_SDA=<span class="number">0</span>;    </span><br><span class="line">   delay_us(<span class="number">4</span>);</span><br><span class="line">  IIC_SCL=<span class="number">1</span>; </span><br><span class="line">  IIC_SDA=<span class="number">1</span>;    </span><br><span class="line">  delay_us(<span class="number">4</span>);							   	</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="Response"><a href="#Response" class="headerlink" title="Response"></a>Response</h3><h4 id="物理层-3"><a href="#物理层-3" class="headerlink" title="物理层"></a>物理层</h4><p>​	主机SCL拉高，读取从机SDA的电平，为低电平表示产生应答</p>
<blockquote>
<ul>
<li>应答信号为低电平时，规定为有效应答位（ACK，简称应答位），表示接收器已经成功地接收了该字节</li>
<li>应答信号为高电平时，规定为非应答位（NACK），一般表示接收器接收该字节没有成功</li>
</ul>
</blockquote>
<ol>
<li>IIC_SCL&#x3D;0</li>
<li>IIC_SDA&#x3D;0</li>
<li>IIC_SCL&#x3D;1 读取ACK</li>
</ol>
<h4 id="代码-4"><a href="#代码-4" class="headerlink" title="代码"></a>代码</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">I2C_Ack</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">   IIC_SCL=<span class="number">0</span>;   <span class="comment">//先拉低SCL，使得SDA数据可以发生改变</span></span><br><span class="line">   IIC_SDA=<span class="number">0</span>;   </span><br><span class="line">   delay_us(<span class="number">2</span>);</span><br><span class="line">   IIC_SCL=<span class="number">1</span>;</span><br><span class="line">   delay_us(<span class="number">5</span>);</span><br><span class="line">   IIC_SCL=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">I2C_NAck</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">   IIC_SCL=<span class="number">0</span>;   <span class="comment">//先拉低SCL，使得SDA数据可以发生改变</span></span><br><span class="line">   IIC_SDA=<span class="number">1</span>;   <span class="comment">//拉高SDA，不产生应答信号</span></span><br><span class="line">   delay_us(<span class="number">2</span>);</span><br><span class="line">   IIC_SCL=<span class="number">1</span>;</span><br><span class="line">   delay_us(<span class="number">5</span>);</span><br><span class="line">   IIC_SCL=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h1 id="一些问题"><a href="#一些问题" class="headerlink" title="一些问题"></a>一些问题</h1><p>回答基于GPT</p>
<h2 id="IIC通信是如何区分ACK和数据的？"><a href="#IIC通信是如何区分ACK和数据的？" class="headerlink" title="IIC通信是如何区分ACK和数据的？"></a>IIC通信是如何区分ACK和数据的？</h2><blockquote>
<p>在 I2C 通信中，数据传输包括两个方向：主设备向从设备发送数据（写操作），以及从设备向主设备发送数据（读操作）。在这两种情况下，都需要一种方法来区分 ACK（应答）和数据。</p>
<p>下面是 I2C 中如何区分 ACK 和数据的一般流程：</p>
<ol>
<li><strong>写操作</strong>：<ul>
<li>主设备发送一个字节的数据给从设备。</li>
<li>每当主设备发送完一个字节后，会释放 SDA 线并将其拉高，等待从设备的应答。</li>
<li>如果从设备收到数据并且成功接收，它将拉低 SDA 线表示 ACK。</li>
<li>如果从设备未成功接收数据（或者不接收），它将保持 SDA 线高电平，表示 NACK（非应答）。</li>
</ul>
</li>
<li><strong>读操作</strong>：<ul>
<li>主设备向从设备发送一个读请求，并在准备接收数据时将 SDA 线拉高，进入接收模式。</li>
<li>从设备在每个数据字节的发送后，会将 SDA 线拉低或保持低电平来表示 ACK。</li>
<li>当从设备不再有数据发送时，它将保持 SDA 线高电平，表示 NACK。</li>
</ul>
</li>
</ol>
<p>在 I2C 中，ACK 和 NACK 的区别是在 SDA 线上的电平状态。ACK 是 SDA 线被拉低一段时间（通常是一个时钟周期），而 NACK 是 SDA 线保持高电平。</p>
<p>这种应答机制确保了数据的正确传输，并且主设备和从设备之间能够进行有效的通信。</p>
</blockquote>
<h2 id="IIC如何判断是否已经传输好了一个字节？否则会误判ACK信号吧"><a href="#IIC如何判断是否已经传输好了一个字节？否则会误判ACK信号吧" class="headerlink" title="IIC如何判断是否已经传输好了一个字节？否则会误判ACK信号吧"></a>IIC如何判断是否已经传输好了一个字节？否则会误判ACK信号吧</h2><blockquote>
<p>在 I2C 通信中，确实有一个机制来确保每个字节都被正确传输，以避免误判 ACK 信号。这个机制称为“时钟拉伸”（Clock Stretching）。</p>
<p>时钟拉伸是从设备（通常是从设备）可以通过拉低时钟线（SCL）来暂停主设备的时钟来延长传输时间的能力。当从设备需要更多时间来处理数据或准备发送应答时，它可以拉低 SCL 线来暂停时钟，从而保证数据传输的准确性。</p>
<p>在每个数据字节的传输中，主设备发送一个字节，并在每个时钟周期结束时等待从设备的应答。如果从设备需要额外时间，则可以拉伸时钟线。一旦从设备准备好应答，它就释放 SCL 线，使时钟继续，主设备就可以继续传输下一个字节或完成传输。</p>
<p>这种时钟拉伸的机制确保了主设备和从设备之间的同步，并且确保了每个字节都能够被正确传输。如果从设备在时钟拉伸期间没有完成数据的处理或准备应答，主设备会在检测到应答信号之前继续等待。</p>
<p>因此，在 I2C 通信中，即使有时钟拉伸，主设备仍能够正确判断 ACK 信号。</p>
</blockquote>
<h2 id="IIC如何判断是否已经传输好了一个字节？"><a href="#IIC如何判断是否已经传输好了一个字节？" class="headerlink" title="IIC如何判断是否已经传输好了一个字节？"></a>IIC如何判断是否已经传输好了一个字节？</h2><blockquote>
<p>在 I2C 中，主设备在发送每个字节时都会产生一个时钟脉冲（CLK）。这些时钟脉冲用于同步数据传输，并且在每个字节的传输之后，主设备需要知道何时应该停止发送数据并等待从设备的应答。</p>
<p>判断是否已经传输好了一个字节主要依赖于主设备的计数。主设备通常会发送8个时钟脉冲（对应一个字节的8位数据），然后等待从设备的应答。</p>
<p>具体的步骤如下：</p>
<ol>
<li>主设备发送一个字节的数据。</li>
<li>主设备在发送每个位时都会产生一个时钟脉冲（CLK），总共8个脉冲。</li>
<li>在发送完最后一个位后，主设备停止产生时钟脉冲，并等待从设备的应答。</li>
</ol>
<p>等待应答时，主设备可以通过检测SDA线上的电平来判断是否收到应答信号。如果从设备接收到了数据并正确处理，它会拉低SDA线（ACK），表示接收到数据并准备好接收下一个字节。如果从设备没有接收到数据或者出现错误，它会保持SDA线为高电平（NACK）。</p>
<p>通过这种方式，主设备可以判断是否已经传输好了一个字节，并且根据从设备的应答来进行相应的操作。</p>
</blockquote>
<h1 id="STM32-实现"><a href="#STM32-实现" class="headerlink" title="STM32 实现"></a>STM32 实现</h1><h2 id="标准库"><a href="#标准库" class="headerlink" title="标准库"></a>标准库</h2><h2 id="hal库"><a href="#hal库" class="headerlink" title="hal库"></a>hal库</h2>]]></content>
      <categories>
        <category>硬件技术</category>
      </categories>
      <tags>
        <tag>project</tag>
        <tag>STM32</tag>
        <tag>IIC</tag>
        <tag>OLED</tag>
        <tag>notes</tag>
        <tag>笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>STM32 PROJECT keyboard</title>
    <url>/2024/04/16/STM32-PROJECT-keyboard/</url>
    <content><![CDATA[<p>​	之前就有使用别烧好的MCU来进行键盘客制化，始终觉得不得劲。仅仅只是设计了键位PCB和外观，虽然也学到了点东西，但是我就是不爽啊。有一种核心技术自己没掌握的感觉。</p>
<p>​	新坑_STM32_KEYBOARD 开始！</p>
<p>​	二话不说就弃坑了一段时间。。。</p>
<p>​	直接上手STM32有些难了点，先用了别人的方案试试先。基于<code> sayo monkey board</code>的键盘</p>
<h1 id="Layout"><a href="#Layout" class="headerlink" title="Layout"></a>Layout</h1><p>基于网站[keyboard-layout-editor](<a href="http://www.keyboard-layout-editor.com/#/">Keyboard Layout Editor (keyboard-layout-editor.com)</a>)设计，同时使用<a href="http://builder.swillkb.com/">Plate &amp; Case Builder - swillkb</a>)导出DXF。</p>
<p><img src="/../images/keyboard/layout.png" alt="layoyt"></p>
<h1 id="PCB设计"><a href="#PCB设计" class="headerlink" title="PCB设计"></a>PCB设计</h1><p>​	其实很简单，就是模块套模块，画一下 板子的封装即可。</p>
<p><img src="/../images/keyboard/schematic.png" alt="schematic"></p>
<p><img src="/../images/keyboard/pcb_front.png" alt="pcb"></p>
<p><img src="/../images/keyboard/pcb_bottom.png" alt="pcb"></p>
<h1 id="外壳设计"><a href="#外壳设计" class="headerlink" title="外壳设计"></a>外壳设计</h1><p>​	只是简单的用亚克力打的，CAD还不是很会用。</p>
<p><img src="/../images/keyboard/shield.png" alt="pcb"></p>
]]></content>
      <categories>
        <category>软硬件结合</category>
      </categories>
      <tags>
        <tag>project</tag>
        <tag>STM32</tag>
        <tag>notes</tag>
        <tag>USB</tag>
        <tag>HID</tag>
      </tags>
  </entry>
  <entry>
    <title>STM32</title>
    <url>/2024/01/29/STM32/</url>
    <content><![CDATA[<h1 id="嵌入式基本概念"><a href="#嵌入式基本概念" class="headerlink" title="嵌入式基本概念"></a>嵌入式基本概念</h1><ul>
<li><p>嵌入式系统<br>  嵌入式系统是一种专门设计用于执行特定任务或控制特定设备的计算机系统。它通常包括硬件和软件两个部分，被嵌入到目标设备中，以实现特定的功能。</p>
</li>
<li><p>RTOS（Real-Time OS）</p>
<p>  一种专门设计用于嵌入式系统的操作系统。RTOS的主要特点是能够保证任务在预定的时间内得到及时处理，具有良好的实时性。</p>
</li>
</ul>
<h1 id="1-STM32和51"><a href="#1-STM32和51" class="headerlink" title="1. STM32和51"></a>1. STM32和51</h1><h2 id="1-51的优缺点"><a href="#1-51的优缺点" class="headerlink" title="1. 51的优缺点"></a>1. 51的优缺点</h2><h3 id="1-51-的优点"><a href="#1-51-的优点" class="headerlink" title="1. 51 的优点"></a>1. 51 的优点</h3><ul>
<li>硬件层面</li>
</ul>
<blockquote>
<ol>
<li>结构简单，8位</li>
<li>硬件到软件有一套按位操作系统。（进行位的操作：传送、置位、清零、测试，逻辑运算）</li>
<li>包含乘除法指令</li>
</ol>
</blockquote>
<ul>
<li>软件层面</li>
</ul>
<blockquote>
<ol>
<li>可以使用C进行编程</li>
</ol>
</blockquote>
<h3 id="2-51的缺点"><a href="#2-51的缺点" class="headerlink" title="2. 51的缺点"></a>2. 51的缺点</h3><ul>
<li>硬件层面</li>
</ul>
<blockquote>
<ol>
<li>功能少，运行速度慢</li>
<li>I&#x2F;O高电平无输出能力</li>
<li>保护能力差</li>
</ol>
</blockquote>
<h2 id="2-stm32的简介"><a href="#2-stm32的简介" class="headerlink" title="2.stm32的简介"></a>2.stm32的简介</h2><blockquote>
<p>​	由ST厂商推出的STM32系列单片机，行业的朋友都知道，这是一款性价比超高的系列单片机，应该没有之一，功能及其强大。其基于专为要求高性能、低成本、低功耗的嵌入式应用专门设计的ARM Cortex-M内核，同时具有一流的外设：1μs的双12位ADC，4兆位&#x2F;秒的UART，18兆位&#x2F;秒的SPI等等，在功耗和集成度方面也有不俗的表现，当然和MSP430的功耗比起来是稍微逊色的一些，但这并不影响工程师们对它的热捧程度，由于其简单的结构和易用的工具再配合其强大的功能在行业中赫赫有名。</p>
</blockquote>
<ul>
<li>强大功能体现</li>
</ul>
<blockquote>
<ol>
<li><p>内核<br>STM32 系列采用了多种 ARM Cortex-M 内核，包括 Cortex-M0、Cortex-M3、Cortex-M4 等，具有不同的性能和功能特点，可根据应用场景的需求进行选择。</p>
</li>
<li><p>时钟<br>STM32 系列支持多种时钟源，包括内部 RC 振荡器、内部晶体振荡器、外部晶体振荡器等，可根据应用场景的需求进行选择。同时还支持多种时钟分频和时钟输出等功能。</p>
</li>
<li><p>存储器<br>STM32 系列支持多种存储器类型，包括 Flash 存储器、RAM 存储器、EEPROM 存储器等，可以根据应用场景的需求进行选择。同时还支持多种存储器保护和存储器映射等功能。</p>
</li>
<li><p>支持多种通讯</p>
<p>STM32 系列还支持多种通信协议，如 SPI、I2C、CAN、USART 等。这使得 STM32 系列非常适合各种应用，特别是需要与其他设备或模块进行通信的应用。</p>
</li>
</ol>
</blockquote>
<h2 id="3-STM32F103C8T6-最小系统制作"><a href="#3-STM32F103C8T6-最小系统制作" class="headerlink" title="3.STM32F103C8T6 最小系统制作"></a>3.STM32F103C8T6 最小系统制作</h2><h3 id="1-供电电路"><a href="#1-供电电路" class="headerlink" title="1.供电电路"></a>1.供电电路</h3><h4 id="1-芯片特性"><a href="#1-芯片特性" class="headerlink" title="1.芯片特性"></a>1.芯片特性</h4><ul>
<li>操作定压Vdd&#x3D;2.0~3.6v</li>
<li>Vdd关闭后，RTC和备用寄存器可以从Vbat供电</li>
</ul>
<h3 id="2-电源转换电路"><a href="#2-电源转换电路" class="headerlink" title="2.电源转换电路"></a>2.电源转换电路</h3><ul>
<li>USB供电（5v）转3.3v供电</li>
</ul>
<p>​	采用AMS1117芯片</p>
<ul>
<li>AMS1117<ul>
<li>特点：</li>
</ul>
</li>
</ul>
<blockquote>
<p>Three Terminal Adjustable or Fixed Voltages* </p>
<p>• High Efficiency Linear Regulators  1.5V, 1.8V, 2.5V, 2.85V, 3.3V and 5.0V </p>
<p>• Post Regulators for Switching Supplies  • Output Current of 1A </p>
<p>• 5V to 3.3V Linear Regulator  </p>
<p>• Operates Down to 1V Dropout </p>
<p>• Line Regulation: 0.2% Max. </p>
<p>• Active SCSI Terminators  </p>
<p>• Load Regulation: 0.4% Max. </p>
<p>• SOT-223, TO-252 and SO-8 package</p>
</blockquote>
<h3 id="3-SWD下载电路"><a href="#3-SWD下载电路" class="headerlink" title="3.SWD下载电路"></a>3.SWD下载电路</h3><ul>
<li>PA13和PA14为STM32F103C8T6芯片的SWD下载调试引脚</li>
</ul>
<h3 id="4-时钟电路"><a href="#4-时钟电路" class="headerlink" title="4.时钟电路"></a>4.时钟电路</h3><ul>
<li>时钟源</li>
</ul>
<blockquote>
<p>三个不同的时钟源可以用来驱动系统时钟(SYSCLK)： </p>
<p>● HSI晶振时钟(高速内部时钟信号)  </p>
<p>● HSE晶振时钟(高速外部时钟信号)  </p>
<p>● PLL时钟 </p>
<p>STM32有两个二级时钟源： </p>
<p>● 40kHz的低速内部RC，它可以驱动独立看门狗，还可选择地通过程序选择驱动RTC。RTC 用于从停机&#x2F;待机模式下自动唤醒系统。 </p>
<p>● 32.768kHz的低速外部晶振，可选择它用来驱动RTC(RTCCLK)。</p>
</blockquote>
<ul>
<li>时钟电路（晶振电路）</li>
</ul>
<h3 id="5-复位电路"><a href="#5-复位电路" class="headerlink" title="5.复位电路"></a>5.复位电路</h3><ul>
<li><p>复位条件：</p>
<ul>
<li>NRST引脚上出现低电平(外部复位)  </li>
<li>窗口看门狗计数终止(WWDG复位)  </li>
<li>独立看门狗计数终止(IWDG复位)  </li>
<li>软件复位(SW复位)  </li>
<li>低功耗管理复位</li>
</ul>
</li>
<li><p>复位电路</p>
</li>
</ul>
<h3 id="6-外围测试电路"><a href="#6-外围测试电路" class="headerlink" title="6.外围测试电路"></a>6.外围测试电路</h3><ul>
<li>LED测试电路</li>
</ul>
<blockquote>
<ol>
<li>电源指示灯</li>
<li>烧录指示灯</li>
<li>blink程序测试用灯</li>
</ol>
</blockquote>
<ul>
<li>引脚引出</li>
</ul>
<h1 id="STM32的GPIO（待补充）"><a href="#STM32的GPIO（待补充）" class="headerlink" title="STM32的GPIO（待补充）"></a>STM32的GPIO（待补充）</h1><p>​	STM32的I&#x2F;O 端口有8种模式（4种输入模式和4种输出模式）。</p>
<blockquote>
<ul>
<li><p>GPIO工作模式—–输入</p>
<p>  1.浮空输入模式</p>
<p>  2.上拉输入模式</p>
<p>  3.下拉输入模式</p>
<p>  4.模拟输入模式</p>
</li>
<li><p>GPIO工作模式—–输出</p>
<p>  1.开漏输出模式</p>
<p>  2.推挽输出模式</p>
<p>  3.复用开漏输出</p>
<p>  4.复用推挽输出</p>
</li>
</ul>
</blockquote>
<h2 id="输入模式"><a href="#输入模式" class="headerlink" title="输入模式"></a>输入模式</h2><h3 id="1-输入浮空"><a href="#1-输入浮空" class="headerlink" title="1. 输入浮空"></a>1. 输入浮空</h3><ul>
<li>特性</li>
</ul>
<ol>
<li>I&#x2F;O端口的电平信号直接进入输入数据寄存器。</li>
<li>引脚悬空（在无信号输入）的情况下，读取该端口的电平是不确定的·</li>
</ol>
<ul>
<li>使用案例</li>
</ul>
<h3 id="2-输入上拉"><a href="#2-输入上拉" class="headerlink" title="2. 输入上拉"></a>2. 输入上拉</h3><ul>
<li>特性</li>
</ul>
<ol>
<li>IO<strong>内部</strong>接上拉电阻，此时如果IO口外部没有信号输入或者引脚悬空，IO口默认为高电平 </li>
<li>STM32 <strong>内部</strong>上拉输出的电流很弱的，需要大电流还是得外部上拉。</li>
</ol>
<ul>
<li>使用案例</li>
</ul>
<h3 id="3-输入下拉"><a href="#3-输入下拉" class="headerlink" title="3. 输入下拉"></a>3. 输入下拉</h3><ul>
<li>特性</li>
</ul>
<ol>
<li>IO内部接下拉电阻，此时如果IO口外部没有信号输入或者引脚悬空，IO口默认为低电平</li>
</ol>
<ul>
<li>使用案例</li>
</ul>
<h3 id="4-模拟输入"><a href="#4-模拟输入" class="headerlink" title="4. 模拟输入"></a>4. 模拟输入</h3><ul>
<li>特点</li>
</ul>
<ol>
<li>信号不经过施密特触发器，直接直接进入ADC模块，并且输入数据寄存器为空 ，CPU不能在输入数据寄存器上读到引脚状态</li>
<li>没有连接TTL触发器，这样保留最原始的电压值，不是转换过后的0和1信号</li>
<li>数据直接送到片上外设，一般是ADC模数转换器（Analog-to-Digital Converter）</li>
</ol>
<ul>
<li>使用案例</li>
</ul>
<p>用于连接模拟传感器或信号源，如温度传感器或光线传感器，可以通过ADC模块读取模拟电压值。</p>
<h2 id="输出模式（一知半解，待补充）"><a href="#输出模式（一知半解，待补充）" class="headerlink" title="输出模式（一知半解，待补充）"></a>输出模式（一知半解，待补充）</h2><h3 id="1-开漏输出"><a href="#1-开漏输出" class="headerlink" title="1. 开漏输出"></a>1. 开漏输出</h3><ul>
<li>特征</li>
</ul>
<ol>
<li>引脚可以输出低电平（逻辑0），但不能输出高电平，而是通过外部上拉电阻实现。</li>
</ol>
<ul>
<li>使用案例</li>
</ul>
<p>​	适用于实现多个引脚共享一个信号线的情况，如I2C总线或SPI总线。开漏输出模式允许多个设备通过外部上拉电阻共享同一条信号线，并且可以实现更高的灵活性和可靠性。</p>
<h3 id="2-推挽输出"><a href="#2-推挽输出" class="headerlink" title="2. 推挽输出"></a>2. 推挽输出</h3><h3 id=""><a href="#" class="headerlink" title=""></a></h3><ul>
<li>特征</li>
</ul>
<p>​	这意味着引脚可以输出高电平（逻辑1）或低电平（逻辑0），且能够提供或接受相对较高的电流。</p>
<ul>
<li>使用案例</li>
</ul>
<p>​	适用于驱动外部负载，如LED、继电器、蜂鸣器等。推挽输出模式在输出高电平时提供的电流较大，可以有效地驱动各种类型的负载。</p>
<h3 id="3-复用功能推挽输出"><a href="#3-复用功能推挽输出" class="headerlink" title="3. 复用功能推挽输出"></a>3. 复用功能推挽输出</h3><h3 id="-1"><a href="#-1" class="headerlink" title=""></a></h3><ul>
<li>特征</li>
</ul>
<p>在复用推挽输出模式下，GPIO引脚被配置为复用推挽输出，同时具有其他功能，如串行通信、定时器等。</p>
<ul>
<li>使用案例</li>
</ul>
<p>​	适用于需要在GPIO引脚上实现数字输出以及其他功能的应用场景。例如，将引脚配置为UART串行通信的TX引脚，同时可用于输出数字信号。</p>
<h3 id="4-复用功能开漏输出"><a href="#4-复用功能开漏输出" class="headerlink" title="4. 复用功能开漏输出"></a>4. 复用功能开漏输出</h3><h3 id="-2"><a href="#-2" class="headerlink" title=""></a></h3><ul>
<li><p>特征</p>
</li>
<li><p>使用案例</p>
</li>
</ul>
<h1 id="STM32-HAL库和标准库的比较"><a href="#STM32-HAL库和标准库的比较" class="headerlink" title="STM32 HAL库和标准库的比较"></a>STM32 HAL库和标准库的比较</h1><ul>
<li>抽象层级：<br>标准库：标准外设库提供了对STM32外设的低层次的直接访问，开发者需要直接操作外设的寄存器来配置和控制外设。<br>HAL库：HAL库提供了对STM32外设的高层次的抽象，通过一组统一的API接口，开发者可以更方便地配置和控制外设，而不必直接操作底层寄存器。</li>
<li>可移植性：<br>标准库：标准外设库的代码通常直接与特定型号的STM32微控制器相关联，因此在不同型号的微控制器之间的移植性较差。<br>HAL库：HAL库设计为具有一定的可移植性，可以在不同型号的STM32微控制器之间进行较为简单的移植。</li>
<li>易用性：<br>标准库：标准外设库需要开发者具有一定的硬件知识和对STM32微控制器的了解，操作相对复杂，学习曲线较陡。<br>HAL库：HAL库提供了一套统一的API接口，使得操作外设更加简单直观，适合初学者或者对硬件了解较少的开发者使用。</li>
<li>功能支持：<br>标准库：标准外设库通常提供了丰富的外设驱动程序，但功能相对较为基础，不支持一些高级特性。<br>HAL库：HAL库不仅提供了基础的外设驱动程序，还支持一些高级特性，如DMA、中断优先级管理、时钟配置等，能够满足更复杂的应用需求。</li>
</ul>
<p>总的来说，标准库更加接近硬件，直接操作寄存器，适合对硬件较为了解的开发者；而HAL库提供了更高层次的抽象，操作更加简便，适合快速开发应用程序。选择使用哪种库取决于开发者的具体需求和技术水平。</p>
<h1 id="标准库的功能"><a href="#标准库的功能" class="headerlink" title="标准库的功能"></a>标准库的功能</h1><ul>
<li>外设驱动支持：<br>  STM32标准库提供了丰富的外设驱动程序，包括GPIO、定时器、串口、SPI、I2C、ADC等，开发者可以直接调用这些函数来配置和控制外设，实现各种功能。</li>
<li>中断支持：<br>  标准库支持外部中断和定时器中断，在外设产生中断时能够及时响应，并执行相应的中断服务程序。开发者可以通过注册中断处理函数来实现自定义的中断处理逻辑。</li>
<li>时钟控制：<br>  STM32标准库提供了时钟配置功能，包括系统时钟和外设时钟的配置。开发者可以根据实际需求设置时钟源、时钟分频等参数，以满足系统的性能和功耗要求。</li>
<li>低功耗模式：<br>  标准库支持STM32微控制器的低功耗模式，包括停机模式、睡眠模式、待机模式等，开发者可以根据需要选择合适的低功耗模式来降低系统的功耗。</li>
<li>系统初始化和配置：<br>  标准库提供了系统初始化和配置函数，包括时钟初始化、外设初始化等，开发者可以在程序的启动阶段调用这些函数来配置系统的基本参数。</li>
<li>调试支持：<br>  标准库提供了一些调试功能，如串口打印输出、断言功能等，帮助开发者在调试和验证程序时更加方便。<br>  定时器和计数器： 标准库提供了定时器和计数器的功能支持，包括定时器的初始化、启动、停止等操作，以及定时器中断的配置和处理。</li>
<li>PWM输出：<br>  标准库支持PWM输出功能，开发者可以通过配置定时器和GPIO来生成PWM信号，用于控制电机、LED等外部设备。</li>
</ul>
<h1 id="案例程序"><a href="#案例程序" class="headerlink" title="案例程序"></a>案例程序</h1><h2 id="STM32的中断"><a href="#STM32的中断" class="headerlink" title="STM32的中断"></a>STM32的中断</h2><h3 id="概念解释"><a href="#概念解释" class="headerlink" title="概念解释"></a>概念解释</h3><h4 id="中断向量："><a href="#中断向量：" class="headerlink" title="中断向量："></a><strong>中断向量</strong>：</h4><p>中断向量是指用于唤醒处理器并跳转到相应<strong>中断服务程序（ISR）的特定地址</strong>。在中断发生时，处理器会根据中断类型查找相应的中断向量，并跳转到相应的中断服务程序开始执行中断处理。<strong>中断向量通常是固定的</strong>，由处理器或芯片设计者确定，因为它们对应于具体的中断类型。例如，某个中断类型可能对应到内存中的特定地址，而另一个中断类型可能对应到另一个地址。</p>
<h4 id="中断向量表："><a href="#中断向量表：" class="headerlink" title="中断向量表："></a><strong>中断向量表</strong>：</h4><p>中断向量表是一张表格，存储着所有中断类型对应的中断向量。每个中断向量都包含了中断发生时处理器应该跳转到的地址。在许多嵌入式系统中，中断向量表通常存储在固定的内存位置，处理器在发生中断时会根据中断类型找到相应的中断向量，并跳转到相应的中断服务程序。中断向量表的大小通常由中断类型的数量决定。</p>
<h4 id="NVIC"><a href="#NVIC" class="headerlink" title="NVIC"></a><strong>NVIC</strong></h4><p>NVIC是ARM Cortex-M系列微控制器中的一个重要组件，用于管理和控制中断</p>
<h4 id="AFIO"><a href="#AFIO" class="headerlink" title="AFIO"></a><strong>AFIO</strong></h4><p>AFIO代表Alternate Function Input Output（备用功能输入输出），是STM32系列微控制器中的一个模块。AFIO模块允许用户配置GPIO引脚的备用功能，包括串行通信、定时器、中断控制等。</p>
<h3 id="硬件特性"><a href="#硬件特性" class="headerlink" title="硬件特性"></a>硬件特性</h3><ol>
<li>68个可屏蔽中断通道，包含EXTI、TIM、ADC、USART、SPI、I2C、RTC等多个外设</li>
<li>使用<strong>NVIC</strong><code>NVIC代表Nested Vectored Interrupt Controller（嵌套向量中断控制器）。NVIC是ARM Cortex-M系列微控制器中的一个重要组件，用于管理和控制中断。</code>统一管理中断，每个中断通道都拥有16个可编程的优先等级，可对优先级进行分组，进一步设置抢占优先级和响应优先级</li>
<li>优先级分组<ol>
<li>抢占优先级：越高可以中断嵌套</li>
<li>响应优先级：越高可以优先排队</li>
</ol>
</li>
</ol>
<h3 id="外部中断（-E-X-T-I-）"><a href="#外部中断（-E-X-T-I-）" class="headerlink" title="外部中断（ E X T I ）"></a>外部中断（ E X T I ）</h3><h4 id="硬件特性："><a href="#硬件特性：" class="headerlink" title="硬件特性："></a>硬件特性：</h4><ol>
<li>触发方式：上升沿&#x2F;下降沿&#x2F;双边沿&#x2F;软件触发</li>
<li>支持所有GPIO口，但相同的Pin不能同时触发中断</li>
<li>通道数：16个GPIO_Pin，外加PVD输出、RTC闹钟、USB唤醒、以太网唤醒</li>
</ol>
<h4 id="结构体初始化配置过程"><a href="#结构体初始化配置过程" class="headerlink" title="结构体初始化配置过程"></a>结构体初始化配置过程</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*开启时钟*/</span></span><br><span class="line">  RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOB, ENABLE);		<span class="comment">//开启GPIOB的时钟</span></span><br><span class="line">  RCC_APB2PeriphClockCmd(RCC_APB2Periph_AFIO, ENABLE);		<span class="comment">//开启AFIO的时钟，外部中断必须开启AFIO的时钟</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment">/*GPIO初始化*/</span></span><br><span class="line">  GPIO_InitTypeDef GPIO_InitStructure;</span><br><span class="line">  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IPU;</span><br><span class="line">  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_14;</span><br><span class="line">  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;</span><br><span class="line">  GPIO_Init(GPIOB, &amp;GPIO_InitStructure);						<span class="comment">//将PB14引脚初始化为上拉输入</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment">/*AFIO选择中断引脚*/</span></span><br><span class="line">  GPIO_EXTILineConfig(GPIO_PortSourceGPIOB, GPIO_PinSource14);<span class="comment">//将外部中断的14号线映射到GPIOB，即选择PB14为外部中断引脚</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment">/*EXTI初始化*/</span></span><br><span class="line">  EXTI_InitTypeDef EXTI_InitStructure;						<span class="comment">//定义结构体变量</span></span><br><span class="line">  EXTI_InitStructure.EXTI_Line = EXTI_Line14;					<span class="comment">//选择配置外部中断的14号线</span></span><br><span class="line">  EXTI_InitStructure.EXTI_LineCmd = ENABLE;					<span class="comment">//指定外部中断线使能</span></span><br><span class="line">  EXTI_InitStructure.EXTI_Mode = EXTI_Mode_Interrupt;			<span class="comment">//指定外部中断线为中断模式</span></span><br><span class="line">  EXTI_InitStructure.EXTI_Trigger = EXTI_Trigger_Falling;		<span class="comment">//指定外部中断线为下降沿触发</span></span><br><span class="line">  EXTI_Init(&amp;EXTI_InitStructure);								<span class="comment">//将结构体变量交给EXTI_Init，配置EXTI外设</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment">/*NVIC中断分组*/</span></span><br><span class="line">  NVIC_PriorityGroupConfig(NVIC_PriorityGroup_2);				<span class="comment">//配置NVIC为分组2</span></span><br><span class="line">                                <span class="comment">//即抢占优先级范围：0~3，响应优先级范围：0~3</span></span><br><span class="line">                                <span class="comment">//此分组配置在整个工程中仅需调用一次</span></span><br><span class="line">                                <span class="comment">//若有多个中断，可以把此代码放在main函数内，while循环之前</span></span><br><span class="line">                                <span class="comment">//若调用多次配置分组的代码，则后执行的配置会覆盖先执行的配置</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment">/*NVIC配置*/</span></span><br><span class="line">  NVIC_InitTypeDef NVIC_InitStructure;						<span class="comment">//定义结构体变量</span></span><br><span class="line">  NVIC_InitStructure.NVIC_IRQChannel = EXTI15_10_IRQn;		<span class="comment">//选择配置NVIC的EXTI15_10线</span></span><br><span class="line">  NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;				<span class="comment">//指定NVIC线路使能</span></span><br><span class="line">  NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = <span class="number">1</span>;	<span class="comment">//指定NVIC线路的抢占优先级为1</span></span><br><span class="line">  NVIC_InitStructure.NVIC_IRQChannelSubPriority = <span class="number">1</span>;			<span class="comment">//指定NVIC线路的响应优先级为1</span></span><br></pre></td></tr></table></figure>





<h1 id="遇到问题"><a href="#遇到问题" class="headerlink" title="遇到问题"></a>遇到问题</h1><h2 id="OLED屏幕不显示（未解决）"><a href="#OLED屏幕不显示（未解决）" class="headerlink" title="OLED屏幕不显示（未解决）"></a>OLED屏幕不显示<del>（未解决）</del></h2><p>​	使用 STM32以IIC的协议进行通信来在0.96寸OLED屏幕显示失败。但是使用arduino uno时显示正常。</p>
<p>​	经过检验，发现使用的芯片为<code>STM32f103c6t6</code> 默认<code>i2c</code>输出引脚为<code>PB6(SCL) PB7(SDA)</code>而<code>STM32f103c8t6</code>有两组<code>I2C</code>引脚，分别是<code>&#123; PB6(SCL) PB7(SDA) &#125; 和&#123; PB8(SCL) PB9(SDA)&#125;</code></p>
<p>​	多看看技术手册！！！</p>
<h3 id="不同芯片功能对比"><a href="#不同芯片功能对比" class="headerlink" title="不同芯片功能对比"></a>不同芯片功能对比</h3><blockquote>
<ol>
<li><p>C6T6没有串口3（及USART3）；</p>
</li>
<li><p>C6T6没有通用定时器TIM4；</p>
</li>
<li><p>C6T6没有串行外设接口SPI2；</p>
</li>
<li><p>C6T6没有I2C2</p>
</li>
<li><p>C6T6的flash为32K， C8T6为64K；</p>
</li>
<li><p>C6T6的RAM为10K，C8T6为20K。</p>
<p>总结就是C8T6比C6T6多了一个串口、一个定时器、一个串行外设接口、一个I2C、内存大一点！</p>
</li>
</ol>
</blockquote>
<ul>
<li>IIC协议的上拉电阻已考虑</li>
<li>电压大小已考虑</li>
<li>芯片引脚特性</li>
</ul>
]]></content>
      <categories>
        <category>硬件技术</category>
      </categories>
      <tags>
        <tag>STM32</tag>
        <tag>笔记</tag>
        <tag>嵌入式</tag>
      </tags>
  </entry>
  <entry>
    <title>STM32开发板绘制（首次使用嘉立创SMT）</title>
    <url>/2024/10/31/STM32%E5%BC%80%E5%8F%91%E6%9D%BF%E7%BB%98%E5%88%B6%EF%BC%88%E9%A6%96%E6%AC%A1%E4%BD%BF%E7%94%A8%E5%98%89%E7%AB%8B%E5%88%9BSMT%EF%BC%89/</url>
    <content><![CDATA[<p><img src="/../images/PCB/STM32UNO/3.png" alt="PCB"></p>
<p><img src="/../images/PCB/STM32UNO/1.png" alt="PCB"></p>
<p><img src="/../images/PCB/STM32UNO/2.jpg" alt="PCB"></p>
<h1 id="一次点亮！！"><a href="#一次点亮！！" class="headerlink" title="一次点亮！！"></a>一次点亮！！</h1><p>​	以后引脚还是选择排针吧，排母不太稳定，烧录的时候可能会出现问题。</p>
]]></content>
      <categories>
        <category>硬件技术</category>
      </categories>
      <tags>
        <tag>STM32</tag>
        <tag>笔记</tag>
        <tag>嵌入式</tag>
        <tag>项目</tag>
        <tag>PCB</tag>
        <tag>最小系统</tag>
        <tag>SMT</tag>
        <tag>嘉立创</tag>
      </tags>
  </entry>
  <entry>
    <title>STM32 SPI with 0.96 OLED</title>
    <url>/2024/05/19/STM32-SPI-with-0-96-OLED/</url>
    <content><![CDATA[<h1 id="SPI协议"><a href="#SPI协议" class="headerlink" title="SPI协议"></a>SPI协议</h1><h2 id="基本介绍"><a href="#基本介绍" class="headerlink" title="基本介绍"></a>基本介绍</h2><p><a href="https://regenm.github.io/2024/01/29/%E5%B8%B8%E8%A7%81%E9%80%9A%E4%BF%A1%E5%8D%8F%E8%AE%AE%E4%BB%A5%E5%8F%8A%E9%80%9A%E4%BF%A1%E6%96%B9%E5%BC%8F/">点击跳转</a></p>
<p>​	SPI有主、从两种模式，通常由一个主模块和一个或多个从模块组成（SPI不支持多主机），主模块选择一个从模块进行同步通信，从而完成数据的交换。<strong>提供时钟的为主设备</strong>（Master），接收时钟的设备为从设备（Slave），SPI接口的读写操作，都是由主设备发起，当存在多个从设备时，通过各自的片选信号进行管理。</p>
<h3 id="引脚定义"><a href="#引脚定义" class="headerlink" title="引脚定义"></a>引脚定义</h3><ol>
<li><strong>MISO</strong>（ Master Input Slave Output）：主设备数据输入，从设备数据输出；</li>
<li><strong>MOSI</strong>（Master Output Slave Input）：主设备数据输出，从设备数据输入；</li>
<li><strong>SCLK</strong>（Serial Clock）：时钟信号，由主设备产生；</li>
<li><strong>CS&#x2F;SS</strong>（Chip Select&#x2F;Slave Select）：从设备使能信号，由主设备控制，一主多从时，CS&#x2F;SS是从芯片是否被主芯片选中的控制信号，只有片选信号为预先规定的使能信号时（高电位或低电位），主芯片对此从芯片的操作才有效。</li>
</ol>
<h2 id="通信原理"><a href="#通信原理" class="headerlink" title="通信原理"></a>通信原理</h2><p>SPI主设备和从设备都有一个串行移位寄存器，一次传输为8位。</p>
<h3 id="通信流程"><a href="#通信流程" class="headerlink" title="通信流程"></a>通信流程</h3><ol>
<li>主设备发起信号，将CS&#x2F;SS拉低，启动通信。</li>
<li>主设备通过发送时钟信号，来告诉从设备进行写数据或者读数据操作（采集时机可能是时钟信号的上升沿（从低到高）或下降沿（从高到低）），它将立即读取数据线上的信号，这样就得到了一位数据（1bit）。</li>
<li>主机（Master）将要发送的数据写到发送数据缓存区（Menory），缓存区经过移位寄存器（缓存长度不一定，看单片机配置），串行移位寄存器通过MOSI信号线将字节一位一位的移出去传送给从机，同时MISO接口接收到的数据经过移位寄存器一位一位的移到接收缓存区。</li>
<li>从机（Slave）也将自己的串行移位寄存器（缓存长度不一定，看单片机配置）中的内容通过MISO信号线返回给主机。同时通过MOSI信号线接收主机发送的数据，这样，两个移位寄存器中的内容就被交换。</li>
</ol>
<h2 id="STM32实现（使用0-96Oled）"><a href="#STM32实现（使用0-96Oled）" class="headerlink" title="STM32实现（使用0.96Oled）"></a>STM32实现（使用0.96Oled）</h2><h3 id="0-96Oled引脚介绍"><a href="#0-96Oled引脚介绍" class="headerlink" title="0.96Oled引脚介绍"></a>0.96Oled引脚介绍</h3><ol>
<li>GND	 &lt;—&gt;    电源地</li>
<li>VCC      &lt;—&gt;   电源正（3～5.5V）</li>
<li>D0(SCL) &lt;—&gt;  SCK管脚</li>
<li>D1(SDA) &lt;—&gt;   MOSI管脚</li>
<li>RES(RST) &lt;—&gt;用来复位（低电平复位）</li>
<li>DC(D&#x2F;C) &lt;—&gt;   数据和命令控制管脚 1表示数据 0表示命令</li>
<li>CS(NSS) &lt;—&gt;  片选管脚</li>
</ol>
]]></content>
      <categories>
        <category>软硬件技术</category>
      </categories>
      <tags>
        <tag>project</tag>
        <tag>STM32</tag>
        <tag>OLED</tag>
        <tag>notes</tag>
        <tag>笔记</tag>
        <tag>SPI</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot+vue+mysql项目实训</title>
    <url>/2024/07/03/SpringBoot-vue-mysql%E9%A1%B9%E7%9B%AE%E5%AE%9E%E8%AE%AD/</url>
    <content><![CDATA[<h2 id="常见的项目类型以及优缺点和应用范围"><a href="#常见的项目类型以及优缺点和应用范围" class="headerlink" title="常见的项目类型以及优缺点和应用范围"></a>常见的项目类型以及优缺点和应用范围</h2><ol>
<li><p><strong>Spring Boot + Vue + MySQL</strong></p>
<h4 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h4><ol>
<li><strong>强大的后端支持</strong>：<ul>
<li><strong>Spring Boot</strong> 提供了成熟的后端框架和丰富的生态系统，包括依赖注入、数据访问、事务管理等功能，适合构建复杂的企业级应用。</li>
</ul>
</li>
<li><strong>灵活的前端开发</strong>：<ul>
<li><strong>Vue</strong> 是一个轻量级的前端框架，易于学习和上手，具有响应式数据绑定和组件化开发的优势，适合构建动态且高效的用户界面。</li>
</ul>
</li>
<li><strong>可靠的数据库</strong>：<ul>
<li><strong>MySQL</strong> 是一个广泛使用的开源关系型数据库管理系统，具有稳定性高、性能优越、支持大规模并发访问等特点，适合各种规模的应用。</li>
</ul>
</li>
<li><strong>全栈开发一体化</strong>：<ul>
<li>Spring Boot + Vue 的组合使得开发人员可以使用相似的语言和工具栈进行全栈开发，提高了开发效率和团队协作。</li>
</ul>
</li>
<li><strong>社区支持和文档丰富</strong>：<ul>
<li>Spring Boot 和 Vue 都拥有庞大的社区和丰富的文档资源，开发过程中能够快速获取到解决方案和技术支持。</li>
</ul>
</li>
</ol>
<h4 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h4><ol>
<li><strong>复杂的配置和学习曲线</strong>：<ul>
<li>Spring Boot 的配置和依赖管理相对复杂，需要一定的学习成本和经验来优化和调整项目。</li>
<li>Vue 虽然易于上手，但在复杂的单页应用中，需要深入理解其组件通信和状态管理等高级特性。</li>
</ul>
</li>
<li><strong>前后端分离的管理挑战</strong>：<ul>
<li>前后端分离架构需要额外的工作来管理跨团队和跨技术栈的协作，需要定义清晰的接口和数据传输方案。</li>
</ul>
</li>
<li><strong>数据库扩展性限制</strong>：<ul>
<li>虽然 MySQL 适合大多数应用场景，但在需要处理非结构化数据或需要高度扩展性的大规模应用中，可能需要考虑其他数据库解决方案。</li>
</ul>
</li>
</ol>
<h4 id="应用范围"><a href="#应用范围" class="headerlink" title="应用范围"></a>应用范围</h4><ul>
<li><strong>企业级应用</strong>：适用于需要高性能、高可扩展性和稳定性的企业级应用开发，如ERP系统、电子商务平台等。</li>
<li><strong>信息管理系统</strong>：能够处理大量结构化数据的信息管理系统，如客户关系管理（CRM）、人力资源管理（HRM）等。</li>
<li><strong>数据驱动型应用</strong>：适用于需要大量数据处理和复杂查询的应用，如数据分析平台、报表生成系统等。</li>
<li><strong>中小型项目</strong>：对于中小型项目来说，Spring Boot + Vue 提供了良好的开发体验和成本效益，能够快速构建并部署应用。</li>
</ul>
</li>
<li><p>Spring Boot + Angular + PostgreSQL</p>
<h4 id="优点-1"><a href="#优点-1" class="headerlink" title="优点"></a>优点</h4><ul>
<li><strong>强大的后端框架</strong>：Spring Boot 提供了成熟且强大的企业级开发支持，尤其适用于大型项目。</li>
<li><strong>全面的前端框架</strong>：Angular 提供了完整的解决方案，适合构建复杂的单页应用，具有双向数据绑定和依赖注入等特性。</li>
<li><strong>强大的数据库</strong>：PostgreSQL 是一个功能强大的开源关系型数据库，支持复杂的查询和大数据处理。</li>
</ul>
<h4 id="缺点-1"><a href="#缺点-1" class="headerlink" title="缺点"></a>缺点</h4><ul>
<li><strong>学习曲线</strong>：Angular 相比其他前端框架更为复杂，学习和掌握需要较长时间。</li>
<li><strong>配置复杂</strong>：Spring Boot 和 PostgreSQL 的配置和优化需要一定的经验和技术。</li>
</ul>
<h4 id="应用范围-1"><a href="#应用范围-1" class="headerlink" title="应用范围"></a>应用范围</h4><ul>
<li>适用于需要高性能和高可扩展性的企业级应用。</li>
<li>适用于需要复杂业务逻辑和数据处理的后台系统。</li>
<li>适用于需要构建复杂单页应用（SPA）的项目。</li>
</ul>
</li>
<li><p>Node.js + React + MongoDB</p>
<h4 id="优点-2"><a href="#优点-2" class="headerlink" title="优点"></a>优点</h4><ul>
<li><strong>高性能的后端</strong>：Node.js 基于事件驱动和非阻塞I&#x2F;O模型，适合高并发和实时应用。</li>
<li><strong>灵活的前端框架</strong>：React 具有组件化开发模式和虚拟DOM，适合构建复杂和高性能的用户界面。</li>
<li><strong>灵活的数据库</strong>：MongoDB 是一种NoSQL数据库，适合处理大规模数据和快速开发。</li>
</ul>
<h4 id="缺点-2"><a href="#缺点-2" class="headerlink" title="缺点"></a>缺点</h4><ul>
<li><strong>回调地狱</strong>：Node.js 的异步编程模型可能导致“回调地狱”，需要使用Promise或async&#x2F;await进行优化。</li>
<li><strong>数据一致性问题</strong>：MongoDB 在某些情况下可能会遇到数据一致性问题，需要注意数据的管理和维护。</li>
</ul>
<h4 id="应用范围-2"><a href="#应用范围-2" class="headerlink" title="应用范围"></a>应用范围</h4><ul>
<li>适用于需要高并发和实时性要求的应用，如聊天系统和实时通知。</li>
<li>适用于需要快速迭代和开发的Web应用和移动应用后端。</li>
<li>适用于处理大规模数据和非结构化数据的应用。</li>
</ul>
</li>
<li><p>Django + Angular + PostgreSQL</p>
<h4 id="优点-3"><a href="#优点-3" class="headerlink" title="优点"></a>优点</h4><ul>
<li><strong>成熟的后端框架</strong>：Django 提供了快速开发和高效管理的优势，内置了管理后台、ORM等功能，适合快速构建Web应用。</li>
<li><strong>全面的前端框架</strong>：Angular 提供了完整的解决方案，适合构建复杂的单页应用，具有双向数据绑定和依赖注入等特性。</li>
<li><strong>强大的数据库</strong>：PostgreSQL 是一个功能强大的开源关系型数据库，支持复杂的查询和大数据处理。</li>
</ul>
<h4 id="缺点-3"><a href="#缺点-3" class="headerlink" title="缺点"></a>缺点</h4><ul>
<li><strong>学习曲线</strong>：Angular 相比其他前端框架更为复杂，学习和掌握需要较长时间。</li>
<li><strong>配置复杂</strong>：Django 的配置和优化需要一定的经验和技术。</li>
</ul>
<h4 id="应用范围-3"><a href="#应用范围-3" class="headerlink" title="应用范围"></a>应用范围</h4><ul>
<li>适用于需要快速开发和部署的Web应用。</li>
<li>适用于需要复杂业务逻辑和数据处理的后台系统。</li>
<li>适用于需要构建复杂单页应用（SPA）的项目。</li>
</ul>
</li>
<li><p>Flask + Vue + SQLite</p>
<h4 id="优点-4"><a href="#优点-4" class="headerlink" title="优点"></a>优点</h4><ul>
<li><strong>轻量级后端框架</strong>：Flask 是一个轻量级的Web框架，灵活且易于上手，适合小型项目和原型开发。</li>
<li><strong>灵活的前端框架</strong>：Vue.js 易于上手，具有灵活的组件化开发模式，适合快速开发和构建响应式用户界面。</li>
<li><strong>轻量级数据库</strong>：SQLite 是一个嵌入式数据库，适合小型应用和测试环境。</li>
</ul>
<h4 id="缺点-4"><a href="#缺点-4" class="headerlink" title="缺点"></a>缺点</h4><ul>
<li><strong>功能有限</strong>：Flask 相比Django等框架功能较少，适合简单和中小型项目。</li>
<li><strong>数据库限制</strong>：SQLite 不适合大规模和高并发的应用，性能和功能相对有限。</li>
</ul>
<h4 id="应用范围-4"><a href="#应用范围-4" class="headerlink" title="应用范围"></a>应用范围</h4><ul>
<li>适用于小型Web应用和原型开发。</li>
<li>适用于需要快速迭代和开发的项目。</li>
<li>适用于资源有限的应用和测试环境。</li>
</ul>
</li>
</ol>
<blockquote>
<h3 id="1-Angular"><a href="#1-Angular" class="headerlink" title="1. Angular"></a>1. Angular</h3><p><strong>Angular</strong> 是由Google开发和维护的一款前端框架，用于构建单页应用（SPA）和动态Web应用。它采用了TypeScript语言进行开发，提供了强大的组件化架构、数据绑定、依赖注入等功能，帮助开发人员更高效地构建复杂的用户界面和交互逻辑。</p>
<h3 id="2-PostgreSQL"><a href="#2-PostgreSQL" class="headerlink" title="2. PostgreSQL"></a>2. PostgreSQL</h3><p><strong>PostgreSQL</strong> 是一个强大的开源关系型数据库管理系统（RDBMS），具有高度的可扩展性、可靠性和丰富的功能集。它支持复杂的SQL查询、事务处理、触发器、视图等数据库特性，适合于处理大规模数据和复杂的数据操作。</p>
<h3 id="3-Node-js"><a href="#3-Node-js" class="headerlink" title="3. Node.js"></a>3. Node.js</h3><p><strong>Node.js</strong> 是一个基于Chrome V8引擎的JavaScript运行时环境，用于构建快速、可扩展的网络应用。Node.js采用事件驱动、非阻塞I&#x2F;O模型，适合于处理大量并发请求和实时应用，如Web服务器、API服务器等。</p>
<h3 id="4-React"><a href="#4-React" class="headerlink" title="4. React"></a>4. React</h3><p><strong>React</strong> 是由Facebook开发和维护的一款用于构建用户界面的JavaScript库。它采用组件化开发模式和虚拟DOM技术，使得开发人员能够高效地构建复杂的用户界面，实现数据与视图的高效同步更新。</p>
<h3 id="5-MongoDB"><a href="#5-MongoDB" class="headerlink" title="5. MongoDB"></a>5. MongoDB</h3><p><strong>MongoDB</strong> 是一个基于分布式文件存储的开源NoSQL数据库，采用文档存储方式，适合处理非结构化和大数据量的数据。它具有高性能、高可用性和易扩展等特点，常用于Web应用和大数据处理中。</p>
<h3 id="6-Flask"><a href="#6-Flask" class="headerlink" title="6. Flask"></a>6. Flask</h3><p><strong>Flask</strong> 是一个轻量级的Python Web框架，设计简单且易于扩展，适合快速开发原型和小型Web应用。Flask提供了基本的路由、模板引擎和WSGI支持，同时允许开发者根据需求选择扩展和库，以便构建特定需求的应用。</p>
<h3 id="7-Django"><a href="#7-Django" class="headerlink" title="7. Django"></a>7. Django</h3><p><strong>Django</strong> 是一个由Python编写的开源Web应用框架，设计用于快速开发和复杂的Web应用。Django提供了完整的开发工具集，包括ORM、管理界面、表单处理、认证系统等，使得开发人员能够快速构建安全、可维护的Web应用。</p>
<h3 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h3><ul>
<li><strong>Angular</strong> 和 <strong>React</strong> 适合构建复杂的单页应用和动态用户界面，具有较高的交互性和可扩展性。</li>
<li><strong>PostgreSQL</strong> 和 <strong>MongoDB</strong> 分别适合处理关系型和非关系型数据存储，根据数据模型和应用需求选择合适的数据库系统。</li>
<li><strong>Node.js</strong> 和 <strong>Django</strong> &#x2F; <strong>Flask</strong> 可以用于构建服务器端应用，提供API服务或渲染动态内容，具有不同的开发风格和适用场景。</li>
</ul>
</blockquote>
<h2 id="快速搭建项目的选择"><a href="#快速搭建项目的选择" class="headerlink" title="快速搭建项目的选择"></a>快速搭建项目的选择</h2><p>​	对Java和Spring技术栈比较熟悉，并且项目需要稳定性和扩展性，Spring Boot + Vue + MySQL 是一个很好的选择。如果项目需求相对简单且对响应速度要求较高，Flask + Vue + SQLite 可能更适合快速完成项目。</p>
<h1 id="SpringBoot-后端部分"><a href="#SpringBoot-后端部分" class="headerlink" title="SpringBoot( 后端部分 )"></a>SpringBoot( 后端部分 )</h1><h2 id="框架介绍"><a href="#框架介绍" class="headerlink" title="框架介绍"></a>框架介绍</h2><p><code>src/main/java/com/example/project/Application.java</code>：Spring Boot 启动类。</p>
<p><code>src/main/java/com/example/project/controller</code>：控制器层，处理 HTTP 请求。</p>
<p>​	是一个用于处理用户请求并返回响应的关键组件。</p>
<blockquote>
<p><strong>处理HTTP请求</strong>：</p>
<ul>
<li>控制器负责接收来自客户端的HTTP请求，通过映射的URL路径（如<code>/home</code>）或者其他标识符来确定具体要调用的处理方法。</li>
</ul>
<p><strong>处理业务逻辑</strong>：</p>
<ul>
<li>控制器包含了应用程序的业务逻辑，它可以调用Service层或者其他组件来完成数据处理、业务计算等操作。</li>
</ul>
<p><strong>返回响应</strong>：</p>
<ul>
<li>一旦业务逻辑处理完成，控制器负责将结果打包成响应对象（如JSON数据、HTML页面等）并返回给客户端。</li>
</ul>
</blockquote>
<p><code>src/main/java/com/example/project/service</code>：服务层，包含业务逻辑。</p>
<p>用于实现业务逻辑的组件，它通常位于应用的服务层，负责处理业务逻辑、数据处理和协调不同的数据访问对象（DAO）来完成特定的业务需求。</p>
<blockquote>
<p><strong>实现业务逻辑</strong>：</p>
<ul>
<li>Service层负责实现应用程序的业务逻辑，例如计算、数据处理、数据校验等。它包含了应用程序的核心功能，与具体的数据存取逻辑（如数据库操作）分离。</li>
</ul>
<p><strong>事务管理</strong>：</p>
<ul>
<li>Service层通常是事务的边界，负责管理事务的开始和结束。在Spring中，可以通过注解（如 <code>@Transactional</code>）来声明事务边界，确保业务方法执行的一致性和完整性。</li>
</ul>
<p><strong>协调DAO</strong>：</p>
<ul>
<li>Service层通常会调用一个或多个DAO（数据访问对象）来访问数据存储（如数据库）。它负责协调多个DAO的操作，将数据访问的细节隐藏在业务逻辑之后。</li>
</ul>
<p><strong>业务逻辑的组织</strong>：</p>
<ul>
<li>Service层帮助组织应用程序的业务逻辑，使得控制器（Controller）层可以专注于处理用户请求和响应，而不必处理复杂的业务逻辑。</li>
</ul>
<p><strong>解耦和重用</strong>：</p>
<ul>
<li>将业务逻辑封装在Service层中有助于解耦，使得不同的模块可以独立开发和测试。Service层中的方法也可以被多个控制器复用，提高了代码的重用性。</li>
</ul>
</blockquote>
<p><code>src/main/java/com/example/project/dao</code>：数据访问层，包含与数据库交互的代码。</p>
<p>在传统的Java EE 或者 Spring 中，通常将数据访问层（DAO，Data Access Object）的实现与配置与数据库交互的语句分开。在这种情况下，DAO 层的实现可能是直接使用 SQL 语句（通常存储在 XML 文件中）与数据库进行交互。在 MyBatis 框架中，这些 SQL 语句存储在 XML 文件中，并且可以使用一组规则来映射 Java 对象和数据库记录</p>
<p><code>src/main/java/com/example/project/entity</code>：数据模型，包含实体类。</p>
<p>指代表应用程序中的数据模型或持久化数据的类</p>
<blockquote>
<p><strong>数据模型定义</strong>：</p>
<ul>
<li>Entity 在应用程序中用于定义数据模型的结构。它们通常反映了数据库中表的结构，包括表的字段、关联关系等。</li>
</ul>
<p><strong>持久化</strong>：</p>
<ul>
<li>Entity 对象与数据库中的表（或文档、集合等）进行映射，使得应用程序能够方便地读取和存储数据。通过持久化操作，Entity 可以保存到数据库中，并能够从数据库中检索数据。</li>
</ul>
<p><strong>使用注解标识</strong>：</p>
<ul>
<li>在Spring中，可以使用注解（如 <code>@Entity</code>、<code>@Table</code>、<code>@Id</code>、<code>@Column</code> 等）来标识一个类为Entity，并指定与之关联的数据库表、主键等信息。</li>
</ul>
<p><strong>ORM框架支持</strong>：</p>
<ul>
<li>Spring框架通常与ORM（对象关系映射）框架（如 Hibernate、Spring Data JPA 等）集成使用。ORM框架负责将Entity对象与数据库记录进行映射，简化了数据访问和操作的过程。</li>
</ul>
<p><strong>业务逻辑的基础</strong>：</p>
<ul>
<li>Entity对象作为应用程序中的基本数据单位，它们通常与业务逻辑紧密相关。通过操作Entity对象，可以实现应用程序的各种业务逻辑需求。</li>
</ul>
</blockquote>
<p><code>src/main/resources/application.properties</code>：配置文件，包含应用程序的配置项。</p>
<p>例如：</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring.application.name</span>=<span class="string">his</span></span><br><span class="line"><span class="attr">server.servlet.contextPath</span>=<span class="string">/his</span></span><br><span class="line"><span class="attr">server.port</span>=<span class="string">8082</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring.datasource.driverClassName</span>=<span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line"><span class="attr">spring.datasource.url</span>=<span class="string">jdbc:mysql://192.168.98.130:3306/his?serverTimezone=GMT%2B8&amp;useSSL=false&amp;allowPublicKeyRetrieval=true</span></span><br><span class="line"><span class="attr">spring.datasource.username</span>=<span class="string">root</span></span><br><span class="line"><span class="attr">spring.datasource.password</span>=<span class="string">123456</span></span><br><span class="line"></span><br><span class="line"><span class="attr">mybatis.typeAliasesPackage</span>=<span class="string">com.sample.his.entity</span></span><br><span class="line"><span class="attr">mybatis.mapperLocations</span>=<span class="string">classpath:mapper/*.xml</span></span><br><span class="line"><span class="attr">mybatis.configuration.logImpl</span>=<span class="string">org.apache.ibatis.logging.stdout.StdOutImpl</span></span><br><span class="line"></span><br><span class="line"><span class="attr">logging.level.com.sample.his</span>=<span class="string">debug</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">#spring.resources.staticLocations=file:C:/temp/</span></span><br><span class="line"><span class="attr">spring.servlet.multipart.maxFileSize</span>=<span class="string">9MB</span></span><br><span class="line"><span class="attr">spring.servlet.multipart.maxRequestSize</span>=<span class="string">18MB</span></span><br></pre></td></tr></table></figure>







<h1 id="VUE（-前端部分-）"><a href="#VUE（-前端部分-）" class="headerlink" title="VUE（ 前端部分 ）"></a>VUE（ 前端部分 ）</h1><h2 id="框架介绍-1"><a href="#框架介绍-1" class="headerlink" title="框架介绍"></a>框架介绍</h2><h3 id="特点："><a href="#特点：" class="headerlink" title="特点："></a>特点：</h3><p><strong>渐进式</strong>：</p>
<ul>
<li>Vue.js 被称为渐进式框架，可以逐步应用到项目中。你可以只将 Vue.js 用作某个页面的一部分，也可以完整地构建整个单页面应用。</li>
</ul>
<p><strong>响应式数据绑定</strong>：</p>
<ul>
<li>Vue.js 提供了简单而强大的响应式数据绑定系统。通过使用指令（Directives）和双向数据绑定机制，可以使页面上的数据和DOM保持同步。</li>
</ul>
<p><strong>组件化开发</strong>：</p>
<ul>
<li>Vue.js 支持组件化开发，将页面划分为独立的、可复用的组件。每个组件都有自己的模板、逻辑和样式，可以相互嵌套和组合，使得代码更加模块化和可维护。</li>
</ul>
<p><strong>轻量和高效</strong>：</p>
<ul>
<li>Vue.js 的核心库很轻量，文件体积小，加载速度快。同时，它的性能优化也很好，对复杂页面和大型应用也能够提供良好的性能表现。</li>
</ul>
<p><strong>生态系统丰富</strong>：</p>
<ul>
<li>Vue.js 拥有一个活跃的生态系统，包括官方维护的路由器（Vue Router）、状态管理库（Vuex）、测试工具等，以及大量的第三方库和组件，能够满足各种复杂应用的需求。</li>
</ul>
<h3 id="文件树"><a href="#文件树" class="headerlink" title="文件树"></a>文件树</h3><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">my-vue-app/</span><br><span class="line">├── <span class="keyword">public</span>/               <span class="meta"># 公共资源目录</span></span><br><span class="line">│   ├── index.html        <span class="meta"># 入口 HTML 文件</span></span><br><span class="line">│   └── ...</span><br><span class="line">├── src/                  <span class="meta"># 源代码目录</span></span><br><span class="line">│   ├── assets/           <span class="meta"># 静态资源文件夹（如图片、字体等）</span></span><br><span class="line">│   ├── components/       <span class="meta"># 组件文件夹</span></span><br><span class="line">│   │   ├── HelloWorld.vue    <span class="meta"># 示例组件</span></span><br><span class="line">│   │   └── ...</span><br><span class="line">│   ├── views/            <span class="meta"># 视图组件文件夹</span></span><br><span class="line">│   │   ├── Home.vue      <span class="meta"># 示例视图组件</span></span><br><span class="line">│   │   └── ...</span><br><span class="line">│   ├── App.vue           <span class="meta"># 根组件 所有组件的父级容器。</span></span><br><span class="line">│   └── main.js           <span class="meta"># 主入口文件</span></span><br><span class="line">├── node_modules/         <span class="meta"># npm依赖模块</span></span><br><span class="line">├── package.json          <span class="meta"># 项目配置文件</span></span><br><span class="line">└── ...</span><br></pre></td></tr></table></figure>



<h2 id="视图与组件"><a href="#视图与组件" class="headerlink" title="视图与组件"></a>视图与组件</h2><h3 id="视图（View）"><a href="#视图（View）" class="headerlink" title="视图（View）"></a>视图（View）</h3><p>视图是用户界面的一部分，通常指的是用户直接看到和交互的页面或页面的一部分。在Vue.js中，视图可以是一个单独的组件，也可以是多个组件的组合。</p>
<ul>
<li><p>特点</p>
<p>  ：</p>
<ul>
<li>视图通常对应应用程序中的一个路由，例如在单页面应用（SPA）中，不同的视图对应不同的URL路径。</li>
<li>视图可以包含多个组件，通过组合不同的组件来构建复杂的用户界面。</li>
<li>视图负责组织和展示数据，响应用户的操作，并与用户交互。</li>
</ul>
</li>
</ul>
<h3 id="组件（Component）"><a href="#组件（Component）" class="headerlink" title="组件（Component）"></a>组件（Component）</h3><p>组件是Vue.js中可复用的、独立的UI单元，它封装了特定的功能和样式，并可以在应用中多次使用。</p>
<ul>
<li><p>特点</p>
<p>  ：</p>
<ul>
<li>组件是Vue.js应用的基本构建块，它们可以包含自己的模板、脚本和样式，通常以 <code>.vue</code> 文件的形式组织。</li>
<li>组件具有自己的状态和行为，可以接收数据作为输入，并且可以通过事件来与父组件或其他组件通信。</li>
<li>组件之间可以相互嵌套和组合，形成复杂的界面结构，同时保持代码的模块化和可维护性。</li>
</ul>
</li>
</ul>
<p>在Vue.js应用中，通常一个视图对应一个或多个组件。视图负责页面的结构和布局，通过引入和组合多个组件来构建完整的页面。</p>
<h1 id="VUE和后端的连接"><a href="#VUE和后端的连接" class="headerlink" title="VUE和后端的连接"></a>VUE和后端的连接</h1><ol>
<li><p><strong>HTTP请求</strong>：</p>
<ul>
<li>Vue.js通过内置的<code>axios</code>、<code>fetch</code>或者<code>Vue Resource</code>等HTTP库，向后端发送HTTP请求。这些请求可以是GET、POST、PUT或DELETE等，用来获取数据、提交表单或执行其他操作。</li>
</ul>
</li>
<li><p><strong>异步数据获取</strong>：</p>
<ul>
<li>在Vue组件中，使用<code>axios</code>或其他HTTP库，发起异步请求获取数据。例如，在<code>mounted</code>生命周期钩子中发送请求，或者在点击事件中处理。</li>
</ul>
 <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&#x27;axios&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    <span class="title function_">data</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            <span class="attr">users</span>: []</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="title function_">mounted</span>(<span class="params"></span>) &#123;</span><br><span class="line">        axios.<span class="title function_">get</span>(<span class="string">&#x27;/api/users&#x27;</span>)</span><br><span class="line">            .<span class="title function_">then</span>(<span class="function"><span class="params">response</span> =&gt;</span> &#123;</span><br><span class="line">                <span class="variable language_">this</span>.<span class="property">users</span> = response.<span class="property">data</span>;</span><br><span class="line">            &#125;)</span><br><span class="line">            .<span class="title function_">catch</span>(<span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;Error fetching users&#x27;</span>, error);</span><br><span class="line">            &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>处理响应</strong>：</p>
<ul>
<li>前端接收后端返回的JSON数据（或其他格式），并在页面上展示或进一步处理。可以在Vue组件中通过数据绑定、列表渲染等技术，将数据动态显示在页面上。</li>
</ul>
</li>
</ol>
<h3 id="后端（Spring-Boot）"><a href="#后端（Spring-Boot）" class="headerlink" title="后端（Spring Boot）"></a>后端（Spring Boot）</h3><ol>
<li><p><strong>RESTful API</strong>：</p>
<ul>
<li>Spring Boot通过Controller类来处理前端的请求，返回JSON或其他格式的数据。通常使用<code>@RestController</code>注解标记Controller类，并使用<code>@RequestMapping</code>或其他注解映射URL路径。</li>
</ul>
 <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.*;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/api&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserRepository userRepository;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/users&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;User&gt; <span class="title function_">getAllUsers</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> userRepository.findAll();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/users&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> User <span class="title function_">createUser</span><span class="params">(<span class="meta">@RequestBody</span> User user)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> userRepository.save(user);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 其他操作如更新和删除等...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>数据库交互</strong>：</p>
<ul>
<li>使用Spring Boot的数据访问技术（如Spring Data JPA），通过Repository类访问MySQL数据库。Repository类提供了CRUD操作的方法，简化了数据访问层的开发。</li>
</ul>
 <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.data.jpa.repository.JpaRepository;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Repository;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserRepository</span> <span class="keyword">extends</span> <span class="title class_">JpaRepository</span>&lt;User, Long&gt; &#123;</span><br><span class="line">    <span class="comment">// 可以定义自定义的查询方法，Spring Data JPA 会根据方法名自动生成查询语句</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>处理请求和响应</strong>：</p>
<ul>
<li>后端接收前端的请求，处理业务逻辑并访问数据库，将查询结果或操作结果封装为JSON格式返回给前端。Spring Boot提供了强大的注解和类库来简化RESTful API的开发和数据交互过程。</li>
</ul>
</li>
</ol>
<p>通过这种方式，Vue.js前端通过HTTP请求与Spring Boot后端进行通信，实现数据的获取、提交和展示，完成了前后端的分离和协作。这种架构不仅能够提高开发效率，还能够使得前端和后端团队能够独立开发、测试和部署各自的功能模块。</p>
<h1 id="MySql-数据库部分"><a href="#MySql-数据库部分" class="headerlink" title="MySql( 数据库部分 )"></a>MySql( 数据库部分 )</h1>]]></content>
      <categories>
        <category>软件技术</category>
      </categories>
      <tags>
        <tag>笔记</tag>
        <tag>javascript</tag>
        <tag>html</tag>
        <tag>vue</tag>
        <tag>mysql</tag>
        <tag>前端</tag>
        <tag>后端</tag>
        <tag>java</tag>
        <tag>spring</tag>
        <tag>springboot</tag>
      </tags>
  </entry>
  <entry>
    <title>SnapSound: 基于深度学习的实时手指响声识别系统</title>
    <url>/2025/02/15/SnapSound-%E5%9F%BA%E4%BA%8E%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E7%9A%84%E5%AE%9E%E6%97%B6%E6%89%8B%E6%8C%87%E5%93%8D%E5%A3%B0%E8%AF%86%E5%88%AB%E7%B3%BB%E7%BB%9F/</url>
    <content><![CDATA[<h3 id="项目内容："><a href="#项目内容：" class="headerlink" title="项目内容："></a>项目内容：</h3><p>本项目开发了一个基于深度学习的实时音频识别系统，通过音频信号分析来判断是否是手指响声。项目通过使用梅尔频率倒谱系数（MFCC）和梅尔谱（Mel-spectrogram）等音频特征提取方法，使得模型能够准确识别手指响声。系统基于Flask后端和Vue前端，结合WebSocket技术实现了实时音频数据的流式传输与动态展示。</p>
<h3 id="项目职责："><a href="#项目职责：" class="headerlink" title="项目职责："></a>项目职责：</h3><ul>
<li><strong>音频采集</strong>：负责使用<code>python-sounddevice</code>库进行实时音频采集，并将数据保存为<code>.wav</code>格式。</li>
<li><strong>数据预处理</strong>：处理音频数据并提取特征，使用<code>librosa</code>库生成Mel-spectrogram。</li>
<li><strong>深度学习模型训练</strong>：设计并训练卷积神经网络（CNN）模型，进行手指响声的分类。</li>
<li><strong>系统设计与实现</strong>：将深度学习模型与物联网系统集成，使用Flask进行后端开发，Vue.js作为前端，实时展示识别结果。</li>
<li><strong>前端展示</strong>：前端通过WebSocket与后端通信，实时显示手指响声检测结果，并能控制智能家居设备。</li>
</ul>
<h3 id="项目技术栈："><a href="#项目技术栈：" class="headerlink" title="项目技术栈："></a>项目技术栈：</h3><ul>
<li><strong>后端</strong>：Flask（Python）作为服务器框架，用于处理前端请求并返回音频识别结果。</li>
<li><strong>前端</strong>：Vue.js，负责展示实时音频识别结果，使用WebSocket进行实时数据传输。</li>
<li><strong>深度学习框架</strong>：TensorFlow&#x2F;Keras，用于创建和训练卷积神经网络（CNN）模型。</li>
<li><strong>特征提取</strong>：librosa库用于提取梅尔频率倒谱系数（MFCC）和梅尔谱（Mel-spectrogram）特征。</li>
<li><strong>音频采集</strong>：使用<code>python-sounddevice</code>库进行实时音频录制。</li>
</ul>
<h3 id="项目结果："><a href="#项目结果：" class="headerlink" title="项目结果："></a>项目结果：</h3><ul>
<li><strong>音频识别准确率</strong>：项目展示了通过卷积神经网络进行音频分类，系统能够准确区分手指响声与非手指响声。</li>
<li><strong>实时展示与控制</strong>：前端界面实时展示识别结果，如“手指响声 detected”或“非手指响声 detected”，并可以触发智能家居设备的操作。</li>
<li><strong>数据可视化</strong>：通过ECharts，展示音频事件的统计信息、频率分布等，帮助用户了解音频事件的发生情况。</li>
</ul>
<p><img src="/../images/snapsound/%E5%9B%BE%E7%89%871.png"></p>
<p><img src="/../images/snapsound/%E5%9B%BE%E7%89%872.png"></p>
<p><img src="/../images/snapsound/%E5%9B%BE%E7%89%873.png"></p>
<p><img src="/../images/snapsound/%E5%9B%BE%E7%89%874.png"></p>
<h3 id="实现步骤："><a href="#实现步骤：" class="headerlink" title="实现步骤："></a>实现步骤：</h3><ol>
<li><strong>数据集的获取与录音</strong>：使用<code>python-sounddevice</code>进行音频录制，录音数据存储为<code>.wav</code>文件，保存为“手指响声”和“非手指响声”两个分类。</li>
<li><strong>数据预处理</strong>：使用<code>librosa</code>进行音频特征提取，生成Mel-spectrogram特征并进行标准化处理。</li>
<li><strong>模型训练</strong>：创建一个卷积神经网络（CNN）模型，输入Mel-spectrogram特征，进行音频分类。</li>
<li><strong>前端展示</strong>：通过WebSocket将后端的预测结果实时传输至Vue前端，并展示给用户。</li>
<li><strong>智能家居控制</strong>：系统能够根据识别结果控制设备（如灯光、音响等）。</li>
</ol>
]]></content>
      <categories>
        <category>软件技术</category>
      </categories>
      <tags>
        <tag>笔记</tag>
        <tag>linux</tag>
        <tag>深度学习</tag>
        <tag>AI</tag>
      </tags>
  </entry>
  <entry>
    <title>WSL下pigz的部署与使用-大文件测试案例</title>
    <url>/2025/07/30/WSL%E4%B8%8Bpigz%E7%9A%84%E9%83%A8%E7%BD%B2%E4%B8%8E%E4%BD%BF%E7%94%A8-%E5%A4%A7%E6%96%87%E4%BB%B6%E6%B5%8B%E8%AF%95%E6%A1%88%E4%BE%8B/</url>
    <content><![CDATA[<h1 id="WSL使用pigz进行压缩和解压缩"><a href="#WSL使用pigz进行压缩和解压缩" class="headerlink" title="WSL使用pigz进行压缩和解压缩"></a>WSL使用pigz进行压缩和解压缩</h1><blockquote>
<p>​	<strong>WSL</strong>（Windows Subsystem for Linux）是微软为 Windows 提供的一个兼容层，允许用户在 Windows 上原生运行 Linux 环境，而无需安装虚拟机或双系统。它支持大部分常用的 Linux 命令行工具、应用和开发框架，方便开发者在同一台电脑上同时使用 Windows 与 Linux 系统资源，尤其适合进行跨平台开发、测试和日常运维等工作，让 Windows 用户能够轻松体验和使用 Linux 的强大生态。	</p>
<p>​	<strong>pigz</strong>，全称 Parallel Implementation of GZip，是 gzip 的多线程替代工具，由 zlib 作者之一 Mark Adler 开发。它通过将数据分块并用多个 CPU 核心并行压缩，大幅提高大文件或大量文件的压缩与解压速度，适合 Linux、macOS 和 WSL 等环境。pigz 只支持 gzip 格式，通常与 tar 搭配使用生成 .tar.gz 压缩包。相比 gzip，pigz 的压缩率基本相同但速度更快，缺点是只能用于 gzip 格式，没有图形界面，更适合服务器或需要高性能压缩的场景。</p>
<p>​	在跨平台迁移数据的场景中，会遇到文件很大（几百g），并且还从Linux跨平台到Windows，例如数据库文件。这个时候数据的压缩和解压缩对于整个过程消耗的时间有巨大影响。</p>
<p>​	场景：windows下有一个13.tar.gz大文件（15g图片），使用pigz的多线程解压到tar，然后再使用tar或者7zip解压出最后结果。</p>
</blockquote>
<h1 id="安装pigz"><a href="#安装pigz" class="headerlink" title="安装pigz"></a>安装pigz</h1><h2 id="安装WSL"><a href="#安装WSL" class="headerlink" title="安装WSL"></a>安装WSL</h2><blockquote>
<p>winserver版本必须在2022以上。</p>
<p>WSL系统默认自带，但是由于版本等问题需要自行设置或者升级。</p>
</blockquote>
<h3 id="查看WSL版本"><a href="#查看WSL版本" class="headerlink" title="查看WSL版本"></a>查看WSL版本</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">wsl --status</span><br></pre></td></tr></table></figure>

<p><img src="/../images/Linux/%E8%BF%90%E7%BB%B4/pigz/image-20250730112938722.png" alt="image-20250730112938722"></p>
<p>这里已经安装好了所以显示了版本2和ubuntu</p>
<p>如果没有安装好则需要去下载wsl最新稳定版release进行安装，下载链接：<a href="https://github.com/microsoft/WSL/releases">Releases · microsoft&#x2F;WSL</a></p>
<h3 id="安装WSL-1"><a href="#安装WSL-1" class="headerlink" title="安装WSL"></a>安装WSL</h3><p><img src="/../images/Linux/%E8%BF%90%E7%BB%B4/pigz/image-20250730113425196.png" alt="image-20250730113425196"></p>
<p>双击安装即可</p>
<h2 id="安装子系统"><a href="#安装子系统" class="headerlink" title="安装子系统"></a>安装子系统</h2><blockquote>
<p>这里采用下载安装的方法便于管理。</p>
<p>也可以通过<code>wsl --install -d Ubuntu</code>直接从微软安装，安装路径在C盘。</p>
</blockquote>
<h3 id="下载解压appx文件"><a href="#下载解压appx文件" class="headerlink" title="下载解压appx文件"></a>下载解压appx文件</h3><p>下载链接：<a href="https://learn.microsoft.com/en-us/windows/wsl/install-manual#downloading-distributions">Manual installation steps for older versions of WSL | Microsoft Learn</a></p>
<p>放到想要安装的路径<code>D:\wsl</code>并且解压</p>
<p><img src="/../images/Linux/%E8%BF%90%E7%BB%B4/pigz/image-20250730132350039.png" alt="image-20250730132350039"></p>
<h3 id="打开wsl"><a href="#打开wsl" class="headerlink" title="打开wsl"></a>打开wsl</h3><p>解压后进去打开应用程序即可开启wsl，之后会提示设置用户名密码。</p>
<p><img src="/../images/Linux/%E8%BF%90%E7%BB%B4/pigz/image-20250730132439756.png" alt="image-20250730132439756"></p>
<h2 id="安装pigz-1"><a href="#安装pigz-1" class="headerlink" title="安装pigz"></a>安装pigz</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt update</span><br><span class="line"><span class="built_in">sudo</span> apt install pigz</span><br></pre></td></tr></table></figure>

<p><img src="/../images/Linux/%E8%BF%90%E7%BB%B4/pigz/image-20250730132805942.png" alt="image-20250730132805942"></p>
<h1 id="测试pigz并总结"><a href="#测试pigz并总结" class="headerlink" title="测试pigz并总结"></a>测试pigz并总结</h1><p>目标文件：13.tar.gz</p>
<blockquote>
<p>pigz仅能负责gz部分的解压，剩余部分需要使用tar或者7zip进行解tar，后文还测试了多进程解tar、拆tar的过程。</p>
<p>需要注意的是，13.tar.gz全部是图片文件，而图片文件本身就是压缩过的文件，所以从tar.gz到源文件的过程总性能瓶颈在于解tar。后文的时间记录结果页印证了这一点。</p>
</blockquote>
<h2 id="pigz部分测试"><a href="#pigz部分测试" class="headerlink" title="pigz部分测试"></a>pigz部分测试</h2><p>测试结果：13.tar.gz   —-&gt; 13.tar</p>
<p>以下为shell解压脚本：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">要解压的文件</span></span><br><span class="line">INPUT_FILE=&quot;../../13.tar.gz&quot;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">输出的 tar 文件名</span></span><br><span class="line">OUTPUT_FILE=&quot;13.tar&quot;</span><br><span class="line"></span><br><span class="line">echo &quot;[*] 开始使用 pigz 解压：$INPUT_FILE -&gt; $OUTPUT_FILE&quot;</span><br><span class="line">echo &quot;[*] 使用 8 核&quot;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">测量用时</span></span><br><span class="line">START=$(date +%s)</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">使用 pigz 解压到 tar</span></span><br><span class="line">pigz -d -p 8 -c &quot;$INPUT_FILE&quot; &gt; &quot;$OUTPUT_FILE&quot;</span><br><span class="line"></span><br><span class="line">END=$(date +%s)</span><br><span class="line">DURATION=$((END - START))</span><br><span class="line"></span><br><span class="line">echo &quot;[*] 解压完成，用时: $&#123;DURATION&#125; 秒&quot;</span><br></pre></td></tr></table></figure>

<h3 id="测试结果："><a href="#测试结果：" class="headerlink" title="测试结果："></a>测试结果：</h3><p>用时： 802 秒 13mins</p>
<p><img src="/../images/Linux/%E8%BF%90%E7%BB%B4/pigz/image-20250730133904246.png" alt="image-20250730133904246"></p>
<p>看任务管理器可以发现8核确实在使用：</p>
<p><img src="/../images/Linux/%E8%BF%90%E7%BB%B4/pigz/image-20250730134129445.png" alt="image-20250730134129445"></p>
<h2 id="tar部分测试"><a href="#tar部分测试" class="headerlink" title="tar部分测试"></a>tar部分测试</h2><h3 id="tar单进程解压"><a href="#tar单进程解压" class="headerlink" title="tar单进程解压"></a>tar单进程解压</h3><p>shell脚本如下：将pigz的结果直接给tar进行单进程解压</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">设定文件夹路径（你可以根据自己的需要修改）</span></span><br><span class="line">DIR=&quot;/mnt/d/share&quot;              # 目标文件夹路径</span><br><span class="line">FOLDER=&quot;13&quot;                     # 要压缩的文件夹名（在 $DIR 下）</span><br><span class="line">FILE=&quot;$DIR/$FOLDER&quot;             # 要压缩的文件夹路径</span><br><span class="line">OUTPUT_COMPRESSED=&quot;$DIR/$FOLDER.tar.gz&quot;  # 压缩后的文件路径</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">压缩函数</span></span><br><span class="line">function compress &#123;</span><br><span class="line">    echo &quot;[*] 开始压缩：$FILE&quot;</span><br><span class="line">    # 使用 tar 打包并通过 pigz 压缩，-p 8 表示使用 8 个核心</span><br><span class="line">    time tar -cf - &quot;$FILE&quot; | pigz -p 8 &gt; &quot;$OUTPUT_COMPRESSED&quot;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">检查文件夹是否存在</span></span><br><span class="line">if [ ! -d &quot;$FILE&quot; ]; then</span><br><span class="line">    echo &quot;[*] 错误：文件夹 $FILE 不存在！&quot;</span><br><span class="line">    exit 1</span><br><span class="line">fi</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">运行压缩函数</span></span><br><span class="line">time compress</span><br><span class="line"></span><br><span class="line">echo &quot;[+] 压缩完成！结果保存在：$OUTPUT_COMPRESSED&quot;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="用时-389mins"><a href="#用时-389mins" class="headerlink" title="用时 389mins"></a>用时 389mins</h4><h3 id="tar8进程解压"><a href="#tar8进程解压" class="headerlink" title="tar8进程解压"></a>tar8进程解压</h3><h4 id="全过程脚本："><a href="#全过程脚本：" class="headerlink" title="全过程脚本："></a>全过程脚本：</h4><ol>
<li>拆tar<ol>
<li>导出文件列表目录</li>
<li>均分为8个文件目录</li>
<li>拆分为8个tar</li>
</ol>
</li>
<li>8进程解tar</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">================================</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">脚本: 8coreUntar.sh</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">用途: 把大 tar 拆分成8小 tar 并多进程解压</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">================================</span></span><br><span class="line"></span><br><span class="line">BIG_TAR=&quot;13.tar&quot;</span><br><span class="line">EXTRACT_DIR=&quot;./extract_dir&quot;</span><br><span class="line">PARTS=8</span><br><span class="line"></span><br><span class="line">mkdir -p &quot;$EXTRACT_DIR&quot;</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">##########################################################################</span></span></span><br><span class="line">echo &quot;[*] Step 1: 列出大 tar 文件里的所有文件...&quot;</span><br><span class="line">start_list=$(date +%s)</span><br><span class="line">tar -tf &quot;$BIG_TAR&quot; &gt; filelist_all.txt</span><br><span class="line">end_list=$(date +%s)</span><br><span class="line">echo &quot;[✔] 列出文件耗时：$((end_list - start_list)) 秒&quot;</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">##########################################################################</span></span></span><br><span class="line">echo &quot;[*] Step 2: 把文件列表平均拆成 $PARTS 份...&quot;</span><br><span class="line">start_split=$(date +%s)</span><br><span class="line">split -n l/$PARTS filelist_all.txt filelist_</span><br><span class="line">end_split=$(date +%s)</span><br><span class="line">echo &quot;[✔] 拆分文件耗时：$((end_split - start_split)) 秒&quot;</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">##########################################################################</span></span></span><br><span class="line">echo &quot;[*] Step 3: 根据拆分的列表，打包成小 tar...&quot;</span><br><span class="line">start_pack=$(date +%s)</span><br><span class="line">for list in filelist_*; do</span><br><span class="line">    [ &quot;$list&quot; = &quot;filelist_all.txt&quot; ] &amp;&amp; continue</span><br><span class="line"><span class="meta prompt_">   # </span><span class="language-bash">[ <span class="string">&quot;<span class="variable">$list</span>&quot;</span> = <span class="string">&quot;filelist_aa&quot;</span> ] &amp;&amp; <span class="built_in">continue</span></span></span><br><span class="line">    echo &quot;  -&gt; 打包 $list ...&quot;</span><br><span class="line">    sleep 3</span><br><span class="line">    # 关键修改：使用 -C 参数指定根目录为当前目录</span><br><span class="line">    tar -cvf &quot;$&#123;list&#125;.tar&quot; -C &quot;/&quot; -T &quot;$list&quot;</span><br><span class="line">done</span><br><span class="line">end_pack=$(date +%s)</span><br><span class="line">echo &quot;[✔] 打包小 tar 总耗时：$((end_pack - start_pack)) 秒&quot;</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">##########################################################################</span></span></span><br><span class="line">echo &quot;[*] Step 4: 解压8小 tar 文件...&quot;</span><br><span class="line">start_extract=$(date +%s)</span><br><span class="line">for t in filelist_*.tar; do</span><br><span class="line">    (echo &quot;解压 $t ...&quot;; tar -xvf &quot;$t&quot; -C &quot;$EXTRACT_DIR&quot;) &amp;</span><br><span class="line">done</span><br><span class="line">wait</span><br><span class="line">end_extract=$(date +%s)</span><br><span class="line">echo &quot;[✔] 单个解压总耗时：$((end_extract - start_extract)) 秒&quot;</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">##########################################################################</span></span></span><br></pre></td></tr></table></figure>

<h5 id="用时：总共201-5"><a href="#用时：总共201-5" class="headerlink" title="用时：总共201.5"></a>用时：总共201.5</h5><p>13(pigz8线程解压)+15（导出文件列表）+64（拆分8个tar）+109.5（8进程解tar）&#x3D;201.5 mins</p>
<h4 id="拆tar过程"><a href="#拆tar过程" class="headerlink" title="拆tar过程"></a>拆tar过程</h4><p>shell对应的代码部分：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">##########################################################################</span></span></span><br><span class="line">echo &quot;[*] Step 1: 列出大 tar 文件里的所有文件...&quot;</span><br><span class="line">start_list=$(date +%s)</span><br><span class="line">tar -tvf &quot;$BIG_TAR&quot; &gt; filelist_all.txt</span><br><span class="line">end_list=$(date +%s)</span><br><span class="line">echo &quot;[✔] 列出文件耗时：$((end_list - start_list)) 秒&quot;</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">##########################################################################</span></span></span><br><span class="line">echo &quot;[*] Step 2: 把文件列表平均拆成 $PARTS 份...&quot;</span><br><span class="line">start_split=$(date +%s)</span><br><span class="line">split -n l/$PARTS filelist_all.txt filelist_</span><br><span class="line">end_split=$(date +%s)</span><br><span class="line">echo &quot;[✔] 拆分文件耗时：$((end_split - start_split)) 秒&quot;</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">##########################################################################</span></span></span><br><span class="line">echo &quot;[*] Step 3: 根据拆分的列表，打包成小 tar...&quot;</span><br><span class="line">start_pack=$(date +%s)</span><br><span class="line">for list in filelist_*; do</span><br><span class="line">    [ &quot;$list&quot; = &quot;filelist_all.txt&quot; ] &amp;&amp; continue</span><br><span class="line"><span class="meta prompt_">   # </span><span class="language-bash">[ <span class="string">&quot;<span class="variable">$list</span>&quot;</span> = <span class="string">&quot;filelist_aa&quot;</span> ] &amp;&amp; <span class="built_in">continue</span></span></span><br><span class="line">    echo &quot;  -&gt; 打包 $list ...&quot;</span><br><span class="line">    sleep 3</span><br><span class="line">    # 关键修改：使用 -C 参数指定根目录为当前目录</span><br><span class="line">    tar -cvf &quot;$&#123;list&#125;.tar&quot; -C &quot;/&quot; -T &quot;$list&quot;</span><br><span class="line">done</span><br><span class="line">end_pack=$(date +%s)</span><br><span class="line">echo &quot;[✔] 打包小 tar 总耗时：$((end_pack - start_pack)) 秒&quot;</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">##########################################################################</span></span></span><br></pre></td></tr></table></figure>

<p>用时 79mins</p>
<h4 id="多进程解tar过程"><a href="#多进程解tar过程" class="headerlink" title="多进程解tar过程"></a>多进程解tar过程</h4><p>shell对应的代码部分：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">##########################################################################</span></span></span><br><span class="line">echo &quot;[*] Step 4: 解压8小 tar 文件...&quot;</span><br><span class="line">start_extract=$(date +%s)</span><br><span class="line">for t in filelist_*.tar; do</span><br><span class="line">    (echo &quot;解压 $t ...&quot;; tar -xvf &quot;$t&quot; -C &quot;$EXTRACT_DIR&quot;) &amp;</span><br><span class="line">done</span><br><span class="line">wait</span><br><span class="line">end_extract=$(date +%s)</span><br><span class="line">echo &quot;[✔] 单个解压总耗时：$((end_extract - start_extract)) 秒&quot;</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">##########################################################################</span></span></span><br></pre></td></tr></table></figure>

<p>用时109.5mins</p>
<h1 id="问题总结："><a href="#问题总结：" class="headerlink" title="问题总结："></a>问题总结：</h1><h2 id="拆tar过程会重新打包一遍整个tar"><a href="#拆tar过程会重新打包一遍整个tar" class="headerlink" title="拆tar过程会重新打包一遍整个tar"></a>拆tar过程会重新打包一遍整个tar</h2><p>​	拆tar过程中生成的file_lists文件需要删除第一行，因为第一行是文件夹的根，使用命令&#96;tar -cvf “${list}.tar” -C “&#x2F;“ -T “$list”会重新打包一遍根</p>
]]></content>
      <categories>
        <category>软件技术</category>
      </categories>
      <tags>
        <tag>笔记</tag>
        <tag>运维</tag>
        <tag>部署</tag>
        <tag>pigz</tag>
        <tag>tar</tag>
        <tag>数据迁移</tag>
      </tags>
  </entry>
  <entry>
    <title>VUE前端项目笔记</title>
    <url>/2024/09/26/VUE%E5%89%8D%E7%AB%AF%E9%A1%B9%E7%9B%AE%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<p>项目地址：<a href="https://github.com/creativetimofficial/vue-black-dashboard">creativetimofficial&#x2F;vue-black-dashboard: Vue Black Dashboard (github.com)</a></p>
<p>登录注册界面比较容易写，接下来试试登录后的管理界面以及展示界面。即 <strong>DashBoard</strong></p>
<p>说是实战其实是消化理解一下大佬的项目。</p>
<p>看了一会才发现是纯前端，没有连接后端的代码。</p>
<h3 id="i18n"><a href="#i18n" class="headerlink" title="i18n"></a>i18n</h3><blockquote>
<p>i18n 是指在软件、应用程序或网站开发过程中，通过适当的设计和编程，使其能够方便地支持不同的语言、地区和文化规范，而无需对代码进行大量修改。i18n 是实现全球化（globalization，g11n）的重要组成部分。</p>
</blockquote>
<h1 id="使用项目接口为自己的项目服务"><a href="#使用项目接口为自己的项目服务" class="headerlink" title="使用项目接口为自己的项目服务"></a>使用项目接口为自己的项目服务</h1><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">DashboardPlugin</span> <span class="keyword">from</span> <span class="string">&#x27;@/plugins/blackDashboard&#x27;</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">DashboardPlugin</span>);</span><br></pre></td></tr></table></figure>



<h1 id="AXIOS"><a href="#AXIOS" class="headerlink" title="AXIOS"></a>AXIOS</h1><p>基于 Promise 的 HTTP 客户端，可以用在浏览器和 Node.js 中。适合用于 Vue 项目中进行 API 请求。</p>
]]></content>
      <categories>
        <category>软件技术</category>
      </categories>
      <tags>
        <tag>笔记</tag>
        <tag>javascript</tag>
        <tag>html</tag>
        <tag>vue</tag>
        <tag>前端</tag>
      </tags>
  </entry>
  <entry>
    <title>About me</title>
    <url>/2023/09/20/about-me/</url>
    <content><![CDATA[<h1 id="Regen-m-smile"><a href="#Regen-m-smile" class="headerlink" title="Regen_m	:smile:"></a>Regen_m	:smile:</h1><p>​	这是我的cyber name。这一页就用来介绍介绍我自己吧！</p>
<h1 id="首先，"><a href="#首先，" class="headerlink" title="首先，"></a>首先，</h1><p>​		我是个热血到爆炸的中二傻呗同时也是乐观到极致的麻瓜。兴趣比较广泛，喜欢DIY设计 ,电子设计，手工制作，弹吉他，摄影，看书，乒乓球，游泳，爬山等等。</p>
<h1 id="虽然，"><a href="#虽然，" class="headerlink" title="虽然，"></a>虽然，</h1><p>​		不知道有谁会看到这个网页，但我打算在接下来的大学生活（也许这辈子？）中利用这个博客记录记录自己的学习，生活历程。这个博客既能记录我的学习笔记，还可以分享我的所见所闻，让我的分享欲有地方释放哈哈哈哈。</p>
<h1 id="总之，"><a href="#总之，" class="headerlink" title="总之，"></a>总之，</h1><p>​		自我介绍就到这里啦！晚安。</p>
]]></content>
      <categories>
        <category>生活</category>
      </categories>
      <tags>
        <tag>about</tag>
      </tags>
  </entry>
  <entry>
    <title>WordPress建站速成</title>
    <url>/2024/11/04/WordPress%E5%BB%BA%E7%AB%99%E9%80%9F%E6%88%90/</url>
    <content><![CDATA[<h1 id="docker搭建wordpress"><a href="#docker搭建wordpress" class="headerlink" title="docker搭建wordpress"></a>docker搭建wordpress</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> wordpress</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> wordpress</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim docker-compose.yml</span><br></pre></td></tr></table></figure>

<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&#x27;3.8&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">wordpress:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">wordpress:latest</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">wordpress_app</span></span><br><span class="line">    <span class="attr">depends_on:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">db</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;80:80&quot;</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="attr">WORDPRESS_DB_HOST:</span> <span class="string">db:3306</span></span><br><span class="line">      <span class="attr">WORDPRESS_DB_NAME:</span> <span class="string">wordpress_db</span></span><br><span class="line">      <span class="attr">WORDPRESS_DB_USER:</span> <span class="string">wordpress_user</span></span><br><span class="line">      <span class="attr">WORDPRESS_DB_PASSWORD:</span> <span class="string">strong_password</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">wordpress_data:/var/www/html</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">db:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">mysql:5.7</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">wordpress_db</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="attr">MYSQL_ROOT_PASSWORD:</span> <span class="string">root_password</span></span><br><span class="line">      <span class="attr">MYSQL_DATABASE:</span> <span class="string">wordpress_db</span></span><br><span class="line">      <span class="attr">MYSQL_USER:</span> <span class="string">wordpress_user</span></span><br><span class="line">      <span class="attr">MYSQL_PASSWORD:</span> <span class="string">strong_password</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">db_data:/var/lib/mysql</span></span><br><span class="line"></span><br><span class="line"><span class="attr">volumes:</span></span><br><span class="line">  <span class="attr">wordpress_data:</span></span><br><span class="line">  <span class="attr">db_data:</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>软件技术</category>
      </categories>
      <tags>
        <tag>笔记</tag>
        <tag>linux</tag>
        <tag>docker</tag>
        <tag>wordpress</tag>
        <tag>web</tag>
      </tags>
  </entry>
  <entry>
    <title>css学习笔记</title>
    <url>/2023/12/22/css%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h1 id="CSS"><a href="#CSS" class="headerlink" title="CSS"></a>CSS</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><blockquote>
<p>​	</p>
<p>CSS：Cascading Style Sheet 层叠样式表，是一组样式设置的规则，用于控制页面的外观样式。</p>
<p>广泛用于页面外观美化，布局和定位。</p>
</blockquote>
<h2 id="CSS如何使用"><a href="#CSS如何使用" class="headerlink" title="CSS如何使用"></a>CSS如何使用</h2><ul>
<li>嵌入HTML或者JSP</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">&lt;head&gt;</span><br><span class="line">  &lt;meta charset=&quot;UTF-<span class="number">8</span>&quot;&gt;</span><br><span class="line">  &lt;title&gt;Document&lt;/title&gt;</span><br><span class="line">  &lt;style&gt;</span><br><span class="line">    <span class="selector-tag">p</span>&#123;</span><br><span class="line">      <span class="attribute">color</span>:blue;</span><br><span class="line">    &#125;</span><br><span class="line">  &lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br></pre></td></tr></table></figure>



<ul>
<li>外部导入（常用，更加方便，便于复制黏贴 :D）</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">&lt;head&gt;</span><br><span class="line">  &lt;link rel=&quot;stylesheet&quot; type=&quot;<span class="selector-tag">text</span>/css&quot; href=&quot;css/eg<span class="selector-class">.css</span>&quot;&gt; </span><br><span class="line">&lt;/head&gt;</span><br></pre></td></tr></table></figure>

<h2 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h2><ul>
<li>选择器：要修饰的对象，例如HTML的各类标签</li>
<li>属性名：属于修饰对象的属性</li>
<li>属性值：修饰对象的属性的样式取值</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">&lt;head&gt;</span><br><span class="line">  &lt;style&gt;</span><br><span class="line">    选择器&#123;</span><br><span class="line">      属性名：属性值;</span><br><span class="line">      属性名：属性值;</span><br><span class="line">    &#125;</span><br><span class="line">  &lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br></pre></td></tr></table></figure>

<h2 id="选择器"><a href="#选择器" class="headerlink" title="选择器"></a>选择器</h2>]]></content>
      <categories>
        <category>软件技术</category>
      </categories>
      <tags>
        <tag>笔记</tag>
        <tag>css</tag>
      </tags>
  </entry>
  <entry>
    <title>docker容器技术</title>
    <url>/2024/02/09/docker%E5%AE%B9%E5%99%A8%E6%8A%80%E6%9C%AF/</url>
    <content><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><blockquote>
<p>​				docker是一个用Go语言实现的开源项目，可以让我们方便的创建和使用容器，docker将程序以及程序所有的依赖都打包到docker container，这样你的程序可以在任何环境都会有一致的表现，这里程序运行的依赖也就是容器就好比集装箱，容器所处的操作系统环境就好比货船或港口，<strong>程序的表现只和集装箱有关系(容器)，和集装箱放在哪个货船或者哪个港口(操作系统)没有关系</strong>。</p>
<p>​				因此我们可以看到docker可以屏蔽环境差异，也就是说，只要你的程序打包到了docker中，那么无论运行在什么环境下程序的行为都是一致的，程序员再也无法施展表演才华了，<strong>不会再有“在我的环境上可以运行”</strong>，真正实现“build once, run everywhere”。</p>
</blockquote>
<h1 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h1><p>​	docker 中的几个概念：</p>
<blockquote>
<ol>
<li>dockerfile</li>
<li>image</li>
<li>container</li>
</ol>
</blockquote>
<h2 id="dockerfile"><a href="#dockerfile" class="headerlink" title="dockerfile"></a>dockerfile</h2><p>​	<code>Dockerfile</code> 是一个用来构建镜像的文本文件，文本内容包含了一条条构建镜像所需的指令和说明。感觉就像<code>makefile</code>一样。</p>
<h2 id="image"><a href="#image" class="headerlink" title="image"></a>image</h2><p>​	Docker镜像（Docker Image）就是一个只读的模板。比如，一个镜像可以包含一个完整的<a href="https://so.csdn.net/so/search?q=Ubuntu&spm=1001.2101.3001.7020">Ubuntu</a>操作系统环境。镜像可以用来创建Docker容器。</p>
<h2 id="container"><a href="#container" class="headerlink" title="container"></a>container</h2><p>​	容器是镜像的运行时实例，容器是独立运行的一个或一组应用，以及它们的运行态环境。</p>
<h1 id="安装方式："><a href="#安装方式：" class="headerlink" title="安装方式："></a>安装方式：</h1><h2 id="包管理器安装"><a href="#包管理器安装" class="headerlink" title="包管理器安装"></a>包管理器安装</h2><h3 id="添加官方仓库源"><a href="#添加官方仓库源" class="headerlink" title="添加官方仓库源"></a>添加官方仓库源</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> dnf config-manager --add-repo=https://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</span><br></pre></td></tr></table></figure>

<h3 id="更新源"><a href="#更新源" class="headerlink" title="更新源"></a>更新源</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> dnf clean all</span><br><span class="line"><span class="built_in">sudo</span> dnf makecache</span><br></pre></td></tr></table></figure>



<h3 id="安装docker及其组件"><a href="#安装docker及其组件" class="headerlink" title="安装docker及其组件"></a>安装docker及其组件</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> dnf install -y docker-ce docker-ce-cli containerd.io</span><br></pre></td></tr></table></figure>







<h2 id="二进制包安装-tgz"><a href="#二进制包安装-tgz" class="headerlink" title="二进制包安装(tgz)"></a>二进制包安装(tgz)</h2><h3 id="解压二进制包"><a href="#解压二进制包" class="headerlink" title="解压二进制包"></a>解压二进制包</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">tar -zxvf docker-28.3.0.tgz </span><br></pre></td></tr></table></figure>

<h3 id="转移到用户库"><a href="#转移到用户库" class="headerlink" title="转移到用户库"></a>转移到用户库</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo cp docker/* /usr/bin/</span><br></pre></td></tr></table></figure>

<h3 id="配置-systemd-服务"><a href="#配置-systemd-服务" class="headerlink" title="配置 systemd 服务"></a>配置 systemd 服务</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo tee /etc/systemd/system/docker.service &lt;&lt;EOF</span><br><span class="line">[Unit]</span><br><span class="line">Description=Docker Service</span><br><span class="line">After=network.target</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">ExecStart=/usr/bin/dockerd</span><br><span class="line">Restart=always</span><br><span class="line">LimitNOFILE=1048576</span><br><span class="line">LimitNPROC=1048576</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure>

<h3 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo systemctl daemon-reload</span><br><span class="line">sudo systemctl start docker</span><br><span class="line">sudo systemctl enable docker</span><br></pre></td></tr></table></figure>

<h2 id="改变-Docker-默认存储位置"><a href="#改变-Docker-默认存储位置" class="headerlink" title="改变 Docker 默认存储位置"></a>改变 Docker 默认存储位置</h2><ol>
<li>停止 Docker 服务：</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> systemctl stop docker</span><br></pre></td></tr></table></figure>

<ol>
<li>创建新目录：</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> <span class="built_in">mkdir</span> -p /data/docker</span><br></pre></td></tr></table></figure>

<ol>
<li>修改 Docker 配置文件（<code>/etc/docker/daemon.json</code>）：</li>
</ol>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;data-root&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/data/docker&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<ol>
<li>把旧数据迁移（可选，如果想保留）：</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> rsync -aP /var/lib/docker/ /data/docker</span><br></pre></td></tr></table></figure>

<ol>
<li>启动 Docker：</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> systemctl start docker</span><br></pre></td></tr></table></figure>

<ol>
<li>验证：</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker info | grep <span class="string">&quot;Docker Root Dir&quot;</span></span><br></pre></td></tr></table></figure>

<p>应该显示：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Docker Root Dir: /data/docker</span><br></pre></td></tr></table></figure>

<h1 id="技术分析"><a href="#技术分析" class="headerlink" title="技术分析"></a>技术分析</h1><p>Docker 容器的实现基于 <strong>Linux 内核的核心技术</strong>，通过资源隔离和虚拟化技术模拟独立的运行环境。以下是其核心实现原理：</p>
<h3 id="1-核心技术（Linux-内核支持）"><a href="#1-核心技术（Linux-内核支持）" class="headerlink" title="1. 核心技术（Linux 内核支持）"></a><strong>1. 核心技术（Linux 内核支持）</strong></h3><p>Docker 容器本质上是 <strong>隔离的进程</strong>，依赖以下 Linux 特性实现：</p>
<ul>
<li><p><strong>Namespaces（命名空间）</strong>  </p>
<ul>
<li><strong>PID Namespace</strong>：隔离进程树，容器内只能看到自己的进程（如 <code>ps aux</code>）。  </li>
<li><strong>Network Namespace</strong>：独立网络栈（IP、端口、路由表等）。  </li>
<li><strong>Mount Namespace</strong>：隔离文件系统挂载点（容器内目录独立）。  </li>
<li><strong>UTS Namespace</strong>：隔离主机名和域名。  </li>
<li><strong>IPC Namespace</strong>：隔离进程间通信（如信号量、消息队列）。  </li>
<li><strong>User Namespace</strong>：隔离用户和用户组（可映射宿主机UID&#x2F;GID）。</li>
</ul>
</li>
<li><p><strong>Cgroups（控制组）</strong>  </p>
<ul>
<li>限制资源使用（CPU、内存、磁盘I&#x2F;O等），避免单个容器耗尽宿主机资源。</li>
</ul>
</li>
<li><p><strong>Union File System（联合文件系统）</strong>  </p>
<ul>
<li>如 <code>OverlayFS</code>、<code>AUFS</code>，实现镜像分层存储和容器读写层的高效复用。</li>
</ul>
</li>
</ul>
<hr>
<h3 id="2-容器运行流程"><a href="#2-容器运行流程" class="headerlink" title="2. 容器运行流程"></a><strong>2. 容器运行流程</strong></h3><ol>
<li><strong>镜像加载</strong>：  <ul>
<li>基于镜像（只读层）创建容器时，添加一个可写层（Copy-on-Write）。</li>
</ul>
</li>
<li><strong>资源隔离</strong>：  <ul>
<li>通过 <code>Namespaces</code> 创建隔离的进程、网络、文件系统等环境。</li>
</ul>
</li>
<li><strong>资源限制</strong>：  <ul>
<li>通过 <code>Cgroups</code> 分配 CPU、内存等配额。</li>
</ul>
</li>
<li><strong>网络配置</strong>：  <ul>
<li>默认使用 <code>bridge</code> 模式，创建 <code>veth pair</code> 虚拟网卡对连接容器与宿主机。</li>
</ul>
</li>
</ol>
<hr>
<h3 id="3-与虚拟机的区别"><a href="#3-与虚拟机的区别" class="headerlink" title="3. 与虚拟机的区别"></a><strong>3. 与虚拟机的区别</strong></h3><table>
<thead>
<tr>
<th><strong>特性</strong></th>
<th><strong>Docker 容器</strong></th>
<th><strong>虚拟机</strong></th>
</tr>
</thead>
<tbody><tr>
<td><strong>隔离级别</strong></td>
<td>进程级（共享宿主机内核）</td>
<td>硬件级（完整操作系统）</td>
</tr>
<tr>
<td><strong>启动速度</strong></td>
<td>秒级（直接调用宿主机内核）</td>
<td>分钟级（需启动Guest OS）</td>
</tr>
<tr>
<td><strong>性能损耗</strong></td>
<td>&lt;5%（接近原生进程）</td>
<td>15%~30%（虚拟化开销）</td>
</tr>
<tr>
<td><strong>镜像大小</strong></td>
<td>MB 级（仅应用层）</td>
<td>GB 级（含完整OS）</td>
</tr>
</tbody></table>
<hr>
<h3 id="4-关键组件"><a href="#4-关键组件" class="headerlink" title="4. 关键组件"></a><strong>4. 关键组件</strong></h3><ul>
<li><strong>containerd</strong>：负责容器生命周期管理（创建&#x2F;启动&#x2F;停止）。  </li>
<li><strong>runc</strong>：底层运行时工具，根据 OCI 标准调用内核功能创建容器。  </li>
<li><strong>Docker Engine</strong>：封装上层 API 和工具链（如 <code>docker build</code>&#x2F;<code>docker run</code>）。</li>
</ul>
<hr>
<h3 id="5-简单示例：容器如何启动？"><a href="#5-简单示例：容器如何启动？" class="headerlink" title="5. 简单示例：容器如何启动？"></a><strong>5. 简单示例：容器如何启动？</strong></h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 当执行 `docker run -it ubuntu bash` 时：</span></span><br><span class="line">1. 检查本地是否存在 `ubuntu` 镜像，若无则从仓库拉取。</span><br><span class="line">2. 创建可写层（容器层）叠加到镜像的只读层上。</span><br><span class="line">3. 调用 `runc` 创建 Namespaces 和 Cgroups。</span><br><span class="line">4. 在隔离环境中启动 `/bin/bash` 进程。</span><br></pre></td></tr></table></figure>

<hr>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a><strong>总结</strong></h3><p>Docker 容器本质是 <strong>通过 Linux 内核的 Namespaces 和 Cgroups 实现的隔离进程</strong>，配合联合文件系统提供轻量级、高性能的虚拟化环境。其效率远高于传统虚拟机，但隔离性较弱（共享内核）。</p>
]]></content>
      <categories>
        <category>软件技术</category>
      </categories>
      <tags>
        <tag>笔记</tag>
        <tag>linux</tag>
        <tag>docker</tag>
      </tags>
  </entry>
  <entry>
    <title>dify和Bisheng</title>
    <url>/2025/04/22/dify%E5%92%8CBisheng/</url>
    <content><![CDATA[<hr>
<h1 id="基本对比"><a href="#基本对比" class="headerlink" title="基本对比"></a>基本对比</h1><p>ai生成的…</p>
<h3 id="一、核心差异总结"><a href="#一、核心差异总结" class="headerlink" title="一、核心差异总结"></a><strong>一、核心差异总结</strong></h3><table>
<thead>
<tr>
<th><strong>维度</strong></th>
<th><strong>Dify</strong></th>
<th><strong>Bisheng（昇腾）</strong></th>
</tr>
</thead>
<tbody><tr>
<td><strong>定位</strong></td>
<td>开源、轻量级AI应用开发平台</td>
<td>企业级复杂业务流程智能化平台</td>
</tr>
<tr>
<td><strong>工作流设计</strong></td>
<td>线性流程，<strong>不支持循环&#x2F;闭环</strong></td>
<td>支持循环、分支跳转等<strong>复杂拓扑</strong></td>
</tr>
<tr>
<td><strong>技术门槛</strong></td>
<td>开发者友好，需代码能力</td>
<td>低代码&#x2F;无代码，业务人员可直接操作</td>
</tr>
<tr>
<td><strong>模型支持</strong></td>
<td>多模型兼容（开源+闭源）</td>
<td>侧重国产化模型（如华为、文心一言）</td>
</tr>
<tr>
<td><strong>部署模式</strong></td>
<td>支持云原生、私有化部署</td>
<td>企业级混合云、深度本地化适配</td>
</tr>
<tr>
<td><strong>实时更新能力</strong></td>
<td>需API+外部工具实现准实时同步</td>
<td>可能提供内置数据管道和自动化引擎</td>
</tr>
<tr>
<td><strong>行业适配</strong></td>
<td>通用场景，依赖社区扩展</td>
<td>金融、政务等垂直领域预置模板</td>
</tr>
<tr>
<td><strong>成本</strong></td>
<td>开源免费+商业托管</td>
<td>按企业级功能模块或服务收费</td>
</tr>
</tbody></table>
<hr>
<h3 id="二、关键能力对比"><a href="#二、关键能力对比" class="headerlink" title="二、关键能力对比"></a><strong>二、关键能力对比</strong></h3><h4 id="1-工作流灵活性"><a href="#1-工作流灵活性" class="headerlink" title="1. 工作流灵活性"></a><strong>1. 工作流灵活性</strong></h4><ul>
<li><strong>Dify</strong>：  <ul>
<li>✅ 简单流程快速搭建（如单轮对话、内容生成）。  </li>
<li>❌ <strong>不支持循环</strong>，需依赖外部系统实现迭代逻辑。</li>
</ul>
</li>
<li><strong>Bisheng</strong>：  <ul>
<li>✅ 原生支持循环、条件分支、状态回滚，适合多轮交互和动态调整场景（如合同审批、风险监控）。</li>
</ul>
</li>
</ul>
<h4 id="2-知识库实时更新"><a href="#2-知识库实时更新" class="headerlink" title="2. 知识库实时更新"></a><strong>2. 知识库实时更新</strong></h4><ul>
<li><strong>Dify</strong>：  <ul>
<li>✅ 通过API+自动化工具（如云函数、文件监听）实现准实时同步。  </li>
<li>❌ 需额外开发成本，性能受外部系统影响。</li>
</ul>
</li>
<li><strong>Bisheng</strong>：  <ul>
<li>✅ 内置企业级数据管道（如数据库CDC监听），开箱即用。</li>
</ul>
</li>
</ul>
<h4 id="3-企业级特性"><a href="#3-企业级特性" class="headerlink" title="3. 企业级特性"></a><strong>3. 企业级特性</strong></h4><ul>
<li><strong>Dify</strong>：  <ul>
<li>✅ 开源灵活，适合定制化需求。  </li>
<li>❌ 缺乏细粒度权限、审计日志等企业级功能。</li>
</ul>
</li>
<li><strong>Bisheng</strong>：  <ul>
<li>✅ 提供RBAC权限、操作审计、高可用集群等特性。</li>
</ul>
</li>
</ul>
<hr>
<h3 id="三、选型建议"><a href="#三、选型建议" class="headerlink" title="三、选型建议"></a><strong>三、选型建议</strong></h3><h4 id="选择-Dify-的场景"><a href="#选择-Dify-的场景" class="headerlink" title="选择 Dify 的场景"></a><strong>选择 Dify 的场景</strong></h4><ul>
<li>需要快速验证AI应用原型（如智能客服、营销文案生成）。  </li>
<li>开发者主导，追求技术自由度（如自定义模型、插件开发）。  </li>
<li>预算有限，依赖开源生态和社区支持。</li>
</ul>
<h4 id="选择-Bisheng-的场景"><a href="#选择-Bisheng-的场景" class="headerlink" title="选择 Bisheng 的场景"></a><strong>选择 Bisheng 的场景</strong></h4><ul>
<li>企业复杂业务流程改造（如供应链管理、多层级审批）。  </li>
<li>非技术团队需自主搭建AI工具（如HR部门设计面试评估流程）。  </li>
<li>对数据合规性、国产化适配有强需求（如政务、金融行业）。</li>
</ul>
<hr>
<h3 id="四、未来扩展性"><a href="#四、未来扩展性" class="headerlink" title="四、未来扩展性"></a><strong>四、未来扩展性</strong></h3><ul>
<li><strong>Dify</strong>：  <ul>
<li>通过社区插件可能逐步支持简单循环逻辑，但复杂闭环仍需外部集成。</li>
</ul>
</li>
<li><strong>Bisheng</strong>：  <ul>
<li>可能深化行业场景模板（如医疗病历分析、工业质检），强化端到端闭环能力。</li>
</ul>
</li>
</ul>
<hr>
<h3 id="五、一句话总结"><a href="#五、一句话总结" class="headerlink" title="五、一句话总结"></a><strong>五、一句话总结</strong></h3><ul>
<li><strong>Dify</strong> 是「开发者手中的瑞士军刀」，灵活轻便但需自行组装；  </li>
<li><strong>Bisheng</strong> 是「企业级智能引擎」，开箱即用但深度依赖厂商生态。</li>
</ul>
<h1 id="循环、分支跳转等复杂拓扑的试用体验"><a href="#循环、分支跳转等复杂拓扑的试用体验" class="headerlink" title="循环、分支跳转等复杂拓扑的试用体验"></a>循环、分支跳转等<strong>复杂拓扑</strong>的试用体验</h1><p>​	</p>
]]></content>
      <categories>
        <category>软件技术</category>
      </categories>
      <tags>
        <tag>笔记</tag>
        <tag>linux</tag>
        <tag>深度学习</tag>
        <tag>AI</tag>
        <tag>deepseek-r1</tag>
        <tag>ragflow</tag>
        <tag>dify</tag>
        <tag>bge-m3</tag>
        <tag>知识库</tag>
        <tag>本地部署</tag>
        <tag>客制化AI</tag>
        <tag>企业级AI</tag>
        <tag>Bisheng</tag>
      </tags>
  </entry>
  <entry>
    <title>iso镜像烧录</title>
    <url>/2025/07/11/iso%E9%95%9C%E5%83%8F%E7%83%A7%E5%BD%95/</url>
    <content><![CDATA[<blockquote>
<p>写这篇博客的起因是在服务器实体机上装Anolis8.10minimal，试过很多不同的镜像都会卡在网络选择以及源选择上，又因为是新的服务器，交换机IP还没配没网所以卡住。之所以会出现这种问题，是因为我在刻录镜像时使用的是默认的<strong>iso</strong>模式而不是<strong>dd</strong>模式（ultraIso是raw），导致文件结构发生了改变。</p>
</blockquote>
<h1 id="iso镜像烧录"><a href="#iso镜像烧录" class="headerlink" title="iso镜像烧录"></a>iso镜像烧录</h1><p><img src="/../images/Linux/%E8%BF%90%E7%BB%B4/burn_iso/image-20250711085559835.png" alt="image-20250711085559835"></p>
<p><img src="/../images/Linux/%E8%BF%90%E7%BB%B4/burn_iso/image-20250711085447775.png" alt="image-20250711085447775"></p>
<p>在安装操作系统（如 Windows、Linux 发行版或服务器系统）时，选择合适的 ISO 烧录方式至关重要。不同的刻录方法会影响 <strong>引导兼容性、安装成功率</strong>，甚至导致玄学问题（如 <code>dracut emergency shell</code>）。</p>
<table>
<thead>
<tr>
<th align="left"><strong>方式</strong></th>
<th align="left"><strong>适用场景</strong></th>
<th align="left"><strong>优点</strong></th>
<th align="left"><strong>缺点</strong></th>
</tr>
</thead>
<tbody><tr>
<td align="left"><strong><code>dd</code>&#x2F;RAW 模式</strong></td>
<td align="left">Linux 服务器、特殊硬件</td>
<td align="left">100% 兼容，保留原始结构</td>
<td align="left">U 盘无法直接存取剩余空间</td>
</tr>
<tr>
<td align="left"><strong>Rufus ISO 模式</strong></td>
<td align="left">Windows&#x2F;Ubuntu 等主流系统</td>
<td align="left">可编辑、U 盘可复用</td>
<td align="left">可能破坏非标准 ISO 的引导</td>
</tr>
<tr>
<td align="left"><strong>UltraISO USB-HDD+</strong></td>
<td align="left">老旧 Legacy BIOS 电脑</td>
<td align="left">兼容部分旧机器</td>
<td align="left">不支持 UEFI，可能损坏元数据</td>
</tr>
<tr>
<td align="left"><strong>直接解压到 FAT32</strong></td>
<td align="left">几乎不推荐</td>
<td align="left">仅适用于极少数 WinPE 工具</td>
<td align="left">99% 无法引导</td>
</tr>
</tbody></table>
<hr>
<h2 id="1-关键概念解析"><a href="#1-关键概念解析" class="headerlink" title="1. 关键概念解析"></a><strong>1. 关键概念解析</strong></h2><h3 id="（1）dd-RAW-模式：最可靠的底层写入"><a href="#（1）dd-RAW-模式：最可靠的底层写入" class="headerlink" title="（1）dd&#x2F;RAW 模式：最可靠的底层写入"></a><strong>（1）<code>dd</code>&#x2F;RAW 模式：最可靠的底层写入</strong></h3><ul>
<li><strong>原理</strong>：逐字节复制 ISO 到 U 盘，完全保留引导扇区、分区表和文件系统。</li>
<li><strong>适用场景</strong>：<ul>
<li>龙蜥 (Anolis)、CentOS、RHEL 等企业级 Linux</li>
<li>华为&#x2F;戴尔服务器等特殊硬件</li>
<li>Arch Linux、Gentoo 等非标准引导的发行版</li>
</ul>
</li>
</ul>
<p><strong>操作方法：</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">dd</span> <span class="keyword">if</span>=anolis.iso of=/dev/sdX bs=4M status=progress oflag=<span class="built_in">sync</span>  <span class="comment"># Linux/macOS</span></span><br></pre></td></tr></table></figure>

<p>（Windows 可用 Rufus 的 <strong>DD 镜像模式</strong> 或 UltraISO 的 <strong>RAW 写入</strong>）</p>
<hr>
<h3 id="（2）Rufus-ISO-模式：平衡易用性与兼容性"><a href="#（2）Rufus-ISO-模式：平衡易用性与兼容性" class="headerlink" title="（2）Rufus ISO 模式：平衡易用性与兼容性"></a><strong>（2）Rufus ISO 模式：平衡易用性与兼容性</strong></h3><ul>
<li><strong>原理</strong>：提取 ISO 内容，重新生成 FAT32&#x2F;NTFS 文件系统和引导记录。</li>
<li><strong>适用场景</strong>：<ul>
<li>Windows 10&#x2F;11 安装</li>
<li>Ubuntu、Fedora 等主流 Linux 桌面版</li>
</ul>
</li>
</ul>
<p><strong>⚠️ 风险点</strong>：</p>
<ul>
<li>对非 Hybrid ISO（如某些定制镜像）可能破坏 <code>initramfs</code> 路径，导致安装失败。</li>
</ul>
<hr>
<h3 id="（3）UltraISO-USB-HDD-：旧设备的妥协方案"><a href="#（3）UltraISO-USB-HDD-：旧设备的妥协方案" class="headerlink" title="（3）UltraISO USB-HDD+：旧设备的妥协方案"></a><strong>（3）UltraISO USB-HDD+：旧设备的妥协方案</strong></h3><ul>
<li><strong>仅限 Legacy BIOS 机器</strong>，UEFI 电脑可能无法识别。</li>
<li><strong>慎用</strong>：部分 Linux ISO 会因元数据损坏导致安装源丢失（如龙蜥提示“必须配置源”）。</li>
</ul>
<h2 id="2-其他概念解析"><a href="#2-其他概念解析" class="headerlink" title="2. 其他概念解析"></a><strong>2. 其他概念解析</strong></h2><h3 id="1-分区类型（Partition-Scheme）"><a href="#1-分区类型（Partition-Scheme）" class="headerlink" title="1. 分区类型（Partition Scheme）"></a><strong>1. 分区类型（Partition Scheme）</strong></h3><h4 id="MBR-vs-GPT"><a href="#MBR-vs-GPT" class="headerlink" title="MBR vs GPT"></a><strong>MBR vs GPT</strong></h4><table>
<thead>
<tr>
<th align="left"><strong>特性</strong></th>
<th align="left"><strong>MBR (Master Boot Record)</strong></th>
<th align="left"><strong>GPT (GUID Partition Table)</strong></th>
</tr>
</thead>
<tbody><tr>
<td align="left"><strong>兼容性</strong></td>
<td align="left">仅支持 Legacy BIOS（老旧电脑）</td>
<td align="left">支持 UEFI 和现代硬件</td>
</tr>
<tr>
<td align="left"><strong>磁盘容量</strong></td>
<td align="left">最大 2TB</td>
<td align="left">支持 2TB 以上磁盘</td>
</tr>
<tr>
<td align="left"><strong>分区数量</strong></td>
<td align="left">最多 4 个主分区</td>
<td align="left">理论上无限分区</td>
</tr>
<tr>
<td align="left"><strong>适用场景</strong></td>
<td align="left">Windows 7 及更早系统</td>
<td align="left">Windows 10+&#x2F;Linux 服务器&#x2F;新硬件</td>
</tr>
</tbody></table>
<p><strong>烧录工具中的选择：</strong></p>
<ul>
<li>Rufus&#x2F;UltraISO 会提示选择 <strong>MBR</strong> 或 <strong>GPT</strong>，需匹配目标机器的启动模式（BIOS&#x2F;UEFI）。</li>
<li><strong>错误选择后果</strong>：U盘无法被识别为启动设备，提示 “No bootable device”。</li>
</ul>
<hr>
<h3 id="2-持久化分区（Persistence）"><a href="#2-持久化分区（Persistence）" class="headerlink" title="2. 持久化分区（Persistence）"></a><strong>2. 持久化分区（Persistence）</strong></h3><h4 id="什么是持久化？"><a href="#什么是持久化？" class="headerlink" title="什么是持久化？"></a><strong>什么是持久化？</strong></h4><ul>
<li>在Live USB（如Ubuntu安装盘）中保留用户数据和设置的功能，重启后不会丢失。</li>
<li><strong>实现方式</strong>：在U盘上划分一个独立分区存储变更数据。</li>
</ul>
<h4 id="分区大小设置原则"><a href="#分区大小设置原则" class="headerlink" title="分区大小设置原则"></a><strong>分区大小设置原则</strong></h4><table>
<thead>
<tr>
<th align="left"><strong>用途</strong></th>
<th align="left"><strong>推荐大小</strong></th>
<th align="left"><strong>说明</strong></th>
</tr>
</thead>
<tbody><tr>
<td align="left">轻度使用（终端配置）</td>
<td align="left">2GB-4GB</td>
<td align="left">足够保存基础软件包和配置文件</td>
</tr>
<tr>
<td align="left">开发环境</td>
<td align="left">8GB-16GB</td>
<td align="left">需容纳开发工具和依赖库</td>
</tr>
<tr>
<td align="left">完整桌面体验</td>
<td align="left">16GB+</td>
<td align="left">允许安装大型软件（如VS Code、Docker）</td>
</tr>
</tbody></table>
<p><strong>技术实现（以Ubuntu为例）：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 使用mkusb工具创建持久化分区</span><br><span class="line">sudo mkusb -p ubuntu-22.04.iso</span><br></pre></td></tr></table></figure>

<blockquote>
<p>📌 注意：Windows系统无法原生支持Linux持久化分区。</p>
</blockquote>
<hr>
<h3 id="3-文件系统（FAT32-vs-NTFS-vs-exFAT）"><a href="#3-文件系统（FAT32-vs-NTFS-vs-exFAT）" class="headerlink" title="3. 文件系统（FAT32 vs NTFS vs exFAT）"></a><strong>3. 文件系统（FAT32 vs NTFS vs exFAT）</strong></h3><h4 id="FAT32：兼容性之王"><a href="#FAT32：兼容性之王" class="headerlink" title="FAT32：兼容性之王"></a><strong>FAT32：兼容性之王</strong></h4><table>
<thead>
<tr>
<th align="left"><strong>特性</strong></th>
<th align="left"><strong>说明</strong></th>
</tr>
</thead>
<tbody><tr>
<td align="left"><strong>最大文件大小</strong></td>
<td align="left">4GB（无法存放超过此大小的单个文件，如Win10原版ISO）</td>
</tr>
<tr>
<td align="left"><strong>优点</strong></td>
<td align="left">所有操作系统和固件（包括树莓派、服务器BMC）都能识别</td>
</tr>
<tr>
<td align="left"><strong>缺点</strong></td>
<td align="left">不支持文件权限、日志等高级功能</td>
</tr>
</tbody></table>
<p><strong>适用场景：</strong></p>
<ul>
<li>UEFI启动盘（强制要求FAT32）</li>
<li>需要跨平台读写的情况（Windows&#x2F;Mac&#x2F;Linux）</li>
</ul>
<h4 id="NTFS-exFAT：大文件支持"><a href="#NTFS-exFAT：大文件支持" class="headerlink" title="NTFS&#x2F;exFAT：大文件支持"></a><strong>NTFS&#x2F;exFAT：大文件支持</strong></h4><table>
<thead>
<tr>
<th align="left"><strong>文件系统</strong></th>
<th align="left"><strong>优势</strong></th>
<th align="left"><strong>局限性</strong></th>
</tr>
</thead>
<tbody><tr>
<td align="left">NTFS</td>
<td align="left">支持日志、大文件</td>
<td align="left">部分Linux设备需额外驱动</td>
</tr>
<tr>
<td align="left">exFAT</td>
<td align="left">跨平台、无4GB限制</td>
<td align="left">老旧BIOS可能无法识别</td>
</tr>
</tbody></table>
<p><strong>烧录工具中的选择逻辑：</strong></p>
<p>图表</p>
<p>代码</p>
<hr>
<h3 id="4-簇大小（Cluster-Size-Allocation-Unit-Size）"><a href="#4-簇大小（Cluster-Size-Allocation-Unit-Size）" class="headerlink" title="4. 簇大小（Cluster Size&#x2F;Allocation Unit Size）"></a><strong>4. 簇大小（Cluster Size&#x2F;Allocation Unit Size）</strong></h3><h4 id="什么是簇？"><a href="#什么是簇？" class="headerlink" title="什么是簇？"></a><strong>什么是簇？</strong></h4><ul>
<li>文件系统分配存储空间的最小单位，类似”数据块”。</li>
<li><strong>例如</strong>：即使文件只有1KB，若簇大小为32KB，仍会占用32KB空间。</li>
</ul>
<h4 id="不同簇大小的影响"><a href="#不同簇大小的影响" class="headerlink" title="不同簇大小的影响"></a><strong>不同簇大小的影响</strong></h4><table>
<thead>
<tr>
<th align="left"><strong>簇大小</strong></th>
<th align="left"><strong>空间利用率</strong></th>
<th align="left"><strong>读写速度</strong></th>
<th align="left"><strong>适用场景</strong></th>
</tr>
</thead>
<tbody><tr>
<td align="left">4KB</td>
<td align="left">高</td>
<td align="left">较慢</td>
<td align="left">存放大量小文件（如文档）</td>
</tr>
<tr>
<td align="left">32KB</td>
<td align="left">中</td>
<td align="left">较快</td>
<td align="left">通用场景（平衡选择）</td>
</tr>
<tr>
<td align="left">64KB+</td>
<td align="left">低</td>
<td align="left">最快</td>
<td align="left">大型媒体文件&#x2F;游戏安装</td>
</tr>
</tbody></table>
<p><strong>烧录工具中的设置建议：</strong></p>
<ul>
<li><strong>Windows安装盘</strong>：默认32KB（平衡速度与兼容性）</li>
<li><strong>Linux LiveUSB</strong>：4KB（优化小文件读取）</li>
<li><strong>错误选择后果</strong>：U盘性能下降或浪费存储空间。</li>
</ul>
]]></content>
      <categories>
        <category>软件技术</category>
      </categories>
      <tags>
        <tag>笔记</tag>
        <tag>linux</tag>
        <tag>运维</tag>
        <tag>镜像烧录</tag>
      </tags>
  </entry>
  <entry>
    <title>esp8266连接服务器（基于mosquitto的mqtt server）</title>
    <url>/2024/02/09/esp8266%E8%BF%9E%E6%8E%A5%E6%9C%8D%E5%8A%A1%E5%99%A8%EF%BC%88%E5%9F%BA%E4%BA%8Emosquitto%E7%9A%84mqtt-server%EF%BC%89/</url>
    <content><![CDATA[<ul>
<li><p>Time：2024-02-09 00:39:50</p>
</li>
<li><p>还挺兴奋的，这个项目算是我自己搭建云服务器的最后一步。</p>
</li>
</ul>
<h1 id="idea"><a href="#idea" class="headerlink" title="idea"></a>idea</h1><p>​	起因是想要自己搭建云服务器，同时还想要利用手上已经有的esp8266开发板实现对该服务器的远程控制（开关机）。</p>
<p>​	本来打算整一个备用电源给服务器供电，奈何这台服务器是普通PC，即使配置已经很低（与现代PC比较为拉胯，但是比大多数出售的服务器例如某云2核4g更加）但功耗的保守估计已经超过70w。</p>
<p>​	于是便打算使用远程开关降低平均功耗。同时进行物联网方面知识的扫盲与学习。</p>
<h1 id="过程"><a href="#过程" class="headerlink" title="过程"></a>过程</h1><h2 id="1-前期准备"><a href="#1-前期准备" class="headerlink" title="1.前期准备"></a>1.前期准备</h2><p>​	首先，在已经搭建好的mqtt服务器上创建了用户<code>user</code>和密码<code>passwd</code>，同时处于安全性考虑禁止匿名访问。<a href="https://regenm.gitee.io/2024/02/09/MQTT%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%90%AD%E5%BB%BA%EF%BC%88mosquitto%EF%BC%89/">配置mqtt服务器的过程</a>)</p>
<p>​	创建好测试主题（topic）<code>test</code>后进行测试。多平台测试收发message没问题。</p>
<h2 id="2-中期打BOSS"><a href="#2-中期打BOSS" class="headerlink" title="2.中期打BOSS"></a>2.中期打BOSS</h2><p>​	接下来就是攻克esp8266这边的问题了。</p>
<ul>
<li>问题一：esp8266开发环境</li>
</ul>
<p>​	由于这块esp8266开发板是我在高中时期玩的，那时候的电脑早已坏掉，这台电脑的arduinoIDE 还未配置esp8266的环境。</p>
<p>​	本来打算使用platformIO但是太慢了，在下载框架以及支持的时候解决了ide的问题。。。</p>
<blockquote>
<p>需要配置：</p>
<ul>
<li>添加支持esp8266开发板</li>
</ul>
<p>方法一：ide设置里的 Additional boards manager URLs添加<code>http://arduino.esp8266.com/stable/package_esp8266com_index.json</code></p>
<p>方法二：手动添加：下载esp8266_package_installer直接离线下载</p>
<ul>
<li>增加库：<ul>
<li><code>&lt;PubSubClient.h&gt;</code></li>
<li><code>ESP8266WiFi.h</code></li>
</ul>
</li>
</ul>
</blockquote>
<ul>
<li>问题二：esp8266连接不成功</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">MQTT Server Connect Failed. Client State:-2</span><br><span class="line">MQTT Server Connect Failed. Client State:-2</span><br><span class="line">MQTT Server Connect Failed. Client State:-2</span><br><span class="line">MQTT Server Connect Failed. Client State:-2</span><br><span class="line">MQTT Server Connect Failed. Client State:-2</span><br><span class="line">MQTT Server Connect Failed. Client State:-2</span><br></pre></td></tr></table></figure>

<p>​		其实主要是平台的问题，8266，以及PubSubClient.h库中的案例程序和大多数网上教程都是使用的别人的mqtt服务器，他们往往不需要提供账号密码等等。例如</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> Basic MQTT example</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> This sketch demonstrates the basic capabilities of the library.</span></span><br><span class="line"><span class="comment"> It connects to an MQTT server then:</span></span><br><span class="line"><span class="comment">  - publishes &quot;hello world&quot; to the topic &quot;outTopic&quot;</span></span><br><span class="line"><span class="comment">  - subscribes to the topic &quot;inTopic&quot;, printing out any messages</span></span><br><span class="line"><span class="comment">    it receives. NB - it assumes the received payloads are strings not binary</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> It will reconnect to the server if the connection is lost using a blocking</span></span><br><span class="line"><span class="comment"> reconnect function. See the &#x27;mqtt_reconnect_nonblocking&#x27; example for how to</span></span><br><span class="line"><span class="comment"> achieve the same result without blocking the main loop.</span></span><br><span class="line"><span class="comment"> </span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;SPI.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;Ethernet.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;PubSubClient.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Update these with values suitable for your network.</span></span><br><span class="line">byte mac[]    = &#123;  <span class="number">0xDE</span>, <span class="number">0xED</span>, <span class="number">0xBA</span>, <span class="number">0xFE</span>, <span class="number">0xFE</span>, <span class="number">0xED</span> &#125;;</span><br><span class="line"><span class="function">IPAddress <span class="title">ip</span><span class="params">(<span class="number">172</span>, <span class="number">16</span>, <span class="number">0</span>, <span class="number">100</span>)</span></span>;</span><br><span class="line"><span class="function">IPAddress <span class="title">server</span><span class="params">(<span class="number">172</span>, <span class="number">16</span>, <span class="number">0</span>, <span class="number">2</span>)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">callback</span><span class="params">(<span class="type">char</span>* topic, byte* payload, <span class="type">unsigned</span> <span class="type">int</span> length)</span> </span>&#123;</span><br><span class="line">  Serial.<span class="built_in">print</span>(<span class="string">&quot;Message arrived [&quot;</span>);</span><br><span class="line">  Serial.<span class="built_in">print</span>(topic);</span><br><span class="line">  Serial.<span class="built_in">print</span>(<span class="string">&quot;] &quot;</span>);</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">0</span>;i&lt;length;i++) &#123;</span><br><span class="line">    Serial.<span class="built_in">print</span>((<span class="type">char</span>)payload[i]);</span><br><span class="line">  &#125;</span><br><span class="line">  Serial.<span class="built_in">println</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">EthernetClient ethClient;</span><br><span class="line"><span class="function">PubSubClient <span class="title">client</span><span class="params">(ethClient)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">reconnect</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="comment">// Loop until we&#x27;re reconnected</span></span><br><span class="line">  <span class="keyword">while</span> (!client.<span class="built_in">connected</span>()) &#123;</span><br><span class="line">    Serial.<span class="built_in">print</span>(<span class="string">&quot;Attempting MQTT connection...&quot;</span>);</span><br><span class="line">    <span class="comment">// Attempt to connect</span></span><br><span class="line">      <span class="comment">/*----------------------------区别（报错位置）---------------------------*/</span></span><br><span class="line">    <span class="keyword">if</span> (client.<span class="built_in">connect</span>(<span class="string">&quot;arduinoClient&quot;</span>)) &#123;</span><br><span class="line">      <span class="comment">/*----------------------------区别（报错位置）---------------------------*/</span></span><br><span class="line">      Serial.<span class="built_in">println</span>(<span class="string">&quot;connected&quot;</span>);</span><br><span class="line">      <span class="comment">// Once connected, publish an announcement...</span></span><br><span class="line">      client.<span class="built_in">publish</span>(<span class="string">&quot;outTopic&quot;</span>,<span class="string">&quot;hello world&quot;</span>);</span><br><span class="line">      <span class="comment">// ... and resubscribe</span></span><br><span class="line">      client.<span class="built_in">subscribe</span>(<span class="string">&quot;inTopic&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      Serial.<span class="built_in">print</span>(<span class="string">&quot;failed, rc=&quot;</span>);</span><br><span class="line">      Serial.<span class="built_in">print</span>(client.<span class="built_in">state</span>());</span><br><span class="line">      Serial.<span class="built_in">println</span>(<span class="string">&quot; try again in 5 seconds&quot;</span>);</span><br><span class="line">      <span class="comment">// Wait 5 seconds before retrying</span></span><br><span class="line">      <span class="built_in">delay</span>(<span class="number">5000</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">setup</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  Serial.<span class="built_in">begin</span>(<span class="number">57600</span>);</span><br><span class="line"></span><br><span class="line">  client.<span class="built_in">setServer</span>(server, <span class="number">1883</span>);</span><br><span class="line">  client.<span class="built_in">setCallback</span>(callback);</span><br><span class="line"></span><br><span class="line">  Ethernet.<span class="built_in">begin</span>(mac, ip);</span><br><span class="line">  <span class="comment">// Allow the hardware to sort itself out</span></span><br><span class="line">  <span class="built_in">delay</span>(<span class="number">1500</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">loop</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (!client.<span class="built_in">connected</span>()) &#123;</span><br><span class="line">    <span class="built_in">reconnect</span>();</span><br><span class="line">  &#125;</span><br><span class="line">  client.<span class="built_in">loop</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>​	以及太极创客的代码</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**********************************************************************</span></span><br><span class="line"><span class="comment">项目名称/Project          : 零基础入门学用物联网</span></span><br><span class="line"><span class="comment">程序名称/Program name     : publish_ranye_url</span></span><br><span class="line"><span class="comment">团队/Team                : 太极创客团队 / Taichi-Maker (www.taichi-maker.com)</span></span><br><span class="line"><span class="comment">作者/Author              : CYNO朔</span></span><br><span class="line"><span class="comment">日期/Date（YYYYMMDD）     : 20200813</span></span><br><span class="line"><span class="comment">程序目的/Purpose          : </span></span><br><span class="line"><span class="comment">本程序旨在演示如何使用PubSubClient库使用ESP8266向MQTT服务器发布信息。</span></span><br><span class="line"><span class="comment">-----------------------------------------------------------------------</span></span><br><span class="line"><span class="comment">本示例程序为太极创客团队制作的《零基础入门学用物联网》中示例程序。</span></span><br><span class="line"><span class="comment">该教程为对物联网开发感兴趣的朋友所设计和制作。如需了解更多该教程的信息，请参考以下网页：</span></span><br><span class="line"><span class="comment">http://www.taichi-maker.com/homepage/esp8266-nodemcu-iot/iot-c/esp8266-nodemcu-web-client/http-request/</span></span><br><span class="line"><span class="comment">***********************************************************************/</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;ESP8266WiFi.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;PubSubClient.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;Ticker.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置wifi接入信息(请根据您的WiFi信息进行修改)</span></span><br><span class="line"><span class="type">const</span> <span class="type">char</span>* ssid = <span class="string">&quot;lkw&quot;</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">char</span>* password = <span class="string">&quot;01234567890&quot;</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">char</span>* mqttServer = <span class="string">&quot;192.168.43.61&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 如以上MQTT服务器无法正常连接，请前往以下页面寻找解决方案</span></span><br><span class="line"><span class="comment">// http://www.taichi-maker.com/public-mqtt-broker/</span></span><br><span class="line"></span><br><span class="line">Ticker ticker;</span><br><span class="line">WiFiClient wifiClient;</span><br><span class="line"><span class="function">PubSubClient <span class="title">mqttClient</span><span class="params">(wifiClient)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> count;    <span class="comment">// Ticker计数用变量</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">setup</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  Serial.<span class="built_in">begin</span>(<span class="number">9600</span>);</span><br><span class="line">  </span><br><span class="line">  <span class="comment">//设置ESP8266工作模式为无线终端模式</span></span><br><span class="line">  WiFi.<span class="built_in">mode</span>(WIFI_STA);</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 连接WiFi</span></span><br><span class="line">  <span class="built_in">connectWifi</span>();</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 设置MQTT服务器和端口号</span></span><br><span class="line">  mqttClient.<span class="built_in">setServer</span>(mqttServer, <span class="number">1883</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 连接MQTT服务器</span></span><br><span class="line">  <span class="built_in">connectMQTTServer</span>();</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Ticker定时对象</span></span><br><span class="line">  ticker.<span class="built_in">attach</span>(<span class="number">1</span>, tickerCount);  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">loop</span><span class="params">()</span> </span>&#123; </span><br><span class="line">  <span class="keyword">if</span> (mqttClient.<span class="built_in">connected</span>()) &#123; <span class="comment">// 如果开发板成功连接服务器</span></span><br><span class="line">    <span class="comment">// 每隔3秒钟发布一次信息</span></span><br><span class="line">    <span class="keyword">if</span> (count &gt;= <span class="number">3</span>)&#123;</span><br><span class="line">      <span class="built_in">pubMQTTmsg</span>();</span><br><span class="line">      count = <span class="number">0</span>;</span><br><span class="line">    &#125;    </span><br><span class="line">    <span class="comment">// 保持心跳</span></span><br><span class="line">    mqttClient.<span class="built_in">loop</span>();</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;                  <span class="comment">// 如果开发板未能成功连接服务器</span></span><br><span class="line">    <span class="built_in">connectMQTTServer</span>();    <span class="comment">// 则尝试连接服务器</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">tickerCount</span><span class="params">()</span></span>&#123;</span><br><span class="line">  count++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*----------------------------区别（报错位置）---------------------------*/</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">connectMQTTServer</span><span class="params">()</span></span>&#123;</span><br><span class="line">  <span class="comment">// 根据ESP8266的MAC地址生成客户端ID（避免与其它ESP8266的客户端ID重名）</span></span><br><span class="line">  String clientId = <span class="string">&quot;esp8266-&quot;</span> + WiFi.<span class="built_in">macAddress</span>();</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 连接MQTT服务器</span></span><br><span class="line">  <span class="keyword">if</span> (mqttClient.<span class="built_in">connect</span>(clientId.<span class="built_in">c_str</span>())) &#123; </span><br><span class="line"><span class="comment">/*----------------------------区别（报错位置）---------------------------*/</span></span><br><span class="line">    Serial.<span class="built_in">println</span>(<span class="string">&quot;MQTT Server Connected.&quot;</span>);</span><br><span class="line">    Serial.<span class="built_in">println</span>(<span class="string">&quot;Server Address: &quot;</span>);</span><br><span class="line">    Serial.<span class="built_in">println</span>(mqttServer);</span><br><span class="line">    Serial.<span class="built_in">println</span>(<span class="string">&quot;ClientId:&quot;</span>);</span><br><span class="line">    Serial.<span class="built_in">println</span>(clientId);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    Serial.<span class="built_in">print</span>(<span class="string">&quot;MQTT Server Connect Failed. Client State:&quot;</span>);</span><br><span class="line">    Serial.<span class="built_in">println</span>(mqttClient.<span class="built_in">state</span>());</span><br><span class="line">    <span class="built_in">delay</span>(<span class="number">3000</span>);</span><br><span class="line">  &#125;   </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 发布信息</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">pubMQTTmsg</span><span class="params">()</span></span>&#123;</span><br><span class="line">  <span class="type">static</span> <span class="type">int</span> value; <span class="comment">// 客户端发布信息用数字</span></span><br><span class="line"></span><br><span class="line">  String topicString = <span class="string">&quot;lkwMQTTtopic&quot;</span>;</span><br><span class="line">  </span><br><span class="line">  <span class="type">char</span> publishTopic[topicString.<span class="built_in">length</span>() + <span class="number">1</span>];  </span><br><span class="line">  <span class="built_in">strcpy</span>(publishTopic, topicString.<span class="built_in">c_str</span>());</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 建立发布信息。信息内容以Hello World为起始，后面添加发布次数。</span></span><br><span class="line">  String messageString = <span class="string">&quot;Hello World &quot;</span> + <span class="built_in">String</span>(value++); </span><br><span class="line">  <span class="type">char</span> publishMsg[messageString.<span class="built_in">length</span>() + <span class="number">1</span>];   </span><br><span class="line">  <span class="built_in">strcpy</span>(publishMsg, messageString.<span class="built_in">c_str</span>());</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 实现ESP8266向主题发布信息</span></span><br><span class="line">  <span class="keyword">if</span>(mqttClient.<span class="built_in">publish</span>(publishTopic, publishMsg))&#123;</span><br><span class="line">    Serial.<span class="built_in">println</span>(<span class="string">&quot;Publish Topic:&quot;</span>);Serial.<span class="built_in">println</span>(publishTopic);</span><br><span class="line">    Serial.<span class="built_in">println</span>(<span class="string">&quot;Publish message:&quot;</span>);Serial.<span class="built_in">println</span>(publishMsg);    </span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    Serial.<span class="built_in">println</span>(<span class="string">&quot;Message Publish Failed.&quot;</span>); </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ESP8266连接wifi</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">connectWifi</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">  WiFi.<span class="built_in">begin</span>(ssid, password);</span><br><span class="line"> </span><br><span class="line">  <span class="comment">//等待WiFi连接,成功连接后输出成功信息</span></span><br><span class="line">  <span class="keyword">while</span> (WiFi.<span class="built_in">status</span>() != WL_CONNECTED) &#123;</span><br><span class="line">    <span class="built_in">delay</span>(<span class="number">1000</span>);</span><br><span class="line">    Serial.<span class="built_in">print</span>(<span class="string">&quot;.&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  Serial.<span class="built_in">println</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line">  Serial.<span class="built_in">println</span>(<span class="string">&quot;WiFi Connected!&quot;</span>);  </span><br><span class="line">  Serial.<span class="built_in">println</span>(<span class="string">&quot;&quot;</span>); </span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>解决方法：查看<code>PubSubClient</code>的源代码</p>
<p>幸亏结构挺简单，很容易就找到了想要的代码即<code>PubSubClient的connect方法</code></p>
<ul>
<li>在<code>PubSubClient.h</code></li>
</ul>
<p><img src="/images/esp8266_mqtt/PubSubClientH.png" alt="PubSubClientH"></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function">boolean <span class="title">connect</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* id)</span></span>;</span><br><span class="line">  <span class="function">boolean <span class="title">connect</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* id, <span class="type">const</span> <span class="type">char</span>* user, <span class="type">const</span> <span class="type">char</span>* pass)</span></span>;</span><br><span class="line">  <span class="function">boolean <span class="title">connect</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* id, <span class="type">const</span> <span class="type">char</span>* willTopic, <span class="type">uint8_t</span> willQos, boolean willRetain, <span class="type">const</span> <span class="type">char</span>* willMessage)</span></span>;</span><br><span class="line">  <span class="function">boolean <span class="title">connect</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* id, <span class="type">const</span> <span class="type">char</span>* user, <span class="type">const</span> <span class="type">char</span>* pass, <span class="type">const</span> <span class="type">char</span>* willTopic, <span class="type">uint8_t</span> willQos, boolean willRetain, <span class="type">const</span> <span class="type">char</span>* willMessage)</span></span>;</span><br><span class="line">  <span class="function">boolean <span class="title">connect</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* id, <span class="type">const</span> <span class="type">char</span>* user, <span class="type">const</span> <span class="type">char</span>* pass, <span class="type">const</span> <span class="type">char</span>* willTopic, <span class="type">uint8_t</span> willQos, boolean willRetain, <span class="type">const</span> <span class="type">char</span>* willMessage, boolean cleanSession)</span></span>;</span><br><span class="line">  <span class="function"><span class="type">void</span> <span class="title">disconnect</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure>

<p>在<code>PubSubClient.cpp</code></p>
<p><img src="/images/esp8266_mqtt/PubSubClientCPP.png" alt="PubSubClientCPP"></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function">boolean <span class="title">PubSubClient::connect</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *id)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">connect</span>(id,<span class="literal">NULL</span>,<span class="literal">NULL</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">boolean <span class="title">PubSubClient::connect</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *id, <span class="type">const</span> <span class="type">char</span> *user, <span class="type">const</span> <span class="type">char</span> *pass)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">connect</span>(id,user,pass,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">boolean <span class="title">PubSubClient::connect</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *id, <span class="type">const</span> <span class="type">char</span>* willTopic, <span class="type">uint8_t</span> willQos, boolean willRetain, <span class="type">const</span> <span class="type">char</span>* willMessage)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">connect</span>(id,<span class="literal">NULL</span>,<span class="literal">NULL</span>,willTopic,willQos,willRetain,willMessage,<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">boolean <span class="title">PubSubClient::connect</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *id, <span class="type">const</span> <span class="type">char</span> *user, <span class="type">const</span> <span class="type">char</span> *pass, <span class="type">const</span> <span class="type">char</span>* willTopic, <span class="type">uint8_t</span> willQos, boolean willRetain, <span class="type">const</span> <span class="type">char</span>* willMessage)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">connect</span>(id,user,pass,willTopic,willQos,willRetain,willMessage,<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">boolean <span class="title">PubSubClient::connect</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *id, <span class="type">const</span> <span class="type">char</span> *user, <span class="type">const</span> <span class="type">char</span> *pass, <span class="type">const</span> <span class="type">char</span>* willTopic, <span class="type">uint8_t</span> willQos, boolean willRetain, <span class="type">const</span> <span class="type">char</span>* willMessage, boolean cleanSession)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="built_in">connected</span>()) &#123;</span><br><span class="line">        <span class="type">int</span> result = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(_client-&gt;<span class="built_in">connected</span>()) &#123;</span><br><span class="line">            result = <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            </span><br><span class="line">            <span class="comment">/******************省略*****************/</span></span><br></pre></td></tr></table></figure>

<p>​	于是就得出 connect 重载函数本体只有一个，即最后一个，我可以修改输入的参数实现自己想要的功能。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function">boolean <span class="title">PubSubClient::connect</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *id, <span class="type">const</span> <span class="type">char</span> *user, <span class="type">const</span> <span class="type">char</span> *pass)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">connect</span>(id,user,pass,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="3-结尾"><a href="#3-结尾" class="headerlink" title="3.结尾"></a>3.结尾</h2><p>先附上自己的代码，修改了连接模板代码 部分。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;ESP8266WiFi.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;PubSubClient.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;Ticker.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置wifi接入信息(请根据您的WiFi信息进行修改)</span></span><br><span class="line"><span class="type">const</span> <span class="type">char</span>* ssid = <span class="string">&quot;MERCURY_F80E&quot;</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">char</span>* password = <span class="string">&quot;********&quot;</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">char</span>* mqttServer = <span class="string">&quot;regenm.gitee.io&quot;</span>;</span><br><span class="line"></span><br><span class="line">Ticker ticker;</span><br><span class="line">WiFiClient wifiClient;</span><br><span class="line"><span class="function">PubSubClient <span class="title">mqttClient</span><span class="params">(wifiClient)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> count;  <span class="comment">// Ticker计数用变量</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">setup</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  Serial.<span class="built_in">begin</span>(<span class="number">9600</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">//设置ESP8266工作模式为无线终端模式</span></span><br><span class="line">  WiFi.<span class="built_in">mode</span>(WIFI_STA);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 连接WiFi</span></span><br><span class="line">  <span class="built_in">connectWifi</span>();</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 设置MQTT服务器和端口号</span></span><br><span class="line">  mqttClient.<span class="built_in">setServer</span>(mqttServer, <span class="number">1883</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 连接MQTT服务器</span></span><br><span class="line">  <span class="built_in">connectMQTTServer</span>();</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Ticker定时对象</span></span><br><span class="line">  ticker.<span class="built_in">attach</span>(<span class="number">1</span>, tickerCount);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">loop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (mqttClient.<span class="built_in">connected</span>()) &#123;  <span class="comment">// 如果开发板成功连接服务器</span></span><br><span class="line">    <span class="comment">// 每隔3秒钟发布一次信息</span></span><br><span class="line">    <span class="keyword">if</span> (count &gt;= <span class="number">3</span>) &#123;</span><br><span class="line">      <span class="built_in">pubMQTTmsg</span>();</span><br><span class="line">      count = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 保持心跳</span></span><br><span class="line">    mqttClient.<span class="built_in">loop</span>();</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;                <span class="comment">// 如果开发板未能成功连接服务器</span></span><br><span class="line">    <span class="built_in">connectMQTTServer</span>();  <span class="comment">// 则尝试连接服务器</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">tickerCount</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  count++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">connectMQTTServer</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 根据ESP8266的MAC地址生成客户端ID（避免与其它ESP8266的客户端ID重名）</span></span><br><span class="line">  String clientId = <span class="string">&quot;regen&quot;</span>;</span><br><span class="line">  String userRegen = <span class="string">&quot;user&quot;</span>;</span><br><span class="line">  String passwdRegen = <span class="string">&quot;passwd&quot;</span>;</span><br><span class="line">  <span class="comment">// 连接MQTT服务器 </span></span><br><span class="line">    </span><br><span class="line">  <span class="comment">/* --------------------connect(id,user,pass,0,0,0,0,1)-------------------- */</span></span><br><span class="line">  <span class="keyword">if</span> (mqttClient.<span class="built_in">connect</span>(clientId.<span class="built_in">c_str</span>(),userRegen.<span class="built_in">c_str</span>() ,passwdRegen.<span class="built_in">c_str</span>() )) &#123;</span><br><span class="line">    Serial.<span class="built_in">println</span>(<span class="string">&quot;MQTT Server Connected.&quot;</span>);</span><br><span class="line">    Serial.<span class="built_in">println</span>(<span class="string">&quot;Server Address: &quot;</span>);</span><br><span class="line">    Serial.<span class="built_in">println</span>(mqttServer);</span><br><span class="line">    Serial.<span class="built_in">println</span>(<span class="string">&quot;ClientId:&quot;</span>);</span><br><span class="line">    Serial.<span class="built_in">println</span>(clientId);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    Serial.<span class="built_in">print</span>(<span class="string">&quot;MQTT Server Connect Failed. Client State:&quot;</span>);</span><br><span class="line">    Serial.<span class="built_in">println</span>(mqttClient.<span class="built_in">state</span>());</span><br><span class="line">    <span class="built_in">delay</span>(<span class="number">3000</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 发布信息</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">pubMQTTmsg</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="type">static</span> <span class="type">int</span> value;  <span class="comment">// 客户端发布信息用数字</span></span><br><span class="line"></span><br><span class="line">  String topicString = <span class="string">&quot;test&quot;</span>;</span><br><span class="line"></span><br><span class="line">  <span class="type">char</span> publishTopic[topicString.<span class="built_in">length</span>() + <span class="number">1</span>];</span><br><span class="line">  <span class="built_in">strcpy</span>(publishTopic, topicString.<span class="built_in">c_str</span>());</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 建立发布信息。信息内容以Hello World为起始，后面添加发布次数。</span></span><br><span class="line">  String messageString = <span class="string">&quot;Hello World &quot;</span> + <span class="built_in">String</span>(value++);</span><br><span class="line">  <span class="type">char</span> publishMsg[messageString.<span class="built_in">length</span>() + <span class="number">1</span>];</span><br><span class="line">  <span class="built_in">strcpy</span>(publishMsg, messageString.<span class="built_in">c_str</span>());</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 实现ESP8266向主题发布信息</span></span><br><span class="line">  <span class="keyword">if</span> (mqttClient.<span class="built_in">publish</span>(publishTopic, publishMsg)) &#123;</span><br><span class="line">    Serial.<span class="built_in">println</span>(<span class="string">&quot;Publish Topic:&quot;</span>);</span><br><span class="line">    Serial.<span class="built_in">println</span>(publishTopic);</span><br><span class="line">    Serial.<span class="built_in">println</span>(<span class="string">&quot;Publish message:&quot;</span>);</span><br><span class="line">    Serial.<span class="built_in">println</span>(publishMsg);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    Serial.<span class="built_in">println</span>(<span class="string">&quot;Message Publish Failed.&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ESP8266连接wifi</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">connectWifi</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  WiFi.<span class="built_in">begin</span>(ssid, password);</span><br><span class="line"></span><br><span class="line">  <span class="comment">//等待WiFi连接,成功连接后输出成功信息</span></span><br><span class="line">  <span class="keyword">while</span> (WiFi.<span class="built_in">status</span>() != WL_CONNECTED) &#123;</span><br><span class="line">    <span class="built_in">delay</span>(<span class="number">1000</span>);</span><br><span class="line">    Serial.<span class="built_in">print</span>(<span class="string">&quot;.&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  Serial.<span class="built_in">println</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line">  Serial.<span class="built_in">println</span>(<span class="string">&quot;WiFi Connected!&quot;</span>);</span><br><span class="line">  Serial.<span class="built_in">println</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>​	经过测试后成功，附上截图：</p>
<p><img src="/images/esp8266_mqtt/success1.png" alt="success"></p>
<p><img src="/images/esp8266_mqtt/success2.jpg" alt="success"></p>
<p><img src="/images/esp8266_mqtt/success3.png" alt="success"></p>
]]></content>
      <categories>
        <category>软硬件结合</category>
      </categories>
      <tags>
        <tag>笔记</tag>
        <tag>嵌入式</tag>
        <tag>linux</tag>
        <tag>mqtt</tag>
        <tag>IoT</tag>
        <tag>mosquitto</tag>
        <tag>esp8266</tag>
        <tag>物联网</tag>
      </tags>
  </entry>
  <entry>
    <title>java学习笔记</title>
    <url>/2023/10/16/java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h1 id="JAVA学习笔记"><a href="#JAVA学习笔记" class="headerlink" title="JAVA学习笔记"></a>JAVA学习笔记</h1><h2 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h2><h3 id="1-String"><a href="#1-String" class="headerlink" title="1.String"></a>1.String</h3><ul>
<li>初始化</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">String str1=“Java”；// 字符串常量值</span><br><span class="line">String str3=“Java”;  //  字符串常量，并且与str1地址相同</span><br><span class="line">String str2=new String(“Java”);</span><br></pre></td></tr></table></figure>

<ul>
<li>返回长度</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">str1.length()   <span class="comment">//带括号,与数组不同！！！</span></span><br></pre></td></tr></table></figure>

<ul>
<li><strong>字符串查找</strong></li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">str1.charAt(0);  // J</span><br><span class="line">str1.charAt(1);  // a</span><br><span class="line">str1.charAt(2);  // v</span><br><span class="line">str1.charAt(4);  // a</span><br><span class="line">str1.charAt(5);  // 报错</span><br></pre></td></tr></table></figure>

<ul>
<li>返回字符出现的第一个位置下标，否则返回-1</li>
</ul>
<p>a. 从字符串的头开始</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">int index = str1.indexOf(&#x27;J&#x27;);</span><br><span class="line">System.out.println(index);//  0</span><br></pre></td></tr></table></figure>

<p>b. 从下表x开始</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">int index1 = str1.indexOf(&#x27;a&#x27;,2);</span><br><span class="line">System.out.println(index1);  //3</span><br></pre></td></tr></table></figure>

<ul>
<li>返回字符串出现的位置下标, 从index 开始向<strong>后</strong>找 , 否则返回-1</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">s2</span> <span class="operator">=</span> <span class="string">&quot;helloxawllxhxawllxh&quot;</span>;</span><br><span class="line"> </span><br><span class="line">    <span class="type">int</span> <span class="variable">index3</span> <span class="operator">=</span> s2.lastIndexOf(<span class="string">&#x27;a&#x27;</span>);</span><br><span class="line">    System.out.println(index3);<span class="comment">//13</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>返回字符串出现的位置下标, 从index 开始向<strong>前</strong>找 , 否则返回-1</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">    String s2 = &quot;helloxawllxhxawllxh&quot;;</span><br><span class="line"> </span><br><span class="line">    int index3 = s2.lastIndexOf(&#x27;xawl&#x27;);</span><br><span class="line">    System.out.println(index3);//12</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>字符串的截取</strong></li>
</ul>
<ol>
<li>截取后面的字符串内容</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">    String str = &quot;adsasdasdasdasd&quot;;</span><br><span class="line">    String ret = str.substring(4);// 保留第4个</span><br><span class="line">    System.out.println(ret);//sdasdasdasd</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>截取指定部分</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">    String str = &quot;adsasdasdasdasd&quot;;</span><br><span class="line">    String ret = str.substring(4,7);//截取[4,7)里面的字符</span><br><span class="line">    System.out.println(ret);//sda</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>字符串的替换</strong></li>
</ul>
<ol>
<li>使用replace或者replaceAll</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">str1</span> <span class="operator">=</span> <span class="string">&quot;xawlxawlxawlxawl&quot;</span>;</span><br><span class="line">    <span class="type">String</span> <span class="variable">ret</span> <span class="operator">=</span> str1.replace(<span class="string">&quot;xa&quot;</span>,<span class="string">&quot;B&quot;</span>);</span><br><span class="line">    <span class="type">String</span> <span class="variable">ret1</span> <span class="operator">=</span> str1.replaceAll(<span class="string">&quot;xa&quot;</span>,<span class="string">&quot;B&quot;</span>);</span><br><span class="line">    System.out.println(ret);<span class="comment">//BwlBwlBwlBwl</span></span><br><span class="line">    System.out.println(ret1);<span class="comment">//BwlBwlBwlBwl</span></span><br><span class="line">    System.out.println(str1);<span class="comment">//xawlxawlxawlxawl</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>字符串的拆分</strong></li>
</ul>
<p>​		使用split方法</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">    String str1 = &quot;Hello this is xawl rjgc professional&quot;;</span><br><span class="line">    String[] ret = str1.split(&quot; &quot;);      //以空格为分隔符，拆分整个字符串为多个字符串</span><br><span class="line">    for (String s : ret) &#123;</span><br><span class="line">        System.out.println(s);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">/******************************************************/</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">    String str1 = &quot;Hello this is xawl rjgc professional&quot;;</span><br><span class="line">    String[] ret = str1.split(&quot; &quot;,3);    //以空格为分隔符，拆分3个字符串</span><br><span class="line">    for (String s : ret) &#123;</span><br><span class="line">        System.out.println(s);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>注意</strong> 特殊字符(| + * . ,)作为分割符可能无法正确切分, 需要加上转义.</p>
<ul>
<li><p><strong>字符串的转化</strong></p>
<pre><code>  1. 将别的数据类型转为字符串**valueOf( elementType i)**
</code></pre>
</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">    String str = String.valueOf(1234);</span><br><span class="line">    String str1 = String.valueOf(12.34);</span><br><span class="line">    System.out.println(str);</span><br><span class="line">    System.out.println(str1);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>小写字母转大写字母或者相反 <strong>toUpperCase()</strong>&amp;<strong>toLowerCase()</strong></li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public static void main(String[] args) &#123;</span><br><span class="line"> </span><br><span class="line">    String str3 = &quot;abcdef阿凡达&quot;;</span><br><span class="line">    String ret = str3.toUpperCase();</span><br><span class="line">    System.out.println(ret);//ABCDEF阿凡达</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="2-数组"><a href="#2-数组" class="headerlink" title="2. 数组"></a>2. 数组</h3><ul>
<li><p>初始化</p>
<p>  int [] a;&#x2F;&#x2F;创建一个数组引用<br>  a&#x3D;new int[4];<br>  int [] b&#x3D;{1,2,3,4};</p>
</li>
<li><p>数组的接口</p>
</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//数组的长度</span><br><span class="line">int Alength=a.length;</span><br></pre></td></tr></table></figure>

<ul>
<li>Arrays数组工具类</li>
</ul>
<ol>
<li>&#x2F;&#x2F;转化为String</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//转化为String</span><br><span class="line">String str=Arrays.tString(array);</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ol start="2">
<li>数组拷贝和扩容</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">int[] tmp = Arrays.copyOf(array,2*array.length);</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>Arrays.binarySearch</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//查找成功的话会返回数据的位置</span><br><span class="line">int index = Arrays.binarySearch(arr, 55);</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ol start="4">
<li>Arrays.equals（比较两个数组是否相等）</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Arrays.equals(int[] a, int [] b);</span><br><span class="line">//当且仅当a.b非空，长度相同，元素相同时返回true</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ol start="5">
<li>Arrays.fill(填充；一般用于初始化)</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Arrays.fill(array,val);</span><br></pre></td></tr></table></figure>

<ol start="6">
<li>Arrays.sort(arr)</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Arrays.sort(arr);//默认升序</span><br></pre></td></tr></table></figure>



<h3 id="3-数据类型转换"><a href="#3-数据类型转换" class="headerlink" title="3.数据类型转换"></a>3.数据类型转换</h3><ul>
<li>数据类型的大小关系</li>
</ul>
<p>​																<strong>byte&lt;short&lt;char&lt;int&lt;long&lt;float&lt;double</strong></p>
<ul>
<li><p>强制数据类型的转换，一般来说，大的数据类型不能赋给小的数据类型。因而会有强制数据类型转换</p>
<p><strong>强制数据类型转换可能会导致数据的丢失</strong></p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> num_1=<span class="number">20</span>;</span><br><span class="line"><span class="type">byte</span> num_2=(<span class="type">byte</span>) a;</span><br><span class="line"><span class="type">int</span> num_3=<span class="number">300</span>;</span><br><span class="line"><span class="type">byte</span> num_4=(<span class="type">byte</span>)num_3;<span class="comment">//数据丢失 num_4值为44</span></span><br></pre></td></tr></table></figure>

<h3 id="4-Java-中super的用法"><a href="#4-Java-中super的用法" class="headerlink" title="4. Java 中super的用法"></a>4. Java 中super的用法</h3><p>​	<strong>当子类的构造方法内第一行没有出现“super()”时，系统会默认给它加上无参数的”super()”方法</strong>。</p>
<p>注意：</p>
<ol>
<li>当子类构造方法的第一行执行super()无参数方法，那么父类中一定要有无参数构造方法。</li>
<li>在一个类中写了有参数的构造方法时，无参数构造方法就会不存在，需要自己补上无参数的构造方法。</li>
</ol>
<ul>
<li>super使用案例</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">father</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> age;</span><br><span class="line">  <span class="keyword">public</span> <span class="title function_">father</span><span class="params">()</span>&#123;&#125;</span><br><span class="line">      <span class="keyword">public</span> <span class="title function_">father</span><span class="params">(<span class="type">int</span> a)</span>&#123;<span class="built_in">this</span>.age=age;&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">son</span> <span class="keyword">extends</span> <span class="title class_">father</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">son</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="built_in">super</span>(<span class="number">5</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="4">
<li><h3 id="Java-中-final-的用法"><a href="#Java-中-final-的用法" class="headerlink" title="Java 中   final  的用法"></a>Java 中   final  的用法</h3></li>
</ol>
<ul>
<li><p>解释：<strong>Java中，final 表示最终，也可以称为完结器，表示对象是最终形态的，不可改变的意思。</strong></p>
</li>
<li><p>使用时的注意事项</p>
</li>
</ul>
<blockquote>
<p>1）final 修饰变量，表示变量的值不可改变，此时该变量可被称为常量。</p>
<p>2）final 修饰方法，表示方法不能被子类重写；</p>
<blockquote>
<p>重写：子类中如果创建了一个与父类中相同名称、相同返回值类型、相同参数列表的方法，只是方法体中的实现不同，以实现不同于父类的功能，这种方式被称为方法重写，又称为方法覆盖。</p>
</blockquote>
<p>3）final 用在类的前面表示该类不能有子类，即该类不可以被继承。</p>
</blockquote>
<ul>
<li>使用</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//修饰变量</span></span><br><span class="line"><span class="comment">//final 变量经常和 static 关键字一起使用，作为常量</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">NAME</span> <span class="operator">=</span> <span class="string">&quot;regen&quot;</span>;</span><br><span class="line">NAME = <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;regen&quot;</span>); <span class="comment">//invalid compilation error</span></span><br><span class="line"><span class="comment">//修饰方法</span></span><br><span class="line"><span class="comment">//被修饰的方法禁止被重写</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">User</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> String <span class="title function_">getName</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;user：&quot;</span>张三<span class="string">&quot;;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">class Reader extends User&#123;</span></span><br><span class="line"><span class="string">    @Override</span></span><br><span class="line"><span class="string">    public final String getName()&#123;</span></span><br><span class="line"><span class="string">        return &quot;</span>李四<span class="string">&quot;; //compilation error: overridden method is final</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">//final修饰类</span></span><br><span class="line"><span class="string">//例如 java 中的String类</span></span><br><span class="line"><span class="string">//表示该类 具有完整的功能，不能被继承</span></span><br><span class="line"><span class="string">public final class String</span></span><br><span class="line"><span class="string">    implements java.io.Serializable, Comparable&lt;String&gt;, CharSequence &#123;</span></span><br><span class="line"><span class="string">    /** The value is used for character storage. */</span></span><br><span class="line"><span class="string">    private final char value[];</span></span><br><span class="line"><span class="string"> </span></span><br><span class="line"><span class="string">    ...</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>优点</li>
</ul>
<ol>
<li><p>final 关键字，提高了性能，JVM 和 Java 应用都会缓存 final 变量。</p>
</li>
<li><p>final 变量，可以安全的在多线程环境下进行共享，而不需要额外的同步开销。</p>
</li>
</ol>
<h2 id="Java面向对象"><a href="#Java面向对象" class="headerlink" title="Java面向对象"></a>Java面向对象</h2><blockquote>
<p>java bean</p>
<blockquote>
<ul>
<li>提供一个默认的无参构造函数。</li>
<li>需要被序列化并且实现了 Serializable 接口。</li>
<li>可能有一系列可读写属性，并且一般是 private 的。</li>
<li>可能有一系列的 getter 或 setter 方法。</li>
</ul>
</blockquote>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//example</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">People</span> &#123;</span><br><span class="line">    privete String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String newName)</span> &#123;</span><br><span class="line">        name = newName;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(<span class="type">int</span> neweAge)</span> &#123;</span><br><span class="line">        age = newAge;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>






<h3 id="1-JVM内存结构"><a href="#1-JVM内存结构" class="headerlink" title="1.JVM内存结构"></a>1.JVM内存结构</h3><pre><code>        * 对象的存储结构
                对象应该看作一个地址
                对象名指向堆中的首地址（swap 案例）
        基本数据类型比较的是数值，而引用数据类型比较的是内存地址
</code></pre>
<ul>
<li><strong>JVM运行时的数据区</strong></li>
</ul>
<p>​											<strong>堆、栈、方法区、程序计数器</strong></p>
<p><img src="/images/jvmRunZone.png" alt="jvmRunZone"></p>
<ul>
<li><strong>程序计数器</strong></li>
</ul>
<blockquote>
<p><strong>程序技计数器一个线程独享的数据区域，也就是说，每个线程之间的数据相互不干扰，是一个线程内存空间。</strong></p>
</blockquote>
<blockquote>
<p><strong>可以当成字节码的行号指示器</strong></p>
</blockquote>
<ul>
<li><strong>栈</strong></li>
</ul>
<p>​		JVM的栈包括<strong>Java虚拟机栈</strong>和本地方法栈</p>
<ol>
<li>Java虚拟机栈：执行Java方法服务。</li>
<li>本地方法栈： 执行JVM使用到的Native方法服务。</li>
</ol>
<blockquote>
<p>natine 方法是什么？</p>
<p>JDK 中有很多方法是使用 Native 修饰的。Native 方法不是以 Java 语言实现的，而是以本地语言实现的（比如 C 或 C++）</p>
</blockquote>
<ul>
<li><strong>JVM虚拟机栈</strong></li>
</ul>
<ol>
<li>栈是线程私有的，每个线程拥有独立的栈空间</li>
<li>栈的元素为栈帧</li>
</ol>
<ul>
<li><strong>Java堆</strong></li>
</ul>
<p>​			特点：</p>
<pre><code>                1. 是Java虚拟机管理内存中的最大一块区域。
                1. 被所有线程共享。
                1. 用来存放用 new 创建过的对象
</code></pre>
<p>​			堆内存的分类</p>
<p><img src="/images/javaHeap.png" alt="java heap"></p>
<ul>
<li><strong>方法区</strong></li>
</ul>
<p>​			特点：</p>
<ol>
<li>被所有线程共享</li>
<li>存储已被虚拟机加载的类信息、常量、静态变量、即时编译器编译后的代码。</li>
<li>包含了常量池</li>
</ol>
<blockquote>
<p>常量池：</p>
<ol>
<li>常量池避免了频繁的创建和销毁对象而影响系统性能，其实现了对象的共享。</li>
</ol>
</blockquote>
<h3 id="2-包"><a href="#2-包" class="headerlink" title="2. 包"></a>2. 包</h3><h4 id="1-命名规则"><a href="#1-命名规则" class="headerlink" title="1.命名规则"></a>1.命名规则</h4><ul>
<li>统一使用小写</li>
<li>单数形式</li>
<li>使用  <strong>.</strong> 分隔开</li>
<li>一般是网站的反写形式</li>
</ul>
<h4 id="包的权限"><a href="#包的权限" class="headerlink" title="包的权限"></a>包的权限</h4><pre><code>        * public 共有
        * protected 
</code></pre>
<h3 id="3-多态"><a href="#3-多态" class="headerlink" title="3. 多态"></a>3. 多态</h3><h4 id="1-多态的转型"><a href="#1-多态的转型" class="headerlink" title="1.多态的转型"></a>1.多态的转型</h4><ul>
<li>向上转型</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">父类类型 引用名 = new 子类类型();</span><br><span class="line">//右侧创建一个子类对象，把它当作父类看待使用</span><br></pre></td></tr></table></figure>

<ul>
<li>向下转型</li>
</ul>
<ol>
<li><strong>只能强制转换父类的引用，不能强制转换父类的对象</strong></li>
<li><strong>要求父类的引用必须指向的是当前目标类型的对象</strong></li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">子类类型 引用名 = (子类类型) 父类引用;</span><br><span class="line">//用强制类型转换的格式，将父类引用类型转为子类引用类型</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>转型异常</strong></li>
</ul>
<p>​				可以利用操作符<strong>instanceof</strong>判断是否类型一致或为子类型（返回boolean类型）</p>
<h4 id="2-动态绑定"><a href="#2-动态绑定" class="headerlink" title="2. 动态绑定"></a>2. 动态绑定</h4><ul>
<li>​		当调用<strong>对象方法</strong>的时候，该方法会和该对象的<strong>运行类型</strong>绑定</li>
<li>​        当调用<strong>对象属性</strong>时，<strong>没有动态绑定</strong>机制，即哪里声明，哪里使用。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> dynamic_;</span><br><span class="line"></span><br><span class="line"><span class="comment">//演示动态绑定</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DynamicBinding</span> &#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">Person</span> <span class="variable">p1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>();  </span><br><span class="line"></span><br><span class="line">    p1.mission();</span><br><span class="line">        <span class="comment">//结果 : 学生要好好学习！</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//父类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">mission</span><span class="params">()</span> &#123;	</span><br><span class="line">    System.out.println(<span class="string">&quot;人要好好活着！&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//子类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span> <span class="keyword">extends</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">mission</span><span class="params">()</span> &#123;	</span><br><span class="line">    System.out.println(<span class="string">&quot;学生要好好学习！&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="3-多态参数"><a href="#3-多态参数" class="headerlink" title="3. 多态参数"></a>3. 多态参数</h4><p><strong>多态参数</strong>：方法定义的<strong>形参类型</strong>为<strong>父类</strong>类型，<strong>实参类型</strong>允许为<strong>子类</strong>类型。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> polyparameter;</span><br><span class="line"></span><br><span class="line"><span class="comment">//演示多态参数</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PolyParameter</span> &#123; </span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">Student</span> <span class="variable">s1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;小蓝同学&quot;</span>);</span><br><span class="line">    <span class="type">Teacher</span> <span class="variable">t1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Teacher</span>(<span class="string">&quot;小绿老师&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//需先 new 一个当前类的实例化，才能调用 test 方法</span></span><br><span class="line">    <span class="type">PolyParameter</span> <span class="variable">polyParameter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PolyParameter</span>();</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//实参是子类</span></span><br><span class="line">    polyParameter.test(s1);<span class="comment">//输出 s1.study()</span></span><br><span class="line">        polyParameter.test(t1);  <span class="comment">//输出 t1.teach()</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//定义方法test，形参为 Person 类型(形参是父类)</span></span><br><span class="line">  <span class="comment">//功能：调用学生的study或教师的teach方法</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">(Person p)</span> &#123;				<span class="comment">// 参数为父类</span></span><br><span class="line">        <span class="keyword">if</span> (p <span class="keyword">instanceof</span> Student)&#123;</span><br><span class="line">            ((Student) p).study();   <span class="comment">//向下转型</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (p <span class="keyword">instanceof</span> Teacher)&#123;</span><br><span class="line">            ((Teacher) p).teach();  <span class="comment">//向下转型</span></span><br><span class="line">        &#125;  </span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">//父类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">  <span class="keyword">private</span> String name;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">//有参构造</span></span><br><span class="line">  <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">(String name)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.name = name;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// getter 和 setter</span></span><br><span class="line">  <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> name;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.name = name;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//子类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span> <span class="keyword">extends</span> <span class="title class_">Person</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="title function_">Student</span><span class="params">(String name)</span> &#123;</span><br><span class="line">    <span class="built_in">super</span>(name);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// study() 方法</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">study</span><span class="params">()</span> &#123;	</span><br><span class="line">    System.out.println(<span class="built_in">super</span>.getName() + <span class="string">&quot;\t&quot;</span> + <span class="string">&quot;正在好好学习&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Teacher</span> <span class="keyword">extends</span> <span class="title class_">Person</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="title function_">Teacher</span><span class="params">(String name)</span> &#123;</span><br><span class="line">    <span class="built_in">super</span>(name);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// teach() 方法</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">teach</span><span class="params">()</span> &#123;	</span><br><span class="line">    System.out.println(<span class="built_in">super</span>.getName() + <span class="string">&quot;\t&quot;</span> + <span class="string">&quot;正在好好教书&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h3 id=""><a href="#" class="headerlink" title=""></a></h3><h2 id="Java集成体系框架"><a href="#Java集成体系框架" class="headerlink" title="Java集成体系框架"></a>Java集成体系框架</h2><h3 id="整体框架："><a href="#整体框架：" class="headerlink" title="整体框架："></a>整体框架：</h3><p><img src="/images/JavaIntegrationFrame.png"></p>
<p>​			Java集合类主要由两个根接口Collection和Map派生出来。</p>
<h3 id="1-Collection"><a href="#1-Collection" class="headerlink" title="1. Collection"></a>1. Collection</h3><p><img src="/images/JavaIntegrationFrameCollection.png"></p>
<ul>
<li><strong>ArrayLIst</strong></li>
</ul>
<p>​		1.增删查改</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ArrayList&lt;Object&gt; arrl =new ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">//增</span><br><span class="line">arr1.add( E e );</span><br><span class="line">//删</span><br><span class="line">remove(Object o) //从该集合中删除指定元素的单个实例</span><br><span class="line">clear()     //从此集合中删除所有元素</span><br><span class="line">//查</span><br><span class="line">arr1.getI(int index);    //获取第 i 个数，从零开始</span><br><span class="line">//改</span><br><span class="line">set(int index, E element)  //用指定的元素替换此列表中指定位置的元素。</span><br></pre></td></tr></table></figure>

<pre><code>    2. 迭代器
</code></pre>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">arr1.iterator()     //返回一个集合的迭代器</span><br><span class="line">arr1.toArray()      //转数组</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>常见方法</li>
</ol>
<h3 id="2-Map"><a href="#2-Map" class="headerlink" title="2. Map"></a>2. Map</h3><p><img src="/images/JavaIntegrationFrameMap.png"></p>
<h2 id="抽象类和接口"><a href="#抽象类和接口" class="headerlink" title="抽象类和接口"></a>抽象类和接口</h2><h3 id="抽象类-abstract-class"><a href="#抽象类-abstract-class" class="headerlink" title="抽象类(abstract class )"></a>抽象类(abstract class )</h3><h3 id="接口。"><a href="#接口。" class="headerlink" title="接口。"></a>接口。</h3><pre><code>        Java不允许多重继承，但是接口可以实现多重继承，即一个类可以实现多个接口。
</code></pre>
<h2 id="JDBC"><a href="#JDBC" class="headerlink" title="JDBC"></a>JDBC</h2><ul>
<li>定义：JDBC（Java DataBase Connectivity：java数据库连接）是一种用于执行SQL语句的Java API，可以为多种关系型数据库提供统一访问，它是由一组用Java语言编写的类和接口组成的。</li>
</ul>
<h3 id="简单使用过程"><a href="#简单使用过程" class="headerlink" title="简单使用过程"></a>简单使用过程</h3><ol>
<li>导入jar包</li>
</ol>
<p>​		<strong>注意：使用与MySQL版本适配的jar包，使用与操作系统一致的jar包</strong></p>
<p>案例程序（链接云数据库）：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.DriverManager;</span><br><span class="line"><span class="keyword">import</span> java.sql.ResultSet;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"><span class="keyword">import</span> java.sql.Statement;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">main</span> &#123;<span class="comment">//按照自己class名设置</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// MySQL 8.0 以上版本 - JDBC 驱动名及数据库 URL</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">JDBC_DRIVER</span> <span class="operator">=</span> <span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">DB_URL</span> <span class="operator">=</span> <span class="string">&quot;jdbc:mysql://142.171.33.151:3306/mydata&quot;</span>;<span class="comment">//注意格式</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 数据库的用户名与密码，需要根据自己的设置</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">USER</span> <span class="operator">=</span> <span class="string">&quot;root&quot;</span>;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">PASS</span> <span class="operator">=</span> <span class="string">&quot;123456&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Connection</span> <span class="variable">conn</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">Statement</span> <span class="variable">stmt</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="comment">// 注册 JDBC 驱动</span></span><br><span class="line">            Class.forName(JDBC_DRIVER);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 打开链接</span></span><br><span class="line">            System.out.println(<span class="string">&quot;connecting&quot;</span>);</span><br><span class="line">            conn = DriverManager.getConnection(DB_URL,USER,PASS);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 执行查询</span></span><br><span class="line">            stmt = conn.createStatement();</span><br><span class="line">            String sql;</span><br><span class="line">            sql = <span class="string">&quot;SELECT * FROM emp&quot;</span>;</span><br><span class="line">            <span class="type">ResultSet</span> <span class="variable">rs</span> <span class="operator">=</span> stmt.executeQuery(sql);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 循环输出每一条数据</span></span><br><span class="line">            <span class="keyword">while</span>(rs.next())&#123;<span class="comment">//按照自己录入数据输出</span></span><br><span class="line">                System.out.println(</span><br><span class="line">                        rs.getInt(<span class="string">&quot;id&quot;</span>) +<span class="string">&quot;\t&quot;</span>+</span><br><span class="line">                                rs.getString(<span class="string">&quot;name&quot;</span>)+<span class="string">&quot;\t&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 完成后关闭</span></span><br><span class="line">            rs.close();</span><br><span class="line">            stmt.close();</span><br><span class="line">            conn.close();</span><br><span class="line">        &#125;<span class="keyword">catch</span>(SQLException se)&#123;</span><br><span class="line">            <span class="comment">// 处理 JDBC 错误</span></span><br><span class="line">            se.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">            <span class="comment">// 处理 Class.forName 错误</span></span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">            <span class="comment">// 关闭资源</span></span><br><span class="line">            <span class="keyword">try</span>&#123;</span><br><span class="line">                <span class="keyword">if</span>(stmt!=<span class="literal">null</span>) stmt.close();</span><br><span class="line">            &#125;<span class="keyword">catch</span>(SQLException se2)&#123;</span><br><span class="line">            &#125;<span class="comment">// 什么都不做</span></span><br><span class="line">            <span class="keyword">try</span>&#123;</span><br><span class="line">                <span class="keyword">if</span>(conn!=<span class="literal">null</span>) conn.close();</span><br><span class="line">            &#125;<span class="keyword">catch</span>(SQLException se)&#123;</span><br><span class="line">                se.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;Goodbye!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>软件技术</category>
      </categories>
      <tags>
        <tag>笔记</tag>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>jira、confluence、bitbucket、crowd数据迁移</title>
    <url>/2025/07/18/jira%E3%80%81confluence%E3%80%81bitbucket%E3%80%81crowd%E6%95%B0%E6%8D%AE%E8%BF%81%E7%A7%BB/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>软件技术</category>
      </categories>
      <tags>
        <tag>笔记</tag>
        <tag>运维</tag>
        <tag>部署</tag>
        <tag>数据迁移</tag>
        <tag>jira</tag>
        <tag>confluence</tag>
        <tag>bitbucket</tag>
        <tag>crowd</tag>
        <tag>sso</tag>
      </tags>
  </entry>
  <entry>
    <title>jira、confluence、bitbucket、crowd部署</title>
    <url>/2025/07/18/jira%E3%80%81confluence%E3%80%81bitbucket%E3%80%81crowd%E9%83%A8%E7%BD%B2/</url>
    <content><![CDATA[<h1 id="jira、confluence、bitbucket、crowd部署"><a href="#jira、confluence、bitbucket、crowd部署" class="headerlink" title="jira、confluence、bitbucket、crowd部署"></a>jira、confluence、bitbucket、crowd部署</h1><blockquote>
<p><strong>版本信息</strong></p>
<ul>
<li>jira:7.13</li>
<li>confluence:6.10.0</li>
<li>bitbucket:7.0.0</li>
<li>crowd:3.4.4</li>
<li>mysql:5.7</li>
</ul>
</blockquote>
<h2 id="1-准备工作"><a href="#1-准备工作" class="headerlink" title="1. 准备工作"></a>1. 准备工作</h2><ul>
<li>准备安装包<ul>
<li><code>atlassian-jira-software-7.13.0-x64.bin</code></li>
<li><code>atlassian-confluence-6.10.0-x64.bin</code></li>
<li><code>atlassian-bitbucket-7.0.0-x64.bin</code></li>
<li><code>atlassian-crowd-3.4.4.tar.gz</code></li>
</ul>
</li>
<li>准备agent<ul>
<li><code>atlassian-agent-v1.2.3.tar.gz</code></li>
</ul>
</li>
<li>准备mysql Jar包<ul>
<li><code>mysql-connector-java-5.1.49.tar.gz</code></li>
</ul>
</li>
</ul>
<h2 id="2-起数据库"><a href="#2-起数据库" class="headerlink" title="2. 起数据库"></a>2. 起数据库</h2><h3 id="docker起数据库"><a href="#docker起数据库" class="headerlink" title="docker起数据库"></a>docker起数据库</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run -d \</span><br><span class="line">  --name mysql57 \</span><br><span class="line">  --restart unless-stopped \</span><br><span class="line">  -e MYSQL_ROOT_PASSWORD=regen \</span><br><span class="line">  -e TZ=Asia/Shanghai \</span><br><span class="line">  -v /data/soft/mysql57/mysql-data:/var/lib/mysql \</span><br><span class="line">  -v /data/soft/mysql57/mysql-conf:/etc/mysql/conf.d \</span><br><span class="line">  -v /data/soft/mysql57/log/mysql-logs:/var/log/mysql \</span><br><span class="line">  -p 3306:3306 \</span><br><span class="line">  mysql:5.7</span><br></pre></td></tr></table></figure>

<p><img src="/../images/Linux/sso/image-20250718093831149.png" alt="image-20250718093831149"></p>
<h3 id="建库"><a href="#建库" class="headerlink" title="建库"></a>建库</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">-- 创建jira库</span><br><span class="line">CREATE DATABASE jira CHARACTER SET utf8 COLLATE utf8_bin;</span><br><span class="line">-- 创建confluence库</span><br><span class="line">CREATE DATABASE confluence CHARACTER SET utf8 COLLATE utf8_bin;</span><br><span class="line">-- 创建bitbucket库</span><br><span class="line">CREATE DATABASE bitbucket CHARACTER SET utf8 COLLATE utf8_bin;</span><br><span class="line">-- 创建crowd库</span><br><span class="line">CREATE DATABASE crowd CHARACTER SET utf8 COLLATE utf8_bin;</span><br><span class="line"></span><br><span class="line">-- 这里mysql和jira是在同一个服务器，所以使用了localhost，如果不在同一个服务器，可以使用 % 来代替localhost</span><br><span class="line"></span><br><span class="line">CREATE USER <span class="string">&#x27;jira&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span> IDENTIFIED BY <span class="string">&#x27;Regen123&#x27;</span>;</span><br><span class="line">CREATE USER <span class="string">&#x27;confluence&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span> IDENTIFIED BY <span class="string">&#x27;Regen123&#x27;</span>;</span><br><span class="line">CREATE USER <span class="string">&#x27;bitbucket&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span> IDENTIFIED BY <span class="string">&#x27;Regen123&#x27;</span>;</span><br><span class="line">CREATE USER <span class="string">&#x27;crowd&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span> IDENTIFIED BY <span class="string">&#x27;Regen123&#x27;</span>;</span><br><span class="line"></span><br><span class="line">-- 给权限</span><br><span class="line">GRANT ALL PRIVILEGES ON jira.* TO <span class="string">&#x27;jira&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span>;</span><br><span class="line"></span><br><span class="line">GRANT  ALL PRIVILEGES ON confluence.* TO <span class="string">&#x27;confluence&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span>;</span><br><span class="line"></span><br><span class="line">GRANT ALL PRIVILEGES ON bitbucket.* TO <span class="string">&#x27;bitbucket&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span>;</span><br><span class="line"></span><br><span class="line">GRANT ALL PRIVILEGES ON crowd.* TO <span class="string">&#x27;crowd&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span>;</span><br><span class="line"></span><br><span class="line">-- 刷新</span><br><span class="line">FLUSH PRIVILEGES;</span><br></pre></td></tr></table></figure>



<h2 id="3-安装jira-7-13"><a href="#3-安装jira-7-13" class="headerlink" title="3. 安装jira 7.13"></a>3. 安装jira 7.13</h2><ul>
<li>到<code>.bin</code>文件目录下</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">chmod</span> +x atlassian-jira-software-7.13.0-x64.bin <span class="comment"># 赋予执行权限</span></span><br><span class="line">./atlassian-jira-software-7.13.0-x64.bin        <span class="comment"># 执行安装脚本</span></span><br></pre></td></tr></table></figure>

<ul>
<li>默认安装之后</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">service jira stop</span><br></pre></td></tr></table></figure>

<ul>
<li>添加 mysql-connector Jar包</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">tar -xvxf mysql-connector-java-5.1.49.tar.gz</span><br><span class="line"><span class="built_in">cd</span> mysql-connector-java-5.1.49</span><br><span class="line"><span class="built_in">cp</span> mysql-connector-java-5.1.49.jar  /opt/atlassian/jira/atlassian-jira/WEB-INF/lib</span><br></pre></td></tr></table></figure>



<ul>
<li>进行pojie</li>
</ul>
<blockquote>
<p><a href="https://github.com/qinyuxin99/atlassian-agent">qinyuxin99&#x2F;atlassian-agent: jiraPJ工具</a></p>
</blockquote>
<ol>
<li>解压agent工具</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">tar xzvf atlassian-agent-v1.2.3.tar.gz</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>找到atlassian-agent.jar的路径<code>/data/regen/jira/atlassian-agent-v1.2.3/atlassian-agent.jar</code></li>
<li>增加java启动项</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim /opt/atlassian/jira/bin/setenv.sh </span><br><span class="line"><span class="comment"># 增加以下行</span></span><br><span class="line"><span class="built_in">export</span> JAVA_OPTS=<span class="string">&quot;-javaagent:/data/regen/jira/atlassian-agent-v1.2.3/atlassian-agent.jar <span class="variable">$&#123;JAVA_OPTS&#125;</span>&quot;</span></span><br></pre></td></tr></table></figure>

<ol start="4">
<li>启动jira以后生成license</li>
</ol>
<p>复制web平台（<code>IP:8080</code>）的序列号</p>
<p>在atlassian-agent.jar文件所在目录下执行：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">java -jar atlassian-agent.jar -p jira -m aaa@bbb.com -n my_name -o https://zhile.io -s ABCD-1234-EFGH-5678</span><br></pre></td></tr></table></figure>

<p>即可生成license，填入即可正常使用。</p>
<h2 id="4-安装confluence-6-10-0"><a href="#4-安装confluence-6-10-0" class="headerlink" title="4.安装confluence 6.10.0"></a>4.安装confluence 6.10.0</h2><ul>
<li>到<code>.bin</code>文件目录下</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">chmod</span> +x atlassian-confluence-6.10.0-x64.bin <span class="comment"># 赋予执行权限</span></span><br><span class="line">./atlassian-confluence-6.10.0-x64.bin        <span class="comment"># 执行安装脚本</span></span><br></pre></td></tr></table></figure>

<ul>
<li>默认安装之后</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">service confluence stop</span><br></pre></td></tr></table></figure>

<ul>
<li>添加 mysql-connector Jar包</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 到mysql-connector Jar包下</span></span><br><span class="line"><span class="built_in">cp</span> mysql-connector-java-5.1.49.jar /opt/atlassian/confluence/confluence/WEB-INF/lib</span><br></pre></td></tr></table></figure>

<ul>
<li>进行pojie</li>
</ul>
<p>这里使用之前相同的agent jar包以及路径即可</p>
<ol start="2">
<li>增加java启动项</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim /opt/atlassian/confluence/bin/setenv.sh </span><br><span class="line"><span class="comment"># 增加以下行</span></span><br><span class="line"><span class="built_in">export</span> JAVA_OPTS=<span class="string">&quot;-javaagent:/data/regen/jira/atlassian-agent-v1.2.3/atlassian-agent.jar <span class="variable">$&#123;JAVA_OPTS&#125;</span>&quot;</span></span><br></pre></td></tr></table></figure>

<ol start="4">
<li>启动confluence以后生成license</li>
</ol>
<p>复制web平台（<code>IP:8090</code>）的序列号</p>
<p>在atlassian-agent.jar文件所在目录下执行：</p>
<p>需要更换-p参数为conf</p>
<blockquote>
<p> -p,–product <arg>        License product, support:<br>                           [crowd: Crowd]<br>                           [questions: Questions plugin for Confluence]<br>                           [crucible: Crucible]<br>                           [capture: Capture plugin for JIRA]<br>                           [conf: Confluence]<br>                           [training: Training plugin for JIRA]<br>                           [*: Third party plugin key, looks like:<br>                           com.foo.bar]<br>                           [bitbucket: Bitbucket]<br>                           [tc: Team Calendars plugin for Confluence]<br>                           [bamboo: Bamboo]<br>                           [fisheye: FishEye]<br>                           [portfolio: Portfolio plugin for JIRA]<br>                           [jc: JIRA Core]<br>                           [jsd: JIRA Service Desk]<br>                           [jira: JIRA Software(common jira)]</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">java -jar atlassian-agent.jar -p conf -m aaa@bbb.com -n my_name -o https://zhile.io -s ABCD-1234-EFGH-5678</span><br></pre></td></tr></table></figure>

<p>即可生成license，填入即可正常使用。</p>
<h2 id="5-安装bitbucket-7-0-0"><a href="#5-安装bitbucket-7-0-0" class="headerlink" title="5.安装bitbucket 7.0.0"></a>5.安装bitbucket 7.0.0</h2><ul>
<li>到<code>.bin</code>文件目录下</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">chmod</span> +x atlassian-bitbucket-7.0.0-x64.bin <span class="comment"># 赋予执行权限</span></span><br><span class="line">./atlassian-bitbucket-7.0.0-x64.bin        <span class="comment"># 执行安装脚本</span></span><br></pre></td></tr></table></figure>

<ul>
<li>默认安装之后</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">service bitbucket stop</span><br></pre></td></tr></table></figure>

<ul>
<li>添加 mysql-connector Jar包</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 到mysql-c下onnector Jar包下</span></span><br><span class="line"><span class="built_in">cp</span> mysql-connector-java-5.1.49.jar /opt/atlassian/bitbucket/7.0.0/app/WEB-INF/lib/</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<ul>
<li>进行pojie</li>
</ul>
<p>这里使用之前相同的agent jar包以及路径即可</p>
<ol start="2">
<li>增加java启动项</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim /opt/atlassian/bitbucket/7.0.0/bin/_start-webapp.sh</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 找到JAVA_OPTS，在其下面添加一行</span></span><br><span class="line"><span class="built_in">export</span> JAVA_OPTS=<span class="string">&quot;-javaagent:/data/regen/jira/atlassian-agent-v1.2.3/atlassian-agent.jar <span class="variable">$&#123;JAVA_OPTS&#125;</span>&quot;</span></span><br></pre></td></tr></table></figure>

<ol start="4">
<li>启动bitbucket以后生成license</li>
</ol>
<p>复制web平台（<code>IP:7990</code>）的序列号</p>
<p>在atlassian-agent.jar文件所在目录下执行：</p>
<p>需要更换-p参数为bitbucket</p>
<blockquote>
<p> -p,–product <arg>        License product, support:<br>                           [crowd: Crowd]<br>                           [questions: Questions plugin for Confluence]<br>                           [crucible: Crucible]<br>                           [capture: Capture plugin for JIRA]<br>                           [conf: Confluence]<br>                           [training: Training plugin for JIRA]<br>                           [*: Third party plugin key, looks like:<br>                           com.foo.bar]<br>                           [bitbucket: Bitbucket]<br>                           [tc: Team Calendars plugin for Confluence]<br>                           [bamboo: Bamboo]<br>                           [fisheye: FishEye]<br>                           [portfolio: Portfolio plugin for JIRA]<br>                           [jc: JIRA Core]<br>                           [jsd: JIRA Service Desk]<br>                           [jira: JIRA Software(common jira)]</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">java -jar atlassian-agent.jar -p bitbucket -m aaa@bbb.com -n my_name -o https://zhile.io -s ABCD-1234-EFGH-5678</span><br></pre></td></tr></table></figure>

<p>即可生成license，填入即可正常使用。</p>
<h2 id="6-安装crowd-3-4-4"><a href="#6-安装crowd-3-4-4" class="headerlink" title="6.安装crowd 3.4.4"></a>6.安装crowd 3.4.4</h2><ul>
<li>解压安装包</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">tar -zxvf atlassian-crowd-3.4.4.tar.gz</span><br><span class="line"><span class="built_in">mv</span> atlassian-crowd-3.4.4.tar.gz</span><br></pre></td></tr></table></figure>

<ul>
<li>添加 mysql-connector Jar包</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 到mysql-connector Jar包下</span></span><br><span class="line"><span class="built_in">cp</span> mysql-connector-java-5.1.49.jar /opt/crowd/atlassian-crowd-3.4.4/apache-tomcat/lib</span><br></pre></td></tr></table></figure>

<ul>
<li>进行pojie</li>
</ul>
<p>这里使用之前相同的agent jar包以及路径即可</p>
<ol start="2">
<li>增加java启动项</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim /opt/crowd/atlassian-crowd-3.4.4/apache-tomcat/bin/setenv.sh </span><br><span class="line"> </span><br><span class="line"><span class="comment"># 找到CATALINA_OPTS，注释它，并在其下面添加一行</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#CATALINA_OPTS=&quot;-javaagent:/opt/crowd/atlassian-agent.jar $CATALINA_OPTS&quot;</span></span><br><span class="line"><span class="built_in">export</span> JAVA_OPTS=<span class="string">&quot;-javaagent:/data/regen/jira/atlassian-agent-v1.2.3/atlassian-agent.jar <span class="variable">$&#123;JAVA_OPTS&#125;</span>&quot;</span></span><br></pre></td></tr></table></figure>

<ol start="4">
<li>启动bitbucket以后生成license</li>
</ol>
<p>复制web平台（<code>IP:8095</code>）的序列号</p>
<p>在atlassian-agent.jar文件所在目录下执行：</p>
<p>需要更换-p参数为crowd</p>
<blockquote>
<p> -p,–product <arg>        License product, support:<br>                         [crowd: Crowd]<br>                         [questions: Questions plugin for Confluence]<br>                         [crucible: Crucible]<br>                         [capture: Capture plugin for JIRA]<br>                         [conf: Confluence]<br>                         [training: Training plugin for JIRA]<br>                         [*: Third party plugin key, looks like:<br>                         com.foo.bar]<br>                         [bitbucket: Bitbucket]<br>                         [tc: Team Calendars plugin for Confluence]<br>                         [bamboo: Bamboo]<br>                         [fisheye: FishEye]<br>                         [portfolio: Portfolio plugin for JIRA]<br>                         [jc: JIRA Core]<br>                         [jsd: JIRA Service Desk]<br>                         [jira: JIRA Software(common jira)]</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">java -jar atlassian-agent.jar -p crowd -m aaa@bbb.com -n my_name -o https://zhile.io -s ABCD-1234-EFGH-5678</span><br></pre></td></tr></table></figure>

<p>即可生成license，填入即可正常使用。</p>
]]></content>
      <categories>
        <category>软件技术</category>
      </categories>
      <tags>
        <tag>笔记</tag>
        <tag>运维</tag>
        <tag>部署</tag>
        <tag>jira</tag>
        <tag>confluence</tag>
        <tag>bitbucket</tag>
        <tag>crowd</tag>
      </tags>
  </entry>
  <entry>
    <title>jira、confluence、bitbucket、基于crowd实现sso</title>
    <url>/2025/07/18/jira%E3%80%81confluence%E3%80%81bitbucket%E3%80%81%E5%9F%BA%E4%BA%8Ecrowd%E5%AE%9E%E7%8E%B0sso/</url>
    <content><![CDATA[<h1 id="jira、confluence、bitbucket、基于crowd实现sso"><a href="#jira、confluence、bitbucket、基于crowd实现sso" class="headerlink" title="jira、confluence、bitbucket、基于crowd实现sso"></a>jira、confluence、bitbucket、基于crowd实现sso</h1><blockquote>
<p>​	单点登录英文全称Single Sign On，简称就是SSO。它的解释是：<strong>在多个应用系统中，只需要登录一次，就可以访问其他相互信任的应用系统。</strong></p>
</blockquote>
<blockquote>
<p>版本信息：</p>
<ul>
<li>jira:7.13</li>
<li>confluence:6.10.0</li>
<li>bitbucket:7.0.0</li>
<li>crowd:3.4.4</li>
<li>mysql:5.7</li>
</ul>
</blockquote>
<p>​	在我使用的版本中，jira和confluence可以实现基于IP的单点登录，但是bitbucket不行，仅支持基于二级域名的单点登录。</p>
<p>​	如果是基于IP可参考<a href="https://blog.csdn.net/weixin_38621072/article/details/117622297?fromshare=blogdetail&sharetype=blogdetail&sharerId=117622297&sharerefer=PC&sharesource=weixin_47657945&sharefrom=from_link">https://blog.csdn.net/weixin_38621072/article/details/117622297?fromshare=blogdetail&amp;sharetype=blogdetail&amp;sharerId=117622297&amp;sharerefer=PC&amp;sharesource=weixin_47657945&amp;sharefrom=from_link</a></p>
<p>​	基于域名更加规范合理，我<strong>最终也使用了域名</strong>的方式。</p>
<p>可以使用<strong>两种</strong>域名解析，</p>
<ol>
<li>如果是有自己的公有域名，则可以在对应域名服务商控制台添加解析即可，例如<ol>
<li>jira.regenglogs.fun               —&gt;192.168.99.203</li>
<li>confluence.regenglogs.fun  —&gt;192.168.99.203</li>
<li>bitbucket.regenglogs.fun     —&gt;192.168.99.203</li>
<li>crowd.regenglogs.fun          —&gt;192.168.99.203</li>
</ol>
</li>
</ol>
<blockquote>
<p>我的服务都在一台主机所以解析相同。</p>
</blockquote>
<ol start="2">
<li>如果没有域名则可以添加本地解析，客户端修改hosts文件即可<ol>
<li><p>windows客户端：</p>
<ol>
<li><p>编辑<code>C:\Windows\System32\drivers\etc\hosts</code></p>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#﻿# Added by Docker Desktop</span><br><span class="line">#172.16.30.128 host.docker.internal</span><br><span class="line">#172.16.30.128 gateway.docker.internal</span><br><span class="line"># To allow the same kube context to work on the host and the container:</span><br><span class="line">#127.0.0.1 kubernetes.docker.internal</span><br><span class="line"># End of section</span><br><span class="line">192.168.99.203 jira.regenblogs.fun</span><br><span class="line">192.168.99.114 confluence.regenblogs.fun</span><br><span class="line">192.168.99.203 bitbucket.regenblogs.fun</span><br><span class="line">192.168.99.114 crowd.regenblogs.fun</span><br><span class="line">#-------------------------------------------------------</span><br></pre></td></tr></table></figure></li>
</ol>
</li>
<li><p>Linux：</p>
<ol>
<li><p>编辑<code>/etc/hosts</code></p>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">127.0.0.1   localhost localhost.localdomain localhost4 localhost4.localdomain4</span><br><span class="line">::1         localhost localhost.localdomain localhost6 localhost6.localdomain6</span><br><span class="line"></span><br><span class="line">192.168.99.203 jira.regenblogs.fun</span><br><span class="line">192.168.99.114 confluence.regenblogs.fun</span><br><span class="line">192.168.99.203 bitbucket.regenblogs.fun</span><br><span class="line">192.168.99.114 crowd.regenblogs.fun</span><br></pre></td></tr></table></figure></li>
</ol>
</li>
</ol>
</li>
</ol>
<h2 id="1-实现crowd集成jira、confluence、bitbucket"><a href="#1-实现crowd集成jira、confluence、bitbucket" class="headerlink" title="1. 实现crowd集成jira、confluence、bitbucket"></a>1. 实现crowd集成jira、confluence、bitbucket</h2><blockquote>
<p>实现SSO的前提是三个软件都连接到了crowd。</p>
</blockquote>
<h3 id="Crowd准备操作"><a href="#Crowd准备操作" class="headerlink" title="Crowd准备操作"></a>Crowd准备操作</h3><ol>
<li><p>新建三个application分别为jira、confluence、bitbucket</p>
<p> <img src="/../images/Linux/sso/image-20250718110924948.png" alt="image-20250718110924948"></p>
</li>
<li><p>新建一个用户目录<code>user directory</code></p>
<p> <img src="/../images/Linux/sso/image-20250718110944039.png" alt="image-20250718110944039"></p>
</li>
<li><p>新建一个用户组用于测试<code>user group</code></p>
<p> <img src="/../images/Linux/sso/image-20250718111007686.png" alt="image-20250718111007686"></p>
</li>
<li><p>新建两个用户用于测试。</p>
<blockquote>
<p>一个提前作为所有平台的管理员，否则实现好了sso以后会禁用原管理员账户</p>
<p>一个作为普通用户进行测试</p>
</blockquote>
<p> <img src="/../images/Linux/sso/image-20250718111113367.png" alt="image-20250718111113367"></p>
</li>
<li><p>在各个应用内设置好允许访问的IP和域名</p>
<p> 这里只放jira的配置</p>
<p> <img src="/../images/Linux/sso/image-20250718111839304.png" alt="image-20250718111839304"></p>
</li>
</ol>
<h3 id="jira-集成crowd"><a href="#jira-集成crowd" class="headerlink" title="jira 集成crowd"></a>jira 集成crowd</h3><p>在用户管理中添加crowd</p>
<p><img src="/../images/Linux/sso/image-20250718111704738.png" alt="image-20250718111704738"></p>
<ul>
<li>测试：</li>
</ul>
<ol>
<li>测试服务器连接</li>
</ol>
<p><img src="/../images/Linux/sso/image-20250718112040564.png" alt="image-20250718112040564"></p>
<ol start="2">
<li>测试用户</li>
</ol>
<p><img src="/../images/Linux/sso/image-20250718112135649.png" alt="image-20250718112135649"></p>
<p><img src="/../images/Linux/sso/image-20250718112208967.png" alt="image-20250718112208967"></p>
<h3 id="confluence集成crowd"><a href="#confluence集成crowd" class="headerlink" title="confluence集成crowd"></a>confluence集成crowd</h3><p>​	与jira集成crowd操作基本一致</p>
<h3 id="bitbucket集成crowd"><a href="#bitbucket集成crowd" class="headerlink" title="bitbucket集成crowd"></a>bitbucket集成crowd</h3><p>​	与jira集成crowd操作基本一致</p>
<h3 id="Crowd的SSO设置"><a href="#Crowd的SSO设置" class="headerlink" title="Crowd的SSO设置"></a>Crowd的SSO设置</h3><blockquote>
<p>这一步设置了能够通过SSO登录的二级域名，子域名通过该域名来实现SSO</p>
</blockquote>
<ol>
<li>进入crowd general 设置</li>
</ol>
<p><img src="/../images/Linux/sso/image-20250721145301659.png" alt="image-20250721145301659"></p>
<ol start="2">
<li>设置子域名、cookie名字以及base url，确保都是域名而不是IP。</li>
</ol>
<p><img src="/../images/Linux/sso/image-20250721145619726.png" alt="image-20250721145619726"></p>
<h2 id="2-实现SSO"><a href="#2-实现SSO" class="headerlink" title="2. 实现SSO"></a>2. 实现SSO</h2><blockquote>
<p>在我使用的版本中，如果允许sso登录，则会停用jira、confluence、bitbucket的管理员账户，因此在实现SSO之前建议给Crowd中的某个用户增加所有的权限便于管理。否则将失去管理员账号。如果忘记添加可以看文末解决方式</p>
<p>配置方法有两种，一种是直接在各个平台为该用户增加最大权限，一种是在各个平台增加一个最大权限用户组，并将该用户添加到该组。</p>
<ul>
<li><p>第一种方式（直接在各个平台为该用户增加最大权限）实现方式：</p>
<p>  这里仅以jira为例，其余过程基本一致。</p>
</li>
</ul>
<ol>
<li>打开用户管理</li>
<li>搜索crowd用户并且添加到对应权限组</li>
</ol>
<ul>
<li>第二种方式（最大权限用户组，添加该用户）实现方式：</li>
</ul>
</blockquote>
<h3 id="jira实现SSO的配置过程"><a href="#jira实现SSO的配置过程" class="headerlink" title="jira实现SSO的配置过程"></a>jira实现SSO的配置过程</h3><h4 id="1-修改认证配置文件seraph-config-xml"><a href="#1-修改认证配置文件seraph-config-xml" class="headerlink" title="1. 修改认证配置文件seraph-config.xml"></a>1. 修改认证配置文件<code>seraph-config.xml</code></h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim /opt/atlassian/jira/atlassian-jira/WEB-INF/classes/seraph-config.xml</span><br></pre></td></tr></table></figure>

<p>找到</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- CROWD:START - If enabling Crowd SSO integration uncomment the following SSOSeraphAuthenticator and comment out the JiraSeraphAuthenticator below --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">    &lt;authenticator class=&quot;com.atlassian.jira.security.login.SSOSeraphAuthenticator&quot;/&gt;</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- CROWD:END --&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- CROWD:START - The authenticator below here will need to be commented out for Crowd SSO integration --&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">authenticator</span> <span class="attr">class</span>=<span class="string">&quot;com.atlassian.jira.security.login.JiraSeraphAuthenticator&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- CROWD:END --&gt;</span></span><br></pre></td></tr></table></figure>

<p>将以下内容取消注释</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">&lt;authenticator class=&quot;com.atlassian.jira.security.login.SSOSeraphAuthenticator&quot;/&gt;</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br></pre></td></tr></table></figure>

<p>改为</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">authenticator</span> <span class="attr">class</span>=<span class="string">&quot;com.atlassian.jira.security.login.SSOSeraphAuthenticator&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<p>并注释</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">    <span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">&lt;authenticator class=&quot;com.atlassian.jira.security.login.JiraSeraphAuthenticator&quot;/&gt;</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="2-修改或者增加crowd-properties文件"><a href="#2-修改或者增加crowd-properties文件" class="headerlink" title="2. 修改或者增加crowd.properties文件"></a>2. 修改或者增加<code>crowd.properties</code>文件</h4><p>在路径<code>/opt/atlassian/jira/atlassian-jira/WEB-INF/classes</code>下创建<code>crowd.properties</code>，写入，内容根据实际情况改写，主要是域名、IP之类的需要修改。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">application.name                        jira</span><br><span class="line">application.password                    Regen123</span><br><span class="line">application.login.url                   http://localhost:8080</span><br><span class="line"></span><br><span class="line">crowd.server.url                        http://localhost:8095/crowd/services/</span><br><span class="line">crowd.base.url                          http://localhost:8095/crowd/</span><br><span class="line"></span><br><span class="line">session.isauthenticated                 session.isauthenticated</span><br><span class="line">session.tokenkey                        session.tokenkey</span><br><span class="line">session.validationinterval              200</span><br><span class="line">session.lastvalidation                  session.lastvalidation</span><br></pre></td></tr></table></figure>

<h4 id="3-重启jira"><a href="#3-重启jira" class="headerlink" title="3. 重启jira"></a>3. 重启jira</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 使用jira安装脚本安装的</span></span><br><span class="line">service jira stop</span><br><span class="line">service jira start</span><br><span class="line"><span class="comment"># 自己解压的或者文件迁移过来的</span></span><br><span class="line"><span class="built_in">cd</span> /opt/atlassian/jira/bin</span><br><span class="line">./stop-jira.sh</span><br><span class="line">./start-jira.sh</span><br></pre></td></tr></table></figure>

<h3 id="confluence实现SSO的配置过程、与jira类似"><a href="#confluence实现SSO的配置过程、与jira类似" class="headerlink" title="confluence实现SSO的配置过程、与jira类似"></a>confluence实现SSO的配置过程、与jira类似</h3><h4 id="1-修改认证配置文件seraph-config-xml-1"><a href="#1-修改认证配置文件seraph-config-xml-1" class="headerlink" title="1. 修改认证配置文件seraph-config.xml"></a>1. 修改认证配置文件<code>seraph-config.xml</code></h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim /opt/atlassian/confluence/confluence/WEB-INF/classes/seraph-config.xml</span><br></pre></td></tr></table></figure>

<blockquote>
<p>这里已经修改好。</p>
</blockquote>
<p>找到</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Default Confluence authenticator, which uses the configured user management for authentication. --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--    </span></span><br><span class="line"><span class="comment">&lt;authenticator class=&quot;com.atlassian.confluence.user.ConfluenceAuthenticator&quot;/&gt;</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- Custom authenticators appear below. To enable one of them, comment out the default authenticator above and uncomment the one below. --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- Authenticator with support for Crowd single-sign on (SSO). --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">authenticator</span> <span class="attr">class</span>=<span class="string">&quot;com.atlassian.confluence.user.ConfluenceCrowdSSOAuthenticator&quot;</span>/&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>将以下内容取消注释</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment"> &lt;authenticator class=&quot;com.atlassian.confluence.user.ConfluenceCrowdSSOAuthenticator&quot;/&gt;</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br></pre></td></tr></table></figure>

<p>改为</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">authenticator</span> <span class="attr">class</span>=<span class="string">&quot;com.atlassian.confluence.user.ConfluenceCrowdSSOAuthenticator&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<p>并注释</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">     <span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">&lt;authenticator class=&quot;com.atlassian.confluence.user.ConfluenceAuthenticator&quot;/&gt;</span></span><br><span class="line"><span class="comment">     --&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="2-修改或者增加crowd-properties文件-1"><a href="#2-修改或者增加crowd-properties文件-1" class="headerlink" title="2. 修改或者增加crowd.properties文件"></a>2. 修改或者增加<code>crowd.properties</code>文件</h4><p>在路径<code>/opt/atlassian/confluence/atlassian-jira/WEB-INF/classes</code>下创建<code>crowd.properties</code>，写入，内容根据实际情况改写，主要是域名、IP之类的需要修改。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">application.name                        confluence</span><br><span class="line">application.password                    Regen123</span><br><span class="line">application.login.url                   http://localhost:8080</span><br><span class="line"></span><br><span class="line">crowd.server.url                        http://localhost:8095/crowd/services/</span><br><span class="line">crowd.base.url                          http://localhost:8095/crowd/</span><br><span class="line"></span><br><span class="line">session.isauthenticated                 session.isauthenticated</span><br><span class="line">session.tokenkey                        session.tokenkey</span><br><span class="line">session.validationinterval              200</span><br><span class="line">session.lastvalidation                  session.lastvalidation</span><br></pre></td></tr></table></figure>

<h4 id="3-重启confluence"><a href="#3-重启confluence" class="headerlink" title="3. 重启confluence"></a>3. 重启confluence</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 使用confluence安装脚本安装的</span></span><br><span class="line">service jira stop</span><br><span class="line">service jira start</span><br><span class="line"><span class="comment"># 自己解压的或者文件迁移过来的</span></span><br><span class="line"><span class="built_in">cd</span> /opt/atlassian/confluence/bin</span><br><span class="line">./stop-confluence.sh</span><br><span class="line">./start-confluence.sh</span><br></pre></td></tr></table></figure>

<h3 id="Bitbucket实现SSO的配置过程"><a href="#Bitbucket实现SSO的配置过程" class="headerlink" title="Bitbucket实现SSO的配置过程"></a>Bitbucket实现SSO的配置过程</h3><h4 id="1-修改bitbucket-properties"><a href="#1-修改bitbucket-properties" class="headerlink" title="1. 修改bitbucket.properties"></a>1. 修改<code>bitbucket.properties</code></h4><p>在数据目录中找到<code>bitbucket.properties</code>，一般在<code>/var</code>下，也可能被移动或修改，可通过find查找</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim  /var/atlassian/application-data/bitbucket/shared/bitbucket.properties</span><br></pre></td></tr></table></figure>

<p>增加一行<code>plugin.auth-crowd.sso.enabled=true</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#&gt;*******************************************************</span></span><br><span class="line"><span class="comment">#&gt; Migrated to database at jdbc:mysql://192.168.99.114:3306/bitbucket?characterEncoding=utf8&amp;useUnicode=true</span></span><br><span class="line"><span class="comment">#&gt; Updated on 2025-07-10T14:31:05.562+08:00</span></span><br><span class="line"><span class="comment">#&gt;*******************************************************</span></span><br><span class="line">jdbc.driver=com.mysql.jdbc.Driver</span><br><span class="line">jdbc.url=jdbc:mysql://192.168.99.114:3306/bitbucket?characterEncoding=utf8&amp;useUnicode=<span class="literal">true</span></span><br><span class="line">jdbc.user=bitbucket</span><br><span class="line">jdbc.password=bitbucket</span><br><span class="line"></span><br><span class="line"><span class="comment"># 增加以下项目</span></span><br><span class="line">plugin.auth-crowd.sso.enabled=<span class="literal">true</span></span><br></pre></td></tr></table></figure>

<h4 id="2-重启"><a href="#2-重启" class="headerlink" title="2. 重启"></a>2. 重启</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 使用bitbucket安装脚本安装的</span></span><br><span class="line">service jira stop</span><br><span class="line">service jira start</span><br><span class="line"><span class="comment"># 自己解压的或者文件迁移过来的</span></span><br><span class="line"><span class="built_in">cd</span> /opt/atlassian/bitbucket/7.0.0/bin</span><br><span class="line">./stop-bitbucket.sh  </span><br><span class="line">./start-bitbucket.sh  </span><br></pre></td></tr></table></figure>



<p>如果流程顺利并且项目干净的话至此应该已经实现了基于Crowd的SSO登录。</p>
<h2 id="问题解决"><a href="#问题解决" class="headerlink" title="问题解决"></a>问题解决</h2><h3 id="1-jira、confluence、bitbucket忘记添加crowd中的某个用户作为管理员。或者想要通过初始管理员账户登录对应网站"><a href="#1-jira、confluence、bitbucket忘记添加crowd中的某个用户作为管理员。或者想要通过初始管理员账户登录对应网站" class="headerlink" title="1. jira、confluence、bitbucket忘记添加crowd中的某个用户作为管理员。或者想要通过初始管理员账户登录对应网站"></a>1. jira、confluence、bitbucket忘记添加crowd中的某个用户作为管理员。或者想要通过初始管理员账户登录对应网站</h3><ul>
<li>解决方式其实就是逆向的sso配置</li>
</ul>
<h4 id="1-修改认证配置文件seraph-config-xml-2"><a href="#1-修改认证配置文件seraph-config-xml-2" class="headerlink" title="1. 修改认证配置文件seraph-config.xml"></a>1. 修改认证配置文件<code>seraph-config.xml</code></h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim /opt/atlassian/jira/atlassian-jira/WEB-INF/classes/seraph-config.xml</span><br></pre></td></tr></table></figure>

<p>找到</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- CROWD:START - If enabling Crowd SSO integration uncomment the following SSOSeraphAuthenticator and comment out the JiraSeraphAuthenticator below --&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">authenticator</span> <span class="attr">class</span>=<span class="string">&quot;com.atlassian.jira.security.login.SSOSeraphAuthenticator&quot;</span>/&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- CROWD:END --&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- CROWD:START - The authenticator below here will need to be commented out for Crowd SSO integration --&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    &lt;authenticator class=&quot;com.atlassian.jira.security.login.JiraSeraphAuthenticator&quot;/&gt;</span></span><br><span class="line"><span class="comment">  --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- CROWD:END --&gt;</span></span><br></pre></td></tr></table></figure>

<p>改为</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- CROWD:START - If enabling Crowd SSO integration uncomment the following SSOSeraphAuthenticator and comment out the JiraSeraphAuthenticator below --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">    &lt;authenticator class=&quot;com.atlassian.jira.security.login.SSOSeraphAuthenticator&quot;/&gt;</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- CROWD:END --&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- CROWD:START - The authenticator below here will need to be commented out for Crowd SSO integration --&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">authenticator</span> <span class="attr">class</span>=<span class="string">&quot;com.atlassian.jira.security.login.JiraSeraphAuthenticator&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- CROWD:END --&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="2-修改数据库中的表"><a href="#2-修改数据库中的表" class="headerlink" title="2. 修改数据库中的表"></a>2. 修改数据库中的表</h4><blockquote>
<p>这里是为了激活jira&#x2F;confluence的internal 账户，同时禁用crowd用户，用初始的管理员登录。</p>
<p>通过数据库连接软件例如navicat等等进行连接，或者直接进数据库修改也可以。</p>
</blockquote>
<ol>
<li>找到对应数据库的<code>cwd_directory</code>表并修改</li>
</ol>
<blockquote>
<p>一般情况下会有两条项目，<code>active</code>字段用于控制用户目录是否生效，将internal目录改为T，crowd改为F即可。</p>
<p>有些版本是0或1，原理相同。</p>
</blockquote>
<p><img src="/../images/Linux/sso/image-20250721153048044.png" alt="image-20250721153048044"></p>
<h3 id="2-忘记jira、confluence、bitbucket管理员密码"><a href="#2-忘记jira、confluence、bitbucket管理员密码" class="headerlink" title="2. 忘记jira、confluence、bitbucket管理员密码"></a>2. 忘记jira、confluence、bitbucket管理员密码</h3><blockquote>
<p>数据库中的加密方式都是{PKCS5S2}，如果是别的则用对应的。老版本可能会使sha1</p>
<p>这里统一改为<code>&#123;PKCS5S2&#125;ltrb9LlmZ0QDCJvktxd45WgYLOgPt2XTV8X7av2p0mhPvIwofs9bHYVz2OXQ6/kF</code></p>
<p>对应密码是<strong>Ab123456</strong></p>
<p>如果你想客制化的自己改为admin或者123456。可以用PKCS5S2加密一下这些字符串，但我并不推荐这么做，太过简单<strong>可能</strong>会过不了密码策略，并导致就算你改成功了也登录不上。</p>
</blockquote>
<ol>
<li>先去实现上面第一点<strong>1. jira、confluence、bitbucket忘记添加crowd中的某个用户作为管理员。或者想要通过初始管理员账户登录对应网站</strong>的步骤</li>
<li>找到<code>cwd_user</code>表，找到管理员账户，一般是第一个。</li>
</ol>
<p><img src="/../images/Linux/sso/image-20250721153503807.png" alt="image-20250721153503807"></p>
<ol start="3">
<li>找到<code>credntial</code>字段</li>
</ol>
<p>修改为<code>&#123;PKCS5S2&#125;ltrb9LlmZ0QDCJvktxd45WgYLOgPt2XTV8X7av2p0mhPvIwofs9bHYVz2OXQ6/kF</code>并保存生效即可。</p>
<ol start="4">
<li>这里也给出数据库的操作方式（可选）</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker <span class="built_in">exec</span> -it mysql57 bash  <span class="comment"># 可选</span></span><br><span class="line">mysql -uroot -p <span class="comment"># 或者 对应的数据库角色例如：mysql -ujira -p</span></span><br><span class="line"><span class="comment"># 输入对应用户密码</span></span><br><span class="line">USE jiradb;  <span class="comment"># 使用对应平台的数据库</span></span><br><span class="line">UPDATE cwd_user</span><br><span class="line">SET credential=<span class="string">&#x27;&#123;PKCS5S2&#125;ltrb9LlmZ0QDCJvktxd45WgYLOgPt2XTV8X7av2p0mhPvIwofs9bHYVz2OXQ6/kF&#x27;</span></span><br><span class="line">WHERE user_name=<span class="string">&#x27;admin&#x27;</span> AND directory_id=1;</span><br></pre></td></tr></table></figure>

<ol start="5">
<li>重启即可。</li>
</ol>
<h3 id="3-忘记crowd管理员密码"><a href="#3-忘记crowd管理员密码" class="headerlink" title="3. 忘记crowd管理员密码"></a>3. 忘记crowd管理员密码</h3><blockquote>
<p>简化版的<strong>忘记jira、confluence、bitbucket管理员密码</strong>，只需修改数据库对应字段即可。</p>
</blockquote>
<ol>
<li>找到<code>cwd_user</code>表，找到管理员账户，一般是第一个。</li>
</ol>
<p><img src="/../images/Linux/sso/image-20250721154511694.png" alt="image-20250721154511694"></p>
<ol start="3">
<li>找到<code>credntial</code>字段</li>
</ol>
<p>修改为<code>&#123;PKCS5S2&#125;ltrb9LlmZ0QDCJvktxd45WgYLOgPt2XTV8X7av2p0mhPvIwofs9bHYVz2OXQ6/kF</code>并保存生效即可。</p>
<ol start="4">
<li>这里也给出数据库的操作方式（可选）</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker <span class="built_in">exec</span> -it mysql57 bash  <span class="comment"># 可选</span></span><br><span class="line">mysql -uroot -p <span class="comment"># 或者 对应的数据库角色例如：mysql -ucrowd -p</span></span><br><span class="line"><span class="comment"># 输入对应用户密码</span></span><br><span class="line">USE crowd;  <span class="comment"># 使用对应平台的数据库</span></span><br><span class="line">UPDATE cwd_user</span><br><span class="line">SET credential=<span class="string">&#x27;&#123;PKCS5S2&#125;ltrb9LlmZ0QDCJvktxd45WgYLOgPt2XTV8X7av2p0mhPvIwofs9bHYVz2OXQ6/kF&#x27;</span></span><br><span class="line">WHERE user_name=<span class="string">&#x27;admin&#x27;</span> AND directory_id=1;</span><br></pre></td></tr></table></figure>

<ol start="5">
<li>重启即可。</li>
</ol>
<h3 id="4-能够连接上crowd但是配置好SSO后仍然无法实现SSO，但是可以正常登录crowd。"><a href="#4-能够连接上crowd但是配置好SSO后仍然无法实现SSO，但是可以正常登录crowd。" class="headerlink" title="4. 能够连接上crowd但是配置好SSO后仍然无法实现SSO，但是可以正常登录crowd。"></a>4. 能够连接上crowd但是配置好SSO后仍然无法实现SSO，但是可以正常登录crowd。</h3><blockquote>
<p>如果是测试环境，没有真正的DNS服务器，使用的是本地解析则可能会出现。</p>
</blockquote>
<blockquote>
<p>简单解释下这SSO流程。以登录jira后自动登录confluence为案例。</p>
<ol>
<li><h3 id="用户登录-JIRA"><a href="#用户登录-JIRA" class="headerlink" title="用户登录 JIRA"></a><strong>用户登录 JIRA</strong></h3><ul>
<li>浏览器提交用户名密码到 JIRA</li>
<li>JIRA 调用 Crowd API 校验用户</li>
</ul>
<hr>
<h3 id="2-Crowd-返回校验结果"><a href="#2-Crowd-返回校验结果" class="headerlink" title="2. Crowd 返回校验结果"></a><strong>2. Crowd 返回校验结果</strong></h3><ul>
<li>校验通过后，Crowd 返回用户信息</li>
<li>同时向浏览器发送 Crowd SSO Cookie（如：crowd.token_key）</li>
</ul>
<hr>
<h3 id="3-用户访问-Confluence"><a href="#3-用户访问-Confluence" class="headerlink" title="3. 用户访问 Confluence"></a><strong>3. 用户访问 Confluence</strong></h3><ul>
<li>浏览器带着同一个 Crowd SSO Cookie 请求 Confluence</li>
<li>Confluence 收到请求后，通过 Crowd API 验证 cookie 有效性</li>
</ul>
<hr>
<h3 id="4-验证通过"><a href="#4-验证通过" class="headerlink" title="4. 验证通过"></a><strong>4. 验证通过</strong></h3><ul>
<li>Confluence 根据返回的用户信息在本地创建会话</li>
<li>用户免登录直接访问成功</li>
</ul>
<hr>
<h3 id="核心原理："><a href="#核心原理：" class="headerlink" title="核心原理："></a><strong>核心原理：</strong></h3><ul>
<li>所有系统都通过 Crowd Server 做用户统一认证</li>
<li>Crowd 签发的 SSO Cookie 设置在主域名（如 .suitbim.com）</li>
<li>浏览器自动携带 cookie 实现跨系统免登录</li>
</ul>
</li>
</ol>
</blockquote>
<p>这其中每一步出现错误都无法实现SSO。</p>
<ol>
<li><p>第1、2步骤不太可能出现问题。</p>
</li>
<li><p>第3步中，confluence服务器收到请求后需要向crowd服务器发送验证，这是服务器到服务器的对话，这其中的网络连接可能会出现问题。</p>
<blockquote>
<p>在开始的时候我们在客户端配置好了客户端的本地域名解析，例如Win10的C:\Windows\System32\drivers\etc\hosts文件，这意味着每次从客户端向服务器的请求能正常解析到服务器，然而服务器中配置的<code>/etc/hosts</code>文件可能没有这个域名到IP的解析，导致第3步骤出现错误，进而导致sso失败。</p>
</blockquote>
</li>
</ol>
<p>解决方式就是在<code>/etc/hosts</code>中添加一个 本地crowd域名解析</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">192.168.99.114 crowd.regenblogs.fun</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>软件技术</category>
      </categories>
      <tags>
        <tag>笔记</tag>
        <tag>运维</tag>
        <tag>部署</tag>
        <tag>jira</tag>
        <tag>confluence</tag>
        <tag>bitbucket</tag>
        <tag>crowd</tag>
        <tag>sso</tag>
      </tags>
  </entry>
  <entry>
    <title>mqttSender</title>
    <url>/2024/04/27/mqttSender/</url>
    <content><![CDATA[<p>用于记录项目mqttSender</p>
<p><a href="https://github.com/regenm/MqttSender">regenm&#x2F;mqttSender</a></p>
<h1 id="MqttSender"><a href="#MqttSender" class="headerlink" title="MqttSender"></a>MqttSender</h1><h2 id="description"><a href="#description" class="headerlink" title="description"></a>description</h2><p>A Software For me to send message to my mqtt server<br>So that I can contral my devices such as esp32 ,esp8266.</p>
<p>Another purpose is to learn python tkinter(GUI lib)</p>
<h3 id="Technique"><a href="#Technique" class="headerlink" title="Technique"></a>Technique</h3><ol>
<li>python tkinter</li>
<li>python pyinstaller</li>
<li>python mqtt</li>
</ol>
<h1 id="requirements-analization-v1-0"><a href="#requirements-analization-v1-0" class="headerlink" title="requirements analization v1.0"></a>requirements analization v1.0</h1><h2 id="GUI"><a href="#GUI" class="headerlink" title="GUI"></a>GUI</h2><h3 id="version1-0"><a href="#version1-0" class="headerlink" title="version1.0"></a>version1.0</h3><ul>
<li>conponents</li>
</ul>
<ol>
<li>1 text call box（for output）</li>
<li>1 entry box (for input)</li>
<li>a send button()</li>
</ol>
<ul>
<li>features(or limits? qwq )</li>
</ul>
<ol>
<li>simple</li>
<li>change server(ip address, password , topics) by editing source code .</li>
</ol>
<h2 id="mqtt"><a href="#mqtt" class="headerlink" title="mqtt"></a>mqtt</h2><h3 id="paho-mqtt-version-1-6"><a href="#paho-mqtt-version-1-6" class="headerlink" title="paho-mqtt version 1.6"></a>paho-mqtt version 1.6</h3><ul>
<li>description</li>
</ul>
<p>When coding the parts of mqtt sucscribe and publish , I find that the mqtt lib had upugrade to version 2.0 . However , I get the version 1 example code . Making me annoyed.</p>
<p>So i just gona to use version 1.6</p>
<p>And I will definetly upgrade my code in the future.</p>
<ul>
<li>mqtt part function</li>
</ul>
<p>get the content( payload ) and the server information(settings)  then send it.</p>
<h2 id="release"><a href="#release" class="headerlink" title="release"></a>release</h2><p><code>pyinstaller gui_ver_1.py -p mqttSender.py</code></p>
<h1 id="Version-2-0"><a href="#Version-2-0" class="headerlink" title="Version 2.0"></a>Version 2.0</h1><h2 id="requirements-analization-v1-0-1"><a href="#requirements-analization-v1-0-1" class="headerlink" title="requirements analization v1.0"></a>requirements analization v1.0</h2><ul>
<li>6 inut text</li>
<li>1 ouput text</li>
</ul>
<h3 id="Technique-1"><a href="#Technique-1" class="headerlink" title="Technique"></a>Technique</h3><ol>
<li>python tkinter</li>
<li>python pyinstaller</li>
<li>python mqtt</li>
<li>tkinter-designer</li>
</ol>
<h3 id="GUI-1"><a href="#GUI-1" class="headerlink" title="GUI"></a>GUI</h3><p>)<img src="/../images/mqttSender/1.png" alt="version_2"></p>
<h4 id="How-to-use"><a href="#How-to-use" class="headerlink" title="How to use ?"></a>How to use ?</h4><ul>
<li><p>)use source code</p>
<ol>
<li>change <code>src\final\version_2_0\gui_ver_2.py </code> Line 70 to your own file position<br> <img src="/../images/mqttSender/2.png" alt="img"></li>
<li>RUN</li>
</ol>
  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd src\final\version_2_0</span><br><span class="line">python gui_ver_2.py</span><br></pre></td></tr></table></figure>
</li>
<li><p>use release ( to be finished )</p>
</li>
</ul>
]]></content>
      <categories>
        <category>软件技术</category>
      </categories>
      <tags>
        <tag>笔记</tag>
        <tag>linux</tag>
        <tag>python</tag>
        <tag>项目</tag>
        <tag>mqtt</tag>
        <tag>IoT</tag>
        <tag>mosquitto</tag>
        <tag>GUI</tag>
        <tag>software</tag>
      </tags>
  </entry>
  <entry>
    <title>jira、confluence、bitbucket、基于crowd实现sso的案例</title>
    <url>/2025/07/21/jira%E3%80%81confluence%E3%80%81bitbucket%E3%80%81%E5%9F%BA%E4%BA%8Ecrowd%E5%AE%9E%E7%8E%B0sso%E7%9A%84%E6%A1%88%E4%BE%8B/</url>
    <content><![CDATA[<h1 id="jira、confluence、bitbucket、基于crowd实现sso的案例"><a href="#jira、confluence、bitbucket、基于crowd实现sso的案例" class="headerlink" title="jira、confluence、bitbucket、基于crowd实现sso的案例"></a>jira、confluence、bitbucket、基于crowd实现sso的案例</h1><h2 id="案例简介"><a href="#案例简介" class="headerlink" title="案例简介"></a>案例简介</h2><blockquote>
<p>这是公司的旧生产环境备份案例：</p>
<p><strong>版本信息</strong></p>
<ul>
<li>jira:7.13</li>
<li>confluence:6.10.0</li>
<li>bitbucket:7.0.0</li>
<li>crowd:3.2.1</li>
<li>mysql:5.7</li>
</ul>
<hr>
<ol>
<li>jira位于一台服务器<code>192.168.99.253</code>数据库也在此服务器，端口为8080</li>
<li>crowd和confluence位于<strong>同一台服务器</strong><code>192.168.99.252</code>它们的数据库也在此服务器，crowd端口为8095，confluence端口为8090</li>
<li>bitbucket位于一台服务9器<code>192.168.99.251</code>数据库也在此服务器，端口为7990</li>
</ol>
<p>整个项目是旧的项目迁移而来。</p>
<p>参考文章<a href="https://regenm.github.io/2025/07/18/jira%E3%80%81confluence%E3%80%81bitbucket%E3%80%81%E5%9F%BA%E4%BA%8Ecrowd%E5%AE%9E%E7%8E%B0sso/">jira、confluence、bitbucket、基于crowd实现sso | Regen</a></p>
<h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a><strong>思路</strong></h3><p>因为是新的环境，而且基础信息也已经全部丢失，例如各种账号密码，所以思路是：</p>
<ol>
<li>先满足每个软件能够正常使用内部账户登录使用</li>
<li>再连接crowd进行测试</li>
<li>最后实现SSO</li>
</ol>
</blockquote>
<p>图：</p>
<p><img src="/../images/Linux/sso/image-20250721161435380.png" alt="image-20250721161435380"></p>
<ul>
<li>操作目标</li>
<li>实现三平台（jira、confluence、bitbucket）的单点登录。</li>
</ul>
<hr>
<h2 id="1-准备工作："><a href="#1-准备工作：" class="headerlink" title="1. 准备工作："></a>1. 准备工作：</h2><h3 id="1-找到各个软件的安装目录和数据目录"><a href="#1-找到各个软件的安装目录和数据目录" class="headerlink" title="1. 找到各个软件的安装目录和数据目录"></a>1. 找到各个软件的安装目录和数据目录</h3><h4 id="jira"><a href="#jira" class="headerlink" title="jira"></a>jira</h4><ol>
<li>安装目录</li>
</ol>
<p><img src="/../images/Linux/sso/image-20250721165424260.png" alt="image-20250721165424260"></p>
<ol start="2">
<li>数据目录</li>
</ol>
<p><img src="/../images/Linux/sso/image-20250721165441962.png" alt="image-20250721165441962"></p>
<h4 id="confluence"><a href="#confluence" class="headerlink" title="confluence"></a>confluence</h4><ol>
<li>安装目录</li>
</ol>
<p><img src="/../images/Linux/sso/image-20250721165844897.png" alt="image-20250721165844897"></p>
<ol start="2">
<li>数据目录</li>
</ol>
<p><img src="/../images/Linux/sso/image-20250721165954165.png" alt="image-20250721165954165"></p>
<h4 id="bibucket"><a href="#bibucket" class="headerlink" title="bibucket"></a>bibucket</h4><ol>
<li>安装目录</li>
</ol>
<p><img src="/../images/Linux/sso/image-20250721170035979.png" alt="image-20250721170035979"></p>
<ol start="2">
<li>数据目录</li>
</ol>
<p><img src="/../images/Linux/sso/image-20250721170015797.png" alt="image-20250721170015797"></p>
<h4 id="crowd"><a href="#crowd" class="headerlink" title="crowd"></a>crowd</h4><ol>
<li>安装目录</li>
</ol>
<p><img src="/../images/Linux/sso/image-20250721165757293.png" alt="image-20250721165757293"></p>
<ol start="2">
<li>数据目录</li>
</ol>
<p><img src="/../images/Linux/sso/image-20250721165811334.png" alt="image-20250721165811334"></p>
<h3 id="2-停掉还在运行的服务"><a href="#2-停掉还在运行的服务" class="headerlink" title="2. 停掉还在运行的服务"></a>2. 停掉还在运行的服务</h3><p>到对应的bin目录下运行对应脚本即可。</p>
<hr>
<h2 id="2-使用内网DNS解析"><a href="#2-使用内网DNS解析" class="headerlink" title="2. 使用内网DNS解析"></a>2. 使用内网DNS解析</h2><p>服务器为Winserver2016，安装DNS服务。</p>
<h3 id="1-搭建与配置DNS服务器"><a href="#1-搭建与配置DNS服务器" class="headerlink" title="1. 搭建与配置DNS服务器"></a>1. 搭建与配置DNS服务器</h3><h4 id="1-搭建DNS服务器"><a href="#1-搭建DNS服务器" class="headerlink" title="1. 搭建DNS服务器"></a>1. 搭建DNS服务器</h4><ol>
<li>打开服务器管理器</li>
</ol>
<p><img src="/../images/Linux/sso/image-20250722161735278.png" alt="image-20250722161735278"></p>
<ol start="2">
<li>点击<strong>添加角色和功能</strong></li>
</ol>
<p><img src="/../images/Linux/sso/image-20250722162042742.png" alt="image-20250722162042742"></p>
<ol start="3">
<li>点击下一步-基于角色或基于功能的安装-下一步，选择主机，选择DNS服务器</li>
</ol>
<p><img src="/../images/Linux/sso/image-20250722162253226.png" alt="image-20250722162253226"></p>
<ol start="4">
<li>一路下一步最后安装</li>
</ol>
<p><img src="/../images/Linux/sso/image-20250722162326485.png" alt="image-20250722162326485"></p>
<p>​	可能会重启几次</p>
<h4 id="2-配置DNS解析"><a href="#2-配置DNS解析" class="headerlink" title="2. 配置DNS解析"></a>2. 配置DNS解析</h4><ol>
<li>进入DNS管理器</li>
</ol>
<p><img src="/../images/Linux/sso/image-20250722162527041.png" alt="image-20250722162527041"></p>
<ol start="2">
<li>选择正向查找区域，新建区域</li>
</ol>
<p><img src="/../images/Linux/sso/image-20250722162647154.png" alt="image-20250722162647154"></p>
<ol start="3">
<li>选择主要区域并下一步</li>
</ol>
<p><img src="/../images/Linux/sso/image-20250722162728785.png" alt="image-20250722162728785"></p>
<ol start="4">
<li>输入域名，下一步</li>
</ol>
<p><img src="/../images/Linux/sso/image-20250722162809338.png" alt="image-20250722162809338"></p>
<ol start="5">
<li>一路下一步，右键新建的域名选择新建主机(A或AAAA)</li>
</ol>
<p><img src="/../images/Linux/sso/image-20250722162937500.png" alt="image-20250722162937500"></p>
<ol start="6">
<li>输入二级域名以及主机名，重复操作即可。</li>
</ol>
<p><img src="/../images/Linux/sso/image-20250722163102969.png" alt="image-20250722163102969"></p>
<ol start="7">
<li>最后显示</li>
</ol>
<p><img src="/../images/Linux/sso/image-20250722163210119.png" alt="image-20250722163210119"></p>
<ol start="8">
<li>至此已添加所有需要使用到的解析</li>
</ol>
<h3 id="2-客户端配置DNS服务器"><a href="#2-客户端配置DNS服务器" class="headerlink" title="2. 客户端配置DNS服务器"></a>2. 客户端配置DNS服务器</h3><h4 id="1-windows客户端"><a href="#1-windows客户端" class="headerlink" title="1. windows客户端"></a>1. windows客户端</h4><ol>
<li>控制面板-网络和共享中心-选择联网的以太网连接</li>
</ol>
<p><img src="/../images/Linux/sso/image-20250722163419857.png" alt="image-20250722163419857"></p>
<ol start="2">
<li>点击属性后双击IPv4</li>
</ol>
<p><img src="/../images/Linux/sso/image-20250722163445352.png" alt="image-20250722163445352"></p>
<ol start="3">
<li>选择DNS服务器并输入</li>
</ol>
<p><img src="/../images/Linux/sso/image-20250722163610973.png" alt="image-20250722163610973"></p>
<ol start="4">
<li>至此已添加好DNS解析服务器，。</li>
<li>测试一下是否是正确的IP。</li>
</ol>
<p>​	第一次是未添加解析之前的结果，后面的为添加解析后的结果。至于为什么两次结果不一样，与DNS解析过程有关，最终结果是我们内网的解析结果即可。</p>
<p><img src="/../images/Linux/sso/image-20250722163732245.png" alt="image-20250722163732245"></p>
<h3 id="2-Linux客户端或服务端"><a href="#2-Linux客户端或服务端" class="headerlink" title="2. Linux客户端或服务端"></a>2. Linux客户端或服务端</h3><h4 id="1-临时修改"><a href="#1-临时修改" class="headerlink" title="1. 临时修改"></a>1. 临时修改</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> bash -c <span class="string">&#x27;echo &quot;nameserver 192.168.99.250&quot; &gt; /etc/resolv.conf&#x27;</span></span><br></pre></td></tr></table></figure>

<h4 id="2-永久修改"><a href="#2-永久修改" class="headerlink" title="2. 永久修改"></a>2. 永久修改</h4><ol>
<li>首先查看上网用的网卡</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ip a</span><br></pre></td></tr></table></figure>

<p><img src="/../images/Linux/sso/image-20250722164112282.png" alt="image-20250722164112282"></p>
<ol start="2">
<li>这里可以发现我的是ens33，然后去网卡的修改配置文件。</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim /etc/sysconfig/network-scripts/ifcfg-ens33</span><br></pre></td></tr></table></figure>

<p>增加DNS服务器IP地址即可</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">DNS1 192.168.99.205</span><br></pre></td></tr></table></figure>

<p><img src="/../images/Linux/sso/image-20250722164255588.png" alt="image-20250722164255588"></p>
<ol start="3">
<li>重启网卡即可</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">systemctl restart NetworkManager</span><br></pre></td></tr></table></figure>

<ol start="4">
<li>测试解析</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ping jira.suitbim.com</span><br></pre></td></tr></table></figure>

<p><img src="/../images/Linux/sso/image-20250722164633137.png" alt="image-20250722164633137"></p>
<p>没有问题</p>
<ol start="4">
<li>至此已配置好DNS服务器</li>
</ol>
<h2 id="3-配置为内部用户正常登录并取消crowd登录"><a href="#3-配置为内部用户正常登录并取消crowd登录" class="headerlink" title="3. 配置为内部用户正常登录并取消crowd登录"></a>3. 配置为内部用户正常登录并取消crowd登录</h2><h3 id="1-修改各个软件的数据库root密码"><a href="#1-修改各个软件的数据库root密码" class="headerlink" title="1. 修改各个软件的数据库root密码"></a>1. 修改各个软件的数据库root密码</h3><blockquote>
<p>因为后续需要改各个数据库中的管理员密码，所以这里改掉root便于后续查询修改。</p>
<p>通过各类手段确定数据库信息：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql --version</span><br></pre></td></tr></table></figure>

<p>如果没直接显示则可能docker容器中运行的。</p>
<p>汇总一下信息：</p>
<p>192.168.99.251	mysql  Ver 14.14 <strong>Distrib 5.7.24</strong>, for Linux (x86_64) using  EditLine wrapper</p>
<p>192.168.99.252	mysql  Ver 15.1 <strong>Distrib 5.5.60-MariaDB</strong>, for Linux (x86_64) using readline 5.1</p>
<p>192.168.99.253	mysql  Ver 14.14 <strong>Distrib 5.7.20</strong>, for Linux (x86_64) using  EditLine wrapper</p>
</blockquote>
<h4 id="修改数据库流程"><a href="#修改数据库流程" class="headerlink" title="修改数据库流程"></a>修改数据库流程</h4><ol>
<li>停止数据库服务</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> systemctl stop mysql</span><br><span class="line"><span class="comment"># 或</span></span><br><span class="line"><span class="built_in">sudo</span> systemctl stop mariadb</span><br></pre></td></tr></table></figure>



<ol start="2">
<li>“跳过授权表”方式启动（安全模式</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysqld_safe --skip-grant-tables &amp;</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>root 用户无密码登录</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql -u root</span><br></pre></td></tr></table></figure>

<ol start="4">
<li>修改 root 密码</li>
</ol>
<ul>
<li>MySQL 5.7+ &#x2F; 8.0 &#x2F; MariaDB 新版本</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">FLUSH PRIVILEGES;</span><br><span class="line">ALTER USER &#x27;root&#x27;@&#x27;localhost&#x27; IDENTIFIED BY &#x27;新密码&#x27;;</span><br></pre></td></tr></table></figure>

<ul>
<li>旧版本</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">FLUSH PRIVILEGES;</span><br><span class="line">SET PASSWORD FOR <span class="string">&#x27;root&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span> = PASSWORD(<span class="string">&#x27;新密码&#x27;</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<ol start="5">
<li>退出并重启数据库</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">exit</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">sudo</span> systemctl stop mysql</span><br><span class="line"><span class="comment"># 或</span></span><br><span class="line"><span class="built_in">sudo</span> systemctl stop mariadb</span><br><span class="line"></span><br><span class="line"><span class="built_in">sudo</span> systemctl start mysql</span><br><span class="line"><span class="comment"># 或</span></span><br><span class="line"><span class="built_in">sudo</span> systemctl start mariadb</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<ol start="6">
<li>用新密码验证</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql -u root -p</span><br></pre></td></tr></table></figure>

<h3 id="2-查看以及确认各个软件配置的数据库信息"><a href="#2-查看以及确认各个软件配置的数据库信息" class="headerlink" title="2. 查看以及确认各个软件配置的数据库信息"></a>2. 查看以及确认各个软件配置的数据库信息</h3><h4 id="jira-1"><a href="#jira-1" class="headerlink" title="jira"></a>jira</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vim /home/atlassian/application-data/jira/dbconfig.xml</span><br></pre></td></tr></table></figure>

<p><img src="/../images/Linux/sso/image-20250721171451445.png" alt="image-20250721171451445"></p>
<p><strong>经数据库连接测试后无问题</strong></p>
<h4 id="confluence-1"><a href="#confluence-1" class="headerlink" title="confluence"></a>confluence</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vim /home/confluence_data/confluence.cfg.xml</span><br></pre></td></tr></table></figure>

<p><img src="/../images/Linux/sso/image-20250721171323721.png" alt="image-20250721171323721"></p>
<p><strong>经数据库连接测试后无问题</strong></p>
<h4 id="bitbucket"><a href="#bitbucket" class="headerlink" title="bitbucket"></a>bitbucket</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim /data/atlassian/application-data/bitbucket/shared/bitbucket.properties</span><br></pre></td></tr></table></figure>

<p><img src="/../images/Linux/sso/image-20250721171616776.png" alt="image-20250721171616776"></p>
<p><strong>经数据库连接测试后无问题</strong></p>
<p>这里的<code>plugin.auth-crowd.sso.enabled=true</code>无影响	</p>
<h4 id="crowd-1"><a href="#crowd-1" class="headerlink" title="crowd"></a>crowd</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vim /var/crowd-home/shared/crowd.cfg.xml</span><br></pre></td></tr></table></figure>

<p><img src="/../images/Linux/sso/image-20250721170204578.png" alt="image-20250721170204578"></p>
<p><strong>经数据库连接测试后无问题</strong></p>
<h3 id="3-查看以及修改各个软件的SSO配置"><a href="#3-查看以及修改各个软件的SSO配置" class="headerlink" title="3. 查看以及修改各个软件的SSO配置"></a>3. 查看以及修改各个软件的SSO配置</h3><h4 id="jira-2"><a href="#jira-2" class="headerlink" title="jira"></a>jira</h4><h5 id="1-修改认证配置文件seraph-config-xml"><a href="#1-修改认证配置文件seraph-config-xml" class="headerlink" title="1. 修改认证配置文件seraph-config.xml"></a>1. 修改认证配置文件<code>seraph-config.xml</code></h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim /home/atlassian/jira/atlassian-jira/WEB-INF/classes/seraph-config.xml</span><br></pre></td></tr></table></figure>

<p>找到</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- CROWD:START - If enabling Crowd SSO integration uncomment the following SSOSeraphAuthenticator and comment out the JiraSeraphAuthenticator below --&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">authenticator</span> <span class="attr">class</span>=<span class="string">&quot;com.atlassian.jira.security.login.SSOSeraphAuthenticator&quot;</span>/&gt;</span></span><br><span class="line">   </span><br><span class="line">    <span class="comment">&lt;!-- CROWD:END --&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- CROWD:START - The authenticator below here will need to be commented out for Crowd SSO integration --&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    &lt;authenticator class=&quot;com.atlassian.jira.security.login.JiraSeraphAuthenticator&quot;/&gt;</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- CROWD:END --&gt;</span></span><br></pre></td></tr></table></figure>

<p>改为</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- CROWD:START - If enabling Crowd SSO integration uncomment the following SSOSeraphAuthenticator and comment out the JiraSeraphAuthenticator below --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    &lt;authenticator class=&quot;com.atlassian.jira.security.login.SSOSeraphAuthenticator&quot;/&gt;</span></span><br><span class="line"><span class="comment">   --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- CROWD:END --&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- CROWD:START - The authenticator below here will need to be commented out for Crowd SSO integration --&gt;</span></span><br><span class="line">  </span><br><span class="line">   <span class="tag">&lt;<span class="name">authenticator</span> <span class="attr">class</span>=<span class="string">&quot;com.atlassian.jira.security.login.JiraSeraphAuthenticator&quot;</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- CROWD:END --&gt;</span></span><br></pre></td></tr></table></figure>



<h5 id="3-重启jira"><a href="#3-重启jira" class="headerlink" title="3. 重启jira"></a>3. 重启jira</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /home/atlassian/jira/bin</span><br><span class="line">./stop-jira.sh</span><br><span class="line">./start-jira.sh</span><br></pre></td></tr></table></figure>

<h4 id="confluence-2"><a href="#confluence-2" class="headerlink" title="confluence"></a>confluence</h4><h5 id="1-修改认证配置文件seraph-config-xml-1"><a href="#1-修改认证配置文件seraph-config-xml-1" class="headerlink" title="1. 修改认证配置文件seraph-config.xml"></a>1. 修改认证配置文件<code>seraph-config.xml</code></h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim /opt/atlassian/confluence/confluence/WEB-INF/classes/seraph-config.xml</span><br></pre></td></tr></table></figure>

<blockquote>
<p>这里已经修改好。</p>
</blockquote>
<p>找到</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Default Confluence authenticator, which uses the configured user management for authentication. --&gt;</span></span><br><span class="line">   <span class="comment">&lt;!--  </span></span><br><span class="line"><span class="comment">&lt;authenticator class=&quot;com.atlassian.confluence.user.ConfluenceAuthenticator&quot;/&gt;</span></span><br><span class="line"><span class="comment"> --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- Custom authenticators appear below. To enable one of them, comment out the default authenticator above and uncomment the one below. --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- Authenticator with support for Crowd single-sign on (SSO). --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">authenticator</span> <span class="attr">class</span>=<span class="string">&quot;com.atlassian.confluence.user.ConfluenceCrowdSSOAuthenticator&quot;</span>/&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>改为</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">    <span class="comment">&lt;!-- Default Confluence authenticator, which uses the configured user management for authentication. --&gt;</span></span><br><span class="line">         </span><br><span class="line">    <span class="tag">&lt;<span class="name">authenticator</span> <span class="attr">class</span>=<span class="string">&quot;com.atlassian.confluence.user.ConfluenceAuthenticator&quot;</span>/&gt;</span></span><br><span class="line">     </span><br><span class="line">    <span class="comment">&lt;!-- Custom authenticators appear below. To enable one of them, comment out the default authenticator above and uncomment the one below. --&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- Authenticator with support for Crowd single-sign on (SSO). --&gt;</span></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    &lt;authenticator class=&quot;com.atlassian.confluence.user.ConfluenceCrowdSSOAuthenticator&quot;/&gt;</span></span><br><span class="line"><span class="comment">--&gt;</span> </span><br></pre></td></tr></table></figure>



<h5 id="3-重启confluence"><a href="#3-重启confluence" class="headerlink" title="3. 重启confluence"></a>3. 重启confluence</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /opt/atlassian/confluence/bin</span><br><span class="line">./stop-confluence.sh</span><br><span class="line">./start-confluence.sh</span><br></pre></td></tr></table></figure>

<h4 id="bitbucket-1"><a href="#bitbucket-1" class="headerlink" title="bitbucket"></a>bitbucket</h4><h5 id="1-修改bitbucket-properties"><a href="#1-修改bitbucket-properties" class="headerlink" title="1. 修改bitbucket.properties"></a>1. 修改<code>bitbucket.properties</code></h5><p>在数据目录中找到<code>bitbucket.properties</code>，一般在<code>/var</code>下，也可能被移动或修改，可通过find查找</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim  /data/atlassian/application-data/bitbucket/shared/bitbucket.properties</span><br></pre></td></tr></table></figure>

<p>增加一行<code>plugin.auth-crowd.sso.enabled=false</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#&gt;*******************************************************</span></span><br><span class="line"><span class="comment">#&gt; Migrated to database at jdbc:mysql://192.168.99.114:3306/bitbucket?characterEncoding=utf8&amp;useUnicode=true</span></span><br><span class="line"><span class="comment">#&gt; Updated on 2025-07-10T14:31:05.562+08:00</span></span><br><span class="line"><span class="comment">#&gt;*******************************************************</span></span><br><span class="line">jdbc.driver=com.mysql.jdbc.Driver</span><br><span class="line">jdbc.url=jdbc:mysql://192.168.99.114:3306/bitbucket?characterEncoding=utf8&amp;useUnicode=<span class="literal">true</span></span><br><span class="line">jdbc.user=bitbucket</span><br><span class="line">jdbc.password=bitbucket</span><br><span class="line"></span><br><span class="line"><span class="comment"># 增加以下项目</span></span><br><span class="line">plugin.auth-crowd.sso.enabled=<span class="literal">false</span></span><br></pre></td></tr></table></figure>

<h5 id="2-重启"><a href="#2-重启" class="headerlink" title="2. 重启"></a>2. 重启</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /opt/atlassian/bitbucket/7.0.0/bin</span><br><span class="line">./stop-bitbucket.sh  </span><br><span class="line">./start-bitbucket.sh  </span><br></pre></td></tr></table></figure>

<h3 id="4-使用初始管理员登录"><a href="#4-使用初始管理员登录" class="headerlink" title="4. 使用初始管理员登录"></a>4. 使用初始管理员登录</h3><p>改密码方式在另一篇中有介绍<a href="https://regenm.github.io/2025/07/18/jira%E3%80%81confluence%E3%80%81bitbucket%E3%80%81%E5%9F%BA%E4%BA%8Ecrowd%E5%AE%9E%E7%8E%B0sso/">jira、confluence、bitbucket、基于crowd实现sso | Regen</a></p>
<p>登录成功则可进行下一步配置。</p>
<h2 id="4-各个web平台配置SSO"><a href="#4-各个web平台配置SSO" class="headerlink" title="4. 各个web平台配置SSO"></a>4. 各个web平台配置SSO</h2><ol>
<li><p>在各个应用内设置好允许访问的IP和域名</p>
<p> 这里只放jira的配置</p>
<p> <img src="/../images/Linux/sso/image-20250718111839304.png" alt="image-20250718111839304"></p>
</li>
</ol>
<h3 id="jira-集成crowd"><a href="#jira-集成crowd" class="headerlink" title="jira 集成crowd"></a>jira 集成crowd</h3><ol>
<li>测试服务器连接</li>
</ol>
<p><img src="/../images/Linux/sso/image-20250718112040564.png" alt="image-20250718112040564"></p>
<ol start="2">
<li>测试用户</li>
</ol>
<p><img src="/../images/Linux/sso/image-20250718112135649.png" alt="image-20250718112135649"></p>
<p><img src="/../images/Linux/sso/image-20250718112208967.png" alt="image-20250718112208967"></p>
<h3 id="confluence集成crowd"><a href="#confluence集成crowd" class="headerlink" title="confluence集成crowd"></a>confluence集成crowd</h3><p>​	与jira集成crowd操作基本一致</p>
<h3 id="bitbucket集成crowd"><a href="#bitbucket集成crowd" class="headerlink" title="bitbucket集成crowd"></a>bitbucket集成crowd</h3><p>​	与jira集成crowd操作基本一致</p>
<h3 id="Crowd的SSO设置"><a href="#Crowd的SSO设置" class="headerlink" title="Crowd的SSO设置"></a>Crowd的SSO设置</h3><blockquote>
<p>这一步设置了能够通过SSO登录的二级域名，子域名通过该域名来实现SSO</p>
</blockquote>
<ol>
<li>进入crowd general 设置</li>
</ol>
<p><img src="/../images/Linux/sso/image-20250721145301659.png" alt="image-20250721145301659"></p>
<ol start="2">
<li>设置子域名、cookie名字以及base url，确保都是域名而不是IP。</li>
</ol>
<p><img src="/../images/Linux/sso/image-20250721145619726.png" alt="image-20250721145619726"></p>
<h2 id="5-实现SSO"><a href="#5-实现SSO" class="headerlink" title="5. 实现SSO"></a>5. 实现SSO</h2><blockquote>
<p>在我使用的版本中，如果允许sso登录，则会停用jira、confluence、bitbucket的管理员账户，因此在实现SSO之前建议给Crowd中的某个用户增加所有的权限便于管理。否则将失去管理员账号。如果忘记添加可以看文末解决方式</p>
<p>配置方法有两种，一种是直接在各个平台为该用户增加最大权限，一种是在各个平台增加一个最大权限用户组，并将该用户添加到该组。</p>
<ul>
<li><p>第一种方式（直接在各个平台为该用户增加最大权限）实现方式：</p>
<p>  这里仅以jira为例，其余过程基本一致。</p>
</li>
</ul>
<ol>
<li>打开用户管理</li>
<li>搜索crowd用户并且添加到对应权限组</li>
</ol>
<ul>
<li>第二种方式（最大权限用户组，添加该用户）实现方式：</li>
</ul>
</blockquote>
<h3 id="jira实现SSO的配置过程"><a href="#jira实现SSO的配置过程" class="headerlink" title="jira实现SSO的配置过程"></a>jira实现SSO的配置过程</h3><h4 id="1-修改认证配置文件seraph-config-xml-2"><a href="#1-修改认证配置文件seraph-config-xml-2" class="headerlink" title="1. 修改认证配置文件seraph-config.xml"></a>1. 修改认证配置文件<code>seraph-config.xml</code></h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim /home/atlassian/jira/atlassian-jira/WEB-INF/classes/seraph-config.xml</span><br></pre></td></tr></table></figure>

<p>找到</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- CROWD:START - If enabling Crowd SSO integration uncomment the following SSOSeraphAuthenticator and comment out the JiraSeraphAuthenticator below --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">    &lt;authenticator class=&quot;com.atlassian.jira.security.login.SSOSeraphAuthenticator&quot;/&gt;</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- CROWD:END --&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- CROWD:START - The authenticator below here will need to be commented out for Crowd SSO integration --&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">authenticator</span> <span class="attr">class</span>=<span class="string">&quot;com.atlassian.jira.security.login.JiraSeraphAuthenticator&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- CROWD:END --&gt;</span></span><br></pre></td></tr></table></figure>

<p>将以下内容取消注释</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">&lt;authenticator class=&quot;com.atlassian.jira.security.login.SSOSeraphAuthenticator&quot;/&gt;</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br></pre></td></tr></table></figure>

<p>改为</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">authenticator</span> <span class="attr">class</span>=<span class="string">&quot;com.atlassian.jira.security.login.SSOSeraphAuthenticator&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<p>并注释</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">    <span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">&lt;authenticator class=&quot;com.atlassian.jira.security.login.JiraSeraphAuthenticator&quot;/&gt;</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="2-重启jira"><a href="#2-重启jira" class="headerlink" title="2. 重启jira"></a>2. 重启jira</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /home/atlassian/jira/bin</span><br><span class="line">./stop-jira.sh</span><br><span class="line">./start-jira.sh</span><br></pre></td></tr></table></figure>

<h3 id="confluence实现SSO的配置过程、与jira类似"><a href="#confluence实现SSO的配置过程、与jira类似" class="headerlink" title="confluence实现SSO的配置过程、与jira类似"></a>confluence实现SSO的配置过程、与jira类似</h3><h4 id="1-修改认证配置文件seraph-config-xml-3"><a href="#1-修改认证配置文件seraph-config-xml-3" class="headerlink" title="1. 修改认证配置文件seraph-config.xml"></a>1. 修改认证配置文件<code>seraph-config.xml</code></h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim /opt/atlassian/confluence/confluence/WEB-INF/classes/seraph-config.xml</span><br></pre></td></tr></table></figure>

<blockquote>
<p>这里已经修改好。</p>
</blockquote>
<p>找到</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Default Confluence authenticator, which uses the configured user management for authentication. --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--    </span></span><br><span class="line"><span class="comment">&lt;authenticator class=&quot;com.atlassian.confluence.user.ConfluenceAuthenticator&quot;/&gt;</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- Custom authenticators appear below. To enable one of them, comment out the default authenticator above and uncomment the one below. --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- Authenticator with support for Crowd single-sign on (SSO). --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">authenticator</span> <span class="attr">class</span>=<span class="string">&quot;com.atlassian.confluence.user.ConfluenceCrowdSSOAuthenticator&quot;</span>/&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>将以下内容取消注释</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment"> &lt;authenticator class=&quot;com.atlassian.confluence.user.ConfluenceCrowdSSOAuthenticator&quot;/&gt;</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br></pre></td></tr></table></figure>

<p>改为</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">authenticator</span> <span class="attr">class</span>=<span class="string">&quot;com.atlassian.confluence.user.ConfluenceCrowdSSOAuthenticator&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<p>并注释</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">     <span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">&lt;authenticator class=&quot;com.atlassian.confluence.user.ConfluenceAuthenticator&quot;/&gt;</span></span><br><span class="line"><span class="comment">     --&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="2-重启confluence"><a href="#2-重启confluence" class="headerlink" title="2. 重启confluence"></a>2. 重启confluence</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /opt/atlassian/confluence/bin</span><br><span class="line">./stop-confluence.sh</span><br><span class="line">./start-confluence.sh</span><br></pre></td></tr></table></figure>

<h3 id="Bitbucket实现SSO的配置过程"><a href="#Bitbucket实现SSO的配置过程" class="headerlink" title="Bitbucket实现SSO的配置过程"></a>Bitbucket实现SSO的配置过程</h3><h4 id="1-修改bitbucket-properties-1"><a href="#1-修改bitbucket-properties-1" class="headerlink" title="1. 修改bitbucket.properties"></a>1. 修改<code>bitbucket.properties</code></h4><p>在数据目录中找到<code>bitbucket.properties</code>，一般在<code>/var</code>下，也可能被移动或修改，可通过find查找</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim  /data/atlassian/application-data/bitbucket/shared/bitbucket.properties</span><br></pre></td></tr></table></figure>

<p>增加一行<code>plugin.auth-crowd.sso.enabled=true</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#&gt;*******************************************************</span></span><br><span class="line"><span class="comment">#&gt; Migrated to database at jdbc:mysql://192.168.99.114:3306/bitbucket?characterEncoding=utf8&amp;useUnicode=true</span></span><br><span class="line"><span class="comment">#&gt; Updated on 2025-07-10T14:31:05.562+08:00</span></span><br><span class="line"><span class="comment">#&gt;*******************************************************</span></span><br><span class="line">jdbc.driver=com.mysql.jdbc.Driver</span><br><span class="line">jdbc.url=jdbc:mysql://192.168.99.114:3306/bitbucket?characterEncoding=utf8&amp;useUnicode=<span class="literal">true</span></span><br><span class="line">jdbc.user=bitbucket</span><br><span class="line">jdbc.password=bitbucket</span><br><span class="line"></span><br><span class="line"><span class="comment"># 增加以下项目</span></span><br><span class="line">plugin.auth-crowd.sso.enabled=<span class="literal">true</span></span><br></pre></td></tr></table></figure>

<h4 id="2-重启-1"><a href="#2-重启-1" class="headerlink" title="2. 重启"></a>2. 重启</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /opt/atlassian/bitbucket/7.0.0/bin</span><br><span class="line">./stop-bitbucket.sh  </span><br><span class="line">./start-bitbucket.sh  </span><br></pre></td></tr></table></figure>

<h2 id="6-验证SSO"><a href="#6-验证SSO" class="headerlink" title="6. 验证SSO"></a>6. 验证SSO</h2><ul>
<li>分别使用具有admin权限的用户和普通用户登录</li>
</ul>
<h3 id="1-测试具有admin权限的用户"><a href="#1-测试具有admin权限的用户" class="headerlink" title="1. 测试具有admin权限的用户"></a>1. 测试具有admin权限的用户</h3><ol>
<li>退出已经登录的所有账号</li>
</ol>
<p><img src="/../images/Linux/sso/image-20250722134654584.png" alt="image-20250722134654584"></p>
<ol start="2">
<li>登录具有admin权限的用户</li>
</ol>
<p><img src="/../images/Linux/sso/image-20250722134734142.png" alt="image-20250722134734142"></p>
<ol start="3">
<li>测试confluence、bitbucket</li>
</ol>
<p><img src="/../images/Linux/sso/image-20250722134814486.png" alt="image-20250722134814486"><img src="/../images/Linux/sso/image-20250722135011804.png" alt="image-20250722135011804"></p>
<p>至此已实现了基于Crowd的jira、confluence、bitbucket三平台SSO。</p>
<h2 id="问题解决"><a href="#问题解决" class="headerlink" title="问题解决"></a>问题解决</h2><p>见<a href="https://regenm.github.io/2025/07/18/jira%E3%80%81confluence%E3%80%81bitbucket%E3%80%81%E5%9F%BA%E4%BA%8Ecrowd%E5%AE%9E%E7%8E%B0sso/">jira、confluence、bitbucket、基于crowd实现sso | Regen</a></p>
]]></content>
      <categories>
        <category>软件技术</category>
      </categories>
      <tags>
        <tag>笔记</tag>
        <tag>运维</tag>
        <tag>部署</tag>
        <tag>jira</tag>
        <tag>confluence</tag>
        <tag>bitbucket</tag>
        <tag>crowd</tag>
        <tag>sso</tag>
      </tags>
  </entry>
  <entry>
    <title>python脚本制作</title>
    <url>/2023/10/04/python%E8%84%9A%E6%9C%AC%E5%88%B6%E4%BD%9C/</url>
    <content><![CDATA[<p>​	我突然打算不用知识点记录的方式记录我的学习笔记，打算以发现问题解决问题的方法记录学习过程。</p>
<h1 id="1-记录的第一个脚本。"><a href="#1-记录的第一个脚本。" class="headerlink" title="1.记录的第一个脚本。"></a>1.记录的第一个脚本。</h1><h2 id="1-问题导入"><a href="#1-问题导入" class="headerlink" title="1.问题导入"></a>1.问题导入</h2><p>​	过去我常常把我拍的照片导入桌面，p完图之后再粘贴到我的移动硬盘留底，过程虽然不长，但是我就是懒。</p>
<h2 id="2-分析"><a href="#2-分析" class="headerlink" title="2.分析"></a>2.分析</h2><p>​	我的桌面一般没有东西，所以我可以直接将整个桌面文件夹复制到我的目标目录，或者在匹配后缀位jpg或者png的文件转移到目标文件夹。</p>
<p><img src="/../images/desktop.png" alt="desktop"></p>
<h2 id="3-实现过程"><a href="#3-实现过程" class="headerlink" title="3.实现过程"></a>3.实现过程</h2><pre><code>1. 转移工作目录到桌面
1. 在目标文件夹创建文件夹
1. 复制文件到该文件夹
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"><span class="keyword">import</span> shutil</span><br><span class="line"></span><br><span class="line">fileName=<span class="string">&quot;null&quot;</span></span><br><span class="line"></span><br><span class="line">os.chdir(<span class="string">&#x27;C:/Users/Regen/Desktop&#x27;</span>)<span class="comment">#转到desktop</span></span><br><span class="line"></span><br><span class="line">desktopPath=os.getcwd()<span class="comment">#记录桌面路径</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">fileName=datetime.datetime.now().strftime(<span class="string">&quot;%Y-%m-%d&quot;</span>)<span class="comment">#以当前时间为文件夹名字</span></span><br><span class="line"></span><br><span class="line">os.chdir(<span class="string">&#x27;E:/代存外部硬盘&#x27;</span>)</span><br><span class="line">os.mkdir(fileName)<span class="comment">#创建文件夹</span></span><br><span class="line"></span><br><span class="line">fileDir=os.getcwd()</span><br><span class="line">fileDir=fileDir+<span class="string">&quot;\\&quot;</span>+fileName</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">src = desktopPath</span><br><span class="line">des = fileDir</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> file <span class="keyword">in</span> os.listdir(src):</span><br><span class="line">    <span class="comment">#遍历原文件夹中的文件</span></span><br><span class="line">    full_file_name = os.path.join(src, file)<span class="comment">#把文件的完整路径得到</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;要被复制的全文件路径全名:&quot;</span>,full_file_name)</span><br><span class="line">    <span class="keyword">if</span> os.path.isfile(full_file_name):<span class="comment">#用于判断某一对象(需提供绝对路径)是否为文件</span></span><br><span class="line">        shutil.copy(full_file_name, des)<span class="comment">#shutil.copy函数放入原文件的路径文件全名  然后放入目标文件夹</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="4-遇到的问题"><a href="#4-遇到的问题" class="headerlink" title="4.遇到的问题"></a>4.遇到的问题</h2><pre><code>1. 一开始想要直接复制整个文件夹，但是会遇到权限问题，windows的权限问题没有Linux好解决，进而转向遍历文件夹
1. 发现其实可以用windows自带的脚本语言，CMD实现（相当于Linux的shell脚本）
</code></pre>
<h2 id="5-收尾"><a href="#5-收尾" class="headerlink" title="5.收尾"></a>5.收尾</h2><p>​	很简单的脚本还写了两个小时。不过过程中又学会了一点东西。可以，好玩！</p>
<p>​	<img src="/../images/wenjianzhuanyi.PNG" alt="result"></p>
]]></content>
      <categories>
        <category>软件技术</category>
      </categories>
      <tags>
        <tag>笔记</tag>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>python画画</title>
    <url>/2023/10/06/python%E7%94%BB%E7%94%BB/</url>
    <content><![CDATA[<h2 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h2><p>​		学校在国庆节和中秋节中举办了一个编程比赛：内容是在一个小时内用编程语言画出节日符号；例如月饼和国旗之类的。假期闲来无事，于是就浅浅参加了一下。</p>
<h2 id="使用python的TURTLE库"><a href="#使用python的TURTLE库" class="headerlink" title="使用python的TURTLE库"></a>使用python的TURTLE库</h2><p>​		说要用编程画画，我立马就想到了用python ，毕竟人生苦短，我用python。其实主要还是不想用字符串来在终端输出，过于麻烦。</p>
<h2 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识<img src="https://files.realpython.com/media/Turtle_EDIT_Graph.790c213ce0ba.jpg" alt="Python Turtle Coordinates New"></h2><pre><code>        * 中心点在screen中心
        * (0,0) 即 Home
        * 默认初始化画笔向右
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>t.right(<span class="number">90</span>)   </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>t.forward(<span class="number">100</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>t.left(<span class="number">90</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>t.backward(<span class="number">100</span>)</span><br></pre></td></tr></table></figure>

<p><img src="https://files.realpython.com/media/Update_-_Moving_Turtle_VIDEO_GIF.61623cf40fed.gif" alt="Python Turtle Moving Updated"></p>
<h3 id="内置图形"><a href="#内置图形" class="headerlink" title="内置图形"></a>内置图形</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">t.circle(<span class="number">60</span>)</span><br><span class="line">t.dot(<span class="number">20</span>)</span><br></pre></td></tr></table></figure>

<h3 id="背景颜色"><a href="#背景颜色" class="headerlink" title="背景颜色"></a>背景颜色</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">turtle.bgcolor(<span class="string">&quot;blue&quot;</span>)</span><br></pre></td></tr></table></figure>

<h3 id="画笔的粗细"><a href="#画笔的粗细" class="headerlink" title="画笔的粗细"></a>画笔的粗细</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>t.pensize(<span class="number">5</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>t.forward(<span class="number">100</span>)</span><br></pre></td></tr></table></figure>

<h3 id="填充颜色"><a href="#填充颜色" class="headerlink" title="填充颜色"></a>填充颜色</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>t.begin_fill()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>t.fd(<span class="number">100</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>t.lt(<span class="number">120</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>t.fd(<span class="number">100</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>t.lt(<span class="number">120</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>t.fd(<span class="number">100</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>t.end_fill()</span><br></pre></td></tr></table></figure>

<p><img src="https://files.realpython.com/media/Turtle_Begin_End_Fill_GIF.849f73374a22.gif" alt="Python Turtle Begin Fill End Fill New"></p>
<h3 id="绘制速度"><a href="#绘制速度" class="headerlink" title="绘制速度"></a>绘制速度</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>t.speed(<span class="number">1</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>t.forward(<span class="number">100</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>t.speed(<span class="number">10</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>t.forward(<span class="number">100</span>)</span><br></pre></td></tr></table></figure>

<h3 id="撤回"><a href="#撤回" class="headerlink" title="撤回"></a>撤回</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; t.undo()</span><br></pre></td></tr></table></figure>

<h3 id="克隆"><a href="#克隆" class="headerlink" title="克隆"></a>克隆</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>c = t.clone()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>t.color(<span class="string">&quot;magenta&quot;</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>c.color(<span class="string">&quot;red&quot;</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>t.circle(<span class="number">100</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>c.circle(<span class="number">60</span>)</span><br></pre></td></tr></table></figure>

<h2 id="以上就是python-Turtle模组的基本语法"><a href="#以上就是python-Turtle模组的基本语法" class="headerlink" title="以上就是python Turtle模组的基本语法"></a>以上就是python Turtle模组的基本语法</h2><p>​	但是光会这些基本知识也不行，你还得有亿点点艺术细胞。毕竟它作为画画工具有一点简朴了。</p>
]]></content>
      <categories>
        <category>软件技术</category>
      </categories>
      <tags>
        <tag>笔记</tag>
        <tag>python</tag>
        <tag>turtle</tag>
      </tags>
  </entry>
  <entry>
    <title>leetcode刷题笔记</title>
    <url>/2023/09/21/leetcode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h1 id="1-两数之和。"><a href="#1-两数之和。" class="headerlink" title="1.两数之和。"></a>1.两数之和。</h1><p>获得技能：哈希表，c++容器MAP。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">twoSum</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> target)</span> </span>&#123;</span><br><span class="line">        map&lt;<span class="type">int</span>,<span class="type">int</span>&gt; a;<span class="comment">//提供一对一的hash</span></span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">b</span><span class="params">(<span class="number">2</span>,<span class="number">-1</span>)</span></span>;<span class="comment">//用来承载结果，初始化一个大小为2，值为-1的容器b</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;nums.<span class="built_in">size</span>();i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(a.<span class="built_in">count</span>(target-nums[i])&gt;<span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                b[<span class="number">0</span>]=a[target-nums[i]];</span><br><span class="line">                b[<span class="number">1</span>]=i;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            a[nums[i]]=i;<span class="comment">//反过来放入map中，用来获取结果下标</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> b;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>



<h1 id="2-链表逆转。（非-力扣-）"><a href="#2-链表逆转。（非-力扣-）" class="headerlink" title="2.链表逆转。（非 力扣 ）"></a>2.链表逆转。（非 力扣 ）</h1><h3 id="1-迭代法"><a href="#1-迭代法" class="headerlink" title="1.迭代法"></a>1.迭代法</h3><ul>
<li>需要保存：<ul>
<li>1.当前节点上一节点</li>
<li>2.当前节点下一节点</li>
</ul>
</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">List <span class="title function_">Reverse</span><span class="params">( List L )</span></span><br><span class="line">&#123;    </span><br><span class="line">    List first=<span class="literal">NULL</span>;</span><br><span class="line">    List tmp;</span><br><span class="line">    <span class="keyword">while</span>(L!=<span class="literal">NULL</span>)      <span class="comment">//	L为当前节点</span></span><br><span class="line">    &#123;</span><br><span class="line">        tmp=L-&gt;Next;    <span class="comment">//   tmp保存下一节点</span></span><br><span class="line">        L-&gt;Next=first;    <span class="comment">//   修改指向</span></span><br><span class="line">        first=L;      <span class="comment">//	保存当前节点</span></span><br><span class="line">        L=tmp;        <span class="comment">//	转到下一个节点</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> first;      <span class="comment">//  返回头结点（不是L,L循环结束后为空）</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="2-栈"><a href="#2-栈" class="headerlink" title="2.栈"></a>2.栈</h3><ul>
<li>两次循环即可</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">translateLinklist</span><span class="params">(Linklist&amp; L)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  stack&lt;<span class="type">int</span>&gt; stk;<span class="comment">//定义栈</span></span><br><span class="line">  </span><br><span class="line">  Linklist p = L-&gt;next;</span><br><span class="line">  <span class="keyword">while</span> (p)  <span class="comment">//依次读取栈的内容，也就是第一步</span></span><br><span class="line">  &#123;</span><br><span class="line">    stk.<span class="built_in">push</span>(p-&gt;data);</span><br><span class="line">    p = p-&gt;next;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  p = L-&gt;next;</span><br><span class="line">  <span class="keyword">while</span> (p)   <span class="comment">//依次出栈，更换链表中的数据，也就是第二步</span></span><br><span class="line">  &#123;</span><br><span class="line">    p-&gt;data = stk.<span class="built_in">top</span>();</span><br><span class="line">    stk.<span class="built_in">pop</span>();</span><br><span class="line">    p = p-&gt;next;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h1 id="3-无重复字符的最长子串。"><a href="#3-无重复字符的最长子串。" class="headerlink" title="3.无重复字符的最长子串。"></a>3.无重复字符的最长子串。</h1><p>获得技能：队列，滑动窗口</p>
<p>​	</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">lengthOfLongestSubstring</span><span class="params">(string s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(s.<span class="built_in">size</span>() == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        </span><br><span class="line">        unordered_set&lt;<span class="type">char</span>&gt; lookup; <span class="comment">//队列模板</span></span><br><span class="line">        </span><br><span class="line">        <span class="type">int</span> maxStr = <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> left = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; s.<span class="built_in">size</span>(); i++)&#123;</span><br><span class="line">            <span class="keyword">while</span> (lookup.<span class="built_in">find</span>(s[i]) != lookup.<span class="built_in">end</span>())&#123;</span><br><span class="line">                lookup.<span class="built_in">erase</span>(s[left]);</span><br><span class="line">                left ++;</span><br><span class="line">            &#125;</span><br><span class="line">            maxStr = <span class="built_in">max</span>(maxStr,i-left<span class="number">+1</span>);</span><br><span class="line">            lookup.<span class="built_in">insert</span>(s[i]);</span><br><span class="line">    &#125;</span><br><span class="line">        <span class="keyword">return</span> maxStr;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h1 id="4-寻找两个正序数组的中位数。"><a href="#4-寻找两个正序数组的中位数。" class="headerlink" title="4.寻找两个正序数组的中位数。"></a>4.寻找两个正序数组的中位数。</h1><p>​	获得技能：二分查找。</p>
<p>​	</p>
<p>​	由于数列是有序的，其实我们完全可以一半儿一半儿的排除。假设我们要找第 <code>k</code> 个数，我们可以每次循环排除掉 <code>k/2</code> 个数。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">double</span> <span class="title function_">findMedianSortedArrays</span><span class="params">(<span class="type">int</span>[] nums1, <span class="type">int</span>[] nums2)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> nums1.length;</span><br><span class="line">        <span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> nums2.length;</span><br><span class="line">        <span class="comment">//因为数组是从索引0开始的，因此我们在这里必须+1，即索引(k+1)的数，才是第k个数。</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> (n + m + <span class="number">1</span>) / <span class="number">2</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">right</span> <span class="operator">=</span> (n + m + <span class="number">2</span>) / <span class="number">2</span>;</span><br><span class="line">        <span class="comment">//将偶数和奇数的情况合并，如果是奇数，会求两次同样的 k</span></span><br><span class="line">        <span class="keyword">return</span> (getKth(nums1, <span class="number">0</span>, n - <span class="number">1</span>, nums2, <span class="number">0</span>, m - <span class="number">1</span>, left) + getKth(nums1, <span class="number">0</span>, n - <span class="number">1</span>, nums2, <span class="number">0</span>, m - <span class="number">1</span>, right)) * <span class="number">0.5</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="title function_">getKth</span><span class="params">(<span class="type">int</span>[] nums1, <span class="type">int</span> start1, <span class="type">int</span> end1, <span class="type">int</span>[] nums2, <span class="type">int</span> start2, <span class="type">int</span> end2, <span class="type">int</span> k)</span> &#123;</span><br><span class="line">        <span class="comment">//因为索引和算数不同6-0=6，但是是有7个数的，因为end初始就是数组长度-1构成的。</span></span><br><span class="line">        <span class="comment">//最后len代表当前数组(也可能是经过递归排除后的数组)，符合当前条件的元素的个数</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">len1</span> <span class="operator">=</span> end1 - start1 + <span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">len2</span> <span class="operator">=</span> end2 - start2 + <span class="number">1</span>;</span><br><span class="line">        <span class="comment">//让 len1 的长度小于 len2，这样就能保证如果有数组空了，一定是 len1</span></span><br><span class="line">        <span class="comment">//就是如果len1长度小于len2，把getKth()中参数互换位置，即原来的len2就变成了len1，即len1，永远比len2小</span></span><br><span class="line">        <span class="keyword">if</span> (len1 &gt; len2) <span class="keyword">return</span> getKth(nums2, start2, end2, nums1, start1, end1, k);</span><br><span class="line">        <span class="comment">//如果一个数组中没有了元素，那么即从剩余数组nums2的其实start2开始加k再-1.</span></span><br><span class="line">        <span class="comment">//因为k代表个数，而不是索引，那么从nums2后再找k个数，那个就是start2 + k-1索引处就行了。因为还包含nums2[start2]也是一个数。因为它在上次迭代时并没有被排除</span></span><br><span class="line">        <span class="keyword">if</span> (len1 == <span class="number">0</span>) <span class="keyword">return</span> nums2[start2 + k - <span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">        <span class="comment">//如果k=1，表明最接近中位数了，即两个数组中start索引处，谁的值小，中位数就是谁(start索引之前表示经过迭代已经被排出的不合格的元素，即数组没被抛弃的逻辑上的范围是nums[start]---&gt;nums[end])。</span></span><br><span class="line">        <span class="keyword">if</span> (k == <span class="number">1</span>) <span class="keyword">return</span> Math.min(nums1[start1], nums2[start2]);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//为了防止数组长度小于 k/2,每次比较都会从当前数组所生长度和k/2作比较，取其中的小的(如果取大的，数组就会越界)</span></span><br><span class="line">        <span class="comment">//然后素组如果len1小于k / 2，表示数组经过下一次遍历就会到末尾，然后后面就会在那个剩余的数组中寻找中位数</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> start1 + Math.min(len1, k / <span class="number">2</span>) - <span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> start2 + Math.min(len2, k / <span class="number">2</span>) - <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//如果nums1[i] &gt; nums2[j]，表示nums2数组中包含j索引，之前的元素，逻辑上全部淘汰，即下次从J+1开始。</span></span><br><span class="line">        <span class="comment">//而k则变为k - (j - start2 + 1)，即减去逻辑上排出的元素的个数(要加1，因为索引相减，相对于实际排除的时要少一个的)</span></span><br><span class="line">        <span class="keyword">if</span> (nums1[i] &gt; nums2[j]) &#123;</span><br><span class="line">            <span class="keyword">return</span> getKth(nums1, start1, end1, nums2, j + <span class="number">1</span>, end2, k - (j - start2 + <span class="number">1</span>));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> getKth(nums1, i + <span class="number">1</span>, end1, nums2, start2, end2, k - (i - start1 + <span class="number">1</span>));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>



<h1 id="5-最长回文子串"><a href="#5-最长回文子串" class="headerlink" title="5.最长回文子串"></a>5.最长回文子串</h1><p>​	给你一个字符串 <code>s</code>，找到 <code>s</code> 中最长的回文子串。如果字符串的反序与原始字符串相同，则该字符串称为回文字符串。</p>
<pre><code>* 中心扩展
</code></pre>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">string <span class="title">longestPalindrome</span><span class="params">(string s)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> len=s.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">if</span>(len==<span class="number">0</span>||len==<span class="number">1</span>)</span><br><span class="line">            <span class="keyword">return</span> s;</span><br><span class="line">        <span class="type">int</span> start=<span class="number">0</span>;<span class="comment">//记录回文子串起始位置</span></span><br><span class="line">        <span class="type">int</span> end=<span class="number">0</span>;<span class="comment">//记录回文子串终止位置</span></span><br><span class="line">        <span class="type">int</span> mlen=<span class="number">0</span>;<span class="comment">//记录最大回文子串的长度</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;len;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> len1=<span class="built_in">expendaroundcenter</span>(s,i,i);<span class="comment">//一个元素为中心</span></span><br><span class="line">            <span class="type">int</span> len2=<span class="built_in">expendaroundcenter</span>(s,i,i<span class="number">+1</span>);<span class="comment">//两个元素为中心</span></span><br><span class="line">            mlen=<span class="built_in">max</span>(<span class="built_in">max</span>(len1,len2),mlen);</span><br><span class="line">            <span class="keyword">if</span>(mlen&gt;end-start<span class="number">+1</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                start=i-(mlen<span class="number">-1</span>)/<span class="number">2</span>;</span><br><span class="line">                end=i+mlen/<span class="number">2</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> s.<span class="built_in">substr</span>(start,mlen);</span><br><span class="line">        <span class="comment">//该函数的意思是获取从start开始长度为mlen长度的字符串</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">expendaroundcenter</span><span class="params">(string s,<span class="type">int</span> left,<span class="type">int</span> right)</span></span></span><br><span class="line"><span class="function">    <span class="comment">//计算以left和right为中心的回文串长度</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="type">int</span> L=left;</span><br><span class="line">        <span class="type">int</span> R=right;</span><br><span class="line">        <span class="keyword">while</span>(L&gt;=<span class="number">0</span> &amp;&amp; R&lt;s.<span class="built_in">length</span>() &amp;&amp; s[R]==s[L])</span><br><span class="line">        &#123;</span><br><span class="line">            L--;</span><br><span class="line">            R++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> R-L<span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<pre><code>* 动态规划
</code></pre>
<p>​		</p>
<p>​			思想：如果S[ i , j ]是回文串，那么S[ i-1 , j -1]也是回文串 ， 假设</p>
<p><img src="/images/leecode4.PNG" alt="formula"></p>
<p>​			需要注意 : <strong>i&gt;j</strong>的情况</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> String <span class="title function_">longestPalindrome</span><span class="params">(String s)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">length</span> <span class="operator">=</span> s.length();</span><br><span class="line">    <span class="type">boolean</span>[][] P = <span class="keyword">new</span> <span class="title class_">boolean</span>[length][length];<span class="comment">//公式</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">maxLen</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="type">String</span> <span class="variable">maxPal</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> <span class="number">1</span>; len &lt;= length; len++) <span class="comment">//遍历所有的长度</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">start</span> <span class="operator">=</span> <span class="number">0</span>; start &lt; length; start++) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">end</span> <span class="operator">=</span> start + len - <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span> (end &gt;= length) <span class="comment">//下标已经越界，结束本次循环</span></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            P[start][end] = (len == <span class="number">1</span> || len == <span class="number">2</span> || P[start + <span class="number">1</span>][end - <span class="number">1</span>]) &amp;&amp; s.charAt(start) == s.charAt(end); <span class="comment">//长度为 1 和 2 的单独判断下</span></span><br><span class="line">            <span class="keyword">if</span> (P[start][end] &amp;&amp; len &gt; maxLen) &#123;</span><br><span class="line">                maxPal = s.substring(start, end + <span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">return</span> maxPal;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="6-约瑟夫环问题"><a href="#6-约瑟夫环问题" class="headerlink" title="6.约瑟夫环问题"></a>6.约瑟夫环问题</h1><ol>
<li>直接用数组实现</li>
</ol>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line">using namespace <span class="built_in">std</span>;</span><br><span class="line"><span class="comment">//用数组实现约瑟夫环问题</span></span><br><span class="line"><span class="type">int</span> a[<span class="number">110</span>]=&#123;<span class="number">0</span>&#125;;   <span class="comment">//元素值为0表示未出局 </span></span><br><span class="line"><span class="comment">//i既代表数组的下标，也代表每个人的编号</span></span><br><span class="line"><span class="comment">//k是用来计数的，一旦k的值达到m，代表此人需要出局，并且k需要重新计数，这样才能够找出所有需要出局的人</span></span><br><span class="line"><span class="comment">//数组的0代表未出局的人，数组非0代表出局的人，未出局的人需要报数，出局的人不需要报数 </span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> N,M;</span><br><span class="line">  <span class="type">int</span> cnt=<span class="number">0</span>,i=<span class="number">0</span>,k=<span class="number">0</span>;  <span class="comment">//cnt表示目前出局的人数 </span></span><br><span class="line">  <span class="built_in">cin</span>&gt;&gt;N&gt;&gt;M;  <span class="comment">//表示总共有n人，数到数字m时出局 </span></span><br><span class="line">  <span class="keyword">while</span>(cnt!=N) <span class="comment">//因为要求N个人的出局顺序，因此当cnt（用来统计已经出局的人）未达到n时，需要循环不断报数 </span></span><br><span class="line">  &#123;</span><br><span class="line">    i++;   <span class="comment">//i是每个人的编号 </span></span><br><span class="line">    <span class="keyword">if</span>(i&gt;N) i=<span class="number">1</span>;  <span class="comment">//这里需要特别注意：i的值是不断累加的，一旦发现i的值&gt;N，那么i需要重新从第1个人开始</span></span><br><span class="line">                  <span class="comment">//数组要从第一个元素重新开始一个一个往后判断 </span></span><br><span class="line">    <span class="keyword">if</span>(a[i]==<span class="number">0</span>)   <span class="comment">//只有元素值为0的人 才需要报数，元素值为非0的代表已经出局了，不用报数 </span></span><br><span class="line">    &#123;</span><br><span class="line">      k++;</span><br><span class="line">      <span class="keyword">if</span>(k==M)     <span class="comment">//代表已经某个人已经报了M这个数，需要出局 </span></span><br><span class="line">      &#123;</span><br><span class="line">        a[i]=<span class="number">1</span>;  <span class="comment">//编号为i的这个人出局 </span></span><br><span class="line">        cnt++;   <span class="comment">//出局的人数+1 </span></span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;i&lt;&lt;<span class="string">&quot; &quot;</span>;  <span class="comment">//输出出局的人的编号 </span></span><br><span class="line">        k=<span class="number">0</span>;   <span class="comment">//清空k，让下一个人重新从1开始报数   </span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>

<ol start="2">
<li>循环链表</li>
</ol>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line">using namespace <span class="built_in">std</span>;</span><br><span class="line"><span class="comment">//用链表实现约瑟夫环问题 （循环链表） </span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">node</span>  //<span class="title">typedef</span>用来重命名<span class="keyword">struct</span> <span class="title">node</span>这种数据类型，将其命名为<span class="title">Node</span> </span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  <span class="type">int</span> data;</span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">node</span>* <span class="title">next</span>;</span></span><br><span class="line">&#125;Node;</span><br><span class="line"> </span><br><span class="line"><span class="type">void</span> <span class="title function_">ysflb</span><span class="params">(<span class="type">int</span> N,<span class="type">int</span> M)</span>  <span class="comment">//总共有N个人，报到数字为M的人出局 </span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="comment">//初始化循环链表</span></span><br><span class="line">  Node *head = <span class="literal">NULL</span>,*p=<span class="literal">NULL</span>,*r=<span class="literal">NULL</span>;   <span class="comment">//head为头指针，指向链表的第一个结点，一开始赋值为NULL,代表不指向任何结点 </span></span><br><span class="line">  head = (Node*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Node));  <span class="comment">//让head指向一个实际的空间</span></span><br><span class="line">  <span class="keyword">if</span>(<span class="literal">NULL</span>==head)  <span class="comment">//内存空间可能会申请失败,大多数情况不会申请失败 </span></span><br><span class="line">  &#123;</span><br><span class="line">      <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;Memory Failed!&quot;</span>;</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">  &#125; </span><br><span class="line">  head-&gt;data=<span class="number">1</span>;       <span class="comment">//从1开始编号 </span></span><br><span class="line">  head-&gt;next=<span class="literal">NULL</span>;    <span class="comment">//一开始整个链表只有一个Node(结点)，这个Node有两个域，分别是data和next</span></span><br><span class="line">                      <span class="comment">//data从1开始，next指向NULL，总共需要N个结点，现在创建了一个，还需要N-1个 </span></span><br><span class="line">    p=head;             <span class="comment">//head要保持不能改变，才能够找到链表的起始位置，一开始p也指向第一个结点</span></span><br><span class="line">                      <span class="comment">//p等一下会被使用，用它可以便于创建剩下的N-1个结点 </span></span><br><span class="line">             </span><br><span class="line">  <span class="comment">//尾插法创建链表,已经有一个1号结点了，还需要创建剩下的n-1个结点 </span></span><br><span class="line">  <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">2</span>;i&lt;=N;i++)</span><br><span class="line">  &#123;</span><br><span class="line">    r=(Node*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Node)); </span><br><span class="line">    r-&gt;data=i;</span><br><span class="line">    r-&gt;next=<span class="literal">NULL</span>;</span><br><span class="line">    <span class="comment">//插入结点 </span></span><br><span class="line">    p-&gt;next=r;</span><br><span class="line">    p=r;</span><br><span class="line">    </span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//创建循环链表</span></span><br><span class="line">  p-&gt;next=head;   <span class="comment">//最后一个结点的next指向头结点</span></span><br><span class="line">  p=head;         <span class="comment">//为后续方便，将p指向头结点</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment">//约瑟夫环的模拟</span></span><br><span class="line">  <span class="keyword">while</span>(p-&gt;next!= p)  <span class="comment">//如果p的next=p，说明目前只有一个元素 </span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;M;i++)  <span class="comment">//报到数字为M的时候出局 </span></span><br><span class="line">    &#123;</span><br><span class="line">        r=p;   <span class="comment">//保留出局的前一个结点 </span></span><br><span class="line">        p=p-&gt;next; <span class="comment">//p指向的是要出局的这个结点，需要保留前一个结点</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 输出</span></span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;p-&gt;data&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">    r-&gt;next=p-&gt;next;    <span class="comment">//删除p的目的，此时p指向哪里？  ：  </span></span><br><span class="line">    p=p-&gt;next;  <span class="comment">//更新p重新进行报数 </span></span><br><span class="line">  &#125; </span><br><span class="line">  <span class="built_in">cout</span>&lt;&lt;p-&gt;data; </span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  ysflb(<span class="number">10</span>,<span class="number">3</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>

<h1 id="7-列车调度问题"><a href="#7-列车调度问题" class="headerlink" title="7.列车调度问题"></a>7.列车调度问题</h1><p>​	建立一个数组，当输入一个列车序号时开辟轨道，再输入一个列车序号，在所有轨道中<strong>查找比列车序号大的列车序号</strong>，替换它，如果没有比它大的，则另开辟一个轨道。用top记录开辟轨道的数量。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> a[<span class="number">1000000</span>];</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> n;</span><br><span class="line">  <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line">  <span class="type">int</span> i,m,j,top=<span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;m);</span><br><span class="line">    <span class="keyword">if</span>(top==<span class="number">0</span>||a[top<span class="number">-1</span>]&lt;m)&#123;  <span class="comment">//当top==0时，开辟轨道，当输入的列车序号比最上的轨道列车序号还大时，开辟轨道</span></span><br><span class="line">      a[top++]=m;</span><br><span class="line">    &#125;<span class="keyword">else</span>                   <span class="comment">//二分查找</span></span><br><span class="line">    &#123; </span><br><span class="line">      <span class="type">int</span> high=top<span class="number">-1</span>,low=<span class="number">0</span>,mid;</span><br><span class="line">      <span class="keyword">while</span>(low&lt;=high)</span><br><span class="line">      &#123;</span><br><span class="line">        mid=(low+high)/<span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span>(a[mid]&gt;m)</span><br><span class="line">        &#123;</span><br><span class="line">          high=mid<span class="number">-1</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">          low=mid+<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;<span class="comment">//a[mid]=m;</span></span><br><span class="line">      a[low]=m;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;<span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,top);            <span class="comment">//轨道数</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>





]]></content>
      <categories>
        <category>软件技术</category>
      </categories>
      <tags>
        <tag>笔记</tag>
        <tag>Data-Structure-and-Algorithm</tag>
      </tags>
  </entry>
  <entry>
    <title>vim 学习笔记</title>
    <url>/2023/09/16/vim-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h1 id="VIM普通模式"><a href="#VIM普通模式" class="headerlink" title="* VIM普通模式"></a>* VIM普通模式</h1><p>​	① 移动光标 ② 复制 粘贴 ③ 剪切 粘贴 删除 ④ 撤销与恢复</p>
<h2 id="移动光标"><a href="#移动光标" class="headerlink" title="移动光标"></a>移动光标</h2><p><strong>光标上下左右移动</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">h       #左移</span><br><span class="line">j      #下移</span><br><span class="line">k      #上移</span><br><span class="line">l      #右移</span><br></pre></td></tr></table></figure>

<p><strong>移动多行</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">4h       #左移4格</span><br><span class="line">4j      #上移4行</span><br><span class="line">4k      #下移4行</span><br><span class="line">4l      #右移4格</span><br></pre></td></tr></table></figure>

<p><strong>跳转到单词末尾或者开头(下一个空格前)</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">w      # word</span><br><span class="line">b      # begining</span><br></pre></td></tr></table></figure>

<p><strong>跳转到文档开始或末尾</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">gg        # 跳转到文档开头</span><br><span class="line">G  (shift + g)   # 跳转到文档末尾</span><br></pre></td></tr></table></figure>

<p><strong>上下翻页</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ctrl + u  #向上翻页</span><br><span class="line">ctrl + d  #向下翻页</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>快速到最近的某个字母</strong>（区分大小写）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">fu      #到最近1的u</span><br><span class="line">fc      #到最近的c</span><br><span class="line">fK      #到最近的K</span><br></pre></td></tr></table></figure>



<hr>
<h2 id="复制粘贴"><a href="#复制粘贴" class="headerlink" title="复制粘贴"></a>复制粘贴</h2><h3 id="复制"><a href="#复制" class="headerlink" title="复制"></a>复制</h3><p>​	<strong>y</strong></p>
<ul>
<li>复制单词</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yaw      # y(yank)  aw(a word)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>复制n行</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yy      # 复制本行</span><br><span class="line"></span><br><span class="line">nyy      # 复制n行 包括当前行</span><br><span class="line"></span><br><span class="line">y4j      # 向下复制5行 包括当前行</span><br><span class="line">y4k      # 向上复制5行 包括当前行</span><br><span class="line">y4h      # 向左复制4个字符 不包括光标在闪烁那个字符</span><br><span class="line">y4l      # 向右复制4个字符 包括光标在闪烁那个字符</span><br><span class="line"></span><br></pre></td></tr></table></figure>





<h3 id="粘贴"><a href="#粘贴" class="headerlink" title="粘贴"></a>粘贴</h3><p>​	<strong>p</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">p      # 小写p,复制到光标后的一行</span><br></pre></td></tr></table></figure>

<h2 id="剪切删除"><a href="#剪切删除" class="headerlink" title="剪切删除"></a>剪切删除</h2><ul>
<li><p><strong>d</strong>命令其实可以看成剪切，不复制出来就变成<strong>删除</strong>了。</p>
</li>
<li><p>删除行</p>
</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">dd      # 删除光标所在行</span><br><span class="line">ndd      # 删除n行 包括当前行</span><br><span class="line"></span><br><span class="line">d4j      # 向下删除5行 包括当前行</span><br><span class="line">d4k      # 向上删除5行 包括当前行</span><br><span class="line">d4h      # 向左删除4个字符 不包括光标在闪烁那个字符</span><br><span class="line">d4l      # 向右删除4个字符 包括光标在闪烁那个字符</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>删除到本行末尾</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">D</span><br></pre></td></tr></table></figure>

<h2 id="替换"><a href="#替换" class="headerlink" title="替换"></a>替换</h2><p>​	<strong>c</strong></p>
<ul>
<li>替换单词</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">caw     # change a word</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>替换行</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cc      # 删除行，并且进入编辑模式</span><br><span class="line">c4j      # 删除下4行+本行，并且进入编辑模式</span><br></pre></td></tr></table></figure>



<p>* </p>
<h2 id="撤销恢复"><a href="#撤销恢复" class="headerlink" title="撤销恢复"></a>撤销恢复</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">u       # (undo)</span><br></pre></td></tr></table></figure>

<h2 id="文件操作"><a href="#文件操作" class="headerlink" title="文件操作"></a>文件操作</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">:wq      # 保存并退出</span><br></pre></td></tr></table></figure>

<h1 id="VIM-可视化模式（VISUAL）"><a href="#VIM-可视化模式（VISUAL）" class="headerlink" title="* VIM 可视化模式（VISUAL）"></a>* VIM 可视化模式（VISUAL）</h1><p>​	<strong>v</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">v      # 进入可视化模式</span><br></pre></td></tr></table></figure>

<p>​	进入可视化模式后移动光标即可选中该部分内容进行操作，例如：</p>
<ul>
<li>d				# 删除</li>
<li>y		        # 复制 </li>
<li>c                # 替换</li>
</ul>
<h1 id="客制化"><a href="#客制化" class="headerlink" title="客制化"></a>客制化</h1><ul>
<li>NERDtree</li>
</ul>
<blockquote>
<p>文件夹，文件，管理（树形结构）</p>
</blockquote>
<p>​	</p>
<p><strong>vim学习网站</strong></p>
<p>​	<a href="https://vim-adventures.com/">VIM GAME</a></p>
<hr>
<h1 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h1><h2 id="🔍-查找与跳转类"><a href="#🔍-查找与跳转类" class="headerlink" title="🔍 查找与跳转类"></a>🔍 查找与跳转类</h2><table>
<thead>
<tr>
<th>操作</th>
<th>命令</th>
<th>功能</th>
</tr>
</thead>
<tbody><tr>
<td>向下查找</td>
<td><code>/关键词</code></td>
<td>向下搜索</td>
</tr>
<tr>
<td>向上查找</td>
<td><code>?关键词</code></td>
<td>向上搜索</td>
</tr>
<tr>
<td>查找下一个</td>
<td><code>n</code></td>
<td>重复上一次查找方向</td>
</tr>
<tr>
<td>查找上一个</td>
<td><code>N</code></td>
<td>与 <code>n</code> 相反方向查找</td>
</tr>
<tr>
<td>精准跳行</td>
<td><code>:数字</code></td>
<td>跳转到某行（如 <code>:25</code> 到第25行）</td>
</tr>
<tr>
<td>跳转当前函数开始</td>
<td><code>[[</code></td>
<td>到上一个函数定义</td>
</tr>
<tr>
<td>跳转当前函数结束</td>
<td><code>]]</code></td>
<td>到下一个函数定义</td>
</tr>
</tbody></table>
<hr>
<h2 id="✂️-复制-粘贴-删除"><a href="#✂️-复制-粘贴-删除" class="headerlink" title="✂️ 复制&#x2F;粘贴&#x2F;删除"></a>✂️ 复制&#x2F;粘贴&#x2F;删除</h2><table>
<thead>
<tr>
<th>操作</th>
<th>命令</th>
<th>功能</th>
</tr>
</thead>
<tbody><tr>
<td>复制整行</td>
<td><code>yy</code></td>
<td>Yank（复制）一整行</td>
</tr>
<tr>
<td>复制多行</td>
<td><code>3yy</code></td>
<td>复制 3 行</td>
</tr>
<tr>
<td>粘贴</td>
<td><code>p</code></td>
<td>粘贴到当前行&#x2F;位置后</td>
</tr>
<tr>
<td>粘贴到前面</td>
<td><code>P</code></td>
<td>粘贴到当前行&#x2F;位置前</td>
</tr>
<tr>
<td>删除当前行</td>
<td><code>dd</code></td>
<td>删除整行（并放入剪贴板）</td>
</tr>
<tr>
<td>删除多行</td>
<td><code>3dd</code></td>
<td>删除 3 行</td>
</tr>
</tbody></table>
<hr>
<h2 id="🖊-编辑文本"><a href="#🖊-编辑文本" class="headerlink" title="🖊 编辑文本"></a>🖊 编辑文本</h2><table>
<thead>
<tr>
<th>操作</th>
<th>命令</th>
<th>功能</th>
</tr>
</thead>
<tbody><tr>
<td>进入插入模式</td>
<td><code>i</code></td>
<td>当前光标前插入</td>
</tr>
<tr>
<td>行首插入</td>
<td><code>I</code></td>
<td>当前行行首插入</td>
</tr>
<tr>
<td>行末插入</td>
<td><code>A</code></td>
<td>当前行行末插入</td>
</tr>
<tr>
<td>开新行</td>
<td><code>o</code></td>
<td>下一行插入新行</td>
</tr>
<tr>
<td>上一行插入</td>
<td><code>O</code></td>
<td>上一行插入新行</td>
</tr>
<tr>
<td>撤销操作</td>
<td><code>u</code></td>
<td>撤销</td>
</tr>
<tr>
<td>重做操作</td>
<td><code>Ctrl + r</code></td>
<td>重做</td>
</tr>
</tbody></table>
<hr>
<h2 id="⏬-移动光标（导航）"><a href="#⏬-移动光标（导航）" class="headerlink" title="⏬ 移动光标（导航）"></a>⏬ 移动光标（导航）</h2><table>
<thead>
<tr>
<th>操作</th>
<th>命令</th>
<th>功能</th>
</tr>
</thead>
<tbody><tr>
<td>移动到行首</td>
<td><code>0</code></td>
<td>数字零，跳转行首</td>
</tr>
<tr>
<td>移动到行尾</td>
<td><code>$</code></td>
<td>跳转行尾</td>
</tr>
<tr>
<td>下一个单词</td>
<td><code>w</code></td>
<td>移动到下一个词首</td>
</tr>
<tr>
<td>上一个单词</td>
<td><code>b</code></td>
<td>移动到上一个词首</td>
</tr>
<tr>
<td>向后跳一个词尾</td>
<td><code>e</code></td>
<td>跳到词尾</td>
</tr>
<tr>
<td>跳转匹配括号</td>
<td><code>%</code></td>
<td>例如从 <code>(</code> 跳到 <code>)</code></td>
</tr>
</tbody></table>
<hr>
<h2 id="🔄-替换与格式"><a href="#🔄-替换与格式" class="headerlink" title="🔄 替换与格式"></a>🔄 替换与格式</h2><table>
<thead>
<tr>
<th>操作</th>
<th>命令</th>
<th>功能</th>
</tr>
</thead>
<tbody><tr>
<td>替换字符</td>
<td><code>r&lt;字符&gt;</code></td>
<td>替换当前字符为新字符</td>
</tr>
<tr>
<td>替换整行</td>
<td><code>cc</code></td>
<td>删除本行并进入插入模式</td>
</tr>
<tr>
<td>修改当前单词</td>
<td><code>cw</code></td>
<td>删除单词并插入新内容</td>
</tr>
<tr>
<td>缩进</td>
<td><code>&gt;&gt;</code> &#x2F; <code>&lt;&lt;</code></td>
<td>增加 &#x2F; 减少缩进</td>
</tr>
<tr>
<td>自动缩进格式化</td>
<td><code>gg=G</code></td>
<td>整个文件格式化缩进</td>
</tr>
</tbody></table>
<hr>
<h2 id="🗂-多文件-多窗口"><a href="#🗂-多文件-多窗口" class="headerlink" title="🗂 多文件 &#x2F; 多窗口"></a>🗂 多文件 &#x2F; 多窗口</h2><table>
<thead>
<tr>
<th>操作</th>
<th>命令</th>
<th>功能</th>
</tr>
</thead>
<tbody><tr>
<td>打开文件</td>
<td><code>:e 文件名</code></td>
<td>打开另一个文件</td>
</tr>
<tr>
<td>保存文件</td>
<td><code>:w</code></td>
<td>写入文件</td>
</tr>
<tr>
<td>保存退出</td>
<td><code>:wq</code> 或 <code>ZZ</code></td>
<td>保存并退出</td>
</tr>
<tr>
<td>不保存退出</td>
<td><code>:q!</code></td>
<td>强制退出</td>
</tr>
<tr>
<td>分屏</td>
<td><code>:vsp 文件名</code></td>
<td>垂直分屏打开文件</td>
</tr>
<tr>
<td>窗口切换</td>
<td><code>Ctrl + w + h/j/k/l</code></td>
<td>切换到左&#x2F;下&#x2F;上&#x2F;右窗口</td>
</tr>
</tbody></table>
<hr>
<h2 id="🧠-Bonus-技巧"><a href="#🧠-Bonus-技巧" class="headerlink" title="🧠 Bonus 技巧"></a>🧠 Bonus 技巧</h2><table>
<thead>
<tr>
<th>操作</th>
<th>命令</th>
<th>功能</th>
</tr>
</thead>
<tbody><tr>
<td>查看文件编码</td>
<td><code>:set fileencoding?</code></td>
<td></td>
</tr>
<tr>
<td>设置行号</td>
<td><code>:set number</code></td>
<td></td>
</tr>
<tr>
<td>取消行号</td>
<td><code>:set nonumber</code></td>
<td></td>
</tr>
<tr>
<td>语法高亮</td>
<td><code>:syntax on</code></td>
<td></td>
</tr>
<tr>
<td>显示不可见字符</td>
<td><code>:set list</code></td>
<td></td>
</tr>
</tbody></table>
<hr>
<p>是否要我给你一张快捷键总结图？或者针对某类操作（比如查找替换、代码缩进）出个练习小册？</p>
]]></content>
      <categories>
        <category>软件技术</category>
      </categories>
      <tags>
        <tag>笔记</tag>
        <tag>vim</tag>
      </tags>
  </entry>
  <entry>
    <title>vmWare安装龙蜥Linux-minimal</title>
    <url>/2025/06/26/vmWare%E5%AE%89%E8%A3%85%E9%BE%99%E8%9C%A5Linux-minimal/</url>
    <content><![CDATA[<ol>
<li>龙蜥8.9</li>
<li>shell安装mysql5.7</li>
<li>docker 安装mysql5.7</li>
</ol>
<hr>
<h1 id="一、vmWare龙蜥8-9系统安装过程"><a href="#一、vmWare龙蜥8-9系统安装过程" class="headerlink" title="一、vmWare龙蜥8.9系统安装过程"></a>一、vmWare龙蜥8.9系统安装过程</h1><ol>
<li><p><strong>安装最小镜像</strong></p>
<ul>
<li>使用龙蜥8.9的最小安装镜像，保证系统精简、基础环境可控。</li>
</ul>
<p> <img src="/../images/Linux/%E8%BF%90%E7%BB%B4/day01/2.png"></p>
</li>
<li><p><strong>确认内核版本</strong></p>
<ul>
<li>根据内核版本选择Linux5.x进行客制化安装。</li>
<li><img src="/../images/Linux/%E8%BF%90%E7%BB%B4/day01/5.png"></li>
</ul>
</li>
<li><p><strong>进入安装环境</strong></p>
<ul>
<li>选择现在的iso文件，启动安装程序。</li>
<li>选择初始软件包（基础软件，网络工具，桌面环境）。</li>
<li>进行硬盘分区：<ul>
<li>确定分区大小和文件系统格式，保证系统运行稳定。</li>
<li><img src="/../images/Linux/%E8%BF%90%E7%BB%B4/day01/1.png"></li>
</ul>
</li>
</ul>
</li>
<li><p>设置root密码后进行安装</p>
</li>
</ol>
<hr>
<h1 id="二、系统配置"><a href="#二、系统配置" class="headerlink" title="二、系统配置"></a>二、系统配置</h1><ol>
<li><p><strong>网络配置</strong></p>
<ul>
<li>配置静态IP，避免使用DHCP带来的不稳定。<ul>
<li><code>vim /etc/sysconfig/network-scripts/ifcfg-ens33</code></li>
<li><img src="/../images/Linux/%E8%BF%90%E7%BB%B4/day01/7.png"></li>
</ul>
</li>
<li>遇到网络配置过程卡住的问题，排查发现与NAT模式子网网段不一致有关，调整后恢复正常。<ul>
<li>这主要与vmware的设置有关，虚拟机的子网网段需要和Vmware设置中的网段一致，都则无法互联以及访问互联网(可以发现网段是72，所以在设置静态IP的时候网段也应该是72)<ul>
<li><img src="/../images/Linux/%E8%BF%90%E7%BB%B4/day01/6.png"></li>
</ul>
</li>
</ul>
</li>
<li>注意网络配置时需保证网段一致性，尤其虚拟机或云服务器环境中。</li>
</ul>
</li>
<li><p><strong>数据库MySQL安装</strong></p>
<ul>
<li><p><strong>Shell方式安装MySQL 5.7</strong></p>
<ul>
<li><p>下载tar包进行安装，手动解压</p>
<ul>
<li><code>tar -zxvf mysql-5.7.35-linux-glibc2.12-x86_64.tar.gz</code></li>
</ul>
</li>
<li><p>初始化数据库。</p>
<ul>
<li><pre><code class="bash">    
  // 重命名为mysql目录
  [root@xxxx local]# mv mysql-5.7.35-linux-glibc2.12-x86_64/ mysql
  // 创建mysql用户组和用户
  [root@xxxx local]# groupadd mysql
  [root@xxxx local]# useradd -r -g mysql mysql
  [root@xxxx local]# groups mysql
  mysql : mysql
  [root@xxxx local]# cd mysql/
  // 创建目录
  [root@xxxx mysql]# mkdir data
  // 赋权
  [root@xxxx mysql]# chown -R mysql:mysql ./
  // 配置my.cnf
  [root@xxxx mysql]# vim /etc/my.cnf
  
  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">* my.cnf</span><br><span class="line"></span><br><span class="line">    ```bash</span><br><span class="line">    [mysqld]</span><br><span class="line">    bind-address=0.0.0.0</span><br><span class="line">    port=3306</span><br><span class="line">    user=mysql</span><br><span class="line">    # 下载的目录</span><br><span class="line">    basedir=/usr/local/mysql</span><br><span class="line">    datadir=/usr/local/mysql/data</span><br><span class="line">    socket=/tmp/mysql.sock</span><br><span class="line">    log-error=/usr/local/mysql/data/mysql.err</span><br><span class="line">    pid-file=/usr/local/mysql/data/mysql.pid</span><br><span class="line">    #character config</span><br><span class="line">    character_set_server=utf8mb4</span><br><span class="line">    symbolic-links=0</span><br><span class="line">    explicit_defaults_for_timestamp=true</span><br><span class="line">    max_connections=512</span><br><span class="line">    lower_case_table_names=1</span><br><span class="line">    default-time-zone=timezone</span><br><span class="line">    default-time-zone = &#x27;+8:00&#x27;</span><br><span class="line">    sql_mode=STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION</span><br><span class="line">    log-bin=mysql-bin</span><br><span class="line">    binlog-format=ROW</span><br><span class="line">    server_id=1</span><br><span class="line">    </span><br></pre></td></tr></table></figure>
</code></pre>
</li>
<li><p>初始化并查看密码</p>
<ul>
<li><pre><code class="bash">  // 初始化数据库
  [root@xxxx bin]# ./mysqld --defaults-file=/etc/my.cnf --basedir=/usr/local/mysql/ --datadir=/usr/local/mysql/data/ --user=mysql --initialize
  [root@xxxx bin]# cd ../
  // 查看初始密码
  [root@xxxx bin]# cat data/mysql.err
  
  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">        * </span><br><span class="line"></span><br><span class="line">- 遇到宿主机访问权限问题，调整MySQL用户权限及防火墙策略解决。</span><br><span class="line"></span><br><span class="line">    - ![](C:\Users\Regen\Desktop\工作笔记\上海城建信息科技有限公司\img\3.png)</span><br><span class="line"></span><br><span class="line">    - 这和mysql本体的设置有关</span><br><span class="line"></span><br><span class="line">    - 首先查看root用户权限</span><br><span class="line"></span><br><span class="line">        - `SELECT user, host FROM mysql.user WHERE user=&#x27;你的用户名&#x27;;`</span><br><span class="line"></span><br><span class="line">        - 这里已经有了权限，如果没有则需要执行</span><br><span class="line"></span><br><span class="line">            - ```bash</span><br><span class="line">                ALTER USER &#x27;root&#x27;@&#x27;%&#x27; IDENTIFIED BY &#x27;密码&#x27;;</span><br><span class="line">                GRANT ALL PRIVILEGES ON *.* TO &#x27;root&#x27;@&#x27;%&#x27; WITH GRANT OPTION;</span><br><span class="line">                FLUSH PRIVILEGES;</span><br><span class="line">                </span><br></pre></td></tr></table></figure>

  -
</code></pre>
</li>
</ul>
<ul>
<li><img src="/../images/Linux/%E8%BF%90%E7%BB%B4/day02/4.png"></li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li><p><strong>Docker方式安装MySQL 5.7</strong></p>
<ul>
<li><p>使用docker或podman拉取MySQL 5.7镜像。</p>
<ul>
<li><code>docker pull mysql:5.7</code></li>
</ul>
</li>
<li><p>发现podman和docker部分命令或配置差异，注意兼容性问题。</p>
<ul>
<li><p>选择了删除podman</p>
</li>
<li><pre><code>  sudo dnf remove podman buildah
  sudo dnf install -y yum-utils device-mapper-persistent-data lvm2
  
  sudo yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo
  
  sudo dnf install -y docker-ce docker-ce-cli containerd.io
  
  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">        - 遇到拉取镜像慢或失败，尝试配置国内镜像加速器，解决网络瓶颈。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">```bash</span><br><span class="line">vim /etc/docker/daemon.json</span><br></pre></td></tr></table></figure>
</code></pre>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ol>
<ul>
<li>案例daemon.json</li>
</ul>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">   </span><br><span class="line">    <span class="attr">&quot;registry-mirrors&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="string">&quot;https://dockerproxy.com&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;https://hub-mirror.c.163.com&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;https://mirror.baidubce.com&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;https://ccr.ccs.tencentyun.com&quot;</span></span><br><span class="line">    <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>



<ul>
<li><strong>需要可靠的源，否则最后就会走官网的镜像。</strong></li>
</ul>
<hr>
<h1 id="三、遇到的主要问题及解决方案"><a href="#三、遇到的主要问题及解决方案" class="headerlink" title="三、遇到的主要问题及解决方案"></a>三、遇到的主要问题及解决方案</h1><table>
<thead>
<tr>
<th>问题</th>
<th>原因及分析</th>
<th>解决方案</th>
</tr>
</thead>
<tbody><tr>
<td>网络配置过程卡住</td>
<td>静态IP配置错误；NAT子网网段不一致</td>
<td>调整静态IP设置，确保子网网段匹配NAT配置</td>
</tr>
<tr>
<td>宿主机无法访问MySQL容器</td>
<td>MySQL权限配置不正确；防火墙阻止访问</td>
<td>修改MySQL用户权限；开放防火墙相关端口</td>
</tr>
<tr>
<td>docker拉取镜像失败或速度慢</td>
<td>镜像源不稳定或权限不足</td>
<td>使用国内镜像加速器；选择官方或公开镜像源</td>
</tr>
<tr>
<td>podman与docker命令不兼容</td>
<td>两者实现有差异</td>
<td>针对podman调整命令；删除podman，优先使用docker</td>
</tr>
<tr>
<td>容器名称冲突（启动已有容器名时报错）</td>
<td>容器名称重复</td>
<td>停止并删除冲突容器，或使用新的容器名称</td>
</tr>
</tbody></table>
<h1 id="使用到的一些命令"><a href="#使用到的一些命令" class="headerlink" title="使用到的一些命令"></a>使用到的一些命令</h1><h2 id="有关系统"><a href="#有关系统" class="headerlink" title="有关系统"></a>有关系统</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看网络配置、路由信息</span></span><br><span class="line">ip a</span><br><span class="line">ip route</span><br><span class="line"><span class="built_in">cat</span> /etc/sysconfig/network-scripts/ifcfg-ens33</span><br><span class="line"><span class="built_in">cat</span> /etc/resolv.conf</span><br><span class="line">ping baidu.com</span><br><span class="line">ping &lt;域名&gt;</span><br><span class="line">nslookup &lt;域名&gt;</span><br><span class="line"><span class="comment"># 查看系统信息</span></span><br><span class="line"><span class="built_in">cat</span> /etc/os-release</span><br><span class="line"><span class="built_in">cat</span> /etc/redhat-release</span><br><span class="line"><span class="built_in">uname</span> -a</span><br><span class="line"><span class="comment"># 查看硬件信息</span></span><br><span class="line"><span class="built_in">cat</span> /proc/cpuinfo</span><br><span class="line">free -h</span><br><span class="line">lsblk</span><br><span class="line">fdisk -l</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动防火墙</span></span><br><span class="line"><span class="built_in">sudo</span> firewall-cmd --reload</span><br><span class="line"><span class="built_in">sudo</span> systemctl start firewalld</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="有关MySql"><a href="#有关MySql" class="headerlink" title="有关MySql"></a>有关MySql</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 解压 tar 包</span></span><br><span class="line">tar -xvf mysql-5.7.xx-linux-glibc2.12-x86_64.tar.gz -C /opt/mysql/</span><br><span class="line"><span class="built_in">mv</span> /opt/mysql/mysql-5.7.xx /opt/mysql/mysql</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建数据目录和用户</span></span><br><span class="line"><span class="built_in">mkdir</span> -p /opt/mysql/mysql/data</span><br><span class="line">useradd -r mysql</span><br><span class="line"><span class="built_in">chown</span> -R mysql:mysql /opt/mysql/mysql</span><br><span class="line"></span><br><span class="line"><span class="comment"># 初始化数据库</span></span><br><span class="line">/opt/mysql/mysql/bin/mysqld --defaults-file=/opt/mysql/my.cnf --initialize --user=mysql</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动 MySQL</span></span><br><span class="line">/opt/mysql/mysql/bin/mysqld_safe --defaults-file=/opt/mysql/my.cnf &amp;</span><br><span class="line"><span class="comment"># 或</span></span><br><span class="line">/opt/mysql/mysql/bin/mysqld --defaults-file=/opt/mysql/my.cnf --user=mysql &amp;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 登录 MySQL</span></span><br><span class="line">/opt/mysql/mysql/bin/mysql -u root -p --socket=/opt/mysql/mysql/mysql.sock</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置 root 密码</span></span><br><span class="line">ALTER USER <span class="string">&#x27;root&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span> IDENTIFIED BY <span class="string">&#x27;yourpassword&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 授权远程登录</span></span><br><span class="line">GRANT ALL PRIVILEGES ON *.* TO <span class="string">&#x27;root&#x27;</span>@<span class="string">&#x27;%&#x27;</span> IDENTIFIED BY <span class="string">&#x27;yourpassword&#x27;</span> WITH GRANT OPTION;</span><br><span class="line">FLUSH PRIVILEGES;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h2 id="有关Docker-podman"><a href="#有关Docker-podman" class="headerlink" title="有关Docker&#x2F;podman"></a>有关Docker&#x2F;podman</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 启动 Podman 测试</span></span><br><span class="line">podman run hello-world</span><br><span class="line"></span><br><span class="line"><span class="comment"># 构建 Dockerfile 镜像（podman 兼容）</span></span><br><span class="line">podman build -t my-mysql:5.7 .</span><br><span class="line"></span><br><span class="line"><span class="comment"># 运行容器（MySQL 5.7）</span></span><br><span class="line">podman run --name some-mysql -e MYSQL_ROOT_PASSWORD=my-secret-pw -p 3305:3306 -d docker.io/mysql:5.7</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看容器状态</span></span><br><span class="line">podman ps -a</span><br><span class="line"></span><br><span class="line"><span class="comment"># Docker 方式拉取镜像</span></span><br><span class="line">docker pull mysql:5.7</span><br><span class="line">docker run --name my-mysql57 -e MYSQL_ROOT_PASSWORD=my-secret-pw -p 3306:3306 -d mysql:5.7</span><br><span class="line"></span><br><span class="line"><span class="comment"># Docker 相关错误排查</span></span><br><span class="line">systemctl start docker</span><br><span class="line">docker info</span><br><span class="line"><span class="comment"># 镜像加速文件修改</span></span><br><span class="line">vim /etc/containers/registries.conf</span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>软件技术</category>
      </categories>
      <tags>
        <tag>笔记</tag>
        <tag>linux</tag>
        <tag>system</tag>
        <tag>command</tag>
        <tag>运维</tag>
        <tag>Anolis</tag>
      </tags>
  </entry>
  <entry>
    <title>verilog HDL basics</title>
    <url>/2024/11/10/verilog-HDL-basics/</url>
    <content><![CDATA[<h1 id="Verilog-Language"><a href="#Verilog-Language" class="headerlink" title="Verilog Language"></a>Verilog Language</h1><p> 基于HDLbits</p>
<h2 id="Basics"><a href="#Basics" class="headerlink" title="Basics"></a>Basics</h2><ul>
<li><p><strong>bitwise</strong> and <strong>logical</strong></p>
<ul>
<li><p>bitwise-NOT (<code>~</code>) and logical-NOT (<code>!</code>)</p>
<blockquote>
<h3 id="Bitwise-NOT"><a href="#Bitwise-NOT" class="headerlink" title="Bitwise-NOT (~)"></a>Bitwise-NOT (<code>~</code>)</h3><ul>
<li><strong>Operation</strong>: The bitwise-NOT operator performs a bitwise inversion on its operand. This means that each bit of the operand is flipped; <code>0</code> becomes <code>1</code> and <code>1</code> becomes <code>0</code>.</li>
<li><strong>Usage</strong>: It is used when you need to invert the bits of a binary number or a vector.</li>
</ul>
<h3 id="Logical-NOT"><a href="#Logical-NOT" class="headerlink" title="Logical-NOT (!)"></a>Logical-NOT (<code>!</code>)</h3><ul>
<li><strong>Operation</strong>: The logical-NOT operator evaluates the logical value of its operand. It converts <code>0</code> to <code>1</code> and any non-zero value to <code>0</code>.</li>
<li><strong>Usage</strong>: It is used when you want to negate a condition or expression. This is typically used in control flow statements like <code>if</code> or <code>while</code>.</li>
</ul>
</blockquote>
</li>
<li><p>bitwise-AND (<code>&amp;</code>) and logical-AND (<code>&amp;&amp;</code>)</p>
</li>
</ul>
</li>
</ul>
<h3 id="Norgate"><a href="#Norgate" class="headerlink" title="Norgate"></a>Norgate</h3><figure class="highlight verilog"><table><tr><td class="code"><pre><span class="line"><span class="keyword">module</span> top_module( </span><br><span class="line">    <span class="keyword">input</span> a, </span><br><span class="line">    <span class="keyword">input</span> b, </span><br><span class="line">    <span class="keyword">output</span> out );</span><br><span class="line">    <span class="keyword">assign</span> out=~(a|b);</span><br><span class="line"><span class="keyword">endmodule</span></span><br></pre></td></tr></table></figure>



<h3 id="Xnorgate"><a href="#Xnorgate" class="headerlink" title="Xnorgate"></a>Xnorgate</h3><figure class="highlight verilog"><table><tr><td class="code"><pre><span class="line"><span class="keyword">module</span> top_module( </span><br><span class="line">    <span class="keyword">input</span> a, </span><br><span class="line">    <span class="keyword">input</span> b, </span><br><span class="line">    <span class="keyword">output</span> out );</span><br><span class="line">    <span class="keyword">assign</span> out=~(a^b);</span><br><span class="line"><span class="keyword">endmodule</span></span><br></pre></td></tr></table></figure>

<h3 id="Wire-decl"><a href="#Wire-decl" class="headerlink" title="Wire decl"></a>Wire decl</h3><p><img src="/../images/fpga/verilog/1.png"></p>
<figure class="highlight verilog"><table><tr><td class="code"><pre><span class="line"><span class="meta">`<span class="keyword">default_nettype</span> none</span></span><br><span class="line"><span class="keyword">module</span> top_module(</span><br><span class="line">    <span class="keyword">input</span> a,</span><br><span class="line">    <span class="keyword">input</span> b,</span><br><span class="line">    <span class="keyword">input</span> c,</span><br><span class="line">    <span class="keyword">input</span> d,</span><br><span class="line">    <span class="keyword">output</span> out,</span><br><span class="line">    <span class="keyword">output</span> out_n   ); </span><br><span class="line"><span class="keyword">wire</span> a_and_b,c_and_d;</span><br><span class="line">    <span class="keyword">assign</span> a_and_b=a&amp;b;</span><br><span class="line">    <span class="keyword">assign</span> c_and_d=c&amp;d;</span><br><span class="line">    <span class="keyword">assign</span> out=a_and_b| c_and_d;</span><br><span class="line">    <span class="keyword">assign</span> out_n=~out;</span><br><span class="line"><span class="keyword">endmodule</span></span><br></pre></td></tr></table></figure>

<h3 id="7458"><a href="#7458" class="headerlink" title="7458"></a>7458</h3><p><img src="/../images/fpga/verilog/2.png"></p>
<figure class="highlight verilog"><table><tr><td class="code"><pre><span class="line"><span class="keyword">module</span> top_module ( </span><br><span class="line">    <span class="keyword">input</span> p1a, p1b, p1c, p1d, p1e, p1f,</span><br><span class="line">    <span class="keyword">output</span> p1y,</span><br><span class="line">    <span class="keyword">input</span> p2a, p2b, p2c, p2d,</span><br><span class="line">    <span class="keyword">output</span> p2y );</span><br><span class="line"><span class="keyword">wire</span> and_1,and_2,and_3,and_4;</span><br><span class="line">    <span class="keyword">assign</span> and_1=p2a&amp;p2b,</span><br><span class="line">    and_2=p1a&amp;p1b&amp;p1c,</span><br><span class="line">    and_3=p2d&amp;p2c,</span><br><span class="line">    and_4=p1f&amp;p1d&amp;p1e;</span><br><span class="line">    <span class="keyword">assign</span> p2y=and_1|and_3,p1y=and_2|and_4;</span><br><span class="line"><span class="keyword">endmodule</span></span><br></pre></td></tr></table></figure>



<h2 id="Vectors"><a href="#Vectors" class="headerlink" title="Vectors"></a>Vectors</h2><h3 id="Vector-0"><a href="#Vector-0" class="headerlink" title="Vector 0"></a>Vector 0</h3><p><img src="/../images/fpga/verilog/3.png"></p>
<figure class="highlight verilog"><table><tr><td class="code"><pre><span class="line"><span class="keyword">module</span> top_module ( </span><br><span class="line">    <span class="keyword">input</span> <span class="keyword">wire</span> [<span class="number">2</span>:<span class="number">0</span>] vec,</span><br><span class="line">    <span class="keyword">output</span> <span class="keyword">wire</span> [<span class="number">2</span>:<span class="number">0</span>] outv,</span><br><span class="line">    <span class="keyword">output</span> <span class="keyword">wire</span> o2,</span><br><span class="line">    <span class="keyword">output</span> <span class="keyword">wire</span> o1,</span><br><span class="line">    <span class="keyword">output</span> <span class="keyword">wire</span> o0  ); <span class="comment">// Module body starts after module declaration</span></span><br><span class="line"><span class="keyword">assign</span> outv=vec;</span><br><span class="line">    <span class="keyword">assign</span> o0=vec[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">assign</span> o1=vec[<span class="number">1</span>];</span><br><span class="line">    <span class="keyword">assign</span> o2=vec[<span class="number">2</span>];</span><br><span class="line"><span class="keyword">endmodule</span></span><br></pre></td></tr></table></figure>

<h3 id="Vector-1"><a href="#Vector-1" class="headerlink" title="Vector 1"></a>Vector 1</h3><h4 id="Declaring-Vectors"><a href="#Declaring-Vectors" class="headerlink" title="Declaring Vectors"></a>Declaring Vectors</h4><figure class="highlight verilog"><table><tr><td class="code"><pre><span class="line"><span class="keyword">wire</span> [<span class="number">7</span>:<span class="number">0</span>] w;         <span class="comment">// 8-bit wire</span></span><br><span class="line"><span class="keyword">reg</span>  [<span class="number">4</span>:<span class="number">1</span>] x;         <span class="comment">// 4-bit reg</span></span><br><span class="line"><span class="keyword">output</span> <span class="keyword">reg</span> [<span class="number">0</span>:<span class="number">0</span>] y;   <span class="comment">// 1-bit reg that is also an output port (this is still a vector)</span></span><br><span class="line"><span class="keyword">input</span> <span class="keyword">wire</span> [<span class="number">3</span>:-<span class="number">2</span>] z;  <span class="comment">// 6-bit wire input (negative ranges are allowed)</span></span><br><span class="line"><span class="keyword">output</span> [<span class="number">3</span>:<span class="number">0</span>] a;       <span class="comment">// 4-bit output wire. Type is &#x27;wire&#x27; unless specified otherwise.</span></span><br><span class="line"><span class="keyword">wire</span> [<span class="number">0</span>:<span class="number">7</span>] b;         <span class="comment">// 8-bit wire where b[0] is the most-significant bit.</span></span><br></pre></td></tr></table></figure>

<p>Build a combinational circuit that splits an input half-word (16 bits, [15:0] ) into lower [7:0] and upper [15:8] bytes.</p>
<h4 id="Module-Declaration"><a href="#Module-Declaration" class="headerlink" title="Module Declaration"></a>Module Declaration</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">`default_nettype none     // Disable implicit nets. Reduces some types of bugs.</span><br><span class="line">module top_module( </span><br><span class="line">    input wire [15:0] in,</span><br><span class="line">    output wire [7:0] out_hi,</span><br><span class="line">    output wire [7:0] out_lo );</span><br></pre></td></tr></table></figure>

<figure class="highlight verilog"><table><tr><td class="code"><pre><span class="line"><span class="meta">`<span class="keyword">default_nettype</span> none     </span><span class="comment">// Disable implicit nets. Reduces some types of bugs.</span></span><br><span class="line"><span class="keyword">module</span> top_module( </span><br><span class="line">    <span class="keyword">input</span> <span class="keyword">wire</span> [<span class="number">15</span>:<span class="number">0</span>] in,</span><br><span class="line">    <span class="keyword">output</span> <span class="keyword">wire</span> [<span class="number">7</span>:<span class="number">0</span>] out_hi,</span><br><span class="line">    <span class="keyword">output</span> <span class="keyword">wire</span> [<span class="number">7</span>:<span class="number">0</span>] out_lo );</span><br><span class="line">    <span class="keyword">assign</span> out_lo=in[<span class="number">7</span>:<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">assign</span> out_hi=in[<span class="number">15</span>:<span class="number">8</span>];</span><br><span class="line">    </span><br><span class="line"><span class="keyword">endmodule</span></span><br></pre></td></tr></table></figure>

<h3 id="Vector-2"><a href="#Vector-2" class="headerlink" title="Vector 2"></a>Vector 2</h3><p>A 32-bit vector can be viewed as containing 4 bytes (bits [31:24], [23:16], etc.). Build a circuit that will reverse the <em>byte</em> ordering of the 4-byte word.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">AaaaaaaaBbbbbbbbCcccccccDddddddd =&gt; DdddddddCcccccccBbbbbbbbAaaaaaaa</span><br></pre></td></tr></table></figure>

<p>This operation is often used when the <a href="https://en.wikipedia.org/wiki/Endianness">endianness</a> of a piece of data needs to be swapped, for example between little-endian x86 systems and the big-endian formats used in many Internet protocols.</p>
<figure class="highlight verilog"><table><tr><td class="code"><pre><span class="line"><span class="keyword">module</span> top_module( </span><br><span class="line">    <span class="keyword">input</span> [<span class="number">31</span>:<span class="number">0</span>] in,</span><br><span class="line">    <span class="keyword">output</span> [<span class="number">31</span>:<span class="number">0</span>] out );<span class="comment">//</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// assign out[31:24] = ...;</span></span><br><span class="line">    <span class="keyword">assign</span> out[<span class="number">31</span>:<span class="number">24</span>]=in[<span class="number">7</span>:<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">assign</span> out[<span class="number">23</span>:<span class="number">16</span>]=in[<span class="number">15</span>:<span class="number">8</span>];</span><br><span class="line">    <span class="keyword">assign</span> out[<span class="number">15</span>:<span class="number">8</span>]=in[<span class="number">23</span>:<span class="number">16</span>];</span><br><span class="line">    <span class="keyword">assign</span> out[<span class="number">7</span>:<span class="number">0</span>]=in[<span class="number">31</span>:<span class="number">24</span>];</span><br><span class="line"><span class="keyword">endmodule</span></span><br></pre></td></tr></table></figure>

<h3 id="Vectorgates"><a href="#Vectorgates" class="headerlink" title="Vectorgates"></a>Vectorgates</h3><p><img src="/../images/fpga/verilog/4.png"></p>
<figure class="highlight verilog"><table><tr><td class="code"><pre><span class="line"><span class="keyword">module</span> top_module( </span><br><span class="line">    <span class="keyword">input</span> [<span class="number">2</span>:<span class="number">0</span>] a,</span><br><span class="line">    <span class="keyword">input</span> [<span class="number">2</span>:<span class="number">0</span>] b,</span><br><span class="line">    <span class="keyword">output</span> [<span class="number">2</span>:<span class="number">0</span>] out_or_bitwise,</span><br><span class="line">    <span class="keyword">output</span> out_or_logical,</span><br><span class="line">    <span class="keyword">output</span> [<span class="number">5</span>:<span class="number">0</span>] out_not</span><br><span class="line">);</span><br><span class="line"><span class="keyword">assign</span> out_or_bitwise=a|b;</span><br><span class="line"><span class="keyword">assign</span> out_or_logical = |(a | b);</span><br><span class="line"><span class="keyword">assign</span> out_not[<span class="number">2</span>:<span class="number">0</span>]=~a;</span><br><span class="line"><span class="keyword">assign</span> out_not[<span class="number">5</span>:<span class="number">3</span>]=~b;</span><br><span class="line"><span class="keyword">endmodule</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="Gates4"><a href="#Gates4" class="headerlink" title="Gates4"></a>Gates4</h3><figure class="highlight verilog"><table><tr><td class="code"><pre><span class="line"><span class="keyword">module</span> top_module( </span><br><span class="line">    <span class="keyword">input</span> [<span class="number">3</span>:<span class="number">0</span>] in,</span><br><span class="line">    <span class="keyword">output</span> out_and,</span><br><span class="line">    <span class="keyword">output</span> out_or,</span><br><span class="line">    <span class="keyword">output</span> out_xor</span><br><span class="line">);</span><br><span class="line"><span class="keyword">assign</span> out_and=&amp;in;</span><br><span class="line">    <span class="keyword">assign</span> out_or=|in;</span><br><span class="line">    <span class="keyword">assign</span> out_xor=^in;</span><br><span class="line"><span class="keyword">endmodule</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>





<h3 id="Vector3"><a href="#Vector3" class="headerlink" title="Vector3"></a>Vector3</h3><figure class="highlight verilog"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>



<h2 id="Modules"><a href="#Modules" class="headerlink" title="Modules"></a>Modules</h2><h2 id="Procedures"><a href="#Procedures" class="headerlink" title="Procedures"></a>Procedures</h2><h2 id="Other-features"><a href="#Other-features" class="headerlink" title="Other features"></a>Other features</h2>]]></content>
      <categories>
        <category>硬件技术</category>
      </categories>
      <tags>
        <tag>笔记</tag>
        <tag>嵌入式</tag>
        <tag>FPGA</tag>
        <tag>verilog</tag>
        <tag>HDL</tag>
      </tags>
  </entry>
  <entry>
    <title>undertale</title>
    <url>/2025/05/01/undertale/</url>
    <content><![CDATA[<h1 id="UNDERTALE"><a href="#UNDERTALE" class="headerlink" title="UNDERTALE"></a>UNDERTALE</h1><p>​	这个世界或许是假的，但爱是真的。很久没玩游戏了，这几天有些闷热烦躁，看不下去书很想玩会游戏，奈何房间里的网络不太好，网吧又太贵，只得找找单机随意玩会。</p>
<p>​	于是就把眼光看向了steam角落的undertale，第一次遇见它还是通过音乐，简单温馨的旋律让我一发不可收拾，甚至还特意学了His Theme简单的吉他弹法。</p>
<p>​	因为是手残党（当年玩蔚蓝还花了30多个小时才不完美地通关），所以第一次玩的时候才玩了几个小时就放弃了，主要还是想当个好人但是不小心伤到了某个小怪物以及上关太久了。再次拿起手柄慢慢地游玩发现tmd还是卡关，破防之余动用了黑客技术才慢慢通过。结果一发不可收拾，玩到凌晨通关后还看了解说，眼泪止不住地流下来，现在想起来还是会很感动。上一次因为艺术而掉眼泪还是看《罪与罚》的时候。undertale，第九艺术，实至名归。</p>
<p><img src="/../images/games/undertale/1.png"><img src="/../images/games/undertale/2.jpg"></p>
]]></content>
      <categories>
        <category>生活</category>
      </categories>
      <tags>
        <tag>游戏</tag>
        <tag>随手记</tag>
        <tag>undertale</tag>
      </tags>
  </entry>
  <entry>
    <title>《不能承受的生命之轻》</title>
    <url>/2025/03/30/%E3%80%8A%E4%B8%8D%E8%83%BD%E6%89%BF%E5%8F%97%E7%9A%84%E7%94%9F%E5%91%BD%E4%B9%8B%E8%BD%BB%E3%80%8B/</url>
    <content><![CDATA[<h1 id="《不能承受的生命之轻》"><a href="#《不能承受的生命之轻》" class="headerlink" title="《不能承受的生命之轻》"></a>《不能承受的生命之轻》</h1><h2 id="米兰·昆德拉"><a href="#米兰·昆德拉" class="headerlink" title="米兰·昆德拉"></a>米兰·昆德拉</h2><p>​	从这本书开始了解米兰昆德拉，开始迷上米兰昆德拉。</p>
<hr>
<blockquote>
<p>也许最沉重的负担同时也是一种生活最为充实的象征，负担越沉，我们的生活也就越贴近大地，越趋近真切和实在。<br>相反，完全没有负担，人变得比大气还轻，会高高地飞起，离别大地亦即离别真实的生活。</p>
</blockquote>
<hr>
<blockquote>
<p>更使他悲伤的是，真正的男子汉通常能果敢行动的时刻，他总是犹豫不决，以至他经历过的一个个美妙瞬间（比如说跪在她床上，想着不能让她先死的瞬间），由此而丧失全部意义。</p>
</blockquote>
<hr>
<blockquote>
<p>托马斯得出结论：同女人做爱和同女人睡觉是两种互不相关的感情，岂止不同，简直对立。爱情不会使人产生性交的欲望（即对无数女人的激望），却会引起同眠共寝的欲求（只限于对一个女人的欲求）。</p>
</blockquote>
<hr>
<blockquote>
<p>背叛意味着打乱原有的秩序，背叛意味着打乱秩序和进入未知。萨宾娜看不出什么比进入未知状态更奇妙诱人的了。</p>
</blockquote>
<hr>
<blockquote>
<p>她从他的视界里消失之前，塞给了他那把海格立斯的扫帚。他用它把自己藐视的一切都从生活中扫去了。一种突然的庆幸，一阵狂乱的欣喜，还有自由和新生带来的欢乐，都是她留下的馈赠。</p>
</blockquote>
<hr>
<blockquote>
<p>女人无力抗拒任何呼唤着她受惊灵魂的声音，而男人则无力阻挡任何灵魂正在响应呼唤的女人。</p>
</blockquote>
<hr>
<blockquote>
<p>人类生命只有一次，我们不能测定我们的决策孰好孰坏，原因就是在一个给定购情境中，我们只能作一个决定。我们没有被赐予第二次、第三次或第四次生命来比较各种各样的决断。</p>
</blockquote>
<hr>
<blockquote>
<p><strong>历史和个人生命一样，轻得不能承受，轻若鸿毛，轻如尘埃，卷入了太空，它是明天不复存在的任何东西。</strong></p>
</blockquote>
<hr>
<blockquote>
<p>如果说，性亢奋是我们的造物主为了自己取乐而用的一种装置，那么爱就是唯独属于我们自己的东西，能使我们摆脱造物主。爱情是我们的自由，爱情处于“非如此不可”的规则之外。</p>
</blockquote>
<hr>
<blockquote>
<p><strong>特丽莎与托马斯的死显示着重，她想用自己的死来表明轻，她将比大气还轻。正如巴门尼德曾经指出的，消极会变成积极。</strong></p>
</blockquote>
]]></content>
      <categories>
        <category>读书</category>
      </categories>
      <tags>
        <tag>随手记</tag>
        <tag>读书</tag>
      </tags>
  </entry>
  <entry>
    <title>zabbix部署server和agent</title>
    <url>/2025/07/29/zabbix%E9%83%A8%E7%BD%B2server%E5%92%8Cagent/</url>
    <content><![CDATA[<h1 id="zabbix部署server和agent"><a href="#zabbix部署server和agent" class="headerlink" title="zabbix部署server和agent"></a>zabbix部署server和agent</h1><blockquote>
<p>Zabbix 是一个开源的企业级分布式监控解决方案，广泛应用于监控 IT 基础设施（如服务器、网络设备、虚拟机等）和应用程序。它支持多种监控方式（如 agent、SNMP、IPMI、SSH 等），提供实时数据采集、告警通知、趋势分析和历史存储。Zabbix 拥有强大的可扩展性和灵活的图形化 Web 界面，能够通过 Zabbix Server、Proxy 和 Agent 实现分布式部署，适用于大规模环境。其开源特性和丰富的模板、API 使其在中小企业到超大规模企业中都能得到广泛应用。</p>
</blockquote>
<blockquote>
<ul>
<li>部署环境</li>
</ul>
<p>系统：Anolis 8.10</p>
<p>软件：</p>
<ol>
<li>Docker 28.3</li>
<li>Docker镜像：<ol>
<li>mysql                           8.0                 304929b30183   5 days ago    781MB</li>
<li>zabbix&#x2F;zabbix-web-nginx-mysql   alpine-6.2-latest   09a4eb616c94   2 years ago   237MB</li>
<li>zabbix&#x2F;zabbix-server-mysql      6.2-alpine-latest   69c2e207de22   2 years ago   86.5MB</li>
<li>zabbix&#x2F;zabbix-java-gateway      alpine-6.2-latest   8f70989cf9b1   2 years ago   91.1MB</li>
</ol>
</li>
</ol>
<p><img src="/../images/Linux/%E8%BF%90%E7%BB%B4/zabbix/image-20250729163727520.png" alt="image-20250729163727520"></p>
</blockquote>
<h2 id="docker部署server端"><a href="#docker部署server端" class="headerlink" title="docker部署server端"></a>docker部署server端</h2><h3 id="1-准备操作"><a href="#1-准备操作" class="headerlink" title="1. 准备操作"></a>1. 准备操作</h3><p>​	导入提前下载好的镜像</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 扫描当前目录所有 tar 文件</span></span><br><span class="line"><span class="keyword">for</span> img <span class="keyword">in</span> *.tar; <span class="keyword">do</span></span><br><span class="line">  <span class="keyword">if</span> [ -f <span class="string">&quot;<span class="variable">$img</span>&quot;</span> ]; <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;========================================&quot;</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;[*] 正在导入镜像: <span class="variable">$img</span>&quot;</span></span><br><span class="line">    docker load -i <span class="string">&quot;<span class="variable">$img</span>&quot;</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;[✔] 导入完成: <span class="variable">$img</span>&quot;</span></span><br><span class="line">    <span class="built_in">echo</span></span><br><span class="line">  <span class="keyword">fi</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;========================================&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;[*] 当前所有镜像：&quot;</span></span><br><span class="line">docker images</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>验证：<code>docker images</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[*] 当前所有镜像：</span><br><span class="line">REPOSITORY                      TAG                 IMAGE ID       CREATED         SIZE</span><br><span class="line">mysql                           8.0                 304929b30183   9 days ago      781MB</span><br><span class="line">mysql                           5.7                 5107333e08a8   19 months ago   501MB</span><br><span class="line">zabbix/zabbix-web-nginx-mysql   alpine-6.2-latest   09a4eb616c94   2 years ago     237MB</span><br><span class="line">zabbix/zabbix-server-mysql      6.2-alpine-latest   69c2e207de22   2 years ago     86.5MB</span><br><span class="line">zabbix/zabbix-java-gateway      alpine-6.2-latest   8f70989cf9b1   2 years ago     91.1MB</span><br><span class="line">[root@localhost resources]# </span><br></pre></td></tr></table></figure>



<h3 id="2-docker部署mysql"><a href="#2-docker部署mysql" class="headerlink" title="2. docker部署mysql"></a>2. docker部署mysql</h3><p>​	选择将数据持久化存储到当前工作目录的<code>mysql_data</code>目录下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker run --name mysql-server -t \</span><br><span class="line">   -v $(pwd)/mysql_data:/var/lib/mysql \</span><br><span class="line">   -e MYSQL_DATABASE=&quot;zabbix&quot; \</span><br><span class="line">   -e MYSQL_USER=&quot;zabbix&quot; \</span><br><span class="line">   -e MYSQL_PASSWORD=&quot;zabbix_pwd&quot; \</span><br><span class="line">   -e MYSQL_ROOT_PASSWORD=&quot;123456&quot; \</span><br><span class="line">   --restart=unless-stopped \</span><br><span class="line">   -p 3306:3306 \</span><br><span class="line">   -d mysql:8.0 \</span><br><span class="line">   --character-set-server=utf8 --collation-server=utf8_bin \</span><br><span class="line">   --default-authentication-plugin=mysql_native_password</span><br></pre></td></tr></table></figure>





<h3 id="3-docker部署zabbix-java-gateway"><a href="#3-docker部署zabbix-java-gateway" class="headerlink" title="3. docker部署zabbix-java-gateway"></a>3. docker部署zabbix-java-gateway</h3><blockquote>
<p>用于监控Java程序的JVM状态</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run --name zabbix-java-gateway -t \</span><br><span class="line">   --restart=unless-stopped \</span><br><span class="line">   -d zabbix/zabbix-java-gateway:alpine-6.2-latest</span><br></pre></td></tr></table></figure>

<h3 id="4-docker部署zabbix-server"><a href="#4-docker部署zabbix-server" class="headerlink" title="4. docker部署zabbix-server"></a>4. docker部署zabbix-server</h3><p>准备好挂载配置文件的目录和配置文件。</p>
<p><img src="/../images/Linux/%E8%BF%90%E7%BB%B4/zabbix/image-20250730092559134.png" alt="image-20250730092559134"></p>
<ul>
<li>参考配置文件，使用docker的话不需要修改，其实也可以不用挂载出来。</li>
</ul>
<blockquote>
<p>这里挂载出来是为了后续测试或者迁移搬数据库使用。</p>
<p>这里面主要用的到设置是</p>
<table>
<thead>
<tr>
<th>参数</th>
<th>作用</th>
<th>是否必须改</th>
</tr>
</thead>
<tbody><tr>
<td><code>DBHost</code></td>
<td>数据库主机（如果不在本机）</td>
<td>通常必须</td>
</tr>
<tr>
<td><code>DBName</code></td>
<td>数据库名（默认 zabbix）</td>
<td>根据实际</td>
</tr>
<tr>
<td><code>DBUser</code></td>
<td>数据库用户名</td>
<td>通常必须</td>
</tr>
<tr>
<td><code>DBPassword</code></td>
<td>数据库密码</td>
<td>必须</td>
</tr>
<tr>
<td><code>CacheSize</code></td>
<td>缓存大小（比如 128M, 256M）</td>
<td>建议调</td>
</tr>
<tr>
<td><code>StartPollers</code></td>
<td>并发轮询进程数</td>
<td>根据监控规模调</td>
</tr>
</tbody></table>
<p>但是我们使用了起容器的时候用来–link，所以这个配置会自己生成好。</p>
<p>如果报错则可以不挂载配置文件起一个容器，然后docker cp出来配置文件。</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># This is a configuration file for Zabbix server daemon</span><br><span class="line"># To get more information about Zabbix, visit http://www.zabbix.com</span><br><span class="line"></span><br><span class="line">############ GENERAL PARAMETERS #################</span><br><span class="line"></span><br><span class="line">### Option: ListenPort</span><br><span class="line">#  Listen port for trapper.</span><br><span class="line">#</span><br><span class="line"># Mandatory: no</span><br><span class="line"># Range: 1024-32767</span><br><span class="line"># Default:</span><br><span class="line"># ListenPort=10051</span><br><span class="line"></span><br><span class="line">### Option: SourceIP</span><br><span class="line">#  Source IP address for outgoing connections.</span><br><span class="line">#</span><br><span class="line"># Mandatory: no</span><br><span class="line"># Default:</span><br><span class="line"># SourceIP=</span><br><span class="line"></span><br><span class="line">### Option: LogType</span><br><span class="line">#  Specifies where log messages are written to:</span><br><span class="line">#    system  - syslog</span><br><span class="line">#    file    - file specified with LogFile parameter</span><br><span class="line">#    console - standard output</span><br><span class="line">#</span><br><span class="line"># Mandatory: no</span><br><span class="line"># Default:</span><br><span class="line"># LogType=file</span><br><span class="line">LogType=console</span><br><span class="line"></span><br><span class="line">### Option: LogFile</span><br><span class="line">#  Log file name for LogType &#x27;file&#x27; parameter.</span><br><span class="line">#</span><br><span class="line"># Mandatory: yes, if LogType is set to file, otherwise no</span><br><span class="line"># Default:</span><br><span class="line"># LogFile=</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">### Option: LogFileSize</span><br><span class="line">#  Maximum size of log file in MB.</span><br><span class="line">#  0 - disable automatic log rotation.</span><br><span class="line">#</span><br><span class="line"># Mandatory: no</span><br><span class="line"># Range: 0-1024</span><br><span class="line"># Default:</span><br><span class="line"># LogFileSize=1</span><br><span class="line"></span><br><span class="line">### Option: DebugLevel</span><br><span class="line">#  Specifies debug level:</span><br><span class="line">#  0 - basic information about starting and stopping of Zabbix processes</span><br><span class="line">#  1 - critical information</span><br><span class="line">#  2 - error information</span><br><span class="line">#  3 - warnings</span><br><span class="line">#  4 - for debugging (produces lots of information)</span><br><span class="line">#  5 - extended debugging (produces even more information)</span><br><span class="line">#</span><br><span class="line"># Mandatory: no</span><br><span class="line"># Range: 0-5</span><br><span class="line"># Default:</span><br><span class="line"># DebugLevel=3</span><br><span class="line"></span><br><span class="line">### Option: PidFile</span><br><span class="line">#  Name of PID file.</span><br><span class="line">#</span><br><span class="line"># Mandatory: no</span><br><span class="line"># Default:</span><br><span class="line"># PidFile=/tmp/zabbix_server.pid</span><br><span class="line"></span><br><span class="line">### Option: SocketDir</span><br><span class="line">#  IPC socket directory.</span><br><span class="line">#    Directory to store IPC sockets used by internal Zabbix services.</span><br><span class="line">#</span><br><span class="line"># Mandatory: no</span><br><span class="line"># Default:</span><br><span class="line"># SocketDir=/tmp</span><br><span class="line"></span><br><span class="line">### Option: DBHost</span><br><span class="line">#  Database host name.</span><br><span class="line">#  If set to localhost, socket is used for MySQL.</span><br><span class="line">#  If set to empty string, socket is used for PostgreSQL.</span><br><span class="line">#  If set to empty string, the Net Service Name connection method is used to connect to Oracle database; also see</span><br><span class="line">#  the TNS_ADMIN environment variable to specify the directory where the tnsnames.ora file is located.</span><br><span class="line">#</span><br><span class="line"># Mandatory: no</span><br><span class="line"># Default:</span><br><span class="line"># DBHost=localhost</span><br><span class="line">DBHost=mysql-server</span><br><span class="line"></span><br><span class="line">### Option: DBName</span><br><span class="line">#  Database name.</span><br><span class="line">#  If the Net Service Name connection method is used to connect to Oracle database, specify the service name from</span><br><span class="line">#  the tnsnames.ora file or set to empty string; also see the TWO_TASK environment variable if DBName is set to</span><br><span class="line">#  empty string.</span><br><span class="line">#</span><br><span class="line"># Mandatory: yes</span><br><span class="line"># Default:</span><br><span class="line"># DBName=</span><br><span class="line"></span><br><span class="line">DBName=zabbix</span><br><span class="line"></span><br><span class="line">### Option: DBSchema</span><br><span class="line">#  Schema name. Used for PostgreSQL.</span><br><span class="line">#</span><br><span class="line"># Mandatory: no</span><br><span class="line"># Default:</span><br><span class="line"># DBSchema=</span><br><span class="line"></span><br><span class="line">### Option: DBUser</span><br><span class="line">#  Database user.</span><br><span class="line">#</span><br><span class="line"># Mandatory: no</span><br><span class="line"># Default:</span><br><span class="line"># DBUser=</span><br><span class="line"></span><br><span class="line">DBUser=zabbix</span><br><span class="line"></span><br><span class="line">### Option: DBPassword</span><br><span class="line">#  Database password.</span><br><span class="line">#  Comment this line if no password is used.</span><br><span class="line">#</span><br><span class="line"># Mandatory: no</span><br><span class="line"># Default:</span><br><span class="line"># DBPassword=</span><br><span class="line">DBPassword=zabbix_pwd</span><br><span class="line"></span><br><span class="line">### Option: DBSocket</span><br><span class="line">#  Path to MySQL socket.</span><br><span class="line">#</span><br><span class="line"># Mandatory: no</span><br><span class="line"># Default:</span><br><span class="line"># DBSocket=</span><br><span class="line"></span><br><span class="line">### Option: DBPort</span><br><span class="line">#  Database port when not using local socket.</span><br><span class="line">#  If the Net Service Name connection method is used to connect to Oracle database, the port number from the</span><br><span class="line">#  tnsnames.ora file will be used. The port number set here will be ignored.</span><br><span class="line">#</span><br><span class="line"># Mandatory: no</span><br><span class="line"># Range: 1024-65535</span><br><span class="line"># Default:</span><br><span class="line"># DBPort=</span><br><span class="line">DBPort=3306</span><br><span class="line"></span><br><span class="line">### Option: AllowUnsupportedDBVersions</span><br><span class="line">#  Allow server to work with unsupported database versions.</span><br><span class="line">#       0 - do not allow</span><br><span class="line">#       1 - allow</span><br><span class="line">#</span><br><span class="line"># Mandatory: no</span><br><span class="line"># Default:</span><br><span class="line"># AllowUnsupportedDBVersions=0</span><br><span class="line"></span><br><span class="line">### Option: HistoryStorageURL</span><br><span class="line">#  History storage HTTP[S] URL.</span><br><span class="line">#</span><br><span class="line"># Mandatory: no</span><br><span class="line"># Default:</span><br><span class="line"># HistoryStorageURL=</span><br><span class="line"></span><br><span class="line">### Option: HistoryStorageTypes</span><br><span class="line">#  Comma separated list of value types to be sent to the history storage.</span><br><span class="line">#</span><br><span class="line"># Mandatory: no</span><br><span class="line"># Default:</span><br><span class="line"># HistoryStorageTypes=uint,dbl,str,log,text</span><br><span class="line"></span><br><span class="line">### Option: HistoryStorageDateIndex</span><br><span class="line">#  Enable preprocessing of history values in history storage to store values in different indices based on date.</span><br><span class="line">#  0 - disable</span><br><span class="line">#  1 - enable</span><br><span class="line">#</span><br><span class="line"># Mandatory: no</span><br><span class="line"># Default:</span><br><span class="line"># HistoryStorageDateIndex=0</span><br><span class="line"></span><br><span class="line">### Option: ExportDir</span><br><span class="line">#  Directory for real time export of events, history and trends in newline delimited JSON format.</span><br><span class="line">#  If set, enables real time export.</span><br><span class="line">#</span><br><span class="line"># Mandatory: no</span><br><span class="line"># Default:</span><br><span class="line"># ExportDir=</span><br><span class="line"></span><br><span class="line">### Option: ExportFileSize</span><br><span class="line">#  Maximum size per export file in bytes.</span><br><span class="line">#  Only used for rotation if ExportDir is set.</span><br><span class="line">#</span><br><span class="line"># Mandatory: no</span><br><span class="line"># Range: 1M-1G</span><br><span class="line"># Default:</span><br><span class="line"># ExportFileSize=1G</span><br><span class="line"></span><br><span class="line">### Option: ExportType</span><br><span class="line">#  List of comma delimited types of real time export - allows to control export entities by their</span><br><span class="line">#  type (events, history, trends) individually.</span><br><span class="line">#  Valid only if ExportDir is set.</span><br><span class="line">#</span><br><span class="line"># Mandatory: no</span><br><span class="line"># Default:</span><br><span class="line"># ExportType=events,history,trends</span><br><span class="line"></span><br><span class="line">############ ADVANCED PARAMETERS ################</span><br><span class="line"></span><br><span class="line">### Option: StartPollers</span><br><span class="line">#  Number of pre-forked instances of pollers.</span><br><span class="line">#</span><br><span class="line"># Mandatory: no</span><br><span class="line"># Range: 0-1000</span><br><span class="line"># Default:</span><br><span class="line"># StartPollers=5</span><br><span class="line"></span><br><span class="line">### Option: StartIPMIPollers</span><br><span class="line">#  Number of pre-forked instances of IPMI pollers.</span><br><span class="line">#    The IPMI manager process is automatically started when at least one IPMI poller is started.</span><br><span class="line">#</span><br><span class="line"># Mandatory: no</span><br><span class="line"># Range: 0-1000</span><br><span class="line"># Default:</span><br><span class="line"># StartIPMIPollers=0</span><br><span class="line"></span><br><span class="line">### Option: StartPreprocessors</span><br><span class="line">#  Number of pre-forked instances of preprocessing workers.</span><br><span class="line">#    The preprocessing manager process is automatically started when preprocessor worker is started.</span><br><span class="line">#</span><br><span class="line"># Mandatory: no</span><br><span class="line"># Range: 1-1000</span><br><span class="line"># Default:</span><br><span class="line"># StartPreprocessors=3</span><br><span class="line"></span><br><span class="line">### Option: StartPollersUnreachable</span><br><span class="line">#  Number of pre-forked instances of pollers for unreachable hosts (including IPMI and Java).</span><br><span class="line">#  At least one poller for unreachable hosts must be running if regular, IPMI or Java pollers</span><br><span class="line">#  are started.</span><br><span class="line">#</span><br><span class="line"># Mandatory: no</span><br><span class="line"># Range: 0-1000</span><br><span class="line"># Default:</span><br><span class="line"># StartPollersUnreachable=1</span><br><span class="line"></span><br><span class="line">### Option: StartHistoryPollers</span><br><span class="line">#  Number of pre-forked instances of history pollers.</span><br><span class="line">#  Only required for calculated checks.</span><br><span class="line">#  A database connection is required for each history poller instance.</span><br><span class="line">#</span><br><span class="line"># Mandatory: no</span><br><span class="line"># Range: 0-1000</span><br><span class="line"># Default:</span><br><span class="line"># StartHistoryPollers=5</span><br><span class="line"></span><br><span class="line">### Option: StartTrappers</span><br><span class="line">#  Number of pre-forked instances of trappers.</span><br><span class="line">#  Trappers accept incoming connections from Zabbix sender, active agents and active proxies.</span><br><span class="line">#  At least one trapper process must be running to display server availability and view queue</span><br><span class="line">#  in the frontend.</span><br><span class="line">#</span><br><span class="line"># Mandatory: no</span><br><span class="line"># Range: 0-1000</span><br><span class="line"># Default:</span><br><span class="line"># StartTrappers=5</span><br><span class="line"></span><br><span class="line">### Option: StartPingers</span><br><span class="line">#  Number of pre-forked instances of ICMP pingers.</span><br><span class="line">#</span><br><span class="line"># Mandatory: no</span><br><span class="line"># Range: 0-1000</span><br><span class="line"># Default:</span><br><span class="line"># StartPingers=1</span><br><span class="line"></span><br><span class="line">### Option: StartDiscoverers</span><br><span class="line">#  Number of pre-forked instances of discoverers.</span><br><span class="line">#</span><br><span class="line"># Mandatory: no</span><br><span class="line"># Range: 0-250</span><br><span class="line"># Default:</span><br><span class="line"># StartDiscoverers=1</span><br><span class="line"></span><br><span class="line">### Option: StartHTTPPollers</span><br><span class="line">#  Number of pre-forked instances of HTTP pollers.</span><br><span class="line">#</span><br><span class="line"># Mandatory: no</span><br><span class="line"># Range: 0-1000</span><br><span class="line"># Default:</span><br><span class="line"># StartHTTPPollers=1</span><br><span class="line"></span><br><span class="line">### Option: StartTimers</span><br><span class="line">#  Number of pre-forked instances of timers.</span><br><span class="line">#  Timers process maintenance periods.</span><br><span class="line">#  Only the first timer process handles host maintenance updates. Problem suppression updates are shared</span><br><span class="line">#  between all timers.</span><br><span class="line">#</span><br><span class="line"># Mandatory: no</span><br><span class="line"># Range: 1-1000</span><br><span class="line"># Default:</span><br><span class="line"># StartTimers=1</span><br><span class="line"></span><br><span class="line">### Option: StartEscalators</span><br><span class="line">#  Number of pre-forked instances of escalators.</span><br><span class="line">#</span><br><span class="line"># Mandatory: no</span><br><span class="line"># Range: 1-100</span><br><span class="line"># Default:</span><br><span class="line"># StartEscalators=1</span><br><span class="line"></span><br><span class="line">### Option: StartAlerters</span><br><span class="line">#  Number of pre-forked instances of alerters.</span><br><span class="line">#  Alerters send the notifications created by action operations.</span><br><span class="line">#</span><br><span class="line"># Mandatory: no</span><br><span class="line"># Range: 1-100</span><br><span class="line"># Default:</span><br><span class="line"># StartAlerters=3</span><br><span class="line"></span><br><span class="line">### Option: JavaGateway</span><br><span class="line">#  IP address (or hostname) of Zabbix Java gateway.</span><br><span class="line">#  Only required if Java pollers are started.</span><br><span class="line">#</span><br><span class="line"># Mandatory: no</span><br><span class="line"># Default:</span><br><span class="line"># JavaGateway=</span><br><span class="line"></span><br><span class="line">### Option: JavaGatewayPort</span><br><span class="line">#  Port that Zabbix Java gateway listens on.</span><br><span class="line">#</span><br><span class="line"># Mandatory: no</span><br><span class="line"># Range: 1024-32767</span><br><span class="line"># Default:</span><br><span class="line"># JavaGatewayPort=10052</span><br><span class="line"></span><br><span class="line">### Option: StartJavaPollers</span><br><span class="line">#  Number of pre-forked instances of Java pollers.</span><br><span class="line">#</span><br><span class="line"># Mandatory: no</span><br><span class="line"># Range: 0-1000</span><br><span class="line"># Default:</span><br><span class="line"># StartJavaPollers=0</span><br><span class="line"></span><br><span class="line">### Option: StartVMwareCollectors</span><br><span class="line">#  Number of pre-forked vmware collector instances.</span><br><span class="line">#</span><br><span class="line"># Mandatory: no</span><br><span class="line"># Range: 0-250</span><br><span class="line"># Default:</span><br><span class="line"># StartVMwareCollectors=0</span><br><span class="line"></span><br><span class="line">### Option: VMwareFrequency</span><br><span class="line">#  How often Zabbix will connect to VMware service to obtain a new data.</span><br><span class="line">#</span><br><span class="line"># Mandatory: no</span><br><span class="line"># Range: 10-86400</span><br><span class="line"># Default:</span><br><span class="line"># VMwareFrequency=60</span><br><span class="line"></span><br><span class="line">### Option: VMwarePerfFrequency</span><br><span class="line">#  How often Zabbix will connect to VMware service to obtain performance data.</span><br><span class="line">#</span><br><span class="line"># Mandatory: no</span><br><span class="line"># Range: 10-86400</span><br><span class="line"># Default:</span><br><span class="line"># VMwarePerfFrequency=60</span><br><span class="line"></span><br><span class="line">### Option: VMwareCacheSize</span><br><span class="line">#  Size of VMware cache, in bytes.</span><br><span class="line">#  Shared memory size for storing VMware data.</span><br><span class="line">#  Only used if VMware collectors are started.</span><br><span class="line">#</span><br><span class="line"># Mandatory: no</span><br><span class="line"># Range: 256K-2G</span><br><span class="line"># Default:</span><br><span class="line"># VMwareCacheSize=8M</span><br><span class="line"></span><br><span class="line">### Option: VMwareTimeout</span><br><span class="line">#  Specifies how many seconds vmware collector waits for response from VMware service.</span><br><span class="line">#</span><br><span class="line"># Mandatory: no</span><br><span class="line"># Range: 1-300</span><br><span class="line"># Default:</span><br><span class="line"># VMwareTimeout=10</span><br><span class="line"></span><br><span class="line">### Option: SNMPTrapperFile</span><br><span class="line">#  Temporary file used for passing data from SNMP trap daemon to the server.</span><br><span class="line">#  Must be the same as in zabbix_trap_receiver.pl or SNMPTT configuration file.</span><br><span class="line">#</span><br><span class="line"># Mandatory: no</span><br><span class="line"># Default:</span><br><span class="line"># SNMPTrapperFile=/tmp/zabbix_traps.tmp</span><br><span class="line"></span><br><span class="line">### Option: StartSNMPTrapper</span><br><span class="line">#  If 1, SNMP trapper process is started.</span><br><span class="line">#</span><br><span class="line"># Mandatory: no</span><br><span class="line"># Range: 0-1</span><br><span class="line"># Default:</span><br><span class="line"># StartSNMPTrapper=0</span><br><span class="line"></span><br><span class="line">### Option: ListenIP</span><br><span class="line">#  List of comma delimited IP addresses that the trapper should listen on.</span><br><span class="line">#  Trapper will listen on all network interfaces if this parameter is missing.</span><br><span class="line">#</span><br><span class="line"># Mandatory: no</span><br><span class="line"># Default:</span><br><span class="line"># ListenIP=0.0.0.0</span><br><span class="line"></span><br><span class="line">### Option: HousekeepingFrequency</span><br><span class="line">#  How often Zabbix will perform housekeeping procedure (in hours).</span><br><span class="line">#  Housekeeping is removing outdated information from the database.</span><br><span class="line">#  To prevent Housekeeper from being overloaded, no more than 4 times HousekeepingFrequency</span><br><span class="line">#  hours of outdated information are deleted in one housekeeping cycle, for each item.</span><br><span class="line">#  To lower load on server startup housekeeping is postponed for 30 minutes after server start.</span><br><span class="line">#  With HousekeepingFrequency=0 the housekeeper can be only executed using the runtime control option.</span><br><span class="line">#  In this case the period of outdated information deleted in one housekeeping cycle is 4 times the</span><br><span class="line">#  period since the last housekeeping cycle, but not less than 4 hours and not greater than 4 days.</span><br><span class="line">#</span><br><span class="line"># Mandatory: no</span><br><span class="line"># Range: 0-24</span><br><span class="line"># Default:</span><br><span class="line"># HousekeepingFrequency=1</span><br><span class="line"></span><br><span class="line">### Option: MaxHousekeeperDelete</span><br><span class="line">#  The table &quot;housekeeper&quot; contains &quot;tasks&quot; for housekeeping procedure in the format:</span><br><span class="line">#  [housekeeperid], [tablename], [field], [value].</span><br><span class="line">#  No more than &#x27;MaxHousekeeperDelete&#x27; rows (corresponding to [tablename], [field], [value])</span><br><span class="line">#  will be deleted per one task in one housekeeping cycle.</span><br><span class="line">#  If set to 0 then no limit is used at all. In this case you must know what you are doing!</span><br><span class="line">#</span><br><span class="line"># Mandatory: no</span><br><span class="line"># Range: 0-1000000</span><br><span class="line"># Default:</span><br><span class="line"># MaxHousekeeperDelete=5000</span><br><span class="line"></span><br><span class="line">### Option: CacheSize</span><br><span class="line">#  Size of configuration cache, in bytes.</span><br><span class="line">#  Shared memory size for storing host, item and trigger data.</span><br><span class="line">#</span><br><span class="line"># Mandatory: no</span><br><span class="line"># Range: 128K-64G</span><br><span class="line"># Default:</span><br><span class="line"># CacheSize=32M</span><br><span class="line"></span><br><span class="line">### Option: CacheUpdateFrequency</span><br><span class="line">#  How often Zabbix will perform update of configuration cache, in seconds.</span><br><span class="line">#</span><br><span class="line"># Mandatory: no</span><br><span class="line"># Range: 1-3600</span><br><span class="line"># Default:</span><br><span class="line"># CacheUpdateFrequency=60</span><br><span class="line"></span><br><span class="line">### Option: StartDBSyncers</span><br><span class="line">#  Number of pre-forked instances of DB Syncers.</span><br><span class="line">#</span><br><span class="line"># Mandatory: no</span><br><span class="line"># Range: 1-100</span><br><span class="line"># Default:</span><br><span class="line"># StartDBSyncers=4</span><br><span class="line"></span><br><span class="line">### Option: HistoryCacheSize</span><br><span class="line">#  Size of history cache, in bytes.</span><br><span class="line">#  Shared memory size for storing history data.</span><br><span class="line">#</span><br><span class="line"># Mandatory: no</span><br><span class="line"># Range: 128K-2G</span><br><span class="line"># Default:</span><br><span class="line"># HistoryCacheSize=16M</span><br><span class="line"></span><br><span class="line">### Option: HistoryIndexCacheSize</span><br><span class="line">#  Size of history index cache, in bytes.</span><br><span class="line">#  Shared memory size for indexing history cache.</span><br><span class="line">#</span><br><span class="line"># Mandatory: no</span><br><span class="line"># Range: 128K-2G</span><br><span class="line"># Default:</span><br><span class="line"># HistoryIndexCacheSize=4M</span><br><span class="line"></span><br><span class="line">### Option: TrendCacheSize</span><br><span class="line">#  Size of trend write cache, in bytes.</span><br><span class="line">#  Shared memory size for storing trends data.</span><br><span class="line">#</span><br><span class="line"># Mandatory: no</span><br><span class="line"># Range: 128K-2G</span><br><span class="line"># Default:</span><br><span class="line"># TrendCacheSize=4M</span><br><span class="line"></span><br><span class="line">### Option: TrendFunctionCacheSize</span><br><span class="line">#  Size of trend function cache, in bytes.</span><br><span class="line">#  Shared memory size for caching calculated trend function data.</span><br><span class="line">#</span><br><span class="line"># Mandatory: no</span><br><span class="line"># Range: 128K-2G</span><br><span class="line"># Default:</span><br><span class="line"># TrendFunctionCacheSize=4M</span><br><span class="line"></span><br><span class="line">### Option: ValueCacheSize</span><br><span class="line">#  Size of history value cache, in bytes.</span><br><span class="line">#  Shared memory size for caching item history data requests.</span><br><span class="line">#  Setting to 0 disables value cache.</span><br><span class="line">#</span><br><span class="line"># Mandatory: no</span><br><span class="line"># Range: 0,128K-64G</span><br><span class="line"># Default:</span><br><span class="line"># ValueCacheSize=8M</span><br><span class="line"></span><br><span class="line">### Option: Timeout</span><br><span class="line">#  Specifies how long we wait for agent, SNMP device or external check (in seconds).</span><br><span class="line">#</span><br><span class="line"># Mandatory: no</span><br><span class="line"># Range: 1-30</span><br><span class="line"># Default:</span><br><span class="line"># Timeout=3</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">### Option: TrapperTimeout</span><br><span class="line">#  Specifies how many seconds trapper may spend processing new data.</span><br><span class="line">#</span><br><span class="line"># Mandatory: no</span><br><span class="line"># Range: 1-300</span><br><span class="line"># Default:</span><br><span class="line"># TrapperTimeout=300</span><br><span class="line"></span><br><span class="line">### Option: UnreachablePeriod</span><br><span class="line">#  After how many seconds of unreachability treat a host as unavailable.</span><br><span class="line">#</span><br><span class="line"># Mandatory: no</span><br><span class="line"># Range: 1-3600</span><br><span class="line"># Default:</span><br><span class="line"># UnreachablePeriod=45</span><br><span class="line"></span><br><span class="line">### Option: UnavailableDelay</span><br><span class="line">#  How often host is checked for availability during the unavailability period, in seconds.</span><br><span class="line">#</span><br><span class="line"># Mandatory: no</span><br><span class="line"># Range: 1-3600</span><br><span class="line"># Default:</span><br><span class="line"># UnavailableDelay=60</span><br><span class="line"></span><br><span class="line">### Option: UnreachableDelay</span><br><span class="line">#  How often host is checked for availability during the unreachability period, in seconds.</span><br><span class="line">#</span><br><span class="line"># Mandatory: no</span><br><span class="line"># Range: 1-3600</span><br><span class="line"># Default:</span><br><span class="line"># UnreachableDelay=15</span><br><span class="line"></span><br><span class="line">### Option: AlertScriptsPath</span><br><span class="line">#  Full path to location of custom alert scripts.</span><br><span class="line">#  Default depends on compilation options.</span><br><span class="line">#  To see the default path run command &quot;zabbix_server --help&quot;.</span><br><span class="line">#</span><br><span class="line"># Mandatory: no</span><br><span class="line"># Default:</span><br><span class="line"># AlertScriptsPath=$&#123;datadir&#125;/zabbix/alertscripts</span><br><span class="line">AlertScriptsPath=/usr/lib/zabbix/alertscripts</span><br><span class="line"></span><br><span class="line">### Option: ExternalScripts</span><br><span class="line">#  Full path to location of external scripts.</span><br><span class="line">#  Default depends on compilation options.</span><br><span class="line">#  To see the default path run command &quot;zabbix_server --help&quot;.</span><br><span class="line">#</span><br><span class="line"># Mandatory: no</span><br><span class="line"># Default:</span><br><span class="line"># ExternalScripts=$&#123;datadir&#125;/zabbix/externalscripts</span><br><span class="line">ExternalScripts=/usr/lib/zabbix/externalscripts</span><br><span class="line"></span><br><span class="line">### Option: FpingLocation</span><br><span class="line">#  Location of fping.</span><br><span class="line">#  Make sure that fping binary has root ownership and SUID flag set.</span><br><span class="line">#</span><br><span class="line"># Mandatory: no</span><br><span class="line"># Default:</span><br><span class="line"># FpingLocation=/usr/sbin/fping</span><br><span class="line">FpingLocation=/usr/sbin/fping</span><br><span class="line"></span><br><span class="line">### Option: Fping6Location</span><br><span class="line">#  Location of fping6.</span><br><span class="line">#  Make sure that fping6 binary has root ownership and SUID flag set.</span><br><span class="line">#  Make empty if your fping utility is capable to process IPv6 addresses.</span><br><span class="line">#</span><br><span class="line"># Mandatory: no</span><br><span class="line"># Default:</span><br><span class="line"># Fping6Location=/usr/sbin/fping6</span><br><span class="line"></span><br><span class="line">### Option: SSHKeyLocation</span><br><span class="line">#  Location of public and private keys for SSH checks and actions.</span><br><span class="line">#</span><br><span class="line"># Mandatory: no</span><br><span class="line"># Default:</span><br><span class="line"># SSHKeyLocation=</span><br><span class="line">SSHKeyLocation=/var/lib/zabbix/ssh_keys</span><br><span class="line"></span><br><span class="line">### Option: LogSlowQueries</span><br><span class="line">#  How long a database query may take before being logged (in milliseconds).</span><br><span class="line">#  Only works if DebugLevel set to 3, 4 or 5.</span><br><span class="line">#  0 - don&#x27;t log slow queries.</span><br><span class="line">#</span><br><span class="line"># Mandatory: no</span><br><span class="line"># Range: 1-3600000</span><br><span class="line"># Default:</span><br><span class="line"># LogSlowQueries=0</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">### Option: TmpDir</span><br><span class="line">#  Temporary directory.</span><br><span class="line">#</span><br><span class="line"># Mandatory: no</span><br><span class="line"># Default:</span><br><span class="line"># TmpDir=/tmp</span><br><span class="line"></span><br><span class="line">### Option: StartProxyPollers</span><br><span class="line">#  Number of pre-forked instances of pollers for passive proxies.</span><br><span class="line">#</span><br><span class="line"># Mandatory: no</span><br><span class="line"># Range: 0-250</span><br><span class="line"># Default:</span><br><span class="line"># StartProxyPollers=1</span><br><span class="line"></span><br><span class="line">### Option: ProxyConfigFrequency</span><br><span class="line">#  How often Zabbix Server sends configuration data to a Zabbix Proxy in seconds.</span><br><span class="line">#  This parameter is used only for proxies in the passive mode.</span><br><span class="line">#</span><br><span class="line"># Mandatory: no</span><br><span class="line"># Range: 1-3600*24*7</span><br><span class="line"># Default:</span><br><span class="line"># ProxyConfigFrequency=300</span><br><span class="line"></span><br><span class="line">### Option: ProxyDataFrequency</span><br><span class="line">#  How often Zabbix Server requests history data from a Zabbix Proxy in seconds.</span><br><span class="line">#  This parameter is used only for proxies in the passive mode.</span><br><span class="line">#</span><br><span class="line"># Mandatory: no</span><br><span class="line"># Range: 1-3600</span><br><span class="line"># Default:</span><br><span class="line"># ProxyDataFrequency=1</span><br><span class="line"></span><br><span class="line">### Option: StartLLDProcessors</span><br><span class="line">#  Number of pre-forked instances of low level discovery processors.</span><br><span class="line">#</span><br><span class="line"># Mandatory: no</span><br><span class="line"># Range: 1-100</span><br><span class="line"># Default:</span><br><span class="line"># StartLLDProcessors=2</span><br><span class="line"></span><br><span class="line">### Option: AllowRoot</span><br><span class="line">#  Allow the server to run as &#x27;root&#x27;. If disabled and the server is started by &#x27;root&#x27;, the server</span><br><span class="line">#  will try to switch to the user specified by the User configuration option instead.</span><br><span class="line">#  Has no effect if started under a regular user.</span><br><span class="line">#  0 - do not allow</span><br><span class="line">#  1 - allow</span><br><span class="line">#</span><br><span class="line"># Mandatory: no</span><br><span class="line"># Default:</span><br><span class="line"># AllowRoot=0</span><br><span class="line"></span><br><span class="line">### Option: User</span><br><span class="line">#  Drop privileges to a specific, existing user on the system.</span><br><span class="line">#  Only has effect if run as &#x27;root&#x27; and AllowRoot is disabled.</span><br><span class="line">#</span><br><span class="line"># Mandatory: no</span><br><span class="line"># Default:</span><br><span class="line"># User=zabbix</span><br><span class="line">User=zabbix</span><br><span class="line"></span><br><span class="line">### Option: Include</span><br><span class="line">#  You may include individual files or all files in a directory in the configuration file.</span><br><span class="line">#  Installing Zabbix will create include directory in /usr/local/etc, unless modified during the compile time.</span><br><span class="line">#</span><br><span class="line"># Mandatory: no</span><br><span class="line"># Default:</span><br><span class="line"># Include=</span><br><span class="line"></span><br><span class="line"># Include=/usr/local/etc/zabbix_server.general.conf</span><br><span class="line"># Include=/usr/local/etc/zabbix_server.conf.d/</span><br><span class="line"># Include=/usr/local/etc/zabbix_server.conf.d/*.conf</span><br><span class="line"></span><br><span class="line">### Option: SSLCertLocation</span><br><span class="line">#  Location of SSL client certificates.</span><br><span class="line">#  This parameter is used only in web monitoring.</span><br><span class="line">#  Default depends on compilation options.</span><br><span class="line">#  To see the default path run command &quot;zabbix_server --help&quot;.</span><br><span class="line">#</span><br><span class="line"># Mandatory: no</span><br><span class="line"># Default:</span><br><span class="line"># SSLCertLocation=$&#123;datadir&#125;/zabbix/ssl/certs</span><br><span class="line">SSLCertLocation=/var/lib/zabbix/ssl/certs/</span><br><span class="line"></span><br><span class="line">### Option: SSLKeyLocation</span><br><span class="line">#  Location of private keys for SSL client certificates.</span><br><span class="line">#  This parameter is used only in web monitoring.</span><br><span class="line">#  Default depends on compilation options.</span><br><span class="line">#  To see the default path run command &quot;zabbix_server --help&quot;.</span><br><span class="line">#</span><br><span class="line"># Mandatory: no</span><br><span class="line"># Default:</span><br><span class="line"># SSLKeyLocation=$&#123;datadir&#125;/zabbix/ssl/keys</span><br><span class="line">SSLKeyLocation=/var/lib/zabbix/ssl/keys/</span><br><span class="line"></span><br><span class="line">### Option: SSLCALocation</span><br><span class="line">#  Override the location of certificate authority (CA) files for SSL server certificate verification.</span><br><span class="line">#  If not set, system-wide directory will be used.</span><br><span class="line">#  This parameter is used in web monitoring, SMTP authentication, HTTP agent items and for communication with Vault.</span><br><span class="line">#</span><br><span class="line"># Mandatory: no</span><br><span class="line"># Default:</span><br><span class="line"># SSLCALocation=</span><br><span class="line">SSLCALocation=/var/lib/zabbix/ssl/ssl_ca/</span><br><span class="line"></span><br><span class="line">### Option: StatsAllowedIP</span><br><span class="line">#  List of comma delimited IP addresses, optionally in CIDR notation, or DNS names of external Zabbix instances.</span><br><span class="line">#  Stats request will be accepted only from the addresses listed here. If this parameter is not set no stats requests</span><br><span class="line">#  will be accepted.</span><br><span class="line">#  If IPv6 support is enabled then &#x27;127.0.0.1&#x27;, &#x27;::127.0.0.1&#x27;, &#x27;::ffff:127.0.0.1&#x27; are treated equally</span><br><span class="line">#  and &#x27;::/0&#x27; will allow any IPv4 or IPv6 address.</span><br><span class="line">#  &#x27;0.0.0.0/0&#x27; can be used to allow any IPv4 address.</span><br><span class="line">#  Example: StatsAllowedIP=127.0.0.1,192.168.1.0/24,::1,2001:db8::/32,zabbix.example.com</span><br><span class="line">#</span><br><span class="line"># Mandatory: no</span><br><span class="line"># Default:</span><br><span class="line"># StatsAllowedIP=</span><br><span class="line"></span><br><span class="line">####### LOADABLE MODULES #######</span><br><span class="line"></span><br><span class="line">### Option: LoadModulePath</span><br><span class="line">#  Full path to location of server modules.</span><br><span class="line">#  Default depends on compilation options.</span><br><span class="line">#  To see the default path run command &quot;zabbix_server --help&quot;.</span><br><span class="line">#</span><br><span class="line"># Mandatory: no</span><br><span class="line"># Default:</span><br><span class="line"># LoadModulePath=$&#123;libdir&#125;/modules</span><br><span class="line">LoadModulePath=/var/lib/zabbix/modules/</span><br><span class="line"></span><br><span class="line">### Option: LoadModule</span><br><span class="line">#  Module to load at server startup. Modules are used to extend functionality of the server.</span><br><span class="line">#  Formats:</span><br><span class="line">#    LoadModule=&lt;module.so&gt;</span><br><span class="line">#    LoadModule=&lt;path/module.so&gt;</span><br><span class="line">#    LoadModule=&lt;/abs_path/module.so&gt;</span><br><span class="line">#  Either the module must be located in directory specified by LoadModulePath or the path must precede the module name.</span><br><span class="line">#  If the preceding path is absolute (starts with &#x27;/&#x27;) then LoadModulePath is ignored.</span><br><span class="line">#  It is allowed to include multiple LoadModule parameters.</span><br><span class="line">#</span><br><span class="line"># Mandatory: no</span><br><span class="line"># Default:</span><br><span class="line"># LoadModule=</span><br><span class="line"></span><br><span class="line">####### TLS-RELATED PARAMETERS #######</span><br><span class="line"></span><br><span class="line">### Option: TLSCAFile</span><br><span class="line">#  Full pathname of a file containing the top-level CA(s) certificates for</span><br><span class="line">#  peer certificate verification.</span><br><span class="line">#</span><br><span class="line"># Mandatory: no</span><br><span class="line"># Default:</span><br><span class="line"># TLSCAFile=</span><br><span class="line"></span><br><span class="line">### Option: TLSCRLFile</span><br><span class="line">#  Full pathname of a file containing revoked certificates.</span><br><span class="line">#</span><br><span class="line"># Mandatory: no</span><br><span class="line"># Default:</span><br><span class="line"># TLSCRLFile=</span><br><span class="line"></span><br><span class="line">### Option: TLSCertFile</span><br><span class="line">#  Full pathname of a file containing the server certificate or certificate chain.</span><br><span class="line">#</span><br><span class="line"># Mandatory: no</span><br><span class="line"># Default:</span><br><span class="line"># TLSCertFile=</span><br><span class="line"></span><br><span class="line">### Option: TLSKeyFile</span><br><span class="line">#  Full pathname of a file containing the server private key.</span><br><span class="line">#</span><br><span class="line"># Mandatory: no</span><br><span class="line"># Default:</span><br><span class="line"># TLSKeyFile=</span><br><span class="line"></span><br><span class="line">####### For advanced users - TLS ciphersuite selection criteria #######</span><br><span class="line"></span><br><span class="line">### Option: TLSCipherCert13</span><br><span class="line">#  Cipher string for OpenSSL 1.1.1 or newer in TLS 1.3.</span><br><span class="line">#  Override the default ciphersuite selection criteria for certificate-based encryption.</span><br><span class="line">#</span><br><span class="line"># Mandatory: no</span><br><span class="line"># Default:</span><br><span class="line"># TLSCipherCert13=</span><br><span class="line"></span><br><span class="line">### Option: TLSCipherCert</span><br><span class="line">#  GnuTLS priority string or OpenSSL (TLS 1.2) cipher string.</span><br><span class="line">#  Override the default ciphersuite selection criteria for certificate-based encryption.</span><br><span class="line">#  Example for GnuTLS:</span><br><span class="line">#    NONE:+VERS-TLS1.2:+ECDHE-RSA:+RSA:+AES-128-GCM:+AES-128-CBC:+AEAD:+SHA256:+SHA1:+CURVE-ALL:+COMP-NULL:+SIGN-ALL:+CTYPE-X.509</span><br><span class="line">#  Example for OpenSSL:</span><br><span class="line">#    EECDH+aRSA+AES128:RSA+aRSA+AES128</span><br><span class="line">#</span><br><span class="line"># Mandatory: no</span><br><span class="line"># Default:</span><br><span class="line"># TLSCipherCert=</span><br><span class="line"></span><br><span class="line">### Option: TLSCipherPSK13</span><br><span class="line">#  Cipher string for OpenSSL 1.1.1 or newer in TLS 1.3.</span><br><span class="line">#  Override the default ciphersuite selection criteria for PSK-based encryption.</span><br><span class="line">#  Example:</span><br><span class="line">#    TLS_CHACHA20_POLY1305_SHA256:TLS_AES_128_GCM_SHA256</span><br><span class="line">#</span><br><span class="line"># Mandatory: no</span><br><span class="line"># Default:</span><br><span class="line"># TLSCipherPSK13=</span><br><span class="line"></span><br><span class="line">### Option: TLSCipherPSK</span><br><span class="line">#  GnuTLS priority string or OpenSSL (TLS 1.2) cipher string.</span><br><span class="line">#  Override the default ciphersuite selection criteria for PSK-based encryption.</span><br><span class="line">#  Example for GnuTLS:</span><br><span class="line">#    NONE:+VERS-TLS1.2:+ECDHE-PSK:+PSK:+AES-128-GCM:+AES-128-CBC:+AEAD:+SHA256:+SHA1:+CURVE-ALL:+COMP-NULL:+SIGN-ALL</span><br><span class="line">#  Example for OpenSSL:</span><br><span class="line">#    kECDHEPSK+AES128:kPSK+AES128</span><br><span class="line">#</span><br><span class="line"># Mandatory: no</span><br><span class="line"># Default:</span><br><span class="line"># TLSCipherPSK=</span><br><span class="line"></span><br><span class="line">### Option: TLSCipherAll13</span><br><span class="line">#  Cipher string for OpenSSL 1.1.1 or newer in TLS 1.3.</span><br><span class="line">#  Override the default ciphersuite selection criteria for certificate- and PSK-based encryption.</span><br><span class="line">#  Example:</span><br><span class="line">#    TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256:TLS_AES_128_GCM_SHA256</span><br><span class="line">#</span><br><span class="line"># Mandatory: no</span><br><span class="line"># Default:</span><br><span class="line"># TLSCipherAll13=</span><br><span class="line"></span><br><span class="line">### Option: TLSCipherAll</span><br><span class="line">#  GnuTLS priority string or OpenSSL (TLS 1.2) cipher string.</span><br><span class="line">#  Override the default ciphersuite selection criteria for certificate- and PSK-based encryption.</span><br><span class="line">#  Example for GnuTLS:</span><br><span class="line">#    NONE:+VERS-TLS1.2:+ECDHE-RSA:+RSA:+ECDHE-PSK:+PSK:+AES-128-GCM:+AES-128-CBC:+AEAD:+SHA256:+SHA1:+CURVE-ALL:+COMP-NULL:+SIGN-ALL:+CTYPE-X.509</span><br><span class="line">#  Example for OpenSSL:</span><br><span class="line">#    EECDH+aRSA+AES128:RSA+aRSA+AES128:kECDHEPSK+AES128:kPSK+AES128</span><br><span class="line">#</span><br><span class="line"># Mandatory: no</span><br><span class="line"># Default:</span><br><span class="line"># TLSCipherAll=</span><br><span class="line"></span><br><span class="line">### Option: DBTLSConnect</span><br><span class="line">#  Setting this option enforces to use TLS connection to database.</span><br><span class="line">#  required    - connect using TLS</span><br><span class="line">#  verify_ca   - connect using TLS and verify certificate</span><br><span class="line">#  verify_full - connect using TLS, verify certificate and verify that database identity specified by DBHost</span><br><span class="line">#                matches its certificate</span><br><span class="line">#  On MySQL starting from 5.7.11 and PostgreSQL following values are supported: &quot;required&quot;, &quot;verify_ca&quot; and</span><br><span class="line">#  &quot;verify_full&quot;.</span><br><span class="line">#  On MariaDB starting from version 10.2.6 &quot;required&quot; and &quot;verify_full&quot; values are supported.</span><br><span class="line">#  Default is not to set any option and behavior depends on database configuration</span><br><span class="line">#</span><br><span class="line"># Mandatory: no</span><br><span class="line"># Default:</span><br><span class="line"># DBTLSConnect=</span><br><span class="line"></span><br><span class="line">### Option: DBTLSCAFile</span><br><span class="line">#  Full pathname of a file containing the top-level CA(s) certificates for database certificate verification.</span><br><span class="line">#  Supported only for MySQL and PostgreSQL</span><br><span class="line">#</span><br><span class="line"># Mandatory: no</span><br><span class="line">#  (yes, if DBTLSConnect set to one of: verify_ca, verify_full)</span><br><span class="line"># Default:</span><br><span class="line"># DBTLSCAFile=</span><br><span class="line"></span><br><span class="line">### Option: DBTLSCertFile</span><br><span class="line">#  Full pathname of file containing Zabbix server certificate for authenticating to database.</span><br><span class="line">#  Supported only for MySQL and PostgreSQL</span><br><span class="line">#</span><br><span class="line"># Mandatory: no</span><br><span class="line"># Default:</span><br><span class="line"># DBTLSCertFile=</span><br><span class="line"></span><br><span class="line">### Option: DBTLSKeyFile</span><br><span class="line">#  Full pathname of file containing the private key for authenticating to database.</span><br><span class="line">#  Supported only for MySQL and PostgreSQL</span><br><span class="line">#</span><br><span class="line"># Mandatory: no</span><br><span class="line"># Default:</span><br><span class="line"># DBTLSKeyFile=</span><br><span class="line"></span><br><span class="line">### Option: DBTLSCipher</span><br><span class="line">#  The list of encryption ciphers that Zabbix server permits for TLS protocols up through TLSv1.2</span><br><span class="line">#  Supported only for MySQL</span><br><span class="line">#</span><br><span class="line"># Mandatory no</span><br><span class="line"># Default:</span><br><span class="line"># DBTLSCipher=</span><br><span class="line"></span><br><span class="line">### Option: DBTLSCipher13</span><br><span class="line">#  The list of encryption ciphersuites that Zabbix server permits for TLSv1.3 protocol</span><br><span class="line">#  Supported only for MySQL, starting from version 8.0.16</span><br><span class="line">#</span><br><span class="line"># Mandatory no</span><br><span class="line"># Default:</span><br><span class="line"># DBTLSCipher13=</span><br><span class="line"></span><br><span class="line">### Option: Vault</span><br><span class="line">#  Specifies vault:</span><br><span class="line">#    HashiCorp - HashiCorp KV Secrets Engine - Version 2</span><br><span class="line">#    CyberArk  - CyberArk Central Credential Provider</span><br><span class="line">#</span><br><span class="line"># Mandatory: no</span><br><span class="line"># Default:</span><br><span class="line"># Vault=HashiCorp</span><br><span class="line"></span><br><span class="line">### Option: VaultToken</span><br><span class="line">#  Vault authentication token that should have been generated exclusively for Zabbix server with read only permission</span><br><span class="line">#  to paths specified in Vault macros and read only permission to path specified in optional VaultDBPath</span><br><span class="line">#  configuration parameter.</span><br><span class="line">#  It is an error if VaultToken and VAULT_TOKEN environment variable are defined at the same time.</span><br><span class="line">#</span><br><span class="line"># Mandatory: no</span><br><span class="line">#  (yes, if Vault is explicitly set to HashiCorp)</span><br><span class="line"># Default:</span><br><span class="line"># VaultToken=</span><br><span class="line"></span><br><span class="line">### Option: VaultURL</span><br><span class="line">#  Vault server HTTP[S] URL. System-wide CA certificates directory will be used if SSLCALocation is not specified.</span><br><span class="line">#</span><br><span class="line"># Mandatory: no</span><br><span class="line"># Default:</span><br><span class="line"># VaultURL=https://127.0.0.1:8200</span><br><span class="line"></span><br><span class="line">### Option: VaultDBPath</span><br><span class="line">#  Vault path or query depending on the Vault from where credentials for database will be retrieved by keys.</span><br><span class="line">#  Keys used for HashiCorp are &#x27;password&#x27; and &#x27;username&#x27;.</span><br><span class="line">#  Example path:</span><br><span class="line">#    secret/zabbix/database</span><br><span class="line">#  Keys used for CyberArk are &#x27;Content&#x27; and &#x27;UserName&#x27;.</span><br><span class="line">#  Example query:</span><br><span class="line">#    AppID=zabbix_server&amp;Query=Safe=passwordSafe;Object=zabbix_server_database</span><br><span class="line">#  This option can only be used if DBUser and DBPassword are not specified.</span><br><span class="line">#</span><br><span class="line"># Mandatory: no</span><br><span class="line"># Default:</span><br><span class="line"># VaultDBPath=</span><br><span class="line"></span><br><span class="line">### Option: VaultTLSCertFile</span><br><span class="line">#  Name of the SSL certificate file used for client authentication. The certificate file must be in PEM1 format.</span><br><span class="line">#  If the certificate file contains also the private key, leave the SSL key file field empty. The directory</span><br><span class="line">#  containing this file is specified by configuration parameter SSLCertLocation.</span><br><span class="line">#</span><br><span class="line"># Mandatory: no</span><br><span class="line"># Default:</span><br><span class="line"># VaultTLSCertFile=</span><br><span class="line"></span><br><span class="line">### Option: VaultTLSKeyFile</span><br><span class="line">#  Name of the SSL private key file used for client authentication. The private key file must be in PEM1 format.</span><br><span class="line">#  The directory containing this file is specified by configuration parameter SSLKeyLocation.</span><br><span class="line">#</span><br><span class="line"># Mandatory: no</span><br><span class="line"># Default:</span><br><span class="line"># VaultTLSKeyFile=</span><br><span class="line"></span><br><span class="line">### Option: StartReportWriters</span><br><span class="line">#  Number of pre-forked report writer instances.</span><br><span class="line">#</span><br><span class="line"># Mandatory: no</span><br><span class="line"># Range: 0-100</span><br><span class="line"># Default:</span><br><span class="line"># StartReportWriters=0</span><br><span class="line"></span><br><span class="line">### Option: WebServiceURL</span><br><span class="line">#  URL to Zabbix web service, used to perform web related tasks.</span><br><span class="line">#  Example: http://localhost:10053/report</span><br><span class="line">#</span><br><span class="line"># Mandatory: no</span><br><span class="line"># Default:</span><br><span class="line"># WebServiceURL=</span><br><span class="line">WebServiceURL=http://zabbix-web-service:10053/report</span><br><span class="line"></span><br><span class="line">### Option: ServiceManagerSyncFrequency</span><br><span class="line">#  How often Zabbix will synchronize configuration of a service manager (in seconds).</span><br><span class="line">#</span><br><span class="line"># Mandatory: no</span><br><span class="line"># Range: 1-3600</span><br><span class="line"># Default:</span><br><span class="line"># ServiceManagerSyncFrequency=60</span><br><span class="line"></span><br><span class="line">### Option: ProblemHousekeepingFrequency</span><br><span class="line">#  How often Zabbix will delete problems for deleted triggers (in seconds).</span><br><span class="line">#</span><br><span class="line"># Mandatory: no</span><br><span class="line"># Range: 1-3600</span><br><span class="line"># Default:</span><br><span class="line"># ProblemHousekeepingFrequency=60</span><br><span class="line"></span><br><span class="line">## Option: StartODBCPollers</span><br><span class="line">#  Number of pre-forked ODBC poller instances.</span><br><span class="line">#</span><br><span class="line"># Mandatory: no</span><br><span class="line"># Range: 0-1000</span><br><span class="line"># Default:</span><br><span class="line"># StartODBCPollers=1</span><br><span class="line"></span><br><span class="line">####### For advanced users - TCP-related fine-tuning parameters #######</span><br><span class="line"></span><br><span class="line">## Option: ListenBacklog</span><br><span class="line">#       The maximum number of pending connections in the queue. This parameter is passed to</span><br><span class="line">#       listen() function as argument &#x27;backlog&#x27; (see &quot;man listen&quot;).</span><br><span class="line">#</span><br><span class="line"># Mandatory: no</span><br><span class="line"># Range: 0 - INT_MAX (depends on system, too large values may be silently truncated to implementation-specified maximum)</span><br><span class="line"># Default: SOMAXCONN (hard-coded constant, depends on system)</span><br><span class="line"># ListenBacklog=</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">####### High availability cluster parameters #######</span><br><span class="line"></span><br><span class="line">## Option: HANodeName</span><br><span class="line">#  The high availability cluster node name.</span><br><span class="line">#  When empty, server is working in standalone mode; a node with empty name is registered with address for the frontend to connect to.</span><br><span class="line">#</span><br><span class="line"># Mandatory: no</span><br><span class="line"># Default: </span><br><span class="line"># HANodeName=</span><br><span class="line"></span><br><span class="line">## Option: NodeAddress</span><br><span class="line">#  IP or hostname with optional port to specify how frontend should connect to the server.</span><br><span class="line">#  Format: &lt;address&gt;[:&lt;port&gt;]</span><br><span class="line">#</span><br><span class="line">#  If IP or hostname is not set, then ListenIP value will be used. In case ListenIP is not set, localhost will be used.</span><br><span class="line">#  If port is not set, then ListenPort value will be used. In case ListenPort is not set, 10051 will be used.</span><br><span class="line">#  This option can be overridden by address specified in frontend configuration.</span><br><span class="line">#</span><br><span class="line"># Mandatory: no</span><br><span class="line"># Default: </span><br><span class="line"># NodeAddress=localhost:10051</span><br></pre></td></tr></table></figure>

<h4 id="起容器的命令："><a href="#起容器的命令：" class="headerlink" title="起容器的命令："></a>起容器的命令：</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run --name zabbix-server-mysql -t \</span><br><span class="line">    -v /root/zabbix-server/zabbix_server/zabbix_server.conf:/etc/zabbix/zabbix_server.conf \</span><br><span class="line">    -e DB_SERVER_HOST=<span class="string">&quot;mysql-server&quot;</span>  \</span><br><span class="line">    -e MYSQL_DATABASE=<span class="string">&quot;zabbix&quot;</span>  \</span><br><span class="line">    -e MYSQL_USER=<span class="string">&quot;zabbix&quot;</span>   \</span><br><span class="line">    -e MYSQL_PASSWORD=<span class="string">&quot;zabbix_pwd&quot;</span>   \</span><br><span class="line">    -e MYSQL_ROOT_PASSWORD=<span class="string">&quot;123456&quot;</span>   \</span><br><span class="line">    -e ZBX_JAVAGATEWAY=<span class="string">&quot;zabbix-java-gateway&quot;</span>   \</span><br><span class="line">    --<span class="built_in">link</span> mysql-server:mysql   \</span><br><span class="line">    --<span class="built_in">link</span> zabbix-java-gateway:zabbix-java-gateway  \</span><br><span class="line">    --restart=unless-stopped   \</span><br><span class="line">    -p 10051:10051   \</span><br><span class="line">    -d zabbix/zabbix-server-mysql:6.2-alpine-latest</span><br></pre></td></tr></table></figure>

<h3 id="5-docker部署zabbix前端"><a href="#5-docker部署zabbix前端" class="headerlink" title="5. docker部署zabbix前端"></a>5. docker部署zabbix前端</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run --name zabbix-web-nginx-mysql -t \</span><br><span class="line">   -e PHP_TZ=<span class="string">&quot;Asia/Shanghai&quot;</span> \</span><br><span class="line">   -e ZBX_SERVER_HOST=<span class="string">&quot;zabbix-server-mysql&quot;</span> \</span><br><span class="line">      -e DB_SERVER_HOST=<span class="string">&quot;mysql-server&quot;</span> \</span><br><span class="line">      -e MYSQL_DATABASE=<span class="string">&quot;zabbix&quot;</span> \</span><br><span class="line">      -e MYSQL_USER=<span class="string">&quot;zabbix&quot;</span> \</span><br><span class="line">      -e MYSQL_PASSWORD=<span class="string">&quot;zabbix_pwd&quot;</span> \</span><br><span class="line">      -e MYSQL_ROOT_PASSWORD=<span class="string">&quot;123456&quot;</span> \</span><br><span class="line">      --<span class="built_in">link</span> mysql-server:mysql \</span><br><span class="line">      --<span class="built_in">link</span> zabbix-server-mysql:zabbix-server \</span><br><span class="line">      -p 80:8080 \</span><br><span class="line">      --restart unless-stopped \</span><br><span class="line">      -d zabbix/zabbix-web-nginx-mysql:alpine-6.2-latest</span><br></pre></td></tr></table></figure>

<p>至此server端的组件均已安装</p>
<p>访问 <code>IP:80</code>即可访问到zabbix服务端，账号密码为<code>Admin/Zabbix</code></p>
<h2 id="服务器部署agent"><a href="#服务器部署agent" class="headerlink" title="服务器部署agent"></a>服务器部署agent</h2><p>使用docker部署agent在不做其他配置的情况下只会监测容器本身。因此这里使用直接安装的方式部署zabbix-agent</p>
<h3 id="使用包管理器安装"><a href="#使用包管理器安装" class="headerlink" title="使用包管理器安装"></a>使用包管理器安装</h3><h4 id="1-添加与系统版本一致的仓库"><a href="#1-添加与系统版本一致的仓库" class="headerlink" title="1. 添加与系统版本一致的仓库"></a>1. 添加与系统版本一致的仓库</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">dnf install -y https://repo.zabbix.com/zabbix/7.0/rhel/8/x86_64/zabbix-release-7.0-1.el8.noarch.rpm</span><br></pre></td></tr></table></figure>

<h4 id="2-清理并刷新缓存"><a href="#2-清理并刷新缓存" class="headerlink" title="2. 清理并刷新缓存"></a>2. 清理并刷新缓存</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">dnf clean all</span><br><span class="line">dnf makecache</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="3-安装"><a href="#3-安装" class="headerlink" title="3. 安装"></a>3. 安装</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">dnf install -y zabbix-agent</span><br></pre></td></tr></table></figure>







<h3 id="离线包安装"><a href="#离线包安装" class="headerlink" title="离线包安装"></a>离线包安装</h3><h4 id="1-准备离线包"><a href="#1-准备离线包" class="headerlink" title="1. 准备离线包"></a>1. 准备离线包</h4><p>以下是安装<code>zabbix7.0</code>所需要的所有包。主包为<code>zabbix7.0-7.0.16-1.el8.x86_64.rpm</code></p>
<blockquote>
<p>仅仅适用于Anolis8.10环境下。</p>
</blockquote>
<blockquote>
<p><img src="/../images/Linux/%E8%BF%90%E7%BB%B4/zabbix/image-20250730143332854.png" alt="image-20250730143332854"></p>
</blockquote>
<h4 id="2-安装"><a href="#2-安装" class="headerlink" title="2. 安装"></a>2. 安装</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum localinstall *.rpm</span><br></pre></td></tr></table></figure>



<h4 id="3-配置agent并启用"><a href="#3-配置agent并启用" class="headerlink" title="3. 配置agent并启用"></a>3. 配置agent并启用</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim /etc/zabbix/zabbix_agentd.conf</span><br></pre></td></tr></table></figure>

<p>两处地方修改为zabbix-server的IP，Hostname改为合适的名字</p>
<p><img src="/../images/Linux/%E8%BF%90%E7%BB%B4/zabbix/image-20250730111245757.png" alt="image-20250730111245757"></p>
<p><img src="/../images/Linux/%E8%BF%90%E7%BB%B4/zabbix/image-20250730111256706.png" alt="image-20250730111256706"></p>
<p>保存退出后重启服务</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">systemctl restart zabbix-agent.service</span><br></pre></td></tr></table></figure>

<p>确认正常运行中</p>
<p><img src="/../images/Linux/%E8%BF%90%E7%BB%B4/zabbix/image-20250730111426747.png" alt="image-20250730111426747"></p>
<h4 id="4-server端连接agent"><a href="#4-server端连接agent" class="headerlink" title="4. server端连接agent"></a>4. server端连接agent</h4><p>登录server端后点击：</p>
<p><img src="/../images/Linux/%E8%BF%90%E7%BB%B4/zabbix/image-20250730110022568.png" alt="image-20250730110022568"></p>
<p><img src="/../images/Linux/%E8%BF%90%E7%BB%B4/zabbix/image-20250730110158704.png" alt="image-20250730110158704"></p>
<p><img src="/../images/Linux/%E8%BF%90%E7%BB%B4/zabbix/image-20250730111457525.png" alt="image-20250730111457525"></p>
<p>等待连接变为绿色即可</p>
<p><img src="/../images/Linux/%E8%BF%90%E7%BB%B4/zabbix/image-20250730111517028.png" alt="image-20250730111517028"></p>
<h2 id="附："><a href="#附：" class="headerlink" title="附："></a>附：</h2><h3 id="离线包下载方法"><a href="#离线包下载方法" class="headerlink" title="离线包下载方法"></a>离线包下载方法</h3><h4 id="导入-Zabbix-官方仓库"><a href="#导入-Zabbix-官方仓库" class="headerlink" title="导入 Zabbix 官方仓库"></a>导入 Zabbix 官方仓库</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">dnf install -y https://repo.zabbix.com/zabbix/7.0/rhel/8/x86_64/zabbix-release-7.0-1.el8.noarch.rpm</span><br></pre></td></tr></table></figure>

<p><img src="/../images/Linux/%E8%BF%90%E7%BB%B4/zabbix/image-20250730143949900.png" alt="image-20250730143949900"></p>
<h4 id="下载到本地"><a href="#下载到本地" class="headerlink" title="下载到本地"></a>下载到本地</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">dnf download --resolve --destdir=./ zabbix-agent</span><br></pre></td></tr></table></figure>

<p><img src="/../images/Linux/%E8%BF%90%E7%BB%B4/zabbix/image-20250730143934759.png" alt="image-20250730143934759"></p>
<h3 id="开放agent端口"><a href="#开放agent端口" class="headerlink" title="开放agent端口"></a>开放agent端口</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 添加规则（在 Agent 所在机器上）</span></span><br><span class="line"><span class="built_in">sudo</span> firewall-cmd --permanent --add-port=10050/tcp</span><br><span class="line"><span class="built_in">sudo</span> firewall-cmd --reload</span><br></pre></td></tr></table></figure>

<h3 id="监控宿主机"><a href="#监控宿主机" class="headerlink" title="监控宿主机"></a>监控宿主机</h3><p>因为server端是容器起的，在宿主机安装好了agent之后的server IP需要填容器IP</p>
<blockquote>
<ul>
<li>宿主机 IP（如 <code>192.168.1.100</code>）默认不直接路由到容器。</li>
</ul>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Server=172.17.0.4</span><br><span class="line">ServerActive=172.17.0.4</span><br></pre></td></tr></table></figure>

<p><img src="/../images/Linux/%E8%BF%90%E7%BB%B4/zabbix/image-20250810131350190.png" alt="image-20250810131350190"></p>
]]></content>
      <categories>
        <category>软件技术</category>
      </categories>
      <tags>
        <tag>笔记</tag>
        <tag>linux</tag>
        <tag>运维</tag>
        <tag>docker</tag>
        <tag>zabbix</tag>
        <tag>硬件检测</tag>
      </tags>
  </entry>
  <entry>
    <title>《丧钟为谁而鸣》</title>
    <url>/2023/12/02/%E3%80%8A%E4%B8%A7%E9%92%9F%E4%B8%BA%E8%B0%81%E8%80%8C%E9%B8%A3%E3%80%8B/</url>
    <content><![CDATA[<p><img src="/../images/bookszwsrm.jpg" alt="丧钟为谁而鸣"></p>
<ul>
<li><p>这本书是Winston推荐的，其实我原本是想问问他给推荐几本简单易读的英文原著。回来一看，是一部长篇qwq，感觉读原著的话会有些吃力（英语水平有限: sigh :），于是就先读了翻译后的版本。看完以后久久不能释怀。</p>
</li>
<li><p>昨天深夜读完这本书，看看时间，恰好 2 : 00，合上眼，情节一幕幕复现在眼前，再过一个小时，皮拉尔就应该发现巴勃罗将罗伯托的起爆器和雷管偷走了。不知道如果巴勃罗没有偷走它们，又或者没有将它们扔下悬崖，罗伯托和巴塞尔默会不会能够活下去。巴塞尔默是那么热心肠，那么认真的令人尊敬的老人啊！不过死亡也许对他来说也是一种解脱吧。</p>
</li>
<li><p>在爱情上，我和罗伯托都是这样的人，在爱情上认为自己不会爱上别人，孑然一身，只是做着自己的事。然而他找到了小兔子玛利亚。在这样恐怖的栈帧中，能与她将往后余生的长相厮守浓缩为三天就已经十分幸运了不是吗？何必奢求永远。</p>
</li>
</ul>
<blockquote>
<p>“  你在要求不可能的事，你在要求绝不可能的事。所以，如果你真像你说的那样深爱这姑娘，那最好的，就是好好爱她，用尽全力，用浓烈填补这段关系中必将缺乏的长度与跨度。你听到了？过去，人们用一生的时间来做这件事。而现在，当你找到它，你得到两个夜晚，你会惊诧，这所有的幸运究竟从何而来。”</p>
<p>摘录来自<br>丧钟为谁而鸣(海明威代表作，普利策奖遗珠，海明威献给夫人玛莎·盖尔霍恩的定情之作)<br>厄尼斯特·海明威</p>
</blockquote>
<ul>
<li><p>人类似乎也遵循热力学第二定律，像化学反应一样，总是向着熵增的方向进行。战争带来了太多悲剧，太多遗憾。在看战争片和有关战争的书籍时，每每到有人逝去的情节时，眼角总是会不自觉的湿润。虽然我知道开始的各种暗示都意味着罗伯托会死，但是当他们炸桥成功任务完成时，我竟心怀一丝希望。就算罗伯托没死，战争确是无情的。历史上，有数不清的像罗伯托一样的人，将人类的和平与自由作为自己的信仰，至死不渝。这便是人性的光芒。</p>
</li>
<li><p>接下来就是读原著了。</p>
</li>
</ul>
]]></content>
      <categories>
        <category>读书</category>
      </categories>
      <tags>
        <tag>随手记</tag>
        <tag>读书</tag>
      </tags>
  </entry>
  <entry>
    <title>《人间天堂》</title>
    <url>/2024/04/17/%E3%80%8A%E4%BA%BA%E9%97%B4%E5%A4%A9%E5%A0%82%E3%80%8B/</url>
    <content><![CDATA[<h1 id="《人间天堂》"><a href="#《人间天堂》" class="headerlink" title="《人间天堂》"></a>《人间天堂》</h1><h2 id="菲茨杰拉德"><a href="#菲茨杰拉德" class="headerlink" title="菲茨杰拉德"></a>菲茨杰拉德</h2><p>​	我说不出为什么，其实比起来那本《了不起的盖茨比》，我更喜欢这本《人间天堂》。我也先是读完了《人间天堂》再去读的《了不起的盖茨比》。</p>
<p>​	这本书给我带来了太多的共鸣，即使我和Amory是两个来自截然不同世界的人。</p>
<p>​	电子笔记中的译文质量实在不如我纸质笔记本摘抄的高。下次再换个版本吧。（真的有下次吗？）</p>
<blockquote>
<p>他所知道的那个迪克·亨博德，那个记忆中富有魅力、有着独特个性的人，以及能唤起对他记忆的一切——噢，这一切现在都变得让人恐惧，绝无半点高贵气质，都已被碾作尘土。所有的悲剧都带给人离奇怪诞又肮脏作呕的紧张情绪——如此毫无价值，不值一提……像动物一样死去……艾默里记起了他童年时代在某个巷子里看到的那只被碾轧在地的血肉模糊、惨不忍睹的猫。</p>
</blockquote>
<hr>
<blockquote>
<p>她能够胜任大多数乏味的家务（尽管她足够聪明，</p>
<p>从不会让诸如编织和刺绣这些“闺阁女红”把自己困住），然而，在料</p>
<p>理完家务之后，她立刻就可以拿起一本书，让自己的思绪如同空中变</p>
<p>幻莫测的云朵一样随风漫步。她个性中最为深沉的底色是她由内而外</p>
<p>散发出的夺目的金色光彩，正如黑暗房间中的一团明火，可以用浪漫</p>
<p>和温情照亮围绕在周围的安静面孔，她可以把围绕在自己身上的光影</p>
<p>投射到房子的各个角落里。</p>
</blockquote>
<hr>
<blockquote>
<p>切记不要妄自菲薄，不必担心自己一无是处，通常人们</p>
<p>自视甚高的时候恰恰是他们表现最为糟糕的时候；也不必担</p>
<p>心失去你坚持称作“个性”的东西；十五岁的时候你光彩夺</p>
<p>目如晨曦初透，二十岁的时候你开始忧伤感怀如月色朦胧，</p>
<p>当你到了我这个年岁，就会像我一样，撒播着友善的金色光</p>
<p>芒，如午后四点钟的太阳。</p>
</blockquote>
<hr>
<blockquote>
<p>转眼间几个星期又蹉跎而去。艾默里偶尔还是会到纽约闲逛，想</p>
<p>去碰碰运气，找一辆崭新的亮闪闪的绿色公共汽车，希望它如棒棒糖</p>
<p>一般的耀眼光泽能渗入自己的性情之中。</p>
</blockquote>
<hr>
<blockquote>
<p>没有任何意志力——我是自己感情的奴隶，被自己的好恶左右，</p>
<p>被自己痛恨的厌倦主宰，我对自己大多数的欲望也只能听之任之——</p>
</blockquote>
<hr>
<blockquote>
<p>“没有任何意志力——我是自己感情的奴隶，被自己的好恶左右，</p>
<p>被自己痛恨的厌倦主宰，我对自己大多数的欲望也只能听之任之——”</p>
<p>“你不是那样的！”她把手攥成小拳头，去捶另一只手。“你身不由</p>
<p>己，被这世界上的一样东西绑缚着，动弹不得，它就是你的想象。”</p>
</blockquote>
<hr>
<blockquote>
<p>罗萨琳感到自己已经失去了什么，她不</p>
<p>明白失去的究竟是什么，也不知道她为何会失去。</p>
</blockquote>
<hr>
<blockquote>
<p>你或许可以匆匆忙忙地结婚，然后静下心来慢慢后悔。</p>
</blockquote>
<hr>
<blockquote>
<p>二月的街道，被夜晚的疾风吹过，湿冷的夜雨伴着阵阵</p>
<p>寒风，飘忽而至，断断续续地飘洒在街道上，道路两边荒废的人行步道上处处可见明晃晃的一片，那是融雪在路灯下熠</p>
<p>熠闪光，如同天上某种神圣的机器洒下的金油，金光闪闪，</p>
<p>这是一个星光闪耀、冰雪消融的时刻。</p>
<p>奇怪的夜雨——在许多男人的眼睛里闪动，充盈着生命</p>
<p>的悸动，在一片寂静中悄然洒落……哦，我还年轻，因为我</p>
<p>还可以再一次走向你，这世间最真实、美丽的女子，我还可</p>
<p>以亲吻你的双唇，重温还未逝去的旧梦，品尝你唇间甜蜜又</p>
<p>清新的滋味。</p>
<p>……午夜的空气中弥散着灼人的味道——一片死寂中没</p>
<p>有任何声息响动——生活像冰层一样砰然断裂！——一曲优</p>
<p>美的旋律传来，我看见你亭亭玉立，光彩照人，玉面盈</p>
<p>盈……春天已经破茧而出。</p>
<p>（屋檐上的冰凌正在消融，那座被仙人偷换的城市还在</p>
<p>昏睡。）</p>
<p>我们的思绪沿着屋檐结成霜冰；我们的魂魄高高在上，</p>
<p>在交错如迷宫的电网上，拥抱亲吻——似笑非笑的诡异声响</p>
<p>在空中回荡，留下一串叹息，喟叹那年少无知的轻狂；她爱</p>
<p>过，又悔过，在身后留下一副巨大的空壳。</p>
</blockquote>
]]></content>
      <categories>
        <category>读书</category>
      </categories>
      <tags>
        <tag>随手记</tag>
        <tag>读书</tag>
      </tags>
  </entry>
  <entry>
    <title>windows环境下使用pigz进行压缩和解压缩</title>
    <url>/2025/07/25/windows%E7%8E%AF%E5%A2%83%E4%B8%8B%E4%BD%BF%E7%94%A8pigz%E8%BF%9B%E8%A1%8C%E5%8E%8B%E7%BC%A9%E5%92%8C%E8%A7%A3%E5%8E%8B%E7%BC%A9/</url>
    <content><![CDATA[<h1 id="windows环境下使用pigz进行压缩和解压缩"><a href="#windows环境下使用pigz进行压缩和解压缩" class="headerlink" title="windows环境下使用pigz进行压缩和解压缩"></a>windows环境下使用pigz进行压缩和解压缩</h1><blockquote>
<p>​	pigz，全称 Parallel Implementation of GZip，是 gzip 的多线程替代工具，由 zlib 作者之一 Mark Adler 开发。它通过将数据分块并用多个 CPU 核心并行压缩，大幅提高大文件或大量文件的压缩与解压速度，适合 Linux、macOS 和 WSL 等环境。pigz 只支持 gzip 格式，通常与 tar 搭配使用生成 .tar.gz 压缩包。相比 gzip，pigz 的压缩率基本相同但速度更快，缺点是只能用于 gzip 格式，没有图形界面，更适合服务器或需要高性能压缩的场景。</p>
<p>​	在跨平台迁移数据的场景中，会遇到文件很大（几百g），并且还从Linux跨平台到Windows，例如数据库文件。这个时候数据的压缩和解压缩对于整个过程消耗的时间有巨大影响。</p>
<p>​	场景：windows下有一个data.tar.gz大文件，使用pigz的多线程解压到tar，然后再使用tar或者7zip解压出最后结果。</p>
</blockquote>
<h1 id="安装pigz"><a href="#安装pigz" class="headerlink" title="安装pigz"></a>安装pigz</h1><blockquote>
<p>可以用wsl安装或者cygwin安装。这里仅介绍cygwin。</p>
</blockquote>
<h2 id="安装cygwin"><a href="#安装cygwin" class="headerlink" title="安装cygwin"></a>安装cygwin</h2><blockquote>
<p>Cygwin 是一个在 Windows 上提供类似 Unix 环境的工具集和运行时库，由 Red Hat 维护开发。它通过实现一个兼容层，将大部分 GNU 和开源工具移植到 Windows，使用户能够在 Windows 中使用熟悉的 Bash shell、GNU 工具链和常用命令行程序。Cygwin 适合需要在 Windows 上执行脚本、编译 Linux 程序或进行类 Unix 开发的用户，优点是工具丰富、兼容性好；缺点是相较于原生 Linux 性能略低，占用空间较大，不适合作为正式生产环境，仅适合开发和学习使用。</p>
</blockquote>
<blockquote>
<p>Cygwin官网以及下载链接：<a href="https://www.cygwin.com/">Cygwin</a></p>
</blockquote>
<h3 id="1-下载setup-x86-64-exe"><a href="#1-下载setup-x86-64-exe" class="headerlink" title="1. 下载setup-x86_64.exe"></a>1. 下载<code>setup-x86_64.exe</code></h3><blockquote>
<p>这个文件可以不用删除，后续增加别的功能也可以用到。</p>
</blockquote>
<p><img src="/../images/Linux/%E8%BF%90%E7%BB%B4/pigz/image-20250725141440951.png" alt="image-20250725141440951"></p>
<h3 id="2-打开setup-x86-64-exe，点击下一页，选择-从互联网安装"><a href="#2-打开setup-x86-64-exe，点击下一页，选择-从互联网安装" class="headerlink" title="2. 打开setup-x86_64.exe，点击下一页，选择 从互联网安装"></a>2. 打开<code>setup-x86_64.exe</code>，点击下一页，选择 <strong>从互联网安装</strong></h3><p>​	<img src="/../images/Linux/%E8%BF%90%E7%BB%B4/pigz/image-20250725141603845.png" alt="image-20250725141603845"></p>
<h3 id="3-选择目录"><a href="#3-选择目录" class="headerlink" title="3. 选择目录"></a>3. 选择目录</h3><blockquote>
<p>这里需要准备好两个目录，一个用于放cygwin本体，以用于放cygwin的包，比如我们待会要安装的pigz</p>
</blockquote>
<p><img src="/../images/Linux/%E8%BF%90%E7%BB%B4/pigz/image-20250725141755149.png" alt="image-20250725141755149"></p>
<p><img src="/../images/Linux/%E8%BF%90%E7%BB%B4/pigz/image-20250725141812822.png" alt="image-20250725141812822"></p>
<h3 id="4-选择连接方式-直接连接"><a href="#4-选择连接方式-直接连接" class="headerlink" title="4. 选择连接方式 -直接连接"></a>4. 选择连接方式 -直接连接</h3><p><img src="/../images/Linux/%E8%BF%90%E7%BB%B4/pigz/image-20250725141938929.png" alt="image-20250725141938929"></p>
<h3 id="5-选择下载站点-这里可以选择腾讯的站点。"><a href="#5-选择下载站点-这里可以选择腾讯的站点。" class="headerlink" title="5. 选择下载站点-这里可以选择腾讯的站点。"></a>5. 选择下载站点-这里可以选择腾讯的站点。</h3><p><img src="/../images/Linux/%E8%BF%90%E7%BB%B4/pigz/image-20250725142059073.png" alt="image-20250725142059073"></p>
<h3 id="6-此时会弹出一个下载界面，里面有很多Linux工具"><a href="#6-此时会弹出一个下载界面，里面有很多Linux工具" class="headerlink" title="6. 此时会弹出一个下载界面，里面有很多Linux工具"></a>6. 此时会弹出一个下载界面，里面有很多Linux工具</h3><p>进入下一步安装pigz</p>
<h2 id="安装pigz-1"><a href="#安装pigz-1" class="headerlink" title="安装pigz"></a>安装pigz</h2><h3 id="1-搜索pigz"><a href="#1-搜索pigz" class="headerlink" title="1. 搜索pigz"></a>1. 搜索pigz</h3><p><img src="/../images/Linux/%E8%BF%90%E7%BB%B4/pigz/image-20250725142340074.png" alt="image-20250725142340074"></p>
<h3 id="2-选择版本，然后下载"><a href="#2-选择版本，然后下载" class="headerlink" title="2. 选择版本，然后下载"></a>2. 选择版本，然后下载</h3><p><img src="/../images/Linux/%E8%BF%90%E7%BB%B4/pigz/image-20250725142422049.png" alt="image-20250725142422049"></p>
<h3 id="3-等待下载即可"><a href="#3-等待下载即可" class="headerlink" title="3. 等待下载即可"></a>3. 等待下载即可</h3><p><img src="/../images/Linux/%E8%BF%90%E7%BB%B4/pigz/image-20250725142501210.png" alt="image-20250725142501210"></p>
<h3 id="4-下载完成后打开"><a href="#4-下载完成后打开" class="headerlink" title="4. 下载完成后打开"></a>4. 下载完成后打开</h3><p>界面：</p>
<p><img src="/../images/Linux/%E8%BF%90%E7%BB%B4/pigz/image-20250725142706463.png" alt="image-20250725142706463"></p>
<h2 id="使用pigz"><a href="#使用pigz" class="headerlink" title="使用pigz"></a>使用pigz</h2><h3 id="压缩"><a href="#压缩" class="headerlink" title="压缩"></a>压缩</h3><ul>
<li>切换到对应的目录</li>
</ul>
<blockquote>
<p>切换方式，cd &#x2F;cygdrive&#x2F; + 文件所在目录</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /cygdrive/g/pigzTest/</span><br></pre></td></tr></table></figure>

<p><img src="/../images/Linux/%E8%BF%90%E7%BB%B4/pigz/image-20250725143153095.png" alt="image-20250725143153095"></p>
<ul>
<li>开始压缩</li>
</ul>
<blockquote>
<p>默认 pigz 会使用所有可用核心，也可以用 <code>-p N</code> 指定线程数</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">tar cf - ssh-images | pigz &gt; ssh-images.tar.gz</span><br></pre></td></tr></table></figure>

<p><img src="/../images/Linux/%E8%BF%90%E7%BB%B4/pigz/image-20250725143502286.png" alt="image-20250725143502286"></p>
<ul>
<li>指定线程数压缩</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">tar cf - ssh-images | pigz -p 4 &gt; ssh-images.tar.gz</span><br></pre></td></tr></table></figure>

<p><img src="/../images/Linux/%E8%BF%90%E7%BB%B4/pigz/image-20250725143632683.png" alt="image-20250725143632683"></p>
<ul>
<li>也可以超线程压缩，需要cpu支持</li>
</ul>
<blockquote>
<p>超线程性能不一定好。</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">tar cf - ssh-images | pigz -p 16 &gt; ssh-images-16-thread.tar.gz</span><br><span class="line">tar cf - ssh-images | pigz -p 32 &gt; ssh-images-32-thread.tar.gz</span><br><span class="line">tar cf - ssh-images | pigz -p 64 &gt; ssh-images-64-thread.tar.gz</span><br><span class="line">tar cf - ssh-images | pigz -p 128 &gt; ssh-images-128-thread.tar.gz</span><br></pre></td></tr></table></figure>

<p><img src="/../images/Linux/%E8%BF%90%E7%BB%B4/pigz/image-20250725144208927.png" alt="image-20250725144208927"></p>
<h3 id="解压"><a href="#解压" class="headerlink" title="解压"></a>解压</h3><h4 id="解压到tar"><a href="#解压到tar" class="headerlink" title="解压到tar"></a>解压到tar</h4><ul>
<li>解压到tar，并保留源文件</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pigz -dc ssh-images.tar.gz &gt; pigzTar1.tar</span><br></pre></td></tr></table></figure>

<p><img src="/../images/Linux/%E8%BF%90%E7%BB%B4/pigz/image-20250725144623659.png" alt="image-20250725144623659"></p>
<ul>
<li>指定线程解压</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pigz -d -p 4 -c ssh-images.tar.gz &gt; pigzTarThread4.tar</span><br></pre></td></tr></table></figure>

<p><img src="/../images/Linux/%E8%BF%90%E7%BB%B4/pigz/image-20250725144814483.png" alt="image-20250725144814483"></p>
<ul>
<li>超线程解压</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pigz -d -p 32 -c ssh-images.tar.gz &gt; pigzTarThread32.tar</span><br></pre></td></tr></table></figure>



<p><img src="/../images/Linux/%E8%BF%90%E7%BB%B4/pigz/image-20250725144931193.png" alt="image-20250725144931193"></p>
<h4 id="解压出原始文件"><a href="#解压出原始文件" class="headerlink" title="解压出原始文件"></a>解压出原始文件</h4><ul>
<li>默认模式解压</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pigz -dc yourfile.tar.gz | tar xf -</span><br></pre></td></tr></table></figure>

<p><img src="/../images/Linux/%E8%BF%90%E7%BB%B4/pigz/image-20250725150026148.png" alt="image-20250725150026148"></p>
<ul>
<li>指定线程数解压</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pigz -dc -p 8 ssh-images-out.tar.gz | tar xf -</span><br></pre></td></tr></table></figure>

<p><img src="/../images/Linux/%E8%BF%90%E7%BB%B4/pigz/image-20250725150208510.png" alt="image-20250725150208510"></p>
]]></content>
      <categories>
        <category>软件技术</category>
      </categories>
      <tags>
        <tag>笔记</tag>
        <tag>运维</tag>
        <tag>部署</tag>
        <tag>pigz</tag>
        <tag>tar</tag>
        <tag>数据迁移</tag>
      </tags>
  </entry>
  <entry>
    <title>《傲慢与偏见》</title>
    <url>/2025/03/28/%E3%80%8A%E5%82%B2%E6%85%A2%E4%B8%8E%E5%81%8F%E8%A7%81%E3%80%8B/</url>
    <content><![CDATA[<h1 id="《傲慢与偏见》——奥斯丁"><a href="#《傲慢与偏见》——奥斯丁" class="headerlink" title="《傲慢与偏见》——奥斯丁"></a>《傲慢与偏见》——奥斯丁</h1><blockquote>
<hr>
<p>婚姻生活是否能幸福，</p>
<p>完全是个机会问题。一对爱人婚前脾气摸得非常透，或者脾气非常相同，这</p>
<p>并不能保证他们俩就会幸福。他们总是弄到后来距离越来越远，彼此烦恼。</p>
<p>你既然得和这个人过一辈子，你最好尽量少了解他的缺点。</p>
<hr>
<p>你认为你思想敏捷，懒得去注意书法，而且你认为你这些方面即使算不</p>
<p>得什么了不起，至少也非常有趣。凡是事情做得快的人总是自以为了不起，</p>
<p>完全不考虑到做出来的成绩是不是完美。你今天早上跟班纳特太太说，如果</p>
<p>你决定要从尼日斐花园搬走，你五分钟之内就可以搬走，这种话无非是夸耀</p>
<p>自己，恭维自己。再说，急躁的结果只会使得应该要做好的事情没有做好，</p>
<p>无论对人对己，都没有真正的好处，这有什么值得赞美的呢？</p>
<hr>
<p>她不禁大声叫道：“我做得多么卑鄙！我一向自负有知人之明！我一向</p>
<p>自以为有本领！一向看不起姐姐那种宽大的胸襟！为了满足我自己的虚荣心，</p>
<p>我待人老是不着边际地猜忌多端，而且还要做得使我自己无懈可击。这是我</p>
<p>多么可耻的地方！可是，这种耻辱又是多么活该！即使我真的爱上了人家，</p>
<p>也不该盲目到这样该死的地步。然而我的愚蠢，并不是在恋爱方面，而是在</p>
<p>虚荣心方面。开头刚刚认识他们两位的时候，一个喜欢我，我很高兴，一个</p>
<p>怠慢我，我就生气，因此造成了我的偏见和无知，遇到与他们有关的事情，</p>
<p>我就不能明辨是非。我到现在才算有了自知之明。”</p>
<hr>
</blockquote>
]]></content>
      <categories>
        <category>读书</category>
      </categories>
      <tags>
        <tag>随手记</tag>
        <tag>读书</tag>
      </tags>
  </entry>
  <entry>
    <title>《克拉克森的农场》</title>
    <url>/2025/05/26/%E3%80%8A%E5%85%8B%E6%8B%89%E5%85%8B%E6%A3%AE%E7%9A%84%E5%86%9C%E5%9C%BA%E3%80%8B/</url>
    <content><![CDATA[<p>​	先是书籍，然后是一发不可收拾地追这部英剧。治愈焦虑的良药。用幽默来让自己的生活更加有趣。</p>
<blockquote>
<p>男人都觉得自己可以操纵电锯，而且每个男人还都想上去试一把。因为那是最男人的工作。你把一台电锯塞到尼古拉斯·维切尔的手上，他瞬间就变得和施瓦辛格一样威猛。要是尼克（尼古拉斯的昵称）手里晃悠的不是话筒，而是一台电锯，那查尔斯王子就绝对不可能说出“我真受不了这家伙”的话。 要是你手里拎了台电锯，那你就是最霸道的王者。假如你彬彬有礼地找到埃隆·马斯克，让他把特斯拉的绝对控股权卖给你，他肯定会让你滚蛋。可你要是拿着一台电锯当面问他，特斯拉分分钟就是你的了。 可惜你没机会挥舞电锯，因为启动这玩意儿比登天还难。</p>
</blockquote>
<blockquote>
<p>一两个钟头之后，我带着午饭到附近的小山上野餐。回头遥望小树林，那里面仿佛有一头正在大发雷霆的哥斯拉。 两天后，我的林子已经面目全非。地上到处覆盖着厚厚的锯木屑，空气中弥漫着浓浓的柴油味儿，切割工整的原木比比皆是，得有成千上万根吧。当我提着我那不起眼的电锯站在林场，我深刻地认识到，这小东西只配去锯毒枭的胳膊。那个操纵哥斯拉的司机对我说，请他们帮忙绝对是明智之举。</p>
</blockquote>
<blockquote>
<p>真不知道我这辈子都干了些什么。一个人年过花甲，对树木居然一窍不通。真的，我这方面的知识储备为零。我对简奥斯汀的了解可能比这还要多些，尽管我只知道她姓奥斯汀，教名为简。 他刚说了句“橡树的特征是……”我的大脑便“哗”的一声，把他的声音给屏蔽了。上学时在化学课上我也有这毛病：你说得唾沫横飞，我自充耳不闻。</p>
</blockquote>
<blockquote>
<p>我承认，兰博基尼拖拉机是有点复杂。只要一发动，那根直径18厘米的垂直式排气管就会发出巨大的轰鸣。接着你挂上挡，再用另一根挡杆也挂上挡，如果这个时候你松开离合，就会发现还有一根挡杆同样需要挂上挡才能起步。如果行进中需要变挡，那就得用上第四根挡杆了。 听说这台拖拉机的前进和倒车挡位加起来总共有48个之多。还好它只有两个刹车踏板和油门踏板。老早我就数过，驾驶室里共有164个按钮。结果等我掀开扶手，下面还有24个。这些按钮上一律没有标签。这可真够闹心的，要知道它们操纵的东西，可是轻而易举就能把我整成残废啊.</p>
</blockquote>
]]></content>
      <categories>
        <category>读书</category>
      </categories>
      <tags>
        <tag>随手记</tag>
        <tag>读书</tag>
      </tags>
  </entry>
  <entry>
    <title>《人生若只如初见》</title>
    <url>/2025/03/28/%E3%80%8A%E4%BA%BA%E7%94%9F%E8%8B%A5%E5%8F%AA%E5%A6%82%E5%88%9D%E8%A7%81%E3%80%8B/</url>
    <content><![CDATA[<h1 id="《人生若只如初见》——安意如"><a href="#《人生若只如初见》——安意如" class="headerlink" title="《人生若只如初见》——安意如"></a>《人生若只如初见》——安意如</h1><hr>
<p>​	这本书很适合碎片时间看，我几乎是在地铁上，回家的火车上，庭院的阳光下看完的。虽然很多都是跳着看的，但是这本书确实给我带来了一场中国诗歌的美学享受，很是喜欢。</p>
<blockquote>
<h1 id="《木兰花·拟古决绝词柬友》"><a href="#《木兰花·拟古决绝词柬友》" class="headerlink" title="《木兰花·拟古决绝词柬友》"></a>《<a href="https://www.gushiwen.cn/shiwenv_85e93138ed65.aspx">木兰花·拟古决绝词柬友</a>》</h1><p><a href="https://www.gushiwen.cn/authorv_01611cc80faf.aspx"><strong>纳兰性德</strong></a></p>
<p>人生若只如初见，何事秋风悲画扇。</p>
<p>等闲变却故人心，却道故人心易变。</p>
<p>骊山语罢清宵半，泪雨霖铃终不怨。</p>
<p>何如薄幸锦衣郎，比翼连枝当日愿。</p>
</blockquote>
<hr>
<blockquote>
<h1 id="击鼓"><a href="#击鼓" class="headerlink" title="击鼓"></a>击鼓</h1><p><a href="https://www.gushiwen.cn/shiwens/default.aspx?astr=%E8%AF%97%E7%BB%8F%C2%B7%E5%9B%BD%E9%A3%8E%C2%B7%E9%82%B6%E9%A3%8E">诗经·国风·邶风</a><a href="https://www.gushiwen.cn/shiwens/default.aspx?cstr=%E5%85%88%E7%A7%A6">〔先秦〕</a></p>
<p>击鼓其镗，踊跃用兵。土国城漕，我独南行。<br>从孙子仲，平陈与宋。不我以归，忧心有忡。<br>爰居爰处？爰丧其马？于以求之？于林之下。<br>死生契阔，与子成说。执子之手，与子偕老。<br>于嗟阔兮，不我活兮。于嗟洵兮，不我信兮。</p>
</blockquote>
<hr>
<blockquote>
<h1 id="子衿"><a href="#子衿" class="headerlink" title="子衿"></a>子衿</h1><p><a href="https://www.gushiwen.cn/shiwens/default.aspx?astr=%E8%AF%97%E7%BB%8F%C2%B7%E5%9B%BD%E9%A3%8E%C2%B7%E9%83%91%E9%A3%8E">诗经·国风·郑风</a><a href="https://www.gushiwen.cn/shiwens/default.aspx?cstr=%E5%85%88%E7%A7%A6">〔先秦〕</a></p>
<p>青青子衿，悠悠我心。纵我不往，子宁不嗣音？<br>青青子佩，悠悠我思。纵我不往，子宁不来？<br>挑兮达兮，在城阙兮。一日不见，如三月兮！</p>
</blockquote>
<hr>
<blockquote>
<h1 id="子夜四时歌-其十六"><a href="#子夜四时歌-其十六" class="headerlink" title="子夜四时歌 其十六"></a>子夜四时歌 其十六</h1><p>佚名](<a href="https://www.gushiwen.cn/authorv_2128926194cd.aspx)[%E3%80%94%E9%AD%8F%E6%99%8B%E3%80%95](https://www.gushiwen.cn/shiwens/default.aspx?cstr=%E9%AD%8F%E6%99%8B)">https://www.gushiwen.cn/authorv_2128926194cd.aspx)[〔魏晋〕](https://www.gushiwen.cn/shiwens/default.aspx?cstr=魏晋)</a></p>
<p>白露朝夕生，秋风凄长夜。忆郎须寒服，乘月捣白素。</p>
</blockquote>
<hr>
<blockquote>
<h1 id="相思怨"><a href="#相思怨" class="headerlink" title="相思怨"></a>相思怨</h1><p><a href="https://www.gushiwen.cn/authorv_e0a677d5273e.aspx">李冶</a><a href="https://www.gushiwen.cn/shiwens/default.aspx?cstr=%E5%94%90%E4%BB%A3">〔唐代〕</a></p>
<p>人道海水深，不抵相思半。<br>海水尚有涯，相思渺无畔。<br>携琴上高楼，楼虚月华满。<br>弹著相思曲，弦肠一时断。</p>
</blockquote>
<hr>
<blockquote>
<h1 id="《结素鱼贻友人》"><a href="#《结素鱼贻友人》" class="headerlink" title="《结素鱼贻友人》"></a>《<a href="https://www.gushiwen.cn/shiwenv_893709d6de57.aspx">结素鱼贻友人</a>》</h1><p><a href="https://www.gushiwen.cn/authorv_e0a677d5273e.aspx">李冶</a></p>
<p>尺素如残雪，结为双鲤鱼。<br>欲知心里事，看取腹中书。</p>
<p>你的腹中书是什么呢？是《百年孤独》？还是《资本论》？亦或《道德经》？</p>
</blockquote>
<hr>
<blockquote>
</blockquote>
]]></content>
      <categories>
        <category>读书</category>
      </categories>
      <tags>
        <tag>随手记</tag>
        <tag>读书</tag>
      </tags>
  </entry>
  <entry>
    <title>《卡拉马佐夫兄弟》</title>
    <url>/2024/07/19/%E3%80%8A%E5%8D%A1%E6%8B%89%E9%A9%AC%E4%BD%90%E5%A4%AB%E5%85%84%E5%BC%9F%E3%80%8B/</url>
    <content><![CDATA[<h1 id="《卡拉马佐夫兄弟》"><a href="#《卡拉马佐夫兄弟》" class="headerlink" title="《卡拉马佐夫兄弟》"></a>《卡拉马佐夫兄弟》</h1><p>​	初次阅读时是在高中借的同学的书，是上册。那时的理解能力，哲学素养还不够，那时看的时候只能些许感受到其中的魅力和震撼。但也足以吸引我看下去，可惜由于学业，课桌里的书籍也逐渐被试卷替代。</p>
<p>​	直到现在，才有时间来慢慢欣赏那些大家的作品。第二次见面是在图书馆里，两册大大的方方正正的，我单手勉强才能拿起一册，外观就足以解释这是一部厚重的经典了。</p>
<p>​	说实话看到这样两本厚厚的书籍，我有点没信心看完。可能是之前看到一半就弃了的《魔山》和《悲惨世界》留给我的后遗症吧。前者是每次看一会就会打瞌睡，后者能看下去主要情节但是觉得废话太多，于是有点对这种厚厚的书产生畏惧心理，害怕里面的那些大段的哲学发言。</p>
<p>​	但是《卡拉马佐夫》帮我打破了这个魔咒。只是可惜这部作品还未写完<a href="https://zh.wikipedia.org/wiki/%E9%99%80%E6%80%9D%E5%A6%A5%E8%80%B6%E5%A4%AB%E6%96%AF%E5%9F%BA">陀思妥耶夫斯基</a>就先去世了。每次都能从德米特里，阿列克塞，伊万这些人物中找到自己的影子。那些描写如此真实，让我突然就对那些轻小说，那些清汤寡水失去了兴趣。</p>
<p>​	《卡拉马佐夫》和《罪与罚》真的太震撼了，为什么可以将人的复杂性写得这么真实！很多情况下别的小说的主角都是性格鲜明，但是妥氏笔下的人物就截然不同，具有人类的拧巴纠结，复杂易变的特点。无论是哪个角色我好像都能找到自己的影子。</p>
<p>​	庆幸自己接触到了这些经典，真的很感谢带我接触这些经典的人们。下一本就是《罪与罚》了。</p>
]]></content>
      <categories>
        <category>读书</category>
      </categories>
      <tags>
        <tag>随手记</tag>
        <tag>读书</tag>
      </tags>
  </entry>
  <entry>
    <title>《再穷也要去旅游》</title>
    <url>/2023/09/21/%E3%80%8A%E5%86%8D%E7%A9%B7%E4%B9%9F%E8%A6%81%E5%8E%BB%E6%97%85%E6%B8%B8%E3%80%8B/</url>
    <content><![CDATA[<h1 id="《再穷也要去旅游》"><a href="#《再穷也要去旅游》" class="headerlink" title="《再穷也要去旅游》"></a>《再穷也要去旅游》</h1><p>​	我今天才开始接触这本书，初见时就是惊鸿一瞥，可能是比较贴切当代像我一样穷大学生的现状吧 &lt;3。</p>
<p>​	唉，我好像老是嘴上说着要去哪里哪里走一走，但是到头来总是会出现各种各样的阻挠。就像今年夏天，驾照啦，作业啦之类的。但是仔细想想，好像这只是给自己家里蹲找的借口而已。于是不了终了，开学时只得借大隐隐于市聊以自慰。</p>
<p>​	不行啊！这个寒假可不能在颓废了！你不是会骑摩托了吗？！这个寒假就加满油去野营吧！看看能否找到冬季银河的踪迹。（回家之前）</p>
<p>​	nmmd，这么冷，不是下雨就是下雪，这个世界又多了一个伤心的人。</p>
]]></content>
      <categories>
        <category>读书</category>
      </categories>
      <tags>
        <tag>随手记</tag>
        <tag>读书</tag>
      </tags>
  </entry>
  <entry>
    <title>《周国平自选集》</title>
    <url>/2025/03/30/%E3%80%8A%E5%91%A8%E5%9B%BD%E5%B9%B3%E8%87%AA%E9%80%89%E9%9B%86%E3%80%8B/</url>
    <content><![CDATA[<h1 id="《周国平自选集》"><a href="#《周国平自选集》" class="headerlink" title="《周国平自选集》"></a>《周国平自选集》</h1><p>​	当做睡前读物跳着看的，记录一些个人比较喜欢的段落。</p>
<blockquote>
<p> 每个人都是一个宇宙，每个人的天性中都蕴藏着大自然赋予的创造力。把这个观点运用到读 书上，爱默生提倡一种”创造性的阅读”。这就是：把自己的生活当作正文，把书籍当作注 解；听别人发言是为了使自己能说话；以一颗活跃的灵魂，为获得灵感而读书。    </p>
</blockquote>
<hr>
<blockquote>
<p> 好的书籍是朋友，但也仅仅是朋友。与好友会晤是快事，但必须自己有话可说，才能真正快 乐。一个愚钝的人，再智慧的朋友对他也是毫无用处的，他坐在一群才华横溢的朋友中间， 不过是一具木偶，一个讽刺，一种折磨。每人都是一个神，然后才有奥林匹斯神界的欢聚。    </p>
</blockquote>
<hr>
<blockquote>
<p> 心灵是一本奇特的账簿，只有收入，没有支出，人生的一切痛苦和欢乐，都化作宝贵的体验 记入它的收入栏中。</p>
</blockquote>
<hr>
<blockquote>
<p> 正如作者所说，童年时代的 太阳要炽热得多，草要茂盛得多，雨要大得多，天空的颜色要深得多，周围的人要有趣得多 。</p>
</blockquote>
<hr>
<blockquote>
<p> 怕只怕文明与野蛮握手言欢，金钱与权力狼狈为奸，那才真正是民族的灾难。物 质上的贫富悬殊已经有目共睹，精神上何尝不也发生着两极分化?好在一个人只要耐得贫困 ，自甘寂寞，总还可以为灵魂守一块家园，不致在这纷纷扰扰的世界上流离失所。认清贫困 和寂寞乃是心灵高贵者在这个时代的命运，困惑中倒也生出了一些坦然。    </p>
</blockquote>
<hr>
<blockquote>
<p>  拜伦在《唐璜》中写道：”一切悲剧皆因死亡而结束，一切喜剧皆因婚姻而告终。”</p>
</blockquote>
<hr>
<blockquote>
<p> 我身上必定有两个自我。一个好动，什么都要尝试，什么都想经历。另一个喜静，对一切加 以审视和消化。这另一个自我，如同罗曼·罗兰所说，是”一颗清明宁静而非常关切的灵魂 “。仿佛是它把我派遣到人世间活动，鼓励我拼命感受生命的一切欢乐和苦难，同时又始终 关切地把我置于它的视野之内，随时准备把我召回它的身边。即使我在世上遭受最悲惨的灾 难和失败，只要我识得返回它的途径，我就不会全军覆没。它是我的守护神，为我守护着一 个任何风雨都侵袭不到也损坏不了的家园，使我在最风雨飘摇的日子里也不致无家可归。    </p>
</blockquote>
<hr>
<blockquote>
<p> 调情是轻松的，爱情是沉重的。风流韵事不过是躯体的游戏，至多还是感情的游戏。可是， 当真的爱情来临时，灵魂因恐惧和狂喜而战栗了。    </p>
</blockquote>
<hr>
<blockquote>
<p> 人的灵魂生活比外在的肉身生活和社会生活更为本质，每个人的人生质量 首先取决于他的灵魂生活的质量。</p>
</blockquote>
]]></content>
      <categories>
        <category>读书</category>
      </categories>
      <tags>
        <tag>随手记</tag>
        <tag>读书</tag>
      </tags>
  </entry>
  <entry>
    <title>《太阳照常升起》</title>
    <url>/2024/04/17/%E3%80%8A%E5%A4%AA%E9%98%B3%E7%85%A7%E5%B8%B8%E5%8D%87%E8%B5%B7%E3%80%8B/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>读书</category>
      </categories>
      <tags>
        <tag>随手记</tag>
        <tag>读书</tag>
      </tags>
  </entry>
  <entry>
    <title>《古道》</title>
    <url>/2025/07/07/%E3%80%8A%E5%8F%A4%E9%81%93%E3%80%8B/</url>
    <content><![CDATA[<h1 id="《古道》"><a href="#《古道》" class="headerlink" title="《古道》"></a>《古道》</h1><h2 id="麦克·法伦"><a href="#麦克·法伦" class="headerlink" title="麦克·法伦"></a>麦克·法伦</h2><p>这是一本有关行走的书，最近我一直在走路，停下来的时候就会看这本书。很喜欢里面对于各种小径古道周遭的景物描写，文字很美，翻译也很美。穿插引用了很多其他作家以及哲学家的话语，让我对这个世界的了解又增加了一点。读万卷书，行万里路，何乐而不为。</p>
<p><img src="/../images/books/%E5%8F%A4%E9%81%93/image-20250713133005393.png" alt="image-20250713133005393"></p>
<p>我放任双脚代替双眼引领我前进……<br>——娜恩·谢泼德，《活山》，1977</p>
<p><strong>行走是向内的勘察，而我们穿行其间的风景，又如何微妙地塑造着我们。</strong></p>
<blockquote>
<p>“时时如此，处处如此：人们走过，让大地布满路径——有的可见，有的隐秘，有的整齐，有的蜿蜒。”托马斯·克拉克在影响深远的散文诗《行走赞》(“In Praise of Walking”)里这样写道。确实如此，一旦开始留意小路，你就会发现眼前景观里依然密布着小径步道，它们或是与现代道路网重合，或是与新路倾斜或垂直相交。朝圣路，绿荫道，牲畜道，运尸路，踩踏路，灵线，堤坝路，夹道，砖道，巷道——飞快地大声说出这些路径名称，就成了一首诗或一种仪式——陷路，马道，坡道，庄园路，下葬路，骑行道，马径，马车道，马戏巡游路，堤道，军用道。</p>
</blockquote>
<blockquote>
<p>这些才是最让我觉得舒坦的古道遗泽：行走以悦目，以思索，而不是怂恿退避和逃匿；小路不仅是穿越空间的途径，也是感受、存在和认知的方式。</p>
</blockquote>
<blockquote>
<p>量一量我的脚，从脚后跟到脚趾的距离是二十九点七厘米，即十一点七英寸。这是行进的单位，也是思想的单位。“只有在走路时我才能沉思”，让-雅克·卢梭在《忏悔录》第四卷中写道，“一旦停下，我便无法思考；我的头脑只能和双腿一起工作。”索伦·克尔凯郭尔推测，思维在步速为每小时三英里的时候运行得最为理想，他在旅行日记中描述一次外出散步，感到“思如泉涌”，几至“迈不开步”。在克里斯托弗·莫利的笔下，华兹华斯“把腿当作哲学思考的手段”，华兹华斯自己在写作中也会提及他的“感官领悟力”。在这个问题上，尼采不出所料地绝对：“只有行走时产生的思想才有价值。”华莱士·史蒂文斯则是毫无悬念地犹疑：“或许&#x2F;真理仰赖一场湖畔漫步。”所有这些记述中，行走不是用以抵达知识的动作，它本身就是认知的方式。<br>其实，“认知既易受运动影响，又因地点而异”的命题在浪漫主义兴起前就已存在，尽管后来是卢梭让它声名远扬。</p>
</blockquote>
<blockquote>
<p>思索和行走的关系也深深渗入了语言的历史，我所知最精彩的词源学观点就是佐证：这条路线的开端是英语动词“学习”(to learn)，意思是“获得知识”。在语言的时间里回溯，我们抵达古英语中的leornian，意为“获取知识，得到培养”。从leornian再往回走，路就进入语音铿锵的原始日耳曼语丛林，来到了liznojan一词——基本意思是“顺着道走”或“找到道路”（源于原始印欧语前缀leis-，意为“路径”）。“学习”由此在词根上——也在流转路径上——意味着“循着踪迹”。谁知道这些呢？我本不知道——我十分感谢那位词源学家兼探路者，他揭示出那条连接“学习”和“沿路走”的湮没的路径。</p>
</blockquote>
<blockquote>
<p>蓝色树脂般的天空，紫铜色的太阳，纯净的风。沦为荒岛漂流者的一天过得逍遥自在，我唯一要做的，就是以最惬意的方式消磨时光。</p>
</blockquote>
<blockquote>
<p>几百万鸟兽生息的中心，像交易所一样热闹，是万物竞争的丰富多彩的剧场。它们是自己宇宙的中心，是一张联系网里的中枢结点。这既是人的网络，也是自然界的网络，先是覆盖近处海域，然后到达四周海岸，再延伸开去，沿着大西洋边缘绵延数千英里的海路而行，深入欧洲腹地。</p>
</blockquote>
<blockquote>
<p>我喜欢“联系网”这个意象：海路就像托马斯的陆上小径，“处处连通”，将深海与大陆架、河口、河流乃至内陆偏远之地连接起来。我也欣赏尼科尔森说自己长年被希恩特“岛上的岁月”塑造。“这个地方已经是我的一部分，”他深情地写道，“它就像着色剂一样，浸染了我的生命。”</p>
</blockquote>
<blockquote>
<p>太阳像过往无数岁月中一样，散去夏日光芒，拂过大海，拂过海岛，拂过我的身体，有如极为浓郁的汁液，引得我想尝一口，想把它存起来，酿成蜜，待到冬日来临再享用。</p>
</blockquote>
<blockquote>
<p>风力微弱，方向单一，此时身处一条敞口小船上，时间仿佛拉长了，延展开去，感觉做什么都有的是时间，身上透进一种不慌不忙。于是我们高高兴兴地航行，一面讲着故事，一面驶入北方悠长的黄昏。船翻过小山似的波浪，经过成群的鼠海豚，头顶有三趾鸥翻飞。最终我们沉入夜色，这夜幕仿佛自海上升起，而不是由空中降下，开始只是水面晕染了黑色，然后缓缓向上引流，直到铺满无云的天空。</p>
</blockquote>
<blockquote>
<p>大风自东边猛烈刮来，但没有夹带雨丝。荒原烂泥地上有鹿的踪迹，天空还黑沉沉的，海上飞翔的鲣鸟像闪现的白色火焰。这是刘易斯岛上大西洋海岸的拂晓。天光微弱，显得冰冷而苍白。一千英尺高空聚着厚重的云层，白日正自黑暗中诞生。</p>
</blockquote>
<blockquote>
<p>此物是个绝妙的矛盾体——它是一片羽毛，却向往土地；是飞行物，却荷载了太多重力。</p>
</blockquote>
<blockquote>
<p>拉贾认为，行走于这样的地点之间，是一种将各种事件串联成故事的方式。他在行走中发现一九四八年“浩劫日”中被以色列军队荡平的巴勒斯坦村庄，在自己的地图上标了出来；能显示它们曾经存在的，往往只剩下兀自生长的扁桃树，这里成了一种幽灵之地。通过记录自己的行走，拉贾想用语言将正在消失的一切存档，或用语言再造已然消失的世界。</p>
</blockquote>
<blockquote>
<p>想想真是这样，我好像每个月都行走在古道之上，也遇到或听说有人踏上步行之旅，不单为了运输或消遣，其目的地在某种意义上可谓神圣。这样的即兴朝圣成千上万，层出不穷，通常不受主流教义引导，严肃和虔诚程度也各不相同。穷乡僻壤挤满怪人，他们做着奇特的旅行，相信某种外在游历或将转化为内在的旅程。</p>
</blockquote>
<blockquote>
<p>当天我被好几场雨淋透，这只是第一场。每次阵雨来袭，世界游移不定，一片模糊；每次阵雨过后，阳光再度普照，泥土上水汽袅袅，升起大地的味道。</p>
</blockquote>
<blockquote>
<p>在男子的最后一枚脚印边上，我停了下来，距离他出发已然过去五千年，他的足迹终止了，我的也结束了。我转过头，看向南边一路走来的行迹。阳光再度斜斜射下，那些渗满水的脚印顿时化作一面面镜子，映出天空，映出颤动的云朵，映出任何一个望向镜内的人。</p>
</blockquote>
]]></content>
      <categories>
        <category>读书</category>
      </categories>
      <tags>
        <tag>随手记</tag>
        <tag>读书</tag>
      </tags>
  </entry>
  <entry>
    <title>《奇风岁月》</title>
    <url>/2024/01/26/%E3%80%8A%E5%A5%87%E9%A3%8E%E5%B2%81%E6%9C%88%E3%80%8B/</url>
    <content><![CDATA[<p>​	这应该是我青少年时期最喜欢的一本书了，那时推荐给了很多人看。高中时很喜欢一个up主，他一边介绍高质量游戏，一边给我们推荐他觉得好看的有意思的书。这本书就是他推荐的。</p>
<p>​	也是在整理东西的时候发现的过去写的文字。</p>
<p><img src="C:\Users\Regen\Desktop\qiFengSuiYue_1.jpg" alt="看完一年后高三时怀念奇风镇"></p>
<p><img src="C:\Users\Regen\Desktop\qiFengSuiYue_2.jpg" alt="第一次看《奇风岁月》"></p>
]]></content>
      <categories>
        <category>读书</category>
      </categories>
      <tags>
        <tag>随手记</tag>
        <tag>读书</tag>
      </tags>
  </entry>
  <entry>
    <title>《孤独是迷人的》</title>
    <url>/2025/03/30/%E3%80%8A%E5%AD%A4%E7%8B%AC%E6%98%AF%E8%BF%B7%E4%BA%BA%E7%9A%84%E3%80%8B/</url>
    <content><![CDATA[<h1 id="《孤独是迷人的》"><a href="#《孤独是迷人的》" class="headerlink" title="《孤独是迷人的》"></a>《孤独是迷人的》</h1><h2 id="艾米丽迪金森"><a href="#艾米丽迪金森" class="headerlink" title="艾米丽迪金森"></a><strong>艾米丽迪金森</strong></h2><p>​	很庆幸在2024年遇到了艾米丽迪金森，我真的太喜欢她的现代诗诗集了。初见时是在图书馆的诗集书架一角，一同借过去的还有布考斯基的《爱是地狱冥犬》。可惜出于个人喜好原因，这本《爱是地狱冥犬》并没有在我手头逗留很久就回归了。</p>
<p>​	简单的紫色的封面，极简地布局排版，善解人意的中英对照，读来十分享受。很多次做完家教回学校的路上都是这本书陪着我，有时候夕阳透过大大的玻璃窗映在书上，我就会想到这个世界上的美好，为这个世界还有着像艾米丽迪金森一样可爱的人们感到欢喜。</p>
<h4 id="Nobody-knows-this-little-Rose"><a href="#Nobody-knows-this-little-Rose" class="headerlink" title="Nobody knows this little Rose"></a>Nobody knows this little Rose</h4><blockquote>
<div style="display:flex;"><div style="flex:1;padding-right:20px;"><h3>Nobody knows this little rose</h3><p><em>Nobody knows this little Rose—<br>It might a pilgrim be<br>Did I not take it from the ways<br>And lift it up to thee.</em></p><p><em>Only a Bee will miss it—<br>Only a Butterfly,<br>Hastening from far journey—<br>On its breast to lie—</em></p><p><em>Only a Bird will wonder—<br>Only a Breeze will sigh—<br>Ah Little Rose—how easy<br>For such as thee to die!</em></p></div><div style="border-left:1px solid #ccc;margin:0 10px;"></div><div style="flex:1;padding-left:20px;"><h3>无人知晓这朵小玫瑰</h3><p>无人知晓这朵小玫瑰——<br>它或许是朝圣者<br>若非我从路旁将它采撷<br>捧起献予你</p><p>只有蜜蜂会惦念——<br>只有蝴蝶，<br>从远途匆匆赶来——<br>停驻在它的胸膛——</p><p>只有鸟儿会疑惑——<br>只有微风会叹息——<br>啊小玫瑰——对你而言<br>凋零竟如此轻易！</p></div></div>
</blockquote>
<h4 id="If-I-should-die"><a href="#If-I-should-die" class="headerlink" title="If I should die"></a>If I should die</h4><blockquote>
<div style="display:flex;"><div style="flex:1;padding-right:20px;"><h3>If I Should Die</h3><p><em>If I should die,<br>And you should live,<br>And time should gurgle on,<br>And morn should beam,<br>And noon should burn,<br>As it has usual done;</em></p><p><em>If birds should build as early,<br>And bees as bustling go,—<br>One might depart at option<br>From enterprise below!</em></p><p><em>’T is sweet to know that stocks will stand<br>When we with daisies lie,<br>That commerce will continue,<br>And trades as briskly fly.</em></p></div><div style="border-left:1px solid #ccc;margin:0 10px;"></div><div style="flex:1;padding-left:20px;"><h3>倘若我死去</h3><p>倘若我死去，<br>而你仍活着，<br>时间依旧汩汩流淌，<br>晨光仍会倾泻，<br>烈日仍会灼烧，<br>如往常一样；</p><p>倘若鸟儿依旧早早筑巢，<br>蜜蜂依旧匆忙奔忙，——<br>人们或许能随意选择<br>离开尘世的纷扰！</p><p>知道股票仍会交易，<br>当我们与雏菊同眠，<br>商业仍会继续，<br>贸易仍会飞旋。</p></div></div>
</blockquote>
<h4 id="Success-is-counted-sweetest"><a href="#Success-is-counted-sweetest" class="headerlink" title="Success is counted sweetest"></a>Success is counted sweetest</h4><blockquote>
<div style="display:flex;"><div style="flex:1;padding-right:20px;"><h3>Success is counted sweetest</h3><p><em>Success is counted sweetest<br>By those who ne'er succeed.<br>To comprehend a nectar<br>Requires sorest need.</em></p><p><em>Not one of all the purple Host<br>Who took the Flag today<br>Can tell the definition,<br>So clear, of Victory,</em></p><p><em>As he, defeated, dying,<br>On whose forbidden ear<br>The distant strains of triumph<br>Break, agonized and clear.</em></p></div><div style="border-left:1px solid #ccc;margin:0 10px;"></div><div style="flex:1;padding-left:20px;"><h3>成功最甜美</h3><p>成功最甜美，<br>属于从未成功的人。<br>要领悟琼浆的滋味，<br>需最痛切的渴恨。</p><p>今日那紫袍加身的胜者，<br>虽高擎凯旋的旗帜，<br>却无人能像他——战败者，垂死时，</p><p>听远方欢庆的号角刺入耳际，<br>那般清晰地懂得胜利的真谛。</p></div></div>
</blockquote>
<h4 id="I-taste-a-liquor-never-brewed"><a href="#I-taste-a-liquor-never-brewed" class="headerlink" title="I taste a liquor never brewed"></a>I taste a liquor never brewed</h4><blockquote>
<div style="display:flex;"><div style="flex:1;padding-right:20px;"><h3>I taste a liquor never brewed</h3><p><em>I taste a liquor never brewed—<br>From Tankards scooped in Pearl—<br>Not all the Vats upon the Rhine<br>Yield such an Alcohol!</em></p><p><em>Inebriate of Air—am I—<br>And Debauchee of Dew—<br>Reeling—thro endless summer days—<br>From inns of Molten Blue—</em></p><p><em>When "Landlords" turn the drunken Bee<br>Out of the Foxglove's door—<br>When Butterflies—renounce their "drams"—<br>I shall but drink the more!</em></p></div><div style="border-left:1px solid #ccc;margin:0 10px;"></div><div style="flex:1;padding-left:20px;"><h3>我啜饮一杯未经酿造的琼浆</h3><p>我啜饮一杯未经酿造的琼浆——<br>从珍珠镂成的酒樽——<br>莱茵河畔所有的酒窖<br>都榨不出这般醇醪！</p><p>我陶醉于空气——我是——<br>露水的浪荡子——<br>蹒跚着——穿越无尽的夏日——<br>自熔蓝的客栈出离——</p><p>当"店主"将醉酒的蜜蜂<br>逐出毛地黄的门扉——<br>当蝴蝶——放弃它们的"烈酒"——<br>我定要痛饮至酩酊！</p></div></div>
</blockquote>
<h4 id="New-feet-within-my-garden-go"><a href="#New-feet-within-my-garden-go" class="headerlink" title="New feet within my garden go"></a>New feet within my garden go</h4><blockquote>
<div style="display:flex;"><div style="flex:1;padding-right:20px;"><h3>New feet within my garden go</h3><p><em>New feet within my garden go—<br>New fingers stir the sod—<br>A Troubadour upon the Elm<br>Betrays the solitude.</em></p><p><em>New Children play upon the green—<br>New Weary sleep below—<br>And still the pensive Spring returns—<br>And still the punctual snow!</em></p></div><div style="border-left:1px solid #ccc;margin:0 10px;"></div><div style="flex:1;padding-left:20px;"><h3>新的脚步踏入我的花园</h3><p>新的脚步踏入我的花园——<br>新的手指拨动草皮——<br>榆树上的游吟诗人<br>泄露了这片孤寂</p><p>新的孩童在绿茵嬉戏——<br>新的倦客长眠地下——<br>沉思的春天依然归来——<br>守时的雪依然落下！</p></div></div>
</blockquote>
<h4 id="The-soul-selects-her-own-society"><a href="#The-soul-selects-her-own-society" class="headerlink" title="The soul selects her own society"></a>The soul selects her own society</h4><blockquote>
<div style="display:flex;"><div style="flex:1;padding-right:20px;"><h3>The soul selects her own society</h3><p><em>The soul selects her own society—<br>Then shuts the door—<br>To her divine Majority—<br>Present no more—</em></p><p><em>Unmoved—she notes the Chariots—pausing—<br>At her low Gate—<br>Unmoved—an Emperor be kneeling<br>Upon her Mat—</em></p><p><em>I've known her—from an ample nation—<br>Choose One—<br>Then—close the Valves of her attention—<br>Like Stone—</em></p></div><div style="border-left:1px solid #ccc;margin:0 10px;"></div><div style="flex:1;padding-left:20px;"><h3>灵魂选择自己的伴侣</h3><p>灵魂选择自己的伴侣——<br>然后关上大门——<br>对她神圣的抉择——<br>不再表明心迹——</p><p>无动于衷——她看见车辇——停在——<br>她低矮的门前——<br>无动于衷——一位皇帝跪在<br>她的席垫——</p><p>我知道她——从泱泱大国——<br>选中一人——<br>然后——关闭注意的阀门——<br>像石头般坚定——</p></div></div>
</blockquote>
<h4 id="The-grass-so-little-has-to-do"><a href="#The-grass-so-little-has-to-do" class="headerlink" title="The grass so little has to do"></a>The grass so little has to do</h4><blockquote>
<div style="display:flex;"><div style="flex:1;padding-right:20px;"><h3>The grass so little has to do</h3><p><em>The grass so little has to do—<br>A sphere of simple green—<br>With only butterflies to brood<br>And bees to entertain—</em></p><p><em>And stir all day to pretty tunes<br>The breezes fetch along—<br>And hold the sunshine in its lap<br>And bow to everything—</em></p><p><em>And thread the dews all night like pearls—<br>And make itself so fine—<br>A duchess were too common<br>For such a noticing—</em></p></div><div style="border-left:1px solid #ccc;margin:0 10px;"></div><div style="flex:1;padding-left:20px;"><h3>青草何其卑微</h3><p>青草何其卑微——<br>不过一球简单的绿——<br>只需照料蝴蝶<br>款待蜜蜂——</p><p>整日随清风送来的<br>美妙旋律摇曳——<br>将阳光揽在怀中<br>向万物鞠躬——</p><p>整夜将露珠穿成珍珠——<br>把自己装扮精致——<br>公爵夫人都显得俗气<br>配不上这般注视——</p></div></div>
</blockquote>
<h4 id="The-moon-is-distant-from-the-sea"><a href="#The-moon-is-distant-from-the-sea" class="headerlink" title="The moon is distant from the sea"></a>The moon is distant from the sea</h4><blockquote>
<div style="display:flex;"><div style="flex:1;padding-right:20px;"><h3>The moon is distant from the sea</h3><p><em>The moon is distant from the sea—<br>And yet with amber hands—<br>She leads him—docile as a boy—<br>Along appointed sands—</em></p><p><em>He never misses a Degree—<br>Obedient to Her eye—<br>He comes just so far—and no farther—<br>Than She thinks fit to pry—</em></p></div><div style="border-left:1px solid #ccc;margin:0 10px;"></div><div style="flex:1;padding-left:20px;"><h3>月亮远离大海</h3><p>月亮远离大海——<br>却用琥珀色的手——<br>牵引他——温顺如男孩——<br>沿着命定的沙洲——</p><p>他从不偏离分毫——<br>顺从她的目光——<br>只走近到此——不再向前——<br>恰是她允许的远方——</p></div></div>
</blockquote>
<h4 id="I-had-no-time-to-hate"><a href="#I-had-no-time-to-hate" class="headerlink" title="I had no time to hate"></a>I had no time to hate</h4><blockquote>
<div style="display:flex;"><div style="flex:1;padding-right:20px;"><h3>I had no time to hate</h3><p><em>I had no time to hate—because<br>The grave would hinder me—<br>And life was not so ample I<br>Could finish enmity—</em></p><p><em>Nor had I time to love—but since<br>Some industry must be—<br>The little toil of love—I thought<br>Be large enough for me—</em></p></div><div style="border-left:1px solid #ccc;margin:0 10px;"></div><div style="flex:1;padding-left:20px;"><h3>我来不及恨</h3><p>我来不及恨——因为<br>坟墓会阻挠我——<br>生命也不够辽阔<br>让我完成敌意——</p><p>我也来不及爱——但既然<br>必须有所经营——<br>爱的微小辛劳——我想<br>对我已足够丰盈——</p></div></div>
</blockquote>
<h4 id="To-wait-an-hour-is-long"><a href="#To-wait-an-hour-is-long" class="headerlink" title="To wait an hour is long"></a>To wait an hour is long</h4><blockquote>
<div style="display:flex;"><div style="flex:1;padding-right:20px;"><h3>To wait an hour is long</h3><p><em>To wait an hour is long—<br>If love be just beyond—<br>To wait Eternity—is short—<br>If love reward the end—</em></p></div><div style="border-left:1px solid #ccc;margin:0 10px;"></div><div style="flex:1;padding-left:20px;"><h3>等待一小时太久</h3><p>等待一小时太久——<br>如果爱近在咫尺——<br>等待永恒却短暂——<br>若爱在终点相迎——</p></div></div>
</blockquote>
<h4 id="I-hide-myself-within-my-flower"><a href="#I-hide-myself-within-my-flower" class="headerlink" title="I hide myself within my flower"></a>I hide myself within my flower</h4><blockquote>
<div style="display:flex;"><div style="flex:1;padding-right:20px;"><h3>I hide myself within my flower</h3><p><em>I hide myself within my flower—<br>That fading from your vase—<br>You—unsuspecting—feel for me—<br>Almost a loneliness—</em></p></div><div style="border-left:1px solid #ccc;margin:0 10px;"></div><div style="flex:1;padding-left:20px;"><h3>我藏身于花朵</h3><p>我藏身于花朵——<br>当你从花瓶里取出凋谢的我——<br>你——毫无察觉地——为我感到——<br>近乎一种寂寞——</p></div></div>
</blockquote>
<h4 id="Had-I-not-seen-the-sun"><a href="#Had-I-not-seen-the-sun" class="headerlink" title="Had I not seen the sun"></a>Had I not seen the sun</h4><blockquote>
<div style="display:flex;"><div style="flex:1;padding-right:20px;"><h3>Had I not seen the sun</h3><p><em>Had I not seen the sun<br>I could have borne the shade<br>But Light a newer Wilderness<br>My Wilderness has made—</em></p></div><div style="border-left:1px solid #ccc;margin:0 10px;"></div><div style="flex:1;padding-left:20px;"><h3>我本可以忍受黑暗</h3><p>我本可以忍受黑暗<br>如果我不曾见过太阳<br>然而阳光已使我的荒凉<br>成为更新的荒凉——</p></div></div>
</blockquote>
<h4 id="There-is-no-frigate-like-a-book"><a href="#There-is-no-frigate-like-a-book" class="headerlink" title="There is no frigate like a book"></a>There is no frigate like a book</h4><blockquote>
<div style="display:flex;"><div style="flex:1;padding-right:20px;"><h3>There is no frigate like a book</h3><p><em>There is no frigate like a book<br>To take us lands away,<br>Nor any coursers like a page<br>Of prancing poetry.</em></p><p><em>This traverse may the poorest take<br>Without oppress of toll;<br>How frugal is the chariot<br>That bears a human soul!</em></p></div><div style="border-left:1px solid #ccc;margin:0 10px;"></div><div style="flex:1;padding-left:20px;"><h3>没有一艘船能像一本书</h3><p>没有一艘船能像一本书<br>带我们远渡重洋，<br>也没有骏马能像一页<br>跳跃的诗行。</p><p>最贫穷的人也可由此穿越<br>无需支付通行税；<br>承载人类灵魂的马车<br>何等节俭实惠！</p></div></div>
</blockquote>
<h4 id="He-ate-and-drank-the-precious-words"><a href="#He-ate-and-drank-the-precious-words" class="headerlink" title="He ate and drank the precious words"></a>He ate and drank the precious words</h4><blockquote>
<div style="display:flex;"><div style="flex:1;padding-right:20px;"><h3>He ate and drank the precious words</h3><p><em>He ate and drank the precious words—<br>His spirit grew robust—<br>He knew no more that he was poor,<br>Nor that his frame was dust.</em></p><p><em>He danced along the dingy days,<br>And this bequest of wings<br>Was but a book. What liberty<br>A loosened spirit brings!</em></p></div><div style="border-left:1px solid #ccc;margin:0 10px;"></div><div style="flex:1;padding-left:20px;"><h3>他啜饮珍贵的词语</h3><p>他啜饮珍贵的词语——<br>灵魂变得强健——<br>不再知晓自己贫穷<br>也不觉肉身如尘烟</p><p>他在黯淡岁月起舞，<br>这双翼的遗产<br>不过是一本书。挣脱束缚的灵魂<br>带来何等自由无边！</p></div></div>
</blockquote>
]]></content>
      <categories>
        <category>读书</category>
      </categories>
      <tags>
        <tag>随手记</tag>
        <tag>读书</tag>
      </tags>
  </entry>
  <entry>
    <title>《寂寞的游戏》</title>
    <url>/2023/12/24/%E3%80%8A%E5%AF%82%E5%AF%9E%E7%9A%84%E6%B8%B8%E6%88%8F%E3%80%8B/</url>
    <content><![CDATA[<h1 id="《寂寞的游戏》"><a href="#《寂寞的游戏》" class="headerlink" title="《寂寞的游戏》"></a>《寂寞的游戏》</h1><p><img src="/../images/%E5%AF%82%E5%AF%9E%E7%9A%84%E6%B8%B8%E6%88%8F.jpg" alt="寂寞的游戏">	</p>
<p>​	<strong>其实</strong>，这本书我在2020年就看过一遍了，因为十分合拍的原因，还拍下了当时读书时的画面。当时就感受到了袁哲生先生的文字下的细腻，将一个敏感的青年通过笔墨绘于纸上。</p>
<p>​	<strong>那时</strong>，我刚刚升入高中，不曾想到进了高一的奥赛班，以为以我的适应能力能够立马就与同学打成一片，然而这个班的同学早已互相认识，只留少数几个像我一样对于新环境完全陌生的新人，不仅是交际上的原因，学业上也频频受挫。初中时的锐气与自信受到巨大的打击，于是便抓住文字这根救命稻草，以求在陌生而冷淡的环境汲取一丝慰藉。</p>
<p>​	<strong>文字</strong>，从未给过我失望，透过《寂寞的游戏》，我看到了一个像我一样的青年，借由他的经历，让我那时的无力感得到稍许减弱。</p>
<blockquote>
<p>“	我想，人天生就喜欢躲藏，</p>
<p>渴望消失，这是一点都不奇怪的事。	”</p>
<p>“	我就这样躲躲藏藏了许多年，直到有一天，捉迷藏的乐趣像一颗流星，眨眼就消失的无影无踪。	”</p>
</blockquote>
<p>​	这些细腻且真实的文字打动着我，让那时的我感动：我不是一个人，袁哲生先生也和我一样。</p>
<p><img src="/../images/%E5%AF%82%E5%AF%9E%E7%9A%84%E6%B8%B8%E6%88%8F2.jpg" alt="2020 第一次读这本书就被吸引"></p>
<p>​	<strong>那时</strong>，图片中的有着斑马图案像条形码的马克杯还没碎。那是妈妈在外地别人家打工时，住在那里的姐姐托妈妈送给我的，杯子里还有一张写着QQ号码和昵称 Nancy 的纸条。依稀记得为了这个纸条找发小帮忙注册了一个QQ号。然而她没有同意我的申请添加，后来QQ号也给弄丢了。</p>
<p>​	<strong>再次</strong>，拿起这本书的原因是在市区的书架上看到，蓝色的书封，和我在那会同时看的《夜晚的潜水艇》有几分相似，在手指触碰到书的瞬间，那时的回忆涌现出来，那个茶杯，那本有淡淡香味的书，把我拉到过去，回过神来，同行的朋友早已不见。那晚，沉浸在过去回忆中的我，打开手机，下来了电子书看，那时我是这么热爱看书，而今双手却不离键盘手机。过去的我如果看到我这个模样，估计会因为不理解而叹息吧。重读过程，不仅是过去的回忆，读书时的令人享受的感觉也再次回到我的大脑。大概是内啡肽吧。不知不觉就读完了这本。</p>
<blockquote>
<p>“好好活下去，不一定要在意别人的话，人生有时候要走自己的路。”</p>
<p>“我知道父亲拙于言词，在面对生命难以省略的伤痛时，更无力打破沉默。”</p>
</blockquote>
<p>​	<strong>最近</strong>，作息有点阴间，书中这句话突然点醒了我。</p>
<blockquote>
<p>“平常上班的日子，他不乏迟到的纪录，不过，他从未在星期天晚起过，因为这是他最重视的、为自己而活的日子。”</p>
</blockquote>
<p>​	以前我还爱用“	理想主义的少年不会被现实主义打败。”这句话来激励我自己，然而，这句话的力量在我觉得它幼稚的那一刻荡然无存，就好像否定了理想主义的存在一样。<strong>总之</strong>，这本书让我重新感受到了文字的温度与力量，我感激袁哲生先生的文字，我想，您之所以选择走向天堂，是因为想要把这些文字带给天国的人们吧。</p>
<blockquote>
<p> <strong>这一位看自己灵魂风水的人，最终选择留下了的叹息，也成为了读者对一位如此能抓住人心的作者的叹息。</strong></p>
</blockquote>
]]></content>
      <categories>
        <category>读书</category>
      </categories>
      <tags>
        <tag>随手记</tag>
        <tag>读书</tag>
      </tags>
  </entry>
  <entry>
    <title>《局外人》</title>
    <url>/2025/03/30/%E3%80%8A%E5%B1%80%E5%A4%96%E4%BA%BA%E3%80%8B/</url>
    <content><![CDATA[<h1 id="《局外人》"><a href="#《局外人》" class="headerlink" title="《局外人》"></a>《局外人》</h1><h1 id="看不懂。。。"><a href="#看不懂。。。" class="headerlink" title="看不懂。。。"></a>看不懂。。。</h1><blockquote>
<p><img src="/../images/read/juwairen.jpg"></p>
</blockquote>
]]></content>
      <categories>
        <category>读书</category>
      </categories>
      <tags>
        <tag>随手记</tag>
        <tag>读书</tag>
      </tags>
  </entry>
  <entry>
    <title>《我与地坛》</title>
    <url>/2025/07/15/%E3%80%8A%E6%88%91%E4%B8%8E%E5%9C%B0%E5%9D%9B%E3%80%8B/</url>
    <content><![CDATA[<h1 id="《我与地坛》"><a href="#《我与地坛》" class="headerlink" title="《我与地坛》"></a>《我与地坛》</h1><h2 id="史铁生"><a href="#史铁生" class="headerlink" title="史铁生"></a>史铁生</h2><p><img src="/../images/books/%E6%88%91%E4%B8%8E%E5%9C%B0%E5%9D%9B/image-20250715121206625.png" alt="image-20250715121206625"></p>
<p>第一次看的时候只是浅浅的被触动，近来书荒再次拿起这本书，读第一段的时候眼睛就莫名其妙地湿润了。我一个字一个字的读，慢慢地读，地铁上的嘈杂早已消失不见，仿佛按下了禁音键。太阳在远处落下，此时读到</p>
<blockquote>
<p>但是太阳，它每时每刻都是夕阳也都是旭日。当它熄灭着走下山去收尽苍凉残照之际，正是它在另一面燃烧着爬上山巅布散烈烈朝辉之时。那一天，我也将沉静着走下山去，扶着我的拐杖。有一天，在某一处山洼里，势必会跑上来一个欢蹦的孩子，抱着他的玩具。</p>
<p>当然，那不是我。</p>
<p>但是，那不是我吗？</p>
</blockquote>
<p>我感受到了一种与作者的联系，与世界的联系。</p>
<blockquote>
<p>我真想告诫所有长大了的男孩子，千万不要跟母亲来这套倔强，羞涩就更不必，我已经懂了可我已经来不及了。</p>
</blockquote>
<blockquote>
<p>但是太阳，它每时每刻都是夕阳也都是旭日。当它熄灭着走下山去收尽苍凉残照之际，正是它在另一面燃烧着爬上山巅布散烈烈朝辉之时。那一天，我也将沉静着走下山去，扶着我的拐杖。有一天，在某一处山洼里，势必会跑上来一个欢蹦的孩子，抱着他的玩具。<br>当然，那不是我。<br>但是，那不是我吗？<br>宇宙以其不息的欲望将一个歌舞炼为永恒。这欲望有怎样一个人间的姓名，大可忽略不计。</p>
</blockquote>
<blockquote>
<p> 我常觉得这中间有着宿命的味道：仿佛这古园就是为了等我，而历尽沧桑在那儿等待了四百多年。<br>它等待我出生，然后又等待我活到最狂妄的年龄上忽地残废了双腿。四百多年里，它一面剥蚀了古殿檐头浮夸的琉璃，淡褪了门壁上炫耀的朱红，坍圮了一段段高墙又散落了玉砌雕栏，祭坛四周的老柏树愈见苍幽，到处的野草荒藤也都茂盛得自在坦荡。这时候想必我是该来了。十五年前的一个下午，我摇着轮椅进入园中，它为一个失魂落魄的人把一切都准备好了。那时，太阳循着亘古不变的路途正越来越大，也越红。在满园弥漫的沉静光芒中，一个人更容易看到时间，并看见自己的身影。</p>
</blockquote>
<blockquote>
<p>这样想了好几年，最后事情终于弄明白了：一个人，出生了，这就不再是一个可以辩论的问题，而只是上帝交给他的一个事实；上帝在交给我们这件事实的时候，已经顺便保证了它的结果，所以死是一件不必急于求成的事，死是一个必然会降临的节日。这样想过之后我安心多了，眼前的一切不再那么可怕。</p>
</blockquote>
<blockquote>
<p> 多年来我头一次意识到，这园中不单是处处都有过我的车辙，有过我的车辙的地方也都有过母亲的脚印。</p>
</blockquote>
<blockquote>
<p>什么意义都不是，就掉进昆德拉所说的“生命不能承受之轻”。你是一个什么呢？生命算是个什么玩意儿呢？轻得称不出一点儿重量你可就要消失。我向L讨回那件东西，归途中的惶茫因年幼而无以名状，如今想来，分明就是为了一个“轻”字：珍宝转眼被处理成垃圾，一段生命轻得飘散了，没有了，以为是什么原来什么也不是，轻易、简单、灰飞烟灭。一段生命之轻，威胁了生命全面之重，惶茫往灵魂里渗透：是不是生命的所有段落都会落此下场啊？人的根本恐惧就在这个“轻”字上，比如歧视和漠视，比如嘲笑，比如穷人手里作废的股票，比如失恋和死亡。轻，最是可怕。</p>
</blockquote>
<blockquote>
<p> 一代人与一代人的历史是不同的，这是代沟的永恒保障。沟不是坏东西，有山有水就有沟，地球上如果都是那么平展展的，虽然希望那都是良田但事实那很可能全是沙漠。</p>
</blockquote>
<blockquote>
<p>约翰逊什么时候愿意回来，我们都会欢迎他，不管他做错了什么事，他都是牙买加的儿子。”这几句话让我感动至深。难道我们不该对灵魂有了残疾的人，比对肢体有了残疾的人，给予更多的同情和爱吗？</p>
</blockquote>
<blockquote>
<p>所谓好运，所谓幸福，显然不是一种客观的程序，而完全是心灵的感受，是强烈的幸福感罢了。幸福感，对了。没有痛苦和磨难你就不能强烈地感受到幸福，对了。那只是舒适只是平庸，不是好运不是幸福，这下对了。</p>
</blockquote>
<blockquote>
<p> 你热爱音乐，古典的交响乐，现代的摇滚乐，温文尔雅的歌剧清唱剧，粗犷豪放的民谣村歌，乃至悠婉凄长的叫卖，孤零萧瑟的风声，温馨闲适的节日的音讯，你都听得心醉神迷，听得怆然而沉寂，听出激越和威壮，听到玄缈与空冥，你真幸运，生存之神秘注入你的心中使你永不安规守矩。</p>
</blockquote>
<blockquote>
<p>我希望，我把这个梦写出来，我的黑夜从此也有了皈依了。</p>
</blockquote>
<blockquote>
<p> 历史的每一瞬间，都有无数的历史蔓展，都有无限的时间延伸。我们生来孤单，无数的历史和无限的时间因破碎而成片断。互相埋没的心流，在孤单中祈祷，在破碎处眺望，或可指望在梦中团圆。记忆，所以是一个牢笼。印象是牢笼以外的天空。</p>
</blockquote>
]]></content>
      <categories>
        <category>读书</category>
      </categories>
      <tags>
        <tag>随手记</tag>
        <tag>读书</tag>
      </tags>
  </entry>
  <entry>
    <title>《悲惨世界》</title>
    <url>/2025/03/30/%E3%80%8A%E6%82%B2%E6%83%A8%E4%B8%96%E7%95%8C%E3%80%8B/</url>
    <content><![CDATA[<h1 id="《悲惨世界》"><a href="#《悲惨世界》" class="headerlink" title="《悲惨世界》"></a>《悲惨世界》</h1><blockquote>
<p>人类的一切罪恶都是从儿童的流浪生活开始的。</p>
</blockquote>
<hr>
<blockquote>
<p>世上有一种人就象虾似的不断退向黑暗，他们一生中只后退，不前进，并且利用经验，增加他们的丑恶，不停地日益败坏下去，心地也日益狠毒起来。这一对男女，便是那种东西。 </p>
</blockquote>
<hr>
<blockquote>
<p> 城市会使人变得凶残，因为它使人腐化堕落。山、海和森林使人变得粗野。它们只发展这种野性，却不毁灭人性。</p>
</blockquote>
<hr>
<blockquote>
</blockquote>
<hr>
<blockquote>
</blockquote>
<hr>
<blockquote>
</blockquote>
]]></content>
      <categories>
        <category>读书</category>
      </categories>
      <tags>
        <tag>随手记</tag>
        <tag>读书</tag>
      </tags>
  </entry>
  <entry>
    <title>《无知》</title>
    <url>/2025/03/30/%E3%80%8A%E6%97%A0%E7%9F%A5%E3%80%8B/</url>
    <content><![CDATA[<h1 id="《无知》"><a href="#《无知》" class="headerlink" title="《无知》"></a>《无知》</h1><h2 id="米兰·昆德拉"><a href="#米兰·昆德拉" class="headerlink" title="米兰·昆德拉"></a>米兰·昆德拉</h2><p>​	</p>
<blockquote>
<p>如果往事不能在与朋友的交谈中被一而再、再而三地提及，就会消失。流亡者集中居住在一些移民地，同胞们不厌其烦地反复讲着同样的事情，因此不会淡忘。而对于那些不怎么和同胞来往的人，就像伊莱娜或尤利西斯，他们就不可避免地会得失忆症。他们的思乡之情越强烈，他们的记忆就越空洞。尤利西斯越是痛苦，他忘记的事就越多。这是因为思乡之情并不能促进人的记忆活动，并不会唤起从前的记忆，相反，它满足于本身，满足于自己的激情，完全淹没在自己的痛苦中。</p>
</blockquote>
<hr>
<blockquote>
<p>二十年里尤利西斯惟一想的就是回归故乡。但一旦回来后，他惊讶地发现，他的生活，也就是他生命的精华、重心、财富，其实并不在伊萨卡，而是存在于他二十年的漂泊之中。这笔财富，他已然失去，而且无法在讲述中再找回来了。</p>
</blockquote>
<hr>
<blockquote>
<p>在一首四行诗里面,他就写到了他的悲苦。他说想要用悲苦造一间屋,把自己关在里面三百年。三百年啊，我们都明白，眼前是一条三百年的漫长的隧道。”</p>
</blockquote>
<hr>
<blockquote>
</blockquote>
]]></content>
      <categories>
        <category>读书</category>
      </categories>
      <tags>
        <tag>随手记</tag>
        <tag>读书</tag>
      </tags>
  </entry>
  <entry>
    <title>《星，雪，火》</title>
    <url>/2025/03/30/%E3%80%8A%E6%98%9F%EF%BC%8C%E9%9B%AA%EF%BC%8C%E7%81%AB%E3%80%8B/</url>
    <content><![CDATA[<h1 id="《星，雪，火》"><a href="#《星，雪，火》" class="headerlink" title="《星，雪，火》"></a>《星，雪，火》</h1><h2 id="约翰·海恩斯"><a href="#约翰·海恩斯" class="headerlink" title="约翰·海恩斯"></a>约翰·海恩斯</h2><p>​	这本书完完全全是在地铁上看完的，在最现代化的城市中，在地面以下的钢铁列车中，我的思绪已然飘向阿拉斯加。哪里的极地、大雪，干净的夜空和星星都把我留住，以至于多次坐过站。很幸运能遇到这本书——这本随手从书堆中抽出，读起来却一发不可收拾的书。叙事慢慢的，就好像在冬天的阿拉斯加的雪夜里，坐在火堆旁边听一位老者讲故事。</p>
<blockquote>
<p>​	一个人在这样遥远、孤寂的地方能够做些什么？首先，他可以看看天气、星星、雪或者是火，这是他最常阅读的书。而他所做的一切，不论是将木柴和几桶雪带进，或是将废水带出，都需要他站在野地的空旷处，暂时远离墙，远离人类写就的书，远离做梦的脑袋。当我站在这儿，当我因夜晚的寂静和亲切而精神抖擞时，我认为这是一种很好的生活方式。流浪的精灵回归，以人的形式在森林中辟出一块空地，用身边的树盖了一个遮蔽所。它来这儿学习此地的生存之道，来这儿睡觉和苏醒，成长和变老，来这儿观看河流、东移的云朵和草上的霜花。我想象着这样一个人，他可能是世界上最冷的学者，追逐着雪上的每一条线索，边前进边写下一本书，那将是一本雪的历史，一本冬日之书，一本古时候在这些山丘上打猎的人阅读的千年文本。</p>
</blockquote>
]]></content>
      <categories>
        <category>读书</category>
      </categories>
      <tags>
        <tag>随手记</tag>
        <tag>读书</tag>
      </tags>
  </entry>
  <entry>
    <title>《树上的男爵》</title>
    <url>/2024/02/18/%E3%80%8A%E6%A0%91%E4%B8%8A%E7%9A%84%E7%94%B7%E7%88%B5%E3%80%8B/</url>
    <content><![CDATA[<p>​	</p>
]]></content>
      <categories>
        <category>读书</category>
      </categories>
      <tags>
        <tag>随手记</tag>
        <tag>读书</tag>
      </tags>
  </entry>
  <entry>
    <title>《月亮和六便士》</title>
    <url>/2025/03/29/%E3%80%8A%E6%9C%88%E4%BA%AE%E5%92%8C%E5%85%AD%E4%BE%BF%E5%A3%AB%E3%80%8B/</url>
    <content><![CDATA[<h1 id="《月亮和六便士》"><a href="#《月亮和六便士》" class="headerlink" title="《月亮和六便士》"></a>《月亮和六便士》</h1><p>​	很早就接触过这本书，只是不知道出于什么原因一直都是读了一点就不太想读下去。后来实在是书荒了又刚好在图书馆遇到，索性就下决心完整地读一遍。也许是我的悟性不高，并没有很太读懂。qwq</p>
<blockquote>
<p>我不记得是谁曾经建议过，为了使灵魂宁静，一个人每天要做两件他不喜欢的事。说这句话的人是个聪明人，我也一直在一丝不苟地按照这条格言行事：因为我每天早上都起床，每天也都上床睡觉。但是我这个人生来还有苦行主义的性格，我还一直叫我的肉体每个星期经受一次更大的磨难。《泰晤士报》的文学增刊我一期也没有漏掉。</p>
</blockquote>
<hr>
<blockquote>
<p>一本书要能从这汪洋大海中挣扎出来希望是多么渺茫啊！即使获得成功，那成功又是多么瞬息即逝的事啊！天晓得，作者为他一本书花费了多少心血，经受多少磨折，尝尽了多少辛酸，只为了给偶然读到这本书的人几小时的休憩，帮助他驱除一下旅途中的疲劳。</p>
</blockquote>
<hr>
<blockquote>
<p>我没有时间干这种无聊的事。生命太短促了，没有时间既闹恋爱又搞艺术。</p>
</blockquote>
<hr>
<blockquote>
<p>要是一个女人爱上了你，除非连你的灵魂也叫她占有了，她是不会感到满足的。因为女人是软弱的，所以她们具有非常强烈的统治欲，不把你完全控制在手就不甘心。女人的心胸狭窄，对那些她理解不了的抽象东西非常反感。她们满脑子想的都是物质的东西，所以对于精神和理想非常妒忌。男人的灵魂在宇宙的最遥远的地方邀游，女人却想把它禁锢在家庭收支的账簿里。</p>
</blockquote>
<hr>
<blockquote>
<p>这一定是世间无数对夫妻的故事。这种生活模式给人以安详亲切之感。它使人想到一条平静的小河，蜿蜒流过绿茸茸的牧场，与郁郁的树荫交相掩映，直到最后泻入烟波浩渺的大海中。但是大海却总是那么平静，总是沉默无言、声色不动，你会突然感到一种莫名的不安。</p>
</blockquote>
<hr>
<blockquote>
<p>我总觉得大多数人这样度过一生好象欠缺一点什么。我承认这种生活的社会价值，我也看到了它的井然有序的幸福，但是我的血液里却有一种强烈的愿望，渴望一种更狂放不羁的旅途。这种安详宁静的快乐好象有一种叫我惊惧不安的东西。我的心渴望一种更加惊险的生活。只要在我的生活中能有变迁——变迁和无法预见的刺激，我是准备踏上怪石嶙峋的山崖，奔赴暗礁满布的海滩的。</p>
</blockquote>
]]></content>
      <categories>
        <category>读书</category>
      </categories>
      <tags>
        <tag>随手记</tag>
        <tag>读书</tag>
      </tags>
  </entry>
  <entry>
    <title>《流星之绊》</title>
    <url>/2024/02/17/%E3%80%8A%E6%B5%81%E6%98%9F%E4%B9%8B%E7%BB%8A%E3%80%8B/</url>
    <content><![CDATA[<h1 id="《流星之绊》"><a href="#《流星之绊》" class="headerlink" title="《流星之绊》"></a>《流星之绊》</h1><p>​	一直想看看短篇小说，想要重新体验一下过去一次性读完一本短篇的感觉（吃快餐…嘘！）。于是就立马想到了东野圭吾和村上春树。</p>
<p>​	偶然发现原来我还有很多没看过的东野圭吾的作品。其中就有这本《流星之绊》，只消半个夜晚就看毕了，关上ipad，躺在床上，他们三兄妹以及他们的故事在脑海里不断重现。</p>
<blockquote>
<p>“我们三人就像流星，毫无目标地飞逝，不知将在何处燃烧殆尽。”</p>
</blockquote>
<p>​	看完后感觉剧情挺一般的，好像这本书少了点东野圭吾的味道了。如果是换做以前的我，大概会觉得这本书挺温暖的，至少就结局来说。也许我真的已经长大了，已经不在相信书里的奇迹了或者说已经不太习惯大团圆结局了。</p>
<p>​	看的时候就觉得这个剧情很适合拍成电视剧供像我一样百无聊赖的人群观看，第二天一查，没想到真的有日剧，而且好像日剧的受众还更广一点。</p>
<p>​	流星之绊啊，我一开始其实是理解为像流星一样转瞬即逝的羁绊，后来才知道是一起约定看流星的羁绊。虽然流星易逝，但是观看流星的他们之间的羁绊却被永远铭记。</p>
<blockquote>
<p>“</p>
<p>然而最美的流星永远是第一次映入眼帘的那颗<br>“第一次”给人的永恒美是人们对“纯真”最后的忠诚<br>流星雨<br>那年也因狮子座流星雨二更而起<br>无数渴望的眼睛在凝视中等待世纪之美的来临<br>可不懂风情的夜空却久久星光依旧<br>剩下一群疯狂的少年奔跑在老师撕心裂肺的呐喊声中<br>未能如期而至的流星雨<br>却留下了无法再来的回忆</p>
<p>“</p>
</blockquote>
]]></content>
      <categories>
        <category>读书</category>
      </categories>
      <tags>
        <tag>随手记</tag>
        <tag>读书</tag>
      </tags>
  </entry>
  <entry>
    <title>《海子诗集》</title>
    <url>/2025/03/30/%E3%80%8A%E6%B5%B7%E5%AD%90%E8%AF%97%E9%9B%86%E3%80%8B/</url>
    <content><![CDATA[<h1 id="《海子诗集》"><a href="#《海子诗集》" class="headerlink" title="《海子诗集》"></a>《海子诗集》</h1><blockquote>
<p><strong>幸福的一日——致秋天的花楸树</strong></p>
<p>作者：海子</p>
<p>我无限的热爱着新的一日</p>
<p>今天的太阳 今天的马 今天的花楸树</p>
<p>使我健康 富足 拥有一生</p>
<p>从黎明到黄昏</p>
<p>阳光充足</p>
<p>胜过一切过去的诗</p>
<p>幸福找到我</p>
<p>幸福说：“瞧 这个诗人</p>
<p>他比我本人还要幸福“</p>
<p>在劈开了我的秋天</p>
<p>在劈开了我的骨头的秋天</p>
<p>我爱你，花楸树</p>
</blockquote>
<hr>
<blockquote>
<p><strong>活在珍贵的人间</strong></p>
<p>活在这珍贵的人间<br>太阳强烈<br>水波温柔<br>一层层白云覆盖着<br>我<br>踩在青草上<br>感到自己是彻底干净的黑土块</p>
<p>活在这珍贵的人间<br>泥土高溅<br>扑打面颊<br>活在这珍贵的人间<br>人类和植物一样幸福<br>爱情和雨水一样幸福</p>
</blockquote>
]]></content>
      <categories>
        <category>读书</category>
      </categories>
      <tags>
        <tag>随手记</tag>
        <tag>读书</tag>
      </tags>
  </entry>
  <entry>
    <title>《橡果兄弟》</title>
    <url>/2025/03/30/%E3%80%8A%E6%A9%A1%E6%9E%9C%E5%85%84%E5%BC%9F%E3%80%8B/</url>
    <content><![CDATA[<h1 id="《橡果兄弟》"><a href="#《橡果兄弟》" class="headerlink" title="《橡果兄弟》"></a>《橡果兄弟》</h1><p>​	这是一部电影啦！但是太好看了，所以记录一下。</p>
<blockquote>
<p>00:37:00,218 –&gt; 00:37:02,880<br>很蓝</p>
<p>622<br>00:37:05,181 –&gt; 00:37:07,137<br>中间的这个是？</p>
<p>623<br>00:37:07,183 –&gt; 00:37:08,172<br>是瓢虫</p>
<p>624<br>00:37:08,351 –&gt; 00:37:09,215<br>它飞起来了？</p>
<p>625<br>00:37:09,811 –&gt; 00:37:10,721<br>对啊</p>
<p>626<br>00:37:11,146 –&gt; 00:37:14,229<br>虽然很难但是很有趣 对吧</p>
<p>627<br>00:37:14,274 –&gt; 00:37:18,313<br>它会把再也不会到来的瞬间化为永恒</p>
<p>628<br>00:37:18,528 –&gt; 00:37:24,444<br>把我第一次按下快门那瞬间的心情<br>一起变成永远</p>
<p>629<br>00:37:25,410 –&gt; 00:37:31,781<br>将没有人发现<br>却即将发生在这个世界角落的小故事</p>
<p>630<br>00:37:31,833 –&gt; 00:37:34,074<br>在当下烙印起来</p>
<p>631<br>00:37:34,586 –&gt; 00:37:40,047<br>替我用任何人都看得到的形式来证明</p>
<p>632<br>00:37:40,091 –&gt; 00:37:43,254<br>我用全身心感受到的世界确实存在</p>
<p>633<br>00:37:44,220 –&gt; 00:37:46,461<br>你不觉得这样很厉害吗？</p>
</blockquote>
<hr>
<blockquote>
<p>897<br>00:51:00,224 –&gt; 00:51:02,931<br>感觉你们在一起每天都过得很开心</p>
<p>898<br>00:51:03,018 –&gt; 00:51:04,303<br>你们可是在闪闪发光哦</p>
<p>899<br>00:51:04,812 –&gt; 00:51:07,053<br>虽然我没办法知道在我们相遇之前</p>
<p>900<br>00:51:07,106 –&gt; 00:51:09,813<br>你们两个是怎么相处的</p>
<p>901<br>00:51:09,858 –&gt; 00:51:14,397<br>但和最要好的朋友玩在一起</p>
<p>902<br>00:51:14,488 –&gt; 00:51:17,150<br>那可是最棒最快乐的事哦</p>
</blockquote>
<hr>
<blockquote>
<p>1002<br>00:56:29,177 –&gt; 00:56:32,340<br>闪耀在蓝色世界里的红色流星</p>
<p>1003<br>00:56:35,142 –&gt; 00:56:37,383<br>是明亮的红色，真漂亮</p>
</blockquote>
<hr>
<blockquote>
<p>1007<br>00:56:50,741 –&gt; 00:56:52,982<br>就算逃避个一次</p>
<p>1008<br>00:56:53,035 –&gt; 00:56:55,276<br>我也还是可以重新再战对吧</p>
<p>1009<br>00:56:56,705 –&gt; 00:56:58,946<br>没错，因为你还活着啊</p>
</blockquote>
<hr>
<blockquote>
<p>1249<br>01:26:29,476 –&gt; 01:26:34,937<br><strong>（我的宝物）</strong><br><strong>（见证我15岁最后英姿的好朋友们）</strong></p>
</blockquote>
<p><img src="/../images/read/xiangguoxiongdi_2.jpg"></p>
<p><img src="/../images/read/xiangguoxiongdi_1.jpg"></p>
]]></content>
      <categories>
        <category>读书</category>
      </categories>
      <tags>
        <tag>随手记</tag>
        <tag>读书</tag>
      </tags>
  </entry>
  <entry>
    <title>《涅朵奇卡》</title>
    <url>/2025/04/13/%E3%80%8A%E6%B6%85%E6%9C%B5%E5%A5%87%E5%8D%A1%E3%80%8B/</url>
    <content><![CDATA[<h1 id="《涅朵奇卡》"><a href="#《涅朵奇卡》" class="headerlink" title="《涅朵奇卡》"></a>《涅朵奇卡》</h1><blockquote>
<p>他死了，他这样死是他那全部生活必然和自然的结果。当支持他的生命的一切，像幻影、像无形的空虚的梦想一下子破灭和消散的时候，他应该这样死去。当他失掉了最后的希望，当他猛然认清了用来欺骗自己和支持自己全部生活的一切都完了的时候，他死了。真理的咄咄逼人的光芒使他大为震惊，谎话对于他终究是谎话。在最后的时刻，他听到了一个绝妙的天才家的演奏，这个天才家对他说明了，他自己究竟是怎样一个人，而且给他判定了终身。从天才的 C的琴弦中传出的最后的声音，对他揭开了艺术的全部秘密，永远年轻而坚强的真正的天才家，用自己的真相粉碎了他的幻想。仿佛，那仅仅在神秘而渺茫的痛苦中折磨了他一生的东西，那直到此刻以前他还在幻想，而且在朦胧中苦恼着他的东西，是难以觉察和无从捉摸的，纵然有时也觉察到一点，但他恐怖地逃避它，一生中自己用谎话掩护住，他预感到而至死仍然害怕的一切—突然，一下子显现出来，清楚地显现在他的眼前，他的眼睛直到这时以前还顽固地不肯承认白是白、黑是黑。真理使他的眼睛初次看清楚了一切:过去、现在和将来，他受不住了;它搞乱了和毁灭了他的理性。它像闪电一般，突然无可逃避地向他袭来。他怀着紧张和畏惧的心情等待了一生的那件事，突然出现了。仿佛，一生中斧头都悬在他头顶上，一生中他无时无刻不在难以形容的痛苦中等待着它向他砍来;斧头终于向他砍下来了!这个打击是致命的。他想逃避对自己的裁判，然而却无处可逃:最后的希望失掉了，最后的借口没有了。照他那糊涂的想法，那个使他苦恼了多年、不让他生活的人，那个他认为只要她一死自己就能立刻振作起来的人，现在是死了。最后，只剩下他一个人，没有什么东西再妨碍他:他终于自由了!他在极度心慌意乱中，想仿照一个公正的法官，铁面无私，对自己严格地进行最后裁判;然而他那软弱无力的琴弓却只能笨拙地重复着天才家最后的乐句……在这一刹那，已经窥伺了他十年的神经错乱症，就必然会葬送掉他。</p>
</blockquote>
<blockquote>
<p>常有那样的时刻，所有心智和精神的力量痛苦地绷紧，似乎突然会爆发出意识的明亮火焰，而在这一瞬间，被撼动的心灵梦见某种预言性的东西，好像心灵苦于未来预感的折磨，提前体会着它。整个身体是那样渴望生活，那样恳求着生活，燃起最热烈、最盲目的希望之火，心就赶像在召唤着未来，连同它的全部神秘、全部不确定性，哪怕带着风暴、带着雷电，但一定要有生活。我的那一刻正是如此。</p>
</blockquote>
<blockquote>
<p>在遇见你之前，我粗俗、简单，我的外表落寞而阴沉。我不期望另一种生活，没有想过它，没有召唤它，也不想唤来它。我内心的一切都像受着压制，我不知道世界上有什么比我平凡而定期的工作更加重要。我所关心的只是——明天，而对这个我也很是漠然。以前，说来是很久的事了，我梦想过这类事情，像个愚笨的人一样渴望过。但从那时起过了很长很长时间，我开始孤独地生活，严酷、平静，甚至没感觉到冻僵我内心的寒冷。它睡着了。我是知道并且认定，永远不会另有个太阳为我升起的，我相信这一点，也什么都不抱怨，因为我知道注定要这样。当你从我身边经过，我都不明白，我可以大胆向你抬起眼睛。</p>
</blockquote>
<blockquote>
<p>我开始贪婪地读起来，很快阅读就完全吸引了我。我所有新的需求，不久之前的所有渴望，我青春期所有的仍然模糊着的冲动，在我心灵中是那样不安而叛逆地造了反，这些皆是我过早地成长的迫不及待引发的，所有这一切突然久久地偏向另一个、出乎意料呈现着的结局，就像完全满足于新的食物，就像为自己找到了正确的道路。很快我的心和头脑便如此痴迷，我的想象发展得如此宽广，以至于我似乎已经忘掉迄今围着我的整个世界。看起来，命运本身在我那样竭力向往、日夜玄想的新生活的门槛上拦住我。而且，在放我进入一条未知的道路之前，它把我带到高处，以神奇的全景，以动人的辉煌视角向我展现未来。我注定要经历这整个未来，首先从书中读出它，在梦想中，在希望中，在激情的冲动中，在年轻精神的甜蜜兴奋中去体验。</p>
</blockquote>
<blockquote>
<p>我最初读书毫无选择，碰到什么读什么，但是命运保护了我：迄今为止，我所了解和经历过的事情都是堂堂正正，循规蹈矩的，现在，任何居心测、不干不净的描写已经不能迷惑我了，我儿时的直觉、幼小的年龄和我过去的一切在护着我。今天，意识好像突然照亮了我过去全部的生活。确实，我读过的差不多每一页书，仿佛我都似曾相识，仿佛我早就有过体验；这种种激情和展现在我面前的全部生活，是那样的千姿百态，光怪陆离，好像我都亲自经历过。我怎么能不被这种景象所吸引而忘掉当前的一切几乎脱离开现实生活呢，因为我读过的每一本书都体现了一种命运的法则，一种人生奇遇的精神；这种精神主宰着人们的生活，但又源于人类生活的某一主要法则，是吉凶、得失、祸福的条件。对于这个所谓的法则，我是心存疑虑的；因此我尽其所能地努力去猜测，运用我身上几乎是由某种自我保护意识所激发起的全部本能，尽量去揣度。我好像预先得到了通报，仿有人警告过我。似乎有一种未ト先知的东西进了我的内心，使我心中的希望一天天与俱增，尽管与此同时我又越来中短篇小说越强烈地向往着这种未来，向往着从书上看到的这种生活，因为这种生活无日不在以巨大的艺术魅力和全部的诗情画意使我惊叹不已。不过，正像我已经说过的，我的幻想大大压过了我急不可待的心情，老实说，我的大胆只是表现在幻想上，实际在对待未来上我却本能地畏缩不前。所以，好像先跟自己约定好了似的，我无意中决定暂时先满足于幻想世界，满足于想人非非的一枕黄粱，因为在这里我可以目空一切，唯我独尊，这个世界里只有清一色的诱惑和欢乐，即便有不幸存在，其作用也不过是消极被动的，过渡性的。以苦尽甘来的对比，让命运来个急转弯，使我头脑中轰轰烈烈的故事走向大团圆的结局。这就是我现在对当时的情绪的理解。 而且，这样的生活，沉于幻想的生活，严重脱离我周围切的生活，居然能够持续整整三年之久！</p>
</blockquote>
]]></content>
      <categories>
        <category>读书</category>
      </categories>
      <tags>
        <tag>随手记</tag>
        <tag>读书</tag>
      </tags>
  </entry>
  <entry>
    <title>《焦虑的人》</title>
    <url>/2025/05/06/%E3%80%8A%E7%84%A6%E8%99%91%E7%9A%84%E4%BA%BA%E3%80%8B/</url>
    <content><![CDATA[<h1 id="《焦虑的人》"><a href="#《焦虑的人》" class="headerlink" title="《焦虑的人》"></a>《焦虑的人》</h1><h2 id="弗莱德里克·巴克曼"><a href="#弗莱德里克·巴克曼" class="headerlink" title="弗莱德里克·巴克曼"></a>弗莱德里克·巴克曼</h2><p>​	从《一个叫欧维的男人决定去死》入坑，也许是看过《一个叫欧维的男人决定去死》这部电影，当我看完这本《焦虑的人》的时候一个个画面组装成连续剧，就好像看完了一部电影。</p>
<p>​	虽然书名叫《焦虑的人》，但就结果来说还是挺美好的。挺喜欢这样的故事，不紧不慢，带些令人愉快的幽默感。</p>
<blockquote>
<p>​	我们养过热带鱼，结果它们都死了，我们对孩子的了解也并不比对热带鱼了解得更多，所以责任感总是令人恐惧，每天早上醒来都会吓掉我们半条命。我们没有计划，只是尽力熬过每一天，因为明天又会从头来过。<br>​	有时候这很痛苦，真的痛苦，连这身皮囊似乎都不像是自己的。有时候我们会感到恐慌，因为需要付清账单，做个成年人，其实我们对此一窍不通，因为成长非常可怕，很容易走向失败的边缘。</p>
</blockquote>
<blockquote>
<p>那是一个完全说不上来是什么天气的日子。斯堪的纳维亚半岛中部的冬天，总有那么几个周，天空根本没兴趣给我们留下任何印象，只会懒洋洋地呈现出像水坑里的报纸那种灰扑扑的颜色，黎明过后就会升起浓雾，活像有人点火烧着了一大群鬼魂。</p>
</blockquote>
<blockquote>
<p>然而柜台后面坐着的是二十岁的伦敦，她深度沉迷社交媒体，社交媒体的一大功能就是瓦解人们的社交能力，以至于当她看到银行劫匪的时候，本能地喊出了声：“你是不是个笑话？”</p>
</blockquote>
<blockquote>
<p>真相？真相在这里：银行劫匪是个成年人。再没有什么比这个事实更能揭示银行劫匪的个性了。因为步入成年的可怕之处在于，我们会被迫意识到，绝对没有人在乎我们。我们必须亲自处理所有事情，弄明白整个世界是如何运作的。工作、支付账单、用牙线、按时开会、规规矩矩排队、填各种表格、整理数据线和电源线、组装家具、换车胎、给手机充电、关咖啡机，还有，别忘了给孩子报游泳课。早晨一睁开眼，各种“别忘了”和“记住了”就如同雪崩，排山倒海而来，我们没有时间思考和呼吸，只能在“雪堆”里挖出一条活路，而第二天又会出现新的一堆。我们偶尔也会环顾四周，比如在工作场所、家长会或者马路上，惊恐地发现其他人似乎都知道自己在做什么，我们是唯一需要假装的人。他们买得起任何东西、有能力处理一切，甚至有精力应付更多，而且别人家的孩子都会游泳。</p>
</blockquote>
<blockquote>
<p>当然，事实上，如果人们真的像他们在网上表现得那么开心，就不会把那么多该死的时间花在互联网上了，因为没有谁会在真正度过愉快的一天时，还能想着拿出半天的时间自拍。</p>
</blockquote>
<blockquote>
<p>小的时候，你<strong>渴望</strong>长大，自己决定一切，可是一旦长大，你就会意识到，“做决定”是成年人所要面对的最可怕的任务。你心里必须<strong>一直有主意，才能及时地拿定主意。</strong></p>
</blockquote>
<blockquote>
<p>他说，你迟早会和一个你看不懂的人结婚，然后在你的余生之中试着看懂她。</p>
</blockquote>
]]></content>
      <categories>
        <category>读书</category>
      </categories>
      <tags>
        <tag>随手记</tag>
        <tag>读书</tag>
      </tags>
  </entry>
  <entry>
    <title>《爱你就像爱生命》</title>
    <url>/2024/04/17/%E3%80%8A%E7%88%B1%E4%BD%A0%E5%B0%B1%E5%83%8F%E7%88%B1%E7%94%9F%E5%91%BD%E3%80%8B/</url>
    <content><![CDATA[<h1 id="《爱你就像爱生命》"><a href="#《爱你就像爱生命》" class="headerlink" title="《爱你就像爱生命》"></a>《爱你就像爱生命》</h1><h2 id="王小波"><a href="#王小波" class="headerlink" title="王小波"></a>王小波</h2><blockquote>
<p>你相信吗？什么样的灵魂就要什么样的养料。……没有像样的精神生活就没有一代英俊的新人。</p>
</blockquote>
<hr>
<blockquote>
<p>我非常憎恨那些浅薄的人和自甘堕落的人，他们要把世界弄到只适合他们生存。因此我“愤懑”，看不起他们，不想这样却毒害了自己，因为人不能总为自己活着啊。我应该爱他们。如果人们不懂友爱，爱正义，爱真正美的生活，他们就是畸形的人，也不会有太崇高的智慧，我们的国家也就不会太兴盛，连一个渺小的我也在劫难逃要去当生活的奴隶。如果我不爱他们，不为他们变得美好做一点事情的话。这就是我的忏悔。你宽恕我吗，我的牧师？</p>
</blockquote>
<hr>
<blockquote>
<p><strong>我真的不知怎么才能和你亲近起来，你好像是一个可望而不可及的目标，我捉摸不透，追也追不上，就坐下哭了起来。</strong></p>
</blockquote>
<hr>
<blockquote>
<p>人是轻易不能知道自己的，因为人的感官全是向外的，比方说人能看见别人，却不能看见自己；人可以对别人有最细微的感觉，对自己就迟钝得多。</p>
</blockquote>
<hr>
<blockquote>
<p><strong>一个像你这样的灵魂可以给人多么大的助力，给人多少温暖啊！你把你灵魂的大门开开，放我进去吧！</strong></p>
</blockquote>
<hr>
<blockquote>
<p><strong>以后少写信多见面好不好？写信我爱瞎说，见面就敬重了。我愿意敬重你，再说我的字写得多寒碜哪！再见！</strong></p>
</blockquote>
<hr>
<blockquote>
<p>今天我过生日，徒长一岁何乐之有，况且你又不在。</p>
</blockquote>
<hr>
<blockquote>
<p>我告诉你我的生日是怎么度过的吧。我那天孤单极啦，差一点喝了敌敌畏。<br>我心里很不受用，寂寞的好象大马路上的一棵歪脖子树。后来我和一个同学去喝<br>了一点酒，以纪念我们赴云南十周年。好多不幸的回忆全回到我胸间，差一点把<br>我噎死。</p>
</blockquote>
<hr>
<blockquote>
<p><strong>我的勇气和你的勇气加起来，对付这个世界总够了吧?去向世界发出我们的声音，我一个人是不敢的，有了你，我就敢 。</strong></p>
</blockquote>
<hr>
<blockquote>
</blockquote>
]]></content>
      <categories>
        <category>读书</category>
      </categories>
      <tags>
        <tag>随手记</tag>
        <tag>读书</tag>
      </tags>
  </entry>
  <entry>
    <title>《罪与罚》</title>
    <url>/2025/03/30/%E3%80%8A%E7%BD%AA%E4%B8%8E%E7%BD%9A%E3%80%8B/</url>
    <content><![CDATA[<h1 id="《罪与罚》"><a href="#《罪与罚》" class="headerlink" title="《罪与罚》"></a>《罪与罚》</h1><p>​	依旧是那个味道，那种独特的心脏跳动的感觉。陀思妥耶夫斯基总是能给我带来俄罗斯式的震撼。看完这本书我又有了面对生活的勇气了。</p>
<hr>
<blockquote>
<p> 可我是怎么杀的？难道别人是这样杀人吗？难道别人是像我当时那样去杀人吗？以后什么时候我会讲给您听，我是怎么去的……难道我杀死的是老太婆吗？我杀死的是我自己，而不是老太婆！我真的是一下子结果了自己的性命，永远杀死了自己！</p>
</blockquote>
<hr>
<blockquote>
<p> 要不，就完全放弃生活！”他突然发狂似地大声叫喊，“顺从地听天由命，一劳永逸，放弃行动、生活和爱的一切权利，扼杀自己心中的一切！”</p>
</blockquote>
<hr>
<blockquote>
<p> 何况真要了解任何一个人，必须一步一步地细心观察，才不至于产生错误和偏见，否则以后纠正错误和消除成见就十分困难了。</p>
</blockquote>
<hr>
<blockquote>
<p> 这是怎么发生的，他自己也不知道，但是好像不知有什么突然把他举起来，丢到了她的脚下。他哭了，抱住了她的双膝。最初一瞬间她大吃一惊，吓得面无人色。她跳了起来，浑身发抖，望着他。但立刻，就在这一刹那，她什么都明白了。她的眼睛闪闪发光，露出无限幸福的神情；她明白了，她已经毫不怀疑，他爱她，无限地热爱她，这个时刻终于到了……</p>
</blockquote>
<hr>
<blockquote>
<p> 他们想要说话，可是谁也说不出来。他们都热泪盈眶。他们俩都面色苍白，两人都很瘦；但是在这两张仍然带有病容的、苍白的脸上已经闪烁着获得新生的未来的曙光。爱情使他们获得了新生，这一个人的心包含有另一颗心的无穷无尽的生活源泉。</p>
</blockquote>
<hr>
<blockquote>
<p>而且这一切究竟是什么呢，一切痛苦都已经过去了！现在，在最初的感情冲动中，一切，就连他犯的罪，就连判决和流放，他都觉得好像是某种身外的、奇怪的、甚至仿佛不是他亲身经历的事情。不过这天晚上他不能长久和固定地去想某一件事，不能把思想集中到某一件事情上去；而且现在他也并未有意识地作出任何决定；他只是有这样的一些感觉。生活取代了雄辩，思想意识里应该形成完全不同的另一种东西。</p>
</blockquote>
]]></content>
      <categories>
        <category>读书</category>
      </categories>
      <tags>
        <tag>随手记</tag>
        <tag>读书</tag>
      </tags>
  </entry>
  <entry>
    <title>《禅与摩托车维修艺术》</title>
    <url>/2025/06/27/%E3%80%8A%E7%A6%85%E4%B8%8E%E6%91%A9%E6%89%98%E8%BD%A6%E7%BB%B4%E4%BF%AE%E8%89%BA%E6%9C%AF%E3%80%8B/</url>
    <content><![CDATA[<h1 id="《禅与摩托车维修艺术》"><a href="#《禅与摩托车维修艺术》" class="headerlink" title="《禅与摩托车维修艺术》"></a>《禅与摩托车维修艺术》</h1><p>以为是一本有关摩旅的书，没想到是一本探讨哲学，良质（Qulality）的启蒙书。有关摩旅的部分我也确实很喜欢，但是有关哲学的部分对于我个人来说有些晦涩，不过也多多少少给了我一些启发。</p>
<blockquote>
<p>在这方面，他们与约翰和思薇雅一样，虽然想运用科技的成果，却不愿和它发生任何关系。或者说他们和它的确有关系，但是他们没有投身其中，而是保持冷淡疏离的态度，他们参与了这方面的工作，却没有真正地关心它。</p>
</blockquote>
<blockquote>
<p>我整天都在想着说着斐德洛，而他们则一直在想这样的天气真难过，我想这才是真正使他们疲惫不堪的原因。那些<strong>令人不快的思想</strong>。</p>
</blockquote>
<blockquote>
<p>骑摩托车和其他的旅行方式完全不同。坐在汽车里，你总是被局限在一个小空间之内，因为已经习惯了，你意识不到从车窗向外看风景和看电视差不多。你<strong>只是个被动的观众</strong>，景物只能在一个框框里无聊地从你身边飞驰而过。<br>而骑在摩托车上，框框就消失了。你和大自然紧密地结合在一起。你就处在景致之中，而不再是观众，你能感受到那种身临其境的震撼。脚下飞驰而过的是实实在在的水泥公路，和你走过的土地没有两样。它结结实实地躺在那儿，虽然因为车速快而显得模糊，但是你可以随时停车，及时感受它的存在，让那份踏实感深深印在你的脑海中。</p>
</blockquote>
<blockquote>
<p>我不想匆忙行事，因为匆忙本身就是一种要不得的二十世纪态度。当你做某件事的时候，一旦想要求快，就表示<strong>你再也不关心它，只想去做别的事</strong>。所以我想慢慢来，仔细而透彻地，用我找到被剪断的销子的态度。有了这种态度才能发现原因，除此之外，别无他法。</p>
</blockquote>
<blockquote>
<p>大家被催眠了，用比较正统的说法是，大家受了教育。</p>
</blockquote>
<blockquote>
<p>一名没有受过训练的旁观者只看到修理人员所付出的劳力，就以为他最主要的工作在于劳力。事实上，这是他最轻松也是他最小的一部分工作，他最重要的工作在于仔细观察和精确思考，这就是为什么技术人员在做实验的时候往往显得沉默寡言，甚至有些畏缩。</p>
</blockquote>
<blockquote>
<p>关于这一点，爱因斯坦说过：“根据进化所显示的，在任何一刻，所有可以想见的存在，总有一个会证明它比其他的一切都要优越。”这个答案在斐德洛看来脆弱无比，然而“在任何一刻”倒给他深深的震撼。难道爱因斯坦认为真理是一种时间函数？这种论点会把所有科学的最基本假设都毁掉。<br>但是从整个科学的历史来看，你会发现过去的事实不断被新的解释取代，每一项研究的时效也长短不一，完全没有规律，有些科学真理似乎能够持续几个世纪，有些甚至不到一年，科学真理不像教义一样能永远存在，它像所有的一切一样可以被研究。</p>
</blockquote>
<blockquote>
<p>我们住在酒店中一个美丽的老木头房间里，太阳透过百叶窗照射在黑漆漆的木头上，不过虽然有百叶窗遮着，我仍然可以感觉出，我们已经离山不远了。因为在房里可以嗅到山的气息，那是一种清爽、湿润而且带着芳香的空气。我深吸了一口气，接着又吸进了另外一口，然后又一口，一直到吸足了。我跳下床，拉起百叶窗，让所有的阳光——那些灿烂、清凉、明亮、耀眼的阳光都照进来。</p>
</blockquote>
<blockquote>
<p>你得经常跟上流行而不厌倦，所以你落入了流行的陷阱之中。有一群人从来不知道世界上有良质的存在，为了制造美感和利益，就在科技丑陋的外表上蒙了一层厚厚的浪漫的虚伪。<strong>良质</strong>并不是外加在主体和客体上的，就像圣诞树上闪亮亮的装饰品。真正的良质是主客体的源头，也就是树木的种子。</p>
</blockquote>
<blockquote>
<p>所以大部分选择这些课的学生必须刻意表现出顺从的态度。为了能充分地理解原著，他们必须接受这一信念，即这些古代经典对他们颇有意义。但是现在斐德洛无须刻意表现。他不仅仅是接受这一信念，更是带着激烈的情绪认识到这一点。他十分清楚，自己来到这里，就是要激烈地反对这些思想，然后用各种方法攻击它们。攻击并不是因为它们与二十世纪无关，反而是因为关系太密切了。研读得越多，他就越相信，没有人知道，不知不觉地接受这些思想，对世界会有多么大的危害。</p>
</blockquote>
]]></content>
      <categories>
        <category>读书</category>
      </categories>
      <tags>
        <tag>随手记</tag>
        <tag>读书</tag>
      </tags>
  </entry>
  <entry>
    <title>《荀子》</title>
    <url>/2025/03/30/%E3%80%8A%E8%8D%80%E5%AD%90%E3%80%8B/</url>
    <content><![CDATA[<h1 id="《荀子》"><a href="#《荀子》" class="headerlink" title="《荀子》"></a>《荀子》</h1><blockquote>
<p>君子之学也，入乎耳，箸乎心，布乎四体，形乎动静。</p>
</blockquote>
<hr>
<blockquote>
<p>故声无小而不闻，行无隐而不形。</p>
</blockquote>
<hr>
<blockquote>
<p>古之学者为己，今之学者为人。君子之学也，以美其身；小人之学也，以为禽犊。</p>
</blockquote>
<hr>
<blockquote>
<p>故相形不如论心，论心不如择术</p>
</blockquote>
<hr>
<blockquote>
<p>术正而心顺之，则形相虽恶而心术善，无害为君子也。形相虽善而心术恶，无害为小人也。</p>
</blockquote>
<hr>
]]></content>
      <categories>
        <category>读书</category>
      </categories>
      <tags>
        <tag>随手记</tag>
        <tag>读书</tag>
      </tags>
  </entry>
  <entry>
    <title>《西线无战事》</title>
    <url>/2024/07/09/%E3%80%8A%E8%A5%BF%E7%BA%BF%E6%97%A0%E6%88%98%E4%BA%8B%E3%80%8B/</url>
    <content><![CDATA[<h1 id="《西线无战事》"><a href="#《西线无战事》" class="headerlink" title="《西线无战事》"></a>《西线无战事》</h1><ul>
<li>written by 埃里希·玛丽亚·雷马克</li>
</ul>
<blockquote>
<p>“ 这本书既不是指控也不是忏悔，</p>
<p>更不是一次冒险 ，</p>
<p>因为对于那些面对死亡的人来说，</p>
<p>死亡不是一次冒险。</p>
<p>他试图讲述这样一代人—-</p>
<p>尽管他们逃过了炮弹，</p>
<p>却还是被战争摧毁了。”</p>
</blockquote>
<p>​	这本书是在今年暑假回家前在图书馆借的。在回家的路上就读了一大半，读时有一种奇妙的感受。彼时彼刻我坐在有空调的高速列车上，世界上的其他地方还正发生着战乱。一想到我正读到保罗·博伊默在战壕中穿梭，执行侦查任务时，世界的另一端正发生着同样的事时心里就多了一些悲伤。</p>
<blockquote>
<p>“我们才刚开始热爱生活，却不得不对这一切开炮。”</p>
</blockquote>
<blockquote>
<p>“他们仍在继续写文章，发表演说，而我们却已经看到了野战医院和死亡；他们依旧在说对国家的责任是头等大事，而我们却已经知道死亡的剧痛比以前更为强烈了。尽管这样，我们绝不做叛乱者，绝不做逃兵，也绝不做懦夫——这些词，他们原是随便使用的——我们跟他们一样热爱我们的祖国，我们英勇地参加每一次进攻，但我们还会辨别是非，我们一下子学会了观察问题。于是，我们看到，他们的那个世界已经荡然无存。我们突然觉得孤独得可怕，而又必须一直孤独下去。”</p>
</blockquote>
]]></content>
      <categories>
        <category>读书</category>
      </categories>
      <tags>
        <tag>随手记</tag>
        <tag>读书</tag>
      </tags>
  </entry>
  <entry>
    <title>《言叶之庭》</title>
    <url>/2025/03/29/%E3%80%8A%E8%A8%80%E5%8F%B6%E4%B9%8B%E5%BA%AD%E3%80%8B/</url>
    <content><![CDATA[<h1 id="《言叶之庭》"><a href="#《言叶之庭》" class="headerlink" title="《言叶之庭》"></a>《言叶之庭》</h1><p>​	其我是先看的动漫，一天在图书馆晃悠的时候发现自助换书机器旁边有一摞别人刚刚还过来的书。随手一翻，《言叶之庭》突然出现。绿色的封面，稍微有些旧的痕迹把我带回了初二。那个梅雨季节里，潮湿的空气中，我坐在大大的窗户前的书桌看完了这部动漫。每次看到剪辑都能感受到雨的气味。</p>
<blockquote>
<p><strong>隐约雷鸣 阴霾天空 但盼风雨来 能留你在此</strong><br><strong>隐约雷鸣 阴霾天空 即使天无雨 我亦留此地</strong></p>
</blockquote>
<p>​	当时真的很喜欢这句台词，后来还找出了原文，在几十兆的电子书《万叶集》慢慢阅读寻找。</p>
<blockquote>
<p>原文</p>
<p>雷神小动，刺云雨零耶，君将留？</p>
<p>雷神小动，虽不零，吾将留妹留者。</p>
<p>日文</p>
<p><a href="https://zhida.zhihu.com/search?content_id=231695448&content_type=Answer&match_order=1&q=%E9%B3%B4%E7%A5%9E&zd_token=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJ6aGlkYV9zZXJ2ZXIiLCJleHAiOjE3NDM0MzMwNzYsInEiOiLps7TnpZ4iLCJ6aGlkYV9zb3VyY2UiOiJlbnRpdHkiLCJjb250ZW50X2lkIjoyMzE2OTU0NDgsImNvbnRlbnRfdHlwZSI6IkFuc3dlciIsIm1hdGNoX29yZGVyIjoxLCJ6ZF90b2tlbiI6bnVsbH0.mKPWP-8HsBXpl3ePaX5pJVNg7iTFrf3aK3Ay9Ft_QU0&zhida_source=entity">鳴神</a>(<em>なるかみ</em>)の 少しとよみて さし曇(<em>ぐも</em>)り 雨(<em>あめ</em>)も降(<em>ふ</em>)らんか 君を留(<em>とど</em>)めん。</p>
<p>鳴神の 少しとよみて 降らずとも 我(<em>われ</em>)は止(<em>と</em>)まらん 妹(<em>いも</em>)し留めば。</p>
</blockquote>
<blockquote>
<p>走过日式庭院的木桥，雨声又变化了。 树叶摇摆的声音比雨滴落在水面的声音还大，孝雄穿着自制的尖角牛津靴慢慢走着，地上的脚步声与暗绿绣眼鸟的清澈叫声交叠在一起。透过黑松看到的水面上倒映着杜鹃花的粉色、多行松树皮的红色和枫叶的浅绿色。 孝雄背后的背包里装着送给那个人的鞋子，是一双五厘米高跟的小巧浅口鞋。脚尖部分是浅粉色，鞋身是近于白色的浅肤色，鞋跟是被太阳晒过般的柠檬色，鞋上面有用来系在脚踝上的长长鞋带，鞋带顶头是苹果绿皮革缝成的树叶。这次为那个人做的是一双能长时间走路的鞋子。</p>
</blockquote>
<hr>
<blockquote>
<p>不知何时开始认真做鞋的弟弟、不顾一切想成为演员的梨花，还有与小自己一轮的男子认真相处的母亲。<br>　　——这些家伙都是笨蛋吗？我在心中焦躁地恶骂。朝着明明不可能到达的终点一个劲地奔跑，仿佛其他地方都不存在似的——每个人都如此。不觉眼里涌起了今天的第二次泪水。今天到底是什么破日子。</p>
</blockquote>
<p>​	有时候真的很喜欢日本文学里面的细节描写和心理描写，那么细致入微，那么敏感，就好像这些事情真的在世界上某个角落发生过一样。</p>
<p>​	可惜对于我来说，不管是村上春树还是东野圭吾又或是太宰治和芥川龙之介，都不宜多读。因为总是在读完会有一种很浓烈的惆怅感觉。此时往往需要读一些欧洲或者是我们国家的小说才能缓过来。</p>
]]></content>
      <categories>
        <category>读书</category>
      </categories>
      <tags>
        <tag>随手记</tag>
        <tag>读书</tag>
      </tags>
  </entry>
  <entry>
    <title>《霍乱时期的爱情》</title>
    <url>/2024/01/26/%E3%80%8A%E9%9C%8D%E4%B9%B1%E6%97%B6%E6%9C%9F%E7%9A%84%E7%88%B1%E6%83%85%E3%80%8B/</url>
    <content><![CDATA[<p>​	在老家整理东西的时候发现了许多在高中时代写的文字，怀念的感觉油然而生。这本书是我在高二的时候看过的。那时看完之后心情久久不得平静，就撕下一页稿纸，随手写了这点东西。</p>
<p> <img src="/../images/read/huoLuanShiQiDeAiQing.jpg"></p>
<p>​	想到那时的自己还是书虫，每日不读书就浑身难受。再看看现在，好像已经有几个月没有拿起一本书像过去的我一样一有时间就打开阅读了。</p>
<p>​	最近就把过去看过的书再温习一遍吧！</p>
]]></content>
      <categories>
        <category>读书</category>
      </categories>
      <tags>
        <tag>随手记</tag>
        <tag>读书</tag>
      </tags>
  </entry>
  <entry>
    <title>《飞鸟集》</title>
    <url>/2025/03/30/%E3%80%8A%E9%A3%9E%E9%B8%9F%E9%9B%86%E3%80%8B/</url>
    <content><![CDATA[<h1 id="《飞鸟集》"><a href="#《飞鸟集》" class="headerlink" title="《飞鸟集》"></a>《飞鸟集》</h1><p>​	记录一些个人比较喜欢的短诗。</p>
<blockquote>
<p>Do not seat your love upon a precipice because it is high.</p>
</blockquote>
<hr>
<blockquote>
<p> We, the rustling leaves, have a voice that answers the storms, but who are you so silent<br>I am a mere flower.</p>
</blockquote>
<hr>
<blockquote>
<p>Your voice, my friend, wanders in my heart, like the muffled sound<br>of the sea among these listening pines. </p>
</blockquote>
<hr>
<blockquote>
<p> Let life be beautiful like summer flowers and death like autumn leaves.</p>
</blockquote>
<hr>
<blockquote>
<p> Not hammer-strokes, but dance of the water sings the pebbles</p>
<p>不是槌的打击，乃是水的载歌载舞，使鹅卵石臻于完美。</p>
<p>记起来这句诗我在高中班级里开班会时用过，主题是<strong>水</strong>来着。</p>
</blockquote>
<hr>
<blockquote>
<p>世界以痛吻我，我报之以歌。</p>
<p>The world has kissed my soul with its pain, asking for its return</p>
</blockquote>
<hr>
<blockquote>
<p> The best does not come alone.<br>It comes with the company of the all.</p>
</blockquote>
<hr>
<blockquote>
<p> 当我去时，让我的思想到你那里来，如那夕阳的余光，映在沉默的星天边上。<br>Let my thoughts come to you, when I am gone, like the after glow of<br>sunset at the margin of starry silence.</p>
</blockquote>
<hr>
<blockquote>
</blockquote>
]]></content>
      <categories>
        <category>读书</category>
      </categories>
      <tags>
        <tag>随手记</tag>
        <tag>读书</tag>
      </tags>
  </entry>
  <entry>
    <title>从零到一：记一次Vue+Flask项目在内网PC的部署历险记</title>
    <url>/2025/04/23/%E4%BB%8E%E9%9B%B6%E5%88%B0%E4%B8%80%EF%BC%9A%E8%AE%B0%E4%B8%80%E6%AC%A1Vue-Flask%E9%A1%B9%E7%9B%AE%E5%9C%A8%E5%86%85%E7%BD%91PC%E7%9A%84%E9%83%A8%E7%BD%B2%E5%8E%86%E9%99%A9%E8%AE%B0/</url>
    <content><![CDATA[<h1 id="从零到一：记一次Vue-Flask项目在内网PC的部署历险记"><a href="#从零到一：记一次Vue-Flask项目在内网PC的部署历险记" class="headerlink" title="从零到一：记一次Vue+Flask项目在内网PC的部署历险记"></a><strong>从零到一：记一次Vue+Flask项目在内网PC的部署历险记</strong></h1><h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a><strong>引言</strong></h2><p>​	最近在公司内网环境部署了一个基于 <strong>Vue + Flask + MySQL</strong> 的Web应用，本以为只是简单的“代码打包→复制→运行”，结果却遭遇了连环坑。本文将复盘整个部署过程，总结遇到的问题、解决方案，并最终探索出更成熟的部署方式。   </p>
<hr>
<h2 id="一、初版部署：天真的“源码大挪移”"><a href="#一、初版部署：天真的“源码大挪移”" class="headerlink" title="一、初版部署：天真的“源码大挪移”"></a><strong>一、初版部署：天真的“源码大挪移”</strong></h2><h3 id="1-操作步骤"><a href="#1-操作步骤" class="headerlink" title="1. 操作步骤"></a><strong>1. 操作步骤</strong></h3><ol>
<li>将本地开发好的源码打包（Vue前端 + Flask后端 + 数据库脚本）。  </li>
<li>复制到一台闲置的公司PC，安装Python、Node.js、MySQL。  </li>
<li>运行 <code>npm run build</code> 和 <code>python app.py</code>，满心期待同事通过IP访问。</li>
</ol>
<h3 id="2-遇到的问题"><a href="#2-遇到的问题" class="headerlink" title="2. 遇到的问题"></a><strong>2. 遇到的问题</strong></h3><h4 id="（1）同事无法访问服务"><a href="#（1）同事无法访问服务" class="headerlink" title="（1）同事无法访问服务"></a><strong>（1）同事无法访问服务</strong></h4><ul>
<li><strong>现象</strong>：浏览器输入 <code>http://&lt;我的IP&gt;:5000</code> 返回超时。  </li>
<li><strong>原因</strong>：  <ul>
<li>Windows防火墙默认阻止外部访问5000端口。  </li>
<li>Flask开发服务器仅监听 <code>127.0.0.1</code>。</li>
</ul>
</li>
<li><strong>解决</strong>：  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 修改Flask启动配置</span></span><br><span class="line">app.run(host=<span class="string">&#x27;0.0.0.0&#x27;</span>, port=<span class="number">5000</span>)  <span class="comment"># 允许局域网访问</span></span><br></pre></td></tr></table></figure>
并手动在防火墙中放行5000端口（控制面板→防火墙→高级设置→入站规则）。</li>
</ul>
<h4 id="（2）前端资源加载失败"><a href="#（2）前端资源加载失败" class="headerlink" title="（2）前端资源加载失败"></a><strong>（2）前端资源加载失败</strong></h4><ul>
<li><strong>现象</strong>：页面能打开，但API请求全部报错，登录功能失效。  </li>
<li><strong>原因</strong>：  <ul>
<li>前端代码中API地址硬编码为 <code>http://localhost:5000</code>，导致同事的浏览器向自己的本地发送请求。</li>
</ul>
</li>
<li><strong>解决</strong>：<br>动态配置API地址（以Vue为例）：  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># .env.production</span><br><span class="line">VUE_APP_API_URL=http://&lt;我的IP&gt;:5000</span><br></pre></td></tr></table></figure>
重新构建前端：  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm run build</span><br></pre></td></tr></table></figure></li>
</ul>
<hr>
<h2 id="二、暴露的问题与知识盲区"><a href="#二、暴露的问题与知识盲区" class="headerlink" title="二、暴露的问题与知识盲区"></a><strong>二、暴露的问题与知识盲区</strong></h2><h3 id="1-开发环境≠生产环境"><a href="#1-开发环境≠生产环境" class="headerlink" title="1. 开发环境≠生产环境"></a><strong>1. 开发环境≠生产环境</strong></h3><ul>
<li>Flask自带的服务器（<code>app.run()</code>）是单线程调试工具，性能差且不稳定。  </li>
<li>直接暴露后端端口（如5000）存在安全隐患。</li>
</ul>
<h3 id="2-配置硬编码的代价"><a href="#2-配置硬编码的代价" class="headerlink" title="2. 配置硬编码的代价"></a><strong>2. 配置硬编码的代价</strong></h3><ul>
<li>前端API地址、数据库连接信息写死在代码中，切换环境需重新构建。</li>
</ul>
<h3 id="3-缺乏服务高可用保障"><a href="#3-缺乏服务高可用保障" class="headerlink" title="3. 缺乏服务高可用保障"></a><strong>3. 缺乏服务高可用保障</strong></h3><ul>
<li>我的PC一旦关机，所有同事无法访问服务。</li>
</ul>
<hr>
<h2 id="三、进阶方案：走向成熟部署"><a href="#三、进阶方案：走向成熟部署" class="headerlink" title="三、进阶方案：走向成熟部署"></a><strong>三、进阶方案：走向成熟部署</strong></h2><h3 id="1-使用Nginx反向代理"><a href="#1-使用Nginx反向代理" class="headerlink" title="1. 使用Nginx反向代理"></a><strong>1. 使用Nginx反向代理</strong></h3><ul>
<li><p><strong>作用</strong>：  </p>
<ul>
<li>统一入口（80端口），隐藏后端服务。  </li>
<li>高效托管前端静态文件。</li>
</ul>
</li>
<li><p><strong>配置示例</strong>：  </p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span> <span class="number">80</span>;</span><br><span class="line">    <span class="attribute">server_name</span> localhost;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 托管Vue静态文件</span></span><br><span class="line">    <span class="section">location</span> / &#123;</span><br><span class="line">        <span class="attribute">root</span> /path/to/vue/dist;</span><br><span class="line">        <span class="attribute">index</span> index.html;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 转发API请求到Flask</span></span><br><span class="line">    <span class="section">location</span> /api &#123;</span><br><span class="line">        <span class="attribute">proxy_pass</span> http://127.0.0.1:5000;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="2-用Gunicorn替代Flask开发服务器"><a href="#2-用Gunicorn替代Flask开发服务器" class="headerlink" title="2. 用Gunicorn替代Flask开发服务器"></a><strong>2. 用Gunicorn替代Flask开发服务器</strong></h3><ul>
<li>启动多进程生产级服务：  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pip install gunicorn</span><br><span class="line">gunicorn -w 4 -b 0.0.0.0:5000 app:app </span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="3-自动化与进程守护"><a href="#3-自动化与进程守护" class="headerlink" title="3. 自动化与进程守护"></a><strong>3. 自动化与进程守护</strong></h3><ul>
<li><strong>Linux</strong>：通过<code>systemd</code>管理服务（开机自启）。  </li>
<li><strong>Windows</strong>：用NSSM将Nginx&#x2F;Gunicorn注册为服务。</li>
</ul>
<hr>
<h2 id="四、最终效果"><a href="#四、最终效果" class="headerlink" title="四、最终效果"></a><strong>四、最终效果</strong></h2><ul>
<li><strong>访问方式</strong>：同事只需输入 <code>http://&lt;我的PC IP&gt;</code>，无需关心端口。  </li>
<li><strong>性能提升</strong>：Nginx静态文件缓存 + Gunicorn多进程，并发能力显著提高。  </li>
<li><strong>维护便利</strong>：代码更新只需 <code>git pull</code> 和重新构建前端。</li>
</ul>
<hr>
<h2 id="五、经验总结"><a href="#五、经验总结" class="headerlink" title="五、经验总结"></a><strong>五、经验总结</strong></h2><ol>
<li><strong>永远不要直接使用开发服务器上线</strong>。。。。。。  </li>
<li><strong>环境配置动态化</strong>（环境变量 &gt; 硬编码）。  </li>
<li><strong>反向代理是内网部署的黄金搭档</strong>（Nginx&#x2F;YARP）。  </li>
<li><strong>基础设施分离</strong>（数据库、前端、后端独立部署）。</li>
</ol>
<hr>
<h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a><strong>结语</strong></h2><p>​	这次部署经历让我深刻理解了“开发”与“运维”的鸿沟。下一次，我会直接上Docker + Kubernetes（笑）。如果你也在内网部署过项目，欢迎分享你的踩坑故事！  </p>
<hr>
<h3 id="后续计划"><a href="#后续计划" class="headerlink" title="后续计划"></a><strong>后续计划</strong></h3><ul>
<li>尝试用Docker容器化部署。  </li>
<li>研究内网HTTPS证书配置。  </li>
<li>探索CI&#x2F;CD自动化发布流程。</li>
</ul>
]]></content>
      <categories>
        <category>软件技术</category>
      </categories>
      <tags>
        <tag>笔记</tag>
        <tag>python</tag>
        <tag>javascript</tag>
        <tag>html</tag>
        <tag>Flask</tag>
        <tag>mysql</tag>
        <tag>前端</tag>
        <tag>后端</tag>
        <tag>vue3</tag>
        <tag>内网部署</tag>
        <tag>web开发</tag>
      </tags>
  </entry>
  <entry>
    <title>使用samba将armlinux小主机作为nas</title>
    <url>/2025/04/04/%E4%BD%BF%E7%94%A8samba%E5%B0%86armlinux%E5%B0%8F%E4%B8%BB%E6%9C%BA%E4%BD%9C%E4%B8%BAnas/</url>
    <content><![CDATA[<h1 id="使用samba将armlinux小主机作为nas"><a href="#使用samba将armlinux小主机作为nas" class="headerlink" title="使用samba将armlinux小主机作为nas"></a>使用samba将armlinux小主机作为nas</h1><h2 id="先上结果！"><a href="#先上结果！" class="headerlink" title="先上结果！"></a>先上结果！</h2><p><img src="/../images/Linux/samba/1.png"></p>
<p><img src="/../images/Linux/samba/2.jpg"></p>
<p><img src="/../images/Linux/samba/3.jpg"></p>
<p>​	arm小主机为rk3399 4+32g（70块钱捡的二手），作为nas主控完全够用。</p>
<h2 id="部署过程"><a href="#部署过程" class="headerlink" title="部署过程"></a>部署过程</h2><p>​	本来想把自己那块2t的机械硬盘改为共享盘，可惜里面已经有300多g的图片了，因为涉及到了修改文件系统需要格式化所以先拿手头上的sata ssd做测试。没想到这个ssd挂了（悲），于是换成了最后的32g限制u盘了。</p>
<h3 id="步骤-Liunx端"><a href="#步骤-Liunx端" class="headerlink" title="步骤-Liunx端"></a>步骤-Liunx端</h3><h4 id="1-准备工作"><a href="#1-准备工作" class="headerlink" title="1. 准备工作"></a>1. 准备工作</h4><ol>
<li><p>插入U盘。</p>
</li>
<li><p>ssh连接。</p>
</li>
<li><p>清空U盘并创建ext4文件系统。</p>
<ol>
<li><p>找到插入的U盘</p>
<p> <code>lsblk</code>可以找到插入的硬盘（会显示硬盘大小以及种类，例如我的就是sda 29.3g）</p>
</li>
<li><p>清空U盘并创建ext4文件系统。</p>
<p> <code>sudo mkfs.ext4 /dev/sdb1</code></p>
</li>
</ol>
</li>
<li><p>创建一个用于共享的根文件夹并挂载U盘</p>
<p><code>sudo mkdir /mnt/shared</code></p>
<p><code>sudo mount /dev/sda /mnt/shared</code></p>
</li>
<li><p>赋予系统用户这个文件夹读写权限</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> <span class="built_in">chown</span> -R pi:pi /mnt/shared  <span class="comment"># 更改所有者为 regen</span></span><br><span class="line"><span class="built_in">sudo</span> <span class="built_in">chmod</span> -R 770 /mnt/shared          <span class="comment"># 设置读写执行权限</span></span><br></pre></td></tr></table></figure></li>
</ol>
<h4 id="2-安装以及配置Samba"><a href="#2-安装以及配置Samba" class="headerlink" title="2. 安装以及配置Samba"></a>2. 安装以及配置Samba</h4><ol>
<li>安装</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt update</span><br><span class="line"><span class="built_in">sudo</span> apt upgrade</span><br><span class="line"><span class="built_in">sudo</span> apt install samba -y</span><br></pre></td></tr></table></figure>

<ol start="2">
<li><p>配置</p>
<p> 我这边是基于vscode的ssh扩展进行编辑配置的（非常好用）。</p>
<p> <code>code /etc/samba/</code></p>
<p> 然后编辑<code>smb.conf</code>，在末尾加上</p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[shared]</span><br><span class="line">   path = /mnt/shared</span><br><span class="line">   browseable = <span class="built_in">yes</span></span><br><span class="line">   writable = <span class="built_in">yes</span></span><br><span class="line">   <span class="built_in">read</span> only = no</span><br><span class="line">   guest ok = no</span><br><span class="line">   valid <span class="built_in">users</span> = pi   <span class="comment"># 当前Linux系统用户ID</span></span><br><span class="line">   force create mode = 0660</span><br><span class="line">   force directory mode = 2770</span><br></pre></td></tr></table></figure>

<p> 保存后退出，然后配置一下密码。</p>
<p> <code>sudo smbpasswd -a pi</code>输入两次想要设置的密码即可。</p>
</li>
</ol>
<h3 id="使用-Windows"><a href="#使用-Windows" class="headerlink" title="使用-Windows"></a>使用-Windows</h3><p>很简单，win +R 输入</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">\\IP\shared</span><br></pre></td></tr></table></figure>

<p>再输入账号密码即可。</p>
<p>需要注意的是samba的账号必须是Linux系统的用户。</p>
<h3 id="然后就可以愉快的使用了！"><a href="#然后就可以愉快的使用了！" class="headerlink" title="然后就可以愉快的使用了！"></a>然后就可以愉快的使用了！</h3><p><img src="/../images/Linux/samba/4.png"></p>
]]></content>
      <categories>
        <category>软件技术</category>
      </categories>
      <tags>
        <tag>笔记</tag>
        <tag>linux</tag>
        <tag>samba</tag>
        <tag>nas</tag>
        <tag>共享盘</tag>
      </tags>
  </entry>
  <entry>
    <title>冬天的诗--伯莱</title>
    <url>/2025/03/28/%E5%86%AC%E5%A4%A9%E7%9A%84%E8%AF%97-%E4%BC%AF%E8%8E%B1/</url>
    <content><![CDATA[<div style="display: flex;">
  <div style="flex: 1; padding-right: 20px;">
      Winter poem<br>
[Robert Bly](https://poemwiki.org/q/Robert Bly)<br>
<br>
The quivering wings of the winter ant<br>
wait for lean winter to end.<br>
I love you in slow, dim-witted ways,<br>
hardly speaking, one or two words only.<br>
<br>
What caused us each to live hidden?<br>
A wound, the wind, a word, a parent.<br>
Sometimes we wait in a helpless way,<br>
awkwardly, not whole and not healed.<br>
<br>
When we hid the wound, we fell back<br>
from a human to a shelled life.<br>
Now we feel the ant’s hard chest,<br>
the carapace, the silent tongue.<br>
 This must be the way of the ant,<br>
the winter ant, the way of those<br>
who are wounded and want to live:<br>
to breathe, to sense another, and to wait.<br>

<p>PoemWiki <a href="https://poemwiki.org/p/MTI0MzE1MTUxNTE0MzA2">https://poemwiki.org/p/MTI0MzE1MTUxNTE0MzA2</a><br><br>  </div><br>  <div style="border-left: 1px solid #ccc; margin: 0 10px;"></div><br>  <div style="flex: 1; padding-left: 20px;"><br>冬天的诗<br><br>罗伯特 伯莱<br><br><br><br>冬天的蚂蚁颤抖的翅膀<br><br>等待瘦瘦的冬天结束。<br><br>我用缓慢的，呆笨的方式爱你，<br><br>几乎不说话，仅有只言片语。<br><br><br><br>是什么导致我们各自隐藏生活？<br><br>一个伤口，风，一个言词，一个起源。<br><br>我们有时用一种无助的方式等待，<br><br>笨拙地，并非全部也未愈合。<br><br><br><br>当我们藏起伤口，我们从一个人<br><br>退缩到一个带壳的生命。<br><br>现在我们触摸到蚂蚁坚硬的胸膛，<br><br>那背甲。那沉默的舌头。<br><br><br><br>这一定是蚂蚁的方式<br><br>冬天的蚂蚁的方式，那些<br><br>被伤害的并且想生活的人的方式：<br><br>呼吸，感知他人，以及等待。<br><br><br><br>  </div></p>
</div>



<p>​	这首诗真的很准确的说出像我一样普通的人的生活态度。呼吸，感知他人，以及等待。今天打完球准备去吃饭的时候已经九点多了，学校的食堂都关闭了于是只能去附近的商业街找沙县料理。因为打了四个小时球稍微有点累，于是趴在桌子听音乐等着。过了一会老板端过来一份超级豪华的盖浇饭给我，刚递到我手上他就进去厨房忙碌了。吃饭的时候心里暖暖的，想到了高中时候坐火车离家出走时遇到的那个大叔。也是在寥寥数言就知道了我的情况，路过鹰潭的时候买了好多鸡腿让我吃，现在想起来真的很感动，明明他还要坐十多个小时火车去浙江的某个工厂打工，却愿意照顾一个迷失的小孩。不管是不是他馋了还是其他原因，我都很感激他。现在我理解了，这是蚂蚁的方式，沉默的方式，感知他人，以及等待。为了防止自己变得越来越冷漠，我希望你开始想要变得冷漠的时候就去想想那些人，那些以沉默的方式帮助你爱你的人。</p>
]]></content>
      <categories>
        <category>读书</category>
      </categories>
      <tags>
        <tag>随手记</tag>
        <tag>读书</tag>
      </tags>
  </entry>
  <entry>
    <title>分布式服务器基础知识</title>
    <url>/2024/10/31/%E5%88%86%E5%B8%83%E5%BC%8F%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/</url>
    <content><![CDATA[<p>最近常常看到分布式这个词，好记性不如烂键盘，简单记录记录，并没有深入研究。</p>
<h1 id="分布式服务器架构"><a href="#分布式服务器架构" class="headerlink" title="分布式服务器架构"></a>分布式服务器架构</h1><blockquote>
<p>分布式服务器架构是一种将服务和计算任务分散到多个服务器或节点上来处理的系统架构。</p>
</blockquote>
<h2 id="目的或者功能"><a href="#目的或者功能" class="headerlink" title="目的或者功能"></a>目的或者功能</h2><blockquote>
<ol>
<li>提高系统的性能、可用性和扩展性。</li>
<li>适合应对高并发访问和海量数据处理的需求。</li>
<li>分布式架构的核心理念是将负载分摊到多个服务器上，避免单点故障（SPOF），并根据需求动态扩展。</li>
</ol>
</blockquote>
<h1 id="分布式服务器架构的主要组成和常见设计模式"><a href="#分布式服务器架构的主要组成和常见设计模式" class="headerlink" title="分布式服务器架构的主要组成和常见设计模式"></a>分布式服务器架构的主要组成和常见设计模式</h1><h2 id="主要组成"><a href="#主要组成" class="headerlink" title="主要组成"></a>主要组成</h2><h3 id="1-负载均衡层"><a href="#1-负载均衡层" class="headerlink" title="1. 负载均衡层"></a>1. <strong>负载均衡层</strong></h3><ul>
<li><strong>功能</strong>：将用户请求分发到多个服务器节点，避免单个服务器过载。</li>
<li><strong>实现方式</strong>：常用的负载均衡工具有硬件负载均衡（如 F5）和软件负载均衡（如 Nginx、HAProxy）。</li>
<li><strong>常见策略</strong>：轮询、加权轮询、最小连接、IP 哈希等，选择最佳策略分发流量。</li>
</ul>
<h3 id="2-应用服务层"><a href="#2-应用服务层" class="headerlink" title="2. 应用服务层"></a>2. <strong>应用服务层</strong></h3><ul>
<li><p><strong>功能</strong>：部署核心应用逻辑，如 Web 应用、API 服务、后端管理系统等。</p>
</li>
<li><p>架构模式</p>
<p>  ：微服务架构和单体架构。</p>
<ul>
<li><strong>微服务架构</strong>：将应用拆分为多个独立服务，每个服务独立部署和管理，便于扩展和更新。</li>
<li><strong>单体架构</strong>：应用服务集中于一台服务器或一个容器内，适合小型系统。</li>
</ul>
</li>
<li><p><strong>技术栈</strong>：可以选择基于 Spring Boot、Flask、Django、Node.js 等的框架。</p>
</li>
</ul>
<h3 id="3-缓存层"><a href="#3-缓存层" class="headerlink" title="3. 缓存层"></a>3. <strong>缓存层</strong></h3><ul>
<li><strong>功能</strong>：减少数据库压力，加快响应速度，存储经常访问的数据。</li>
<li><strong>常用缓存技术</strong>：Redis、Memcached 等。</li>
<li><strong>缓存策略</strong>：设置缓存过期时间（TTL）、缓存更新策略（LRU、LFU）等来优化缓存使用。</li>
</ul>
<h3 id="4-数据库层"><a href="#4-数据库层" class="headerlink" title="4. 数据库层"></a>4. <strong>数据库层</strong></h3><ul>
<li><strong>功能</strong>：持久化存储系统的数据，支持查询和事务处理。</li>
<li><strong>数据库分布</strong>：分库分表、读写分离、主从同步。</li>
<li><strong>常见数据库</strong>：MySQL、PostgreSQL（关系型数据库），MongoDB、Cassandra（非关系型数据库）。</li>
<li><strong>数据同步</strong>：使用主从复制、分片（Sharding）等技术提高数据访问性能和可用性。</li>
</ul>
<h3 id="5-消息队列层"><a href="#5-消息队列层" class="headerlink" title="5. 消息队列层"></a>5. <strong>消息队列层</strong></h3><ul>
<li><strong>功能</strong>：在系统内部传递消息，解耦不同服务模块，适合高并发需求。</li>
<li><strong>常用消息队列</strong>：RabbitMQ、Kafka、ActiveMQ 等。</li>
<li><strong>应用场景</strong>：订单处理、消息通知、日志存储等高并发场景。</li>
</ul>
<h3 id="6-文件存储层"><a href="#6-文件存储层" class="headerlink" title="6. 文件存储层"></a>6. <strong>文件存储层</strong></h3><ul>
<li><strong>功能</strong>：存储文件、图片、视频等大数据文件。</li>
<li><strong>常用技术</strong>：分布式文件系统（如 HDFS）、对象存储（如 AWS S3、阿里云 OSS）。</li>
<li><strong>适用场景</strong>：大文件上传、图片存储、备份数据等。</li>
</ul>
<h3 id="7-监控和日志系统"><a href="#7-监控和日志系统" class="headerlink" title="7. 监控和日志系统"></a>7. <strong>监控和日志系统</strong></h3><ul>
<li><strong>功能</strong>：实时监控系统的状态、日志记录，便于发现故障和优化系统。</li>
<li><strong>常用工具</strong>：Prometheus、Grafana、ELK（Elasticsearch、Logstash、Kibana）等。</li>
<li><strong>功能</strong>：监控 CPU、内存、网络流量，分析错误日志等，确保系统稳定。</li>
</ul>
<h2 id="常见设计模式"><a href="#常见设计模式" class="headerlink" title="常见设计模式"></a>常见设计模式</h2><ol>
<li><strong>微服务架构</strong>：将单体应用拆分为多个独立的服务，每个服务独立开发和部署，易于扩展。</li>
<li><strong>服务网格</strong>：通常用于管理微服务间的通信，确保服务间通信的安全性、可靠性和可观测性。</li>
<li><strong>CQRS 和事件溯源</strong>：使用不同模型处理读写请求，并记录系统的每次状态变更以支持回溯。</li>
</ol>
<h2 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h2><h3 id="系统复杂性增加"><a href="#系统复杂性增加" class="headerlink" title="系统复杂性增加"></a>系统复杂性增加</h3><ul>
<li>分布式架构涉及多个模块和服务的协调工作，相比单体架构，系统设计和开发变得更复杂。</li>
<li>服务之间的通信、数据同步、容错等都需要精细的设计和测试，开发成本和时间显著增加。</li>
<li>开发人员需要掌握分布式系统的知识，如一致性算法、分布式锁等，增加了技术要求。</li>
</ul>
<h3 id="数据一致性难以保障"><a href="#数据一致性难以保障" class="headerlink" title="数据一致性难以保障"></a>数据一致性难以保障</h3><ul>
<li>在分布式系统中，数据可能分散在不同的节点上，维护一致性变得困难。</li>
<li>CAP 理论（Consistency, Availability, Partition tolerance）指出分布式系统无法同时满足一致性、可用性和分区容错性，这导致设计时需在一致性和可用性之间进行权衡。</li>
<li>常用的一致性方案，如最终一致性、强一致性等，都有各自的复杂性和延迟问题。</li>
</ul>
<h3 id="网络通信开销"><a href="#网络通信开销" class="headerlink" title="网络通信开销"></a>网络通信开销</h3><ul>
<li>分布式架构中，各个节点通过网络通信相互协作，网络延迟、带宽限制等因素会影响系统性能。</li>
<li>网络故障会导致部分节点不可用，甚至造成服务的暂时中断。</li>
<li>额外的通信开销还可能增加系统的成本，如需要负载均衡器、API 网关等组件来优化网络流量。</li>
</ul>
<h3 id="部署和运维成本高"><a href="#部署和运维成本高" class="headerlink" title="部署和运维成本高"></a>部署和运维成本高</h3><ul>
<li>分布式架构通常需要更多的硬件和软件资源，以及专业的运维团队来支持系统的运行。</li>
<li>部署需要对多个节点和服务进行管理，更新和回滚复杂，尤其是在微服务架构中。</li>
<li>持续集成、持续交付（CI&#x2F;CD）流程的复杂度增加，需要额外的工具和策略来确保部署的稳定性。</li>
</ul>
<h1 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h1><h2 id="分布式mqtt服务器"><a href="#分布式mqtt服务器" class="headerlink" title="分布式mqtt服务器"></a>分布式mqtt服务器</h2><p>​	分布式 MQTT 服务器架构设计是为了实现 MQTT 消息的高可用性、高扩展性和高并发处理。分布式 MQTT 服务器可以承载大量物联网设备的连接，同时能够保证消息的快速分发和数据的一致性。在设计和实现分布式 MQTT 服务器时，通常会使用负载均衡、集群、数据分片、消息持久化等技术。</p>
<h2 id="微服务架构"><a href="#微服务架构" class="headerlink" title="微服务架构"></a>微服务架构</h2><p>​	Spring Cloud、Kubernetes、Docker、Istio。将应用拆分为多个独立的服务，每个服务独立开发、部署和扩展，适合大型企业系统的开发。分布式服务独立运作，降低单个服务出错影响，全栈服务自主扩展，可快速响应不同功能模块的需求。</p>
<h2 id="区块链"><a href="#区块链" class="headerlink" title="区块链"></a>区块链</h2><p>​	Bitcoin、Ethereum、Hyperledger Fabric、Polkadot。构建去中心化系统，支持加密货币交易、智能合约、数据安全和隐私保护。采用分布式账本、共识算法、加密技术，数据公开透明且难以篡改，适用于去中心化应用（DApp）和数据溯源等。</p>
]]></content>
      <categories>
        <category>软件技术</category>
      </categories>
      <tags>
        <tag>笔记</tag>
        <tag>linux</tag>
        <tag>分布式服务器</tag>
      </tags>
  </entry>
  <entry>
    <title>固态硬盘捡漏笔记</title>
    <url>/2025/07/23/%E5%9B%BA%E6%80%81%E7%A1%AC%E7%9B%98%E6%8D%A1%E6%BC%8F%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h1 id="固态硬盘捡漏笔记"><a href="#固态硬盘捡漏笔记" class="headerlink" title="固态硬盘捡漏笔记"></a>固态硬盘捡漏笔记</h1><blockquote>
<p>学习并且总结。</p>
</blockquote>
<p>以最近的捡的垃圾为例，价格为110。</p>
<p><img src="/../images/hardware/nvme/image-20250723110002916.png" alt="image-20250723110002916"></p>
<p>?????????截个图就降了1%健康度可还行</p>
<p><img src="/../images/hardware/nvme/image-20250723122104357.png" alt="image-20250723122104357"></p>
<p><img src="/../images/hardware/nvme/image-20250723111311991.png" alt="image-20250723111311991"></p>
<h2 id="固态硬盘架构"><a href="#固态硬盘架构" class="headerlink" title="固态硬盘架构"></a>固态硬盘架构</h2><h3 id="slc、mlc、tlc、qlc"><a href="#slc、mlc、tlc、qlc" class="headerlink" title="slc、mlc、tlc、qlc"></a>slc、mlc、tlc、qlc</h3><h3 id="1-固态硬盘架构（NAND闪存类型）"><a href="#1-固态硬盘架构（NAND闪存类型）" class="headerlink" title="1. 固态硬盘架构（NAND闪存类型）"></a><strong>1. 固态硬盘架构（NAND闪存类型）</strong></h3><p>不同类型的NAND闪存直接影响SSD的<strong>寿命、速度和价格</strong>：</p>
<table>
<thead>
<tr>
<th align="left"><strong>类型</strong></th>
<th align="left"><strong>每Cell存储位数</strong></th>
<th align="left"><strong>寿命（P&#x2F;E cycles）</strong></th>
<th align="left"><strong>速度</strong></th>
<th align="left"><strong>价格</strong></th>
<th align="left"><strong>适用场景</strong></th>
</tr>
</thead>
<tbody><tr>
<td align="left"><strong>SLC</strong></td>
<td align="left">1 bit</td>
<td align="left">50,000~100,000</td>
<td align="left">最高</td>
<td align="left">最贵</td>
<td align="left">企业级、极端负载</td>
</tr>
<tr>
<td align="left"><strong>MLC</strong></td>
<td align="left">2 bits</td>
<td align="left">3,000~10,000</td>
<td align="left">高</td>
<td align="left">较贵</td>
<td align="left">高端消费级、工作站</td>
</tr>
<tr>
<td align="left"><strong>TLC</strong></td>
<td align="left">3 bits</td>
<td align="left">500~3,000</td>
<td align="left">中等</td>
<td align="left">主流</td>
<td align="left">普通用户、游戏</td>
</tr>
<tr>
<td align="left"><strong>QLC</strong></td>
<td align="left">4 bits</td>
<td align="left">100~1,000</td>
<td align="left">较低</td>
<td align="left">最便宜</td>
<td align="left">轻度使用、存储盘</td>
</tr>
</tbody></table>
<p><strong>关键点</strong>：</p>
<ul>
<li><strong>SLC&#x2F;MLC</strong>：适合高负载（数据库、视频编辑），但价格高。</li>
<li><strong>TLC</strong>：性价比最高，主流选择（如三星980 PRO、西数SN850）。</li>
<li><strong>QLC</strong>：适合低预算、大容量存储（如Intel 660p），但寿命短。</li>
</ul>
<h2 id="固态硬盘性能指标"><a href="#固态硬盘性能指标" class="headerlink" title="固态硬盘性能指标"></a>固态硬盘性能指标</h2><table>
<thead>
<tr>
<th align="left"><strong>参数</strong></th>
<th align="left"><strong>单位</strong></th>
<th align="left"><strong>高端NVMe SSD（PCIe 4.0）</strong></th>
<th align="left"><strong>主流NVMe SSD（PCIe 3.0）</strong></th>
<th align="left"><strong>SATA SSD</strong></th>
<th align="left"><strong>适用场景</strong></th>
</tr>
</thead>
<tbody><tr>
<td align="left"><strong>SEQ读&#x2F;写</strong></td>
<td align="left">MB&#x2F;s</td>
<td align="left">7,000 &#x2F; 6,500</td>
<td align="left">3,500 &#x2F; 3,000</td>
<td align="left">550 &#x2F; 500</td>
<td align="left">大文件传输（视频&#x2F;游戏安装）</td>
</tr>
<tr>
<td align="left"><strong>4K随机读&#x2F;写</strong></td>
<td align="left">MB&#x2F;s</td>
<td align="left">60 &#x2F; 180</td>
<td align="left">40 &#x2F; 120</td>
<td align="left">30 &#x2F; 80</td>
<td align="left">系统响应、软件启动、游戏加载</td>
</tr>
<tr>
<td align="left"><strong>4K-64Thrd读&#x2F;写</strong></td>
<td align="left">MB&#x2F;s</td>
<td align="left">1,400 &#x2F; 1,550</td>
<td align="left">800 &#x2F; 900</td>
<td align="left">100 &#x2F; 150</td>
<td align="left">多任务&#x2F;虚拟机&#x2F;数据库高并发</td>
</tr>
<tr>
<td align="left"><strong>AccTime（延迟）</strong></td>
<td align="left">µs</td>
<td align="left">读: ~10 &#x2F; 写: ~20</td>
<td align="left">读: ~15 &#x2F; 写: ~25</td>
<td align="left">读: ~50 &#x2F; 写: ~80</td>
<td align="left">操作跟手度（游戏&#x2F;实时编辑）</td>
</tr>
</tbody></table>
<h3 id="典型PCIE4-0固态性能测试"><a href="#典型PCIE4-0固态性能测试" class="headerlink" title="典型PCIE4.0固态性能测试"></a>典型PCIE4.0固态性能测试</h3><ul>
<li>三星980pro 1T</li>
</ul>
<p><img src="/../images/hardware/nvme/image-20250723112932061.png" alt="image-20250723112932061"></p>
<ul>
<li>SN570 1T</li>
</ul>
<p><img src="/../images/hardWare/nvme/image-20250723112942287.png" alt="image-20250723112942287"></p>
<h2 id="固态硬盘参数指标"><a href="#固态硬盘参数指标" class="headerlink" title="固态硬盘参数指标"></a>固态硬盘参数指标</h2><blockquote>
<p>NVMe 协议在控制器里专门定义了一个 <strong>Log Page 0x02</strong>（称为“SMART &#x2F; Health Information Log”），固定长度 512 字节，用于报告设备健康状况。<br> 这个 log page 通过 NVMe 命令 <code>Get Log Page</code> 获取。</p>
</blockquote>
<p>以上面的硬盘为案例：</p>
<table>
<thead>
<tr>
<th>ID</th>
<th>名称</th>
<th>原始值</th>
<th>十进制</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>01</td>
<td>严重警告标志</td>
<td><code>000000000000</code></td>
<td>0</td>
<td>没有警告，bit 0~4 都是0</td>
</tr>
<tr>
<td>02</td>
<td>综合温度</td>
<td><code>000000000136</code></td>
<td>0x136&#x3D;310</td>
<td>按 NVMe 标准单位是 K，310-273&#x3D;<strong>37°C</strong>（CrystalDiskInfo也显示37°C）</td>
</tr>
<tr>
<td>03</td>
<td>可用备用空间</td>
<td><code>000000000064</code></td>
<td>100</td>
<td>剩余可用备用空间 100%，非常健康</td>
</tr>
<tr>
<td>04</td>
<td>可用备用空间阈值</td>
<td><code>00000000000A</code></td>
<td>10</td>
<td>阈值 10%，低于就会触发告警</td>
</tr>
<tr>
<td>05</td>
<td>已用寿命百分比</td>
<td><code>000000000048</code></td>
<td>72</td>
<td>表示 NAND 写入或擦写循环寿命已用 72%，还剩28%</td>
</tr>
<tr>
<td>06</td>
<td>读数据单位计数</td>
<td><code>00000001A1E30A</code></td>
<td>27466442</td>
<td>每单位&#x3D;512,000字节，总读≈ 27466442×512,000&#x3D;14,065,870,400,000字节≈<strong>≈12.77TB</strong></td>
</tr>
<tr>
<td>07</td>
<td>写数据单位计数</td>
<td><code>000000195BE26</code></td>
<td>26586950</td>
<td>≈26586950×512,000&#x3D;≈13,613,222,400,000字节≈<strong>≈12.36TB</strong></td>
</tr>
<tr>
<td>08</td>
<td>主机读命令计数</td>
<td><code>000000139310F3</code></td>
<td>205795443</td>
<td>主机向 SSD 发出的读命令次数</td>
</tr>
<tr>
<td>09</td>
<td>主机写命令计数</td>
<td><code>0000015369EAC</code></td>
<td>223971756</td>
<td>主机向 SSD 发出的写命令次数</td>
</tr>
<tr>
<td>0A</td>
<td>控制器忙碌时间</td>
<td><code>0000000009AC</code></td>
<td>2476 分钟</td>
<td>≈41小时（SSD实际处于繁忙状态的总时长）</td>
</tr>
<tr>
<td>0B</td>
<td>启动&#x2F;关闭循环计数</td>
<td><code>0000000017C36</code></td>
<td>97334</td>
<td>上电+关机次数</td>
</tr>
<tr>
<td>0C</td>
<td>通电时间（小时）</td>
<td><code>000000001E7F</code></td>
<td>7807小时</td>
<td>≈325天</td>
</tr>
<tr>
<td>0D</td>
<td>不安全关机计数</td>
<td><code>000000015612</code></td>
<td>87442</td>
<td>⚠ 极高：代表87442次掉电或非正常关机（不一定坏，但风险大）</td>
</tr>
<tr>
<td>0E</td>
<td>媒体与数据完整性错误计数</td>
<td><code>00000000000</code></td>
<td>0</td>
<td>没有检测到硬件级坏块或丢失</td>
</tr>
<tr>
<td>0F</td>
<td>错误日志条目数</td>
<td><code>000000000B83</code></td>
<td>2947</td>
<td>SSD控制器内部记录的错误信息次数</td>
</tr>
</tbody></table>
<h2 id="固态硬盘挑选技巧总结"><a href="#固态硬盘挑选技巧总结" class="headerlink" title="固态硬盘挑选技巧总结"></a>固态硬盘挑选技巧总结</h2><blockquote>
<p>偏个人向</p>
</blockquote>
<ol>
<li>全新盘(参数几乎都是0)默认垃圾，直接pass。</li>
<li>看0E:媒体与数据完整性错误计数，爆了也直接pass。</li>
<li>看03，太低直接pass，低于20直接pass。</li>
<li>判断架构slc、mlc、tlc、qlc</li>
</ol>
<h4 id="不同NAND类型的P-E-Cycle对比"><a href="#不同NAND类型的P-E-Cycle对比" class="headerlink" title="不同NAND类型的P&#x2F;E Cycle对比"></a><strong>不同NAND类型的P&#x2F;E Cycle对比</strong></h4><table>
<thead>
<tr>
<th align="left"><strong>NAND类型</strong></th>
<th align="left"><strong>P&#x2F;E Cycles（典型值）</strong></th>
<th align="left"><strong>理论寿命举例（512GB SSD）</strong></th>
</tr>
</thead>
<tbody><tr>
<td align="left"><strong>SLC</strong></td>
<td align="left">50,000~100,000</td>
<td align="left">可写入25,000~50,000TB</td>
</tr>
<tr>
<td align="left"><strong>MLC</strong></td>
<td align="left">3,000~10,000</td>
<td align="left">1,500~5,000TB</td>
</tr>
<tr>
<td align="left"><strong>TLC</strong></td>
<td align="left">500~3,000</td>
<td align="left">250~1,500TB</td>
</tr>
<tr>
<td align="left"><strong>QLC</strong></td>
<td align="left">100~1,000</td>
<td align="left">50~500TB</td>
</tr>
</tbody></table>
<blockquote>
<p> <strong>注</strong>：实际寿命还受<strong>写入放大（WA）</strong>、<strong>温度</strong>、<strong>主控算法</strong>影响。</p>
</blockquote>
<h4 id="计算SSD总寿命（TBW）？"><a href="#计算SSD总寿命（TBW）？" class="headerlink" title="计算SSD总寿命（TBW）？"></a><strong>计算SSD总寿命（TBW）？</strong></h4><ul>
<li><p><strong>公式</strong>：</p>
<p>  TBW&#x3D;SSD容量×P&#x2F;E Cycles×写入放大系数（WA）1024TBW&#x3D;SSD容量×P&#x2F;E Cycles×1024写入放大系数（WA）</p>
<ul>
<li><strong>写入放大（WA）</strong>：通常1.2~3.0（随机写入越多，WA越高）。</li>
<li><strong>示例</strong>：<br>  1TB TLC SSD（P&#x2F;E&#x3D;1,000，WA&#x3D;1.5）的TBW &#x3D; 1024×1000×1.51024&#x3D;1,500TB1024×1000×10241.5​&#x3D;1,500<em>TB</em>。</li>
</ul>
</li>
</ul>
<ol start="5">
<li>对比写入量判断</li>
</ol>
<p>我的架构是tlc，是不是都无所谓了，写入量比较少，虽然不安全关机多，但是个人感觉无所谓，可能是当移动硬盘用的多。看着心烦的话不看就行了qwq</p>
]]></content>
      <tags>
        <tag>笔记</tag>
        <tag>nvme</tag>
        <tag>固态硬盘</tag>
        <tag>捡漏</tag>
      </tags>
  </entry>
  <entry>
    <title>塘下公路片</title>
    <url>/2024/05/19/%E5%A1%98%E4%B8%8B%E5%85%AC%E8%B7%AF%E7%89%87/</url>
    <content><![CDATA[<p>​	比起繁华的钢铁丛林，我还是性本爱丘山。在塘下公路骑行是一种很奇妙的体验，就好步入桃花源记，在一群群高楼大厦中站立的两排密集的大树，让长久受到屏幕自己的眼镜也得到了放松。</p>
<p><img src="/../images/tangxia_road/Nikon2023_5_3_332023_6_1360.jpg" alt="boring screens"></p>
<p><img src="/../images/tangxia_road/Nikon2023_5_3_332023_6_1361.jpg" alt="Green Road"></p>
<p><img src="/../images/tangxia_road/Nikon2023_5_3_332023_6_1362.jpg" alt="Green Road"></p>
<p><img src="/../images/tangxia_road/Nikon2023_5_3_332023_6_1363.jpg" alt="Green Road"></p>
<p>​	自从知道了塘下公路以后，我再没去过别的地方骑行。每次骑行都很兴奋，有时感觉回到了家乡，有时感觉在国外一般。真的很喜欢这条路两边的树。恰到好处的遮了大半边天空，只留下一条光路延伸到远方。</p>
<p><img src="/../images/tangxia_road/Nikon2023_5_3_332023_6_1366.jpg" alt="Trees"></p>
<p><img src="/../images/tangxia_road/Nikon2023_5_3_332023_6_1368.jpg" alt="Trees"></p>
<p>​	在路边发现了一只孤独的椅子，白色的墙与周围有稍许违和感，有一种很清新的感觉，同时还有一种苔痕上阶绿，草色入帘青的感觉。</p>
<p><img src="/../images/tangxia_road/Nikon2023_5_3_332023_6_1364.jpg" alt="lonely chair"></p>
<p><img src="/../images/tangxia_road/Nikon2023_5_3_332023_6_1365.jpg" alt="lonely chair"></p>
<p>这应该就是治愈内耗的良药了吧。</p>
]]></content>
      <categories>
        <category>生活</category>
        <category>摄影</category>
      </categories>
      <tags>
        <tag>旅行</tag>
        <tag>摄影</tag>
        <tag>photo</tag>
        <tag>公路旅行</tag>
      </tags>
  </entry>
  <entry>
    <title>常见电源电路实现</title>
    <url>/2024/11/25/%E5%B8%B8%E8%A7%81%E7%94%B5%E6%BA%90%E7%94%B5%E8%B7%AF%E5%AE%9E%E7%8E%B0/</url>
    <content><![CDATA[<h1 id="实现目的"><a href="#实现目的" class="headerlink" title="实现目的"></a>实现目的</h1><ol>
<li>熟悉常见电源电路的设计</li>
<li>设计自己的电源电路</li>
<li>改进自己的设计</li>
</ol>
<h1 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h1><p><img src="/../images/hardware/power/1.png"></p>
<h1 id="AC-DC"><a href="#AC-DC" class="headerlink" title="AC-DC"></a>AC-DC</h1><h2 id="220v–-5v"><a href="#220v–-5v" class="headerlink" title="220v–&gt;5v"></a>220v–&gt;5v</h2><ul>
<li>选用反激拓扑结构<ul>
<li>用于低于100瓦的功率输出</li>
<li></li>
</ul>
</li>
</ul>
<h2 id="220v–-12v"><a href="#220v–-12v" class="headerlink" title="220v–&gt;12v"></a>220v–&gt;12v</h2><h1 id="DC-DC"><a href="#DC-DC" class="headerlink" title="DC-DC"></a>DC-DC</h1><h1 id=""><a href="#" class="headerlink" title=""></a></h1><h2 id="-1"><a href="#-1" class="headerlink" title=""></a></h2>]]></content>
      <categories>
        <category>硬件技术</category>
      </categories>
      <tags>
        <tag>笔记</tag>
        <tag>电源</tag>
        <tag>DC-DC</tag>
        <tag>AC-DC</tag>
      </tags>
  </entry>
  <entry>
    <title>常见通信协议以及通信方式</title>
    <url>/2024/01/29/%E5%B8%B8%E8%A7%81%E9%80%9A%E4%BF%A1%E5%8D%8F%E8%AE%AE%E4%BB%A5%E5%8F%8A%E9%80%9A%E4%BF%A1%E6%96%B9%E5%BC%8F/</url>
    <content><![CDATA[<h1 id="常用的通信方式"><a href="#常用的通信方式" class="headerlink" title="常用的通信方式"></a>常用的通信方式</h1><h2 id="1-串行和并行通信"><a href="#1-串行和并行通信" class="headerlink" title="1. 串行和并行通信"></a>1. 串行和并行通信</h2><ul>
<li>串行通信优缺点</li>
</ul>
<blockquote>
<p>优点：</p>
<p>​	1. 占用资源少（只需一根线）</p>
<p>缺点：</p>
<p>​	1. 传输速率慢</p>
</blockquote>
<ul>
<li>并行通信优缺点</li>
</ul>
<blockquote>
<p>优点：</p>
<p>​	1. 传输速率快</p>
<p>缺点：</p>
<p>​	1. 占用资源多（多根线同时使用）</p>
</blockquote>
<h2 id="2-同步和异步通信"><a href="#2-同步和异步通信" class="headerlink" title="2. 同步和异步通信"></a>2. 同步和异步通信</h2><h3 id="1-概念"><a href="#1-概念" class="headerlink" title="1.概念"></a>1.概念</h3><ul>
<li>同步通信</li>
</ul>
<blockquote>
<p><strong>同步通信：</strong> 发送端在发送串行数据的同时，提供一个时钟信号，并按照一定的约定（例如：在时钟信号的上升沿的时候，将数据发送出去）发送数据，接收端根据发送端提供的时钟信号，以及大家的约定，接收数据。如：I2C、SPI等有时钟信号的协议，都属于这种通信方式。</p>
</blockquote>
<ul>
<li>异步通信</li>
</ul>
<blockquote>
<p><strong>异步通信：</strong> <strong>接收方并不知道数据什么时候会到达，收发双方可以有各自自己的时钟</strong>。发送方发送的时间间隔可以不均，接收方是在数据的起始位和停止位的帮助下实现信息同步的。这种传输通常是很小的分组，比如：一个字符为一组，数据组配备起始位和结束位。所以这种传输方式的效率是比较低的，因为额外加入了很多的辅助位作为负载，常用在低速的传输中。</p>
</blockquote>
<h3 id="2-比较"><a href="#2-比较" class="headerlink" title="2. 比较"></a>2. 比较</h3><ul>
<li><p>同步通信要求接收端时钟频率和发送端时钟频率一致，发送端发送连续的比特流；异步通信时不要求接收端时钟和发送端时钟同步，发送端发送完一个字节后，可经过任意长的时间间隔再发送下一个字节。</p>
</li>
<li><p>同步通信效率高；异步通信效率较低。</p>
</li>
<li><p>同步通信较复杂，双方时钟的允许误差较小；异步通信简单，双方时钟可允许一定误差。</p>
</li>
<li><p>同步通信可用于点对多点；异步通信只适用于点对点。</p>
</li>
</ul>
<h2 id="3-单工、半双工、全双工通信"><a href="#3-单工、半双工、全双工通信" class="headerlink" title="3. 单工、半双工、全双工通信"></a>3. 单工、半双工、全双工通信</h2><h3 id="1-概念-1"><a href="#1-概念-1" class="headerlink" title="1. 概念"></a>1. 概念</h3><ul>
<li>单工数据传输只支持数据在一个方向上传输</li>
<li>半双工数据传输允许数据在两个方向上传输，但是，在某一时刻，只允许数据在一个方向上传输，它实际上是一种切换方向的单工通信</li>
<li>全双工数据通信允许数据同时在两个方向上传输，因此，全双工通信是两个单工通信方式的结合，它要求发送设备和接收设备都有独立的接收和发送能力。</li>
</ul>
<h2 id="4-通信速率"><a href="#4-通信速率" class="headerlink" title="4. 通信速率"></a>4. 通信速率</h2><ul>
<li>比特率</li>
</ul>
<blockquote>
<p>比特率(bit rate)又称传信率、信息传输速率(简称信息速率，information rate)。其定义是：通信线路(或系统)单位时间(每秒)内传输的信息量，即每秒能传输的二进制位数，通常用Rb表示，其单位是比特&#x2F;秒(bit&#x2F;s或b&#x2F;s，英文缩略语为bps)。</p>
</blockquote>
<ul>
<li>波特率</li>
</ul>
<blockquote>
<p>波特率(Baud rate)又称传码率、码元传输速率(简称码元速率)、信号传输速率(简称信号速率，signaling rate)或调制速率。其定义是：通信线路(或系统)单位时间(每秒)内传输的码元(脉冲)个数；或者表示信号调制过程中，单位时间内调制信号波形的变换次数，通常用RB表示，单位是波特(Bd或Baud，前者规范)。如果每秒传输1个码元就称为1Bd；如果1码元的时间长短为200ms，则每秒可传输5个码元，那么码元速率(波特率)就是5Bd。</p>
</blockquote>
<ul>
<li>码元</li>
</ul>
<blockquote>
<p>码元(code cell)是携带信息的数字单位，是指在数字信道中传送数字信号的一个波形符号，也即“时间轴上的一个信号编码单元”。码元可能是二进制的，也可能是多进制的。 </p>
</blockquote>
<h2 id="5-常见通信方式"><a href="#5-常见通信方式" class="headerlink" title="5. 常见通信方式"></a>5. 常见通信方式</h2><p>​	USART ( Universal Synchronous Asynchronous Receiver and Transmitter )</p>
<p>​	UART ( Universal Asynchronous Receiver and Transmitter )</p>
<h4 id="1-TTL"><a href="#1-TTL" class="headerlink" title="1. TTL"></a>1. TTL</h4><blockquote>
<p>TTL（transistor transistor logic）即晶体管-晶体管逻辑电平。TTL电平信号规定，+5V等价于逻辑“1”，0 V等价于逻辑“0”(采用二进制来表示数据时)。</p>
</blockquote>
<h4 id="2-RS232"><a href="#2-RS232" class="headerlink" title="2. RS232"></a>2. RS232</h4><ul>
<li>协议简介</li>
</ul>
<blockquote>
<p>RS-232总线规定了25条线，包含了两个信号通道，即第一通道（称为主通道）和第二通道（称为副通道）。利用RS- 232总线可以实现全双工通信，通常使用的是主通道，而副通道使用较少。在一般应用中，使用3条～9条信号线就可以实现全双工通信，采用三条信号线（接收线RXD、发送线TXD和信号地GND）能实现简单的全双工通信过程。因此RS232标准有两种接口——DB9和DB25，其中常用的是DB9接口。</p>
</blockquote>
<ul>
<li>特征</li>
</ul>
<blockquote>
<ul>
<li>接口信号电平高，容易损坏接口电路的芯片。RS232接口上任何信号线的电压都处于负逻辑关系中。即：逻辑“1”为-3 ~ -15V;逻辑为“0”：+3 ~ +15V，噪声裕量为2V。也就是说，接收器需要将高于+3V的信号识别为逻辑“0”，将低于-3V的信号识别为逻辑“1”，将5V的TTL电平识别为逻辑正极，将0识别为逻辑负极。</li>
<li>与TTL电平不兼容，需要一个电平转换电路来连接到TTL电路。</li>
<li>传输速率低。在异步传输中，比特率为20Kbps;因此，在51CPLD开发板中，集成程序波特率只能是19200，这也是原因。</li>
<li>接口采用信号线和信号回波串，形成共同的接地传输形式。这种标准的接地传输容易受到共模干扰，因此抗噪性较弱。</li>
<li>传输距离有限。最大传输距离为50英尺。它只能达到大约15米。</li>
</ul>
</blockquote>
<h4 id="3-RS485"><a href="#3-RS485" class="headerlink" title="3. RS485"></a>3. RS485</h4><ul>
<li>简介</li>
</ul>
<blockquote>
<p>RS485 通信采用差分信号传输，通常情况下只需要两根信号线就可以进行正常的通信。<br>在差分信号中，逻辑0和逻辑1是用两根信号线（A+和B-）的电压差来表示。</p>
<p>逻辑 1：两根信号线（A+和B-）的电压差在 +2V～+6V 之间。<br>逻辑 0：两根信号线（A+和B-）的电压差在 -2V～-6V 之间。</p>
</blockquote>
<ul>
<li>特征</li>
</ul>
<blockquote>
<p>RS-485的电气特性：逻辑“1”由两条线路+2V<del>+6V之间的电压差表示，逻辑“0”由两条线路之间的电压差-6V</del>-2V表示。接口信号电平低于RS-232，不易损坏接口电路芯片。该电平与TTL电平兼容，便于与TTL电路连接。<br>最高数据传输速率为：10Mbps<br>RS-485接口采用平衡驱动器和差分接收机的组合，具有抗共振固模干扰能力，即抗噪声性能好。<br>RS-485接口的最大传输距离为4000英尺，实际上可达3000米。<br>RS-232接口仅允许一个收发器连接到总线，即单站功能。相比之下，RS-485接口仅允许在总线上连接多达128个收发器，即多站能力。用户 使用单个RS-485接口可以快速建立设备网络。</p>
</blockquote>
<h3 id="3-I2C"><a href="#3-I2C" class="headerlink" title="3.  I2C"></a>3.  I2C</h3><ul>
<li>简介</li>
</ul>
<blockquote>
<p>I2C（同步<strong>半双工</strong>）通讯协议(Inter－Integrated Circuit)是由 Phiilps（飞利浦） 公司开发的，由于它引脚少，硬件实现简单，可扩展性强，不需要 USART、 CAN 等通讯协议的外部收发设备，现在被广泛地使用在系统内多个集成电路(IC)间的通讯。</p>
</blockquote>
<ul>
<li>特点</li>
</ul>
<blockquote>
<p>(1) 它是一个<strong>支持多设备</strong>的总线。“总线”指多个设备共用的信号线。在一个 I2C 通讯总线中，可连接多个 I2C 通讯设备，支持多个通讯主机及多个通讯从机。</p>
<p>(2) 每个连接到总线的设备都有一个独立的地址，主机可以利用这个地址进行不同设备之间的访问。</p>
<p>(3) <strong>总线通过上拉电阻</strong>接到电源。当 I2C 设备空闲时，会输出高阻态，而当所有设备都空闲，都输出高阻态时，由上拉电阻把总线拉成高电平。</p>
<p>(4) 多个主机同时使用总线时，为了防止数据冲突，会利用仲裁方式决定由哪个设备占用总线。</p>
<p>(5) 具有三种传输模式：标准模式传输速率为 100kbit&#x2F;s ，快速模式400kbit&#x2F;s ，高速模式下可达 1Mbit&#x2F;s，但目前大多 I2C 设备尚不支持高速模式。</p>
<p>(6) 连接到相同总线的 IC 数量受到总线的最大电容 400pF 限制 。</p>
</blockquote>
<h4 id="通信原理"><a href="#通信原理" class="headerlink" title="通信原理"></a>通信原理</h4><ol>
<li><p>使用两个总线：</p>
<ol>
<li>SDA（数据线）</li>
<li>SCL（时钟线）</li>
</ol>
</li>
<li><p>主设备与从设备</p>
<ol>
<li>主设备（控制时钟线<code>SCL</code>）</li>
<li>从设备（地址检测）</li>
</ol>
</li>
<li><p>高阻态</p>
</li>
</ol>
<p>​	为了设备通过总线通信时不干扰主从设设备之外的设备，同时为了主从设备不被其他设备干扰，使用外部上拉电阻。</p>
<ol start="4">
<li><p>IIIC 设备地址：出厂已经设计好</p>
</li>
<li><p>协议</p>
<ol>
<li><strong>开始信号</strong>：SCL 为高电平时，SDA 由高电平向低电平跳变，开始传送数据。</li>
<li><strong>结束信号</strong>：SCL 为高电平时，SDA 由低电平向高电平跳变，结束传送数据。</li>
<li><strong>应答信号</strong>：接收数据的 IC 在接收到 8bit 数据后，向发送数据的 IC 发出特定的低电平脉冲，表示已收到数据。CPU 向受控单元发出一个信号后，等待受控单元发出一个应答信号，CPU 接收到应答信号后，根据实际情况作出是否继续传递信号的判断。若未收到应答信号，由判断为受控单元出现故障。</li>
</ol>
</li>
</ol>
<h3 id="4-SPI"><a href="#4-SPI" class="headerlink" title="4. SPI"></a>4. SPI</h3><h4 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h4><blockquote>
<p>SPI （同步全双工）协议是由摩托罗拉公司提出的通讯协议(Serial Peripheral Interface)，即串行外围设备接口，是一种高速全双工的通信总线。它被广泛地使用在 ADC、 LCD 等设备与 MCU 间，要求通讯速率较高的场合。</p>
</blockquote>
<h4 id="特征"><a href="#特征" class="headerlink" title="特征"></a>特征</h4><blockquote>
<ol>
<li><strong>SPI</strong>是一个同步的数据总线，也就是说它是用<strong>单独的数据线</strong>和<strong>一个单独的时钟信号</strong>来保证<strong>发送端和接收端的完美同步</strong>。</li>
<li>产生时钟的一侧称为<strong>主机</strong>，另一侧称为<strong>从机</strong>。总是<strong>只有一个主机</strong>（一般来说可以是<strong>微控制器&#x2F;MCU</strong>），但是可以有多个<strong>从机</strong>（后面详细介绍）</li>
<li>逻辑线<ul>
<li><strong>MISO</strong>：<code>Master input slave output</code> 主机输入，从机输出（数据来自从机）；</li>
<li><strong>MOSI</strong>：<code>Master output slave input</code> 主机输出，从机输入（数据来自主机）；</li>
<li><strong>SCLK</strong> ：<code>Serial Clock</code> 串行时钟信号，由主机产生发送给从机；</li>
<li><strong>SS</strong>：<code>Slave Select</code> 片选信号，由主机发送，以控制与哪个从机通信，通常是低电平有效信号。</li>
</ul>
</li>
</ol>
</blockquote>
<h4 id="信息传输流程"><a href="#信息传输流程" class="headerlink" title="信息传输流程"></a>信息传输流程</h4><blockquote>
<ol>
<li>机先将<code>NSS</code>信号拉低&#x3D;&gt; 开始接收数据</li>
<li><strong>接收端</strong>检测到时钟的边沿信号时，它将立即读取<strong>数据线</strong>上的信号，这样就得到了一位数据</li>
<li><strong>主机</strong>发送到<strong>从机</strong>时：主机产生相应的时钟信号，然后数据<strong>一位一位</strong>地将从<code>MOSI</code>信号线上进行发送到从机；</li>
<li><strong>主机</strong>接收<strong>从机</strong>数据：如果从机需要将数据发送回主机，则主机将继续生成预定数量的时钟信号，并且从机会将数据通过<code>MISO</code>信号线发送；</li>
</ol>
</blockquote>
<h3 id="5-CAN"><a href="#5-CAN" class="headerlink" title="5. CAN"></a>5. CAN</h3><ul>
<li>简介</li>
</ul>
<blockquote>
<p>CAN 是控制器局域网络(Controller Area Network)的简称， 它是由研发和生产汽车电子产品著称的德国 BOSCH 公司开发的，并最终成为国际标准（ISO11519） ， 是国际上应用最广泛的现场总线之一。</p>
<p>CAN 总线协议已经成为汽车计算机控制系统和嵌入式工业控制局域网的标准总线，并且拥有以 CAN 为底层协议专为大型货车和重工机械车辆设计的 J1939 协议。近年来， 它具有的高可靠性和良好的错误检测能力受到重视，被广泛应用于汽车计算机控制系统和环境温度恶劣、电磁辐射强及振动大的工业环境。</p>
</blockquote>
<h3 id="6-USB2-0"><a href="#6-USB2-0" class="headerlink" title="6. USB2.0"></a>6. USB2.0</h3><ul>
<li>简介</li>
</ul>
<blockquote>
<ul>
<li>USB 是一种支持热插拔的高速串行传输总线，使用差分信号来传输数据，最高速度<br>可达 480Mb&#x2F;S。USB 支持“总线供电”和“自供电”两种供电模式。在总线供电模式下，USB2.0设备最多可以获得500mA的电流。</li>
<li>2.USB2.0 被设计成为向下兼容的模式，当有全速 （USB 1.1）或者低速（USB 1.0）设备连接到高速（USB 2.0）主机时，主机可以通过分离传输来支持它们。</li>
<li>3.一条 USB 总线上，可达到的最高传输速度等级由该总线上最慢的“设备”决定，该设备包括主机、HUB以及USB功能设备。</li>
<li>4.USB 体系包括“主机”、“设备”以及“物理连接”三个部分。主机是一个提供USB接口及接口管理能力的硬件、软件及固件的复合体，可以是PC，也可以是OTG设备。一个USB 系统中仅有一个USB主机；</li>
<li>5.设备包括 USB功能设备和 USB HUB，最多支持 127个设备；物理连接即指的是USB 的传输线。在USB 2.0系统中，要求使用屏蔽的双绞线。USB 体系采用分层的星型拓扑来连接所有USB设备。</li>
<li>6.以 HOST-ROOT HUB为起点，最多支持 7 层（Tier），也就是说任何一个USB 系统中最多可以允许 5个 USB HUB 级联。一个复合设备（Compound Device）将同时占据两层或更多的层。</li>
<li>7.一个 USB HOST 最多可以同时支持 128 个地址，地址 0 作为默认地址，只在设备枚举期间临时使用，而不能被分配给任何一个设备，因此一个 USB HOST 最多可以同时支持 127 个地址，如果一个设备只占用一个地址，那么可最多支持 127个 USB设备（含USB HUB）。<br>USB连接器支持热拔插；高速&#x2F;全速USB线缆要求使用内含双绞线的屏蔽线，而且必须打上符合USB使用标记；低速USB推荐但非要求使用双绞线和屏蔽线；</li>
</ul>
</blockquote>
]]></content>
      <categories>
        <category>硬件技术</category>
      </categories>
      <tags>
        <tag>STM32</tag>
        <tag>笔记</tag>
        <tag>嵌入式</tag>
        <tag>51</tag>
        <tag>Iot</tag>
        <tag>物联网</tag>
      </tags>
  </entry>
  <entry>
    <title>大创项目《自动化农业无人机》记录</title>
    <url>/2024/05/09/%E5%A4%A7%E5%88%9B%E9%A1%B9%E7%9B%AE%E3%80%8A%E8%87%AA%E5%8A%A8%E5%8C%96%E5%86%9C%E4%B8%9A%E6%97%A0%E4%BA%BA%E6%9C%BA%E3%80%8B%E8%AE%B0%E5%BD%95/</url>
    <content><![CDATA[<p>​	记录一下大创项目《自动化农业无人机》。实现项目转化知识成果</p>
<h1 id="硬件选型"><a href="#硬件选型" class="headerlink" title="硬件选型"></a>硬件选型</h1><p><img src="/../images/dachaung/1.png" alt="硬件选型"></p>
<h1 id="实现思路"><a href="#实现思路" class="headerlink" title="实现思路"></a>实现思路</h1><h2 id="PID算法"><a href="#PID算法" class="headerlink" title="PID算法"></a>PID算法</h2><h3 id="三轴陀螺仪的使用（以mpu6050为例）"><a href="#三轴陀螺仪的使用（以mpu6050为例）" class="headerlink" title="三轴陀螺仪的使用（以mpu6050为例）"></a>三轴陀螺仪的使用（以mpu6050为例）</h3><p>[MPU6050 basic  with Arduino](link to be added)</p>
<h3 id="PID算法-1"><a href="#PID算法-1" class="headerlink" title="PID算法"></a>PID算法</h3><h2 id="数据传输"><a href="#数据传输" class="headerlink" title="数据传输"></a>数据传输</h2><h3 id="mqtt协议简介"><a href="#mqtt协议简介" class="headerlink" title="mqtt协议简介"></a>mqtt协议简介</h3><p><a href="https://regenm.github.io/2024/02/09/esp8266%E8%BF%9E%E6%8E%A5%E6%9C%8D%E5%8A%A1%E5%99%A8%EF%BC%88%E5%9F%BA%E4%BA%8Emosquitto%E7%9A%84mqtt-server%EF%BC%89/">esp8266连接服务器（基于mosquitto的mqtt server） | Regen (regenm.github.io)</a></p>
<h3 id="mqtt服务器搭建"><a href="#mqtt服务器搭建" class="headerlink" title="mqtt服务器搭建"></a>mqtt服务器搭建</h3><p><a href="https://regenm.github.io/2024/02/09/MQTT%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%90%AD%E5%BB%BA%EF%BC%88mosquitto%EF%BC%89/">MQTT服务器搭建（mosquitto） | Regen (regenm.github.io)</a></p>
<h3 id="传输系统"><a href="#传输系统" class="headerlink" title="传输系统"></a>传输系统</h3><h4 id="1-数据传输"><a href="#1-数据传输" class="headerlink" title="1. 数据传输"></a>1. 数据传输</h4><p>mqtt协议基于代理，订阅和发布。</p>
<p>因此在服务器里创建一个频道<code>/topic/dataFromSensors</code>用于各类传感器的数据传输</p>
<ol>
<li>高度传感器</li>
<li>二氧化碳传感器</li>
<li>温湿度传感器</li>
<li>电池消耗</li>
</ol>
<h4 id="2-命令传输"><a href="#2-命令传输" class="headerlink" title="2. 命令传输"></a>2. 命令传输</h4><p>在服务器里创建一个频道<code>/topic/commandToDrone</code>用于各类命令的传输</p>
<ol>
<li>UP</li>
<li>DOWM</li>
<li>LEFT</li>
<li>RIGHT</li>
<li>SPIN</li>
</ol>
<p>因为基于mqtt协议，因此自动化控制很简单，上位机很好写，也可以不用上位机，在服务器上写的shell脚本就能很好的完成自动化功能。</p>
<p><a href="https://regenm.github.io/2024/04/27/mqttSender/">mqttSender | Regen (regenm.github.io)</a></p>
<h2 id="外扩系统"><a href="#外扩系统" class="headerlink" title="外扩系统"></a>外扩系统</h2><h3 id="3D打印"><a href="#3D打印" class="headerlink" title="3D打印"></a>3D打印</h3><h3 id="外扩系统构成"><a href="#外扩系统构成" class="headerlink" title="外扩系统构成"></a>外扩系统构成</h3><h4 id="1-独立MCU"><a href="#1-独立MCU" class="headerlink" title="1. 独立MCU"></a>1. 独立MCU</h4><h4 id="2-模块化设计"><a href="#2-模块化设计" class="headerlink" title="2. 模块化设计"></a>2. 模块化设计</h4>]]></content>
      <categories>
        <category>软硬件技术</category>
      </categories>
      <tags>
        <tag>项目</tag>
        <tag>esp32</tag>
        <tag>mqtt</tag>
        <tag>esp8266</tag>
        <tag>物联网</tag>
        <tag>大创</tag>
        <tag>无人机</tag>
      </tags>
  </entry>
  <entry>
    <title>微机原理与接口技术笔记</title>
    <url>/2023/10/26/%E5%BE%AE%E6%9C%BA%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8E%A5%E5%8F%A3%E6%8A%80%E6%9C%AF%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h1 id="汇编语言（8086为例）"><a href="#汇编语言（8086为例）" class="headerlink" title="汇编语言（8086为例）"></a>汇编语言（8086为例）</h1><p>—-基于《汇编语言第三版》王爽</p>
<h2 id="1-基础知识"><a href="#1-基础知识" class="headerlink" title="1.基础知识"></a>1.基础知识</h2><ul>
<li>8086 CPU的简介</li>
</ul>
<blockquote>
<p>(1) 16位微处理器；</p>
<p>(2) 采用<strong>高速运算性能</strong>的 <code>HMOS</code> 工艺制造，芯片上集成了2.9万只晶体管；</p>
<p>(3) 使用单一的 <code>+5V</code> 电源，<code>40</code> 条引脚双列直插式封装；</p>
<p>(4) 时钟频率为 <code>5MHz~10MHz</code> ，基本指令执行时间为<code>0.3ms~0.6ms</code> ；</p>
<p>(5) 16根数据线和 20根地址线，可寻址的地址空间达 <code>1MB</code> (毕竟 16根地址线只可以寻址 64KB，太小了) ；</p>
</blockquote>
<ul>
<li>冯诺依曼架构</li>
</ul>
<blockquote>
<p><strong>冯·诺伊曼结构</strong>（英语：Von Neumann architecture），也称<strong>范·诺伊曼模型</strong>（Von Neumann model）或<strong>普林斯顿结构</strong>（Princeton architecture），是一种将程序指令存储器和数据存储器合并在一起的电脑设计概念结构。该结构包含：运算器、控制器、存储器、输入设备、输出设备。</p>
<blockquote>
<p>结构特点：</p>
<ol>
<li>以运算单元为中心</li>
<li>采用存储程序原理</li>
<li>存储器是按地址访问、线性编址的空间</li>
<li>控制流由指令流产生</li>
<li>指令由操作码和地址码组成</li>
<li>数据以二进制编码</li>
</ol>
</blockquote>
</blockquote>
<ul>
<li>存储单元</li>
</ul>
<blockquote>
<p>1 KB&#x3D;1024 B(字节)</p>
<p>1 字（word）&#x3D;2 字节</p>
<p>1 B&#x3D;8 bit</p>
</blockquote>
<ul>
<li>总线</li>
</ul>
<p>​	总线包含：<strong>数据总线，地址总线，控制总线</strong></p>
<p>​				<strong>地址总线</strong>：假设一个CPU有N根地址总线（即地址总线宽度为N），最多可以寻找2的N次方个内存单元。</p>
<p>​				<strong>数据总线</strong>：N根数据总线一次可以传输N位二进制数据。</p>
<p>​				8088 CPU数据总线宽度为8；8086 CPU数据总线宽度为16。</p>
<p>​				<strong>控制总线</strong>：N根代表N种控制。</p>
<h2 id="2-寄存器"><a href="#2-寄存器" class="headerlink" title="2.寄存器"></a>2.寄存器</h2><p>​		一个典型的CPU由：运算器，控制器，寄存器等器件构成。同时他们通过总线在内部相连接（地址，数据，控制）。对于汇编程序员来说，CPU的主要器件就是寄存器。</p>
<p>​		8086寄存器特征：16位  (数据最大为2^16-1)</p>
<p>​		8086 CPU的寄存器种类：</p>
<p><img src="/images/registerof8086.png" alt="register of Intel 8086"></p>
<blockquote>
<ul>
<li>AX</li>
<li>BX</li>
<li>CX</li>
<li>DX    &#x2F;&#x2F;    以上四个为通用寄存器，用于存放一般性数据</li>
<li>SI</li>
<li>DI</li>
<li>SP</li>
<li>BP</li>
<li>IP</li>
<li>CS</li>
<li>SS</li>
</ul>
</blockquote>
<ul>
<li><strong>通用寄存器</strong></li>
</ul>
<p>​		<em>AX,BX,CX,DX四个寄存器通常用来存放一般性数据，因此内成为通用寄存器</em>。</p>
<blockquote>
<p>8086的上一代CPU的寄存器是8位的，为了兼容性，这四个寄存器也可以当丞8个8位寄存器使用。</p>
<ul>
<li><p>AX—-AH,AL</p>
</li>
<li><p>BX—-BH,BL</p>
</li>
<li><p>CX—-DH,DL</p>
</li>
<li><p>DX—-DH,DL	    （L和H指的是low和high，即低位和高位）</p>
</li>
</ul>
</blockquote>
<ul>
<li>8086 CPU的物理地址给出方法</li>
</ul>
<p>​		<strong>物理地址&#x3D;段地址*16+偏移地址</strong>   （段地址*16  可以理解为段地址向左移四位）</p>
<blockquote>
<p>一个物理地址可以可以有不同的段地址和偏移地址</p>
<p>偏移地址为16位，寻址能力为2^16即 64 KB，所以一个段的长度不能超过 64 KB</p>
</blockquote>
<ul>
<li><strong>段寄存器</strong></li>
</ul>
<blockquote>
<p>8086 CPU 的段寄存器：</p>
<ul>
<li>CS</li>
<li>DS</li>
<li>SS</li>
<li>ES</li>
</ul>
</blockquote>
<ul>
<li>CS 和 IP</li>
</ul>
<p>​	对于8086 CPU来说，CS和IP一起指示了当前要读取指令的地址：CS :IP ，执行该位置的语句后IP会自动增加，从而可以进行下一指令的执行。</p>
<ul>
<li><p>CS 和 IP 寄存器的修改</p>
</li>
<li><p>* </p>
<ul>
<li>情况一：当你在写汇编脚本或者直接向内存中写入汇编指令时</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">使用 JMP 指令</span><br><span class="line">使用方法： JMP 段地址：偏移地址</span><br><span class="line">eg: JMP 2AE3:3   //CS=2AE3,IP= 0003（均为16进制）</span><br><span class="line">或者（不想改变段地址时）</span><br><span class="line">JMP ax,    # 修改IP为 AX的值</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<ul>
<li>情况二： 在debug.exe（MASM32）中想要修改当前程序运行位置时(后面将会介绍)</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">例如在 dosBox中：</span><br><span class="line">debug.exe #进入debug模式</span><br><span class="line">-r CS</span><br><span class="line">CS 073f</span><br><span class="line">:XXXX(输入你需要位置)  # IP寄存器同理，通用寄存器也同上</span><br></pre></td></tr></table></figure>


</li>
<li><p>代码段</p>
</li>
</ul>
<p>​		即定义一片区域用于输入需要执行的代码。</p>
<ul>
<li><strong>debug的使用</strong></li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-r              #显示CPU各个寄存器的值</span><br><span class="line">-r 寄存器名字    	 	 #修改寄存器的值</span><br><span class="line"></span><br><span class="line">-d              #查看当前地址的内容</span><br><span class="line">-d 段地址：偏移地址       #查看该段的地址</span><br><span class="line"></span><br><span class="line">-a              #从当前位置开始写入汇编指令</span><br><span class="line">-a 段地址：偏移地址        #从该位置开始写入汇编指令</span><br><span class="line"></span><br><span class="line">-e                        #从当前位置开始写入机器码</span><br><span class="line">-e 段地址：偏移地址        #从该位置开始写入机器码</span><br></pre></td></tr></table></figure>



<h2 id="3-寄存器（内存访问）"><a href="#3-寄存器（内存访问）" class="headerlink" title="3.寄存器（内存访问）"></a>3.寄存器（内存访问）</h2><ul>
<li><strong>字型数据</strong></li>
</ul>
<blockquote>
<p>​	CPU用16位寄存器存在出一个字。高八位存放高位字节，低八位存放低位字节。</p>
</blockquote>
<ul>
<li><strong>DS和[address]</strong></li>
</ul>
<p>​		<strong>物理地址&#x3D;段地址*16+偏移地址</strong>   （段地址<em>16  可以理解为段地址向左移四位），因此如果想要读写某个地址，首先应该知道其段地址和偏移地址，8086 CPU通过寄存器<strong>DS</strong>来获取段地址，[N]来表示偏移地址，*</em>[ … ]用来表示一个内存单元（）**。</p>
<p><strong>注意：8086CPU 不支持将数据直接送入段寄存器。</strong></p>
<ul>
<li>字型数据的传送</li>
</ul>
<p>​	eg:</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">mov bx,<span class="number">1000</span>H</span><br><span class="line">mov ds,bx</span><br><span class="line">mov ax,[<span class="number">0</span>]</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>栈</strong></li>
</ul>
<p>​	使用8086 CPU编程时，可以将一段内存当做栈来使用。提供入栈和出栈指令，即<strong>PUSH 和 POP</strong></p>
<blockquote>
<p><strong>任意时刻，SS:SP 指向栈顶元素</strong> </p>
<p>同时，可以通过设置 SS,SP 寄存器的数据来修改栈的容量，地址。</p>
</blockquote>
<p>​	push pop指令</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">push [0]         ;将 DS :0 处的字压入栈</span><br><span class="line">pop [2]          ;出栈，将数据送入 DS:0处</span><br></pre></td></tr></table></figure>









<h2 id="4-第一个程序"><a href="#4-第一个程序" class="headerlink" title="4.第一个程序"></a>4.第一个程序</h2><ul>
<li><strong>源程序（后缀 .asm）的编写</strong></li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">;1.asm</span><br><span class="line">assume cs:codesg ;将用作代码段的段codesg和段寄存器cs联系起来。</span><br><span class="line"></span><br><span class="line">codesg segment ;定义一个段，段的名称为“codesg”，这个段从此开始</span><br><span class="line">         ;codesg是一个标号，作为一个段的名称，最终被编译连接成一个段的段地址</span><br><span class="line"></span><br><span class="line">  mov ax, 0123H</span><br><span class="line">  mov bx, 0456H </span><br><span class="line">  add ax, bx</span><br><span class="line">  add ax, ax </span><br><span class="line">  </span><br><span class="line">  mov ax, 4c00H </span><br><span class="line">  int 21H ;这两条指令实现程序的返回 ,相当于	return 0</span><br><span class="line">  </span><br><span class="line">codesg ends ;名称为“codesg”的段到此结束</span><br><span class="line"></span><br><span class="line">end ;编译器在编译汇编程序的过程中，碰到了伪指令end，结束对源程序的编译</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h2 id="5-bx-和loop指令"><a href="#5-bx-和loop指令" class="headerlink" title="5.[bx]和loop指令"></a>5.[bx]和loop指令</h2><blockquote>
<p><strong>bx</strong></p>
<p>​	[bx]也表示一个内存单元，它的偏移地址在bx中</p>
<p><strong>loop</strong></p>
<p>​	通用寄存器CX存储循环次数，循环一次：（cx）&#x3D; （cx）- 1；</p>
</blockquote>
<p>案例程序：</p>
<ol>
<li>实现2^12</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">assume cs:code </span><br><span class="line"></span><br><span class="line">code segment </span><br><span class="line">  mov ax, 2</span><br><span class="line">  </span><br><span class="line">  mov cx, 11 ;循环次数</span><br><span class="line">s:  add ax, ax </span><br><span class="line">  loop s     ;在汇编语言中，标号代表一个地址，标号s实际上标识了一个地址，</span><br><span class="line">               ;这个地址处有一条指令：add ax，ax。</span><br><span class="line">               ;执行loop s时，首先要将（cx）减1，然后若（cx）不为0，则向前</span><br><span class="line">               ;转至s处执行add ax，ax。所以，可以利用cx来控制add ax，ax的执行次数。</span><br><span class="line">  </span><br><span class="line">  mov ax,4c00h </span><br><span class="line">  int 21h </span><br><span class="line">code ends </span><br><span class="line">end</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ol start="2">
<li>实现将内存<code>ffff:0 ~ ffff:b</code>单元中的数据复制到<code>0:200 ~ 0:20b</code>单元中。</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">assume cs:code </span><br><span class="line"></span><br><span class="line">code segment </span><br><span class="line">  mov ax, 0ffffh </span><br><span class="line">  mov ds, ax  	 ;（ds）= 0ffffh </span><br><span class="line">  mov ax, 0020h</span><br><span class="line">    mov es, ax     ;（es）= 0020h     0:200 等效于 0020:0</span><br><span class="line">    mov bx, 0       ;（bx）= 0，此时ds:bx指向ffff:0，es:bx指向0020:0</span><br><span class="line">    </span><br><span class="line">  mov cx，12  	    ;（cx）=12，循环12次</span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">s:  mov dl，[bx]   ;（d1）=（（ds）* 16+（bx）），将ffff:bx中的字节数据送入dl </span><br><span class="line">  mov es:[bx]，dl 	;（（es）*16+（bx））=（d1），将dl中的数据送入0020:bx </span><br><span class="line">  inc bx  		;（bx）=（bx）+1</span><br><span class="line">  loop s </span><br><span class="line">  </span><br><span class="line">  mov ax，4c00h </span><br><span class="line">  int 21h </span><br><span class="line">code ends </span><br><span class="line">end</span><br><span class="line"></span><br></pre></td></tr></table></figure>





<h2 id="6-包含多个段的程序"><a href="#6-包含多个段的程序" class="headerlink" title="6.包含多个段的程序"></a>6.包含多个段的程序</h2><ul>
<li><ol>
<li>在代码中使用数据</li>
</ol>
</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">;计算 8 个数据的和存到 ax 寄存器</span><br><span class="line">assume cs:code </span><br><span class="line"></span><br><span class="line">code segment </span><br><span class="line"></span><br><span class="line">  dw 0123h,0456h,0789h,0abch,0defh,0fedh,0cbah,0987h ;define word 定义8个字形数据</span><br><span class="line"></span><br><span class="line">  start:	mov bx, 0  ;标号start</span><br><span class="line">      mov ax, 0  </span><br><span class="line">      </span><br><span class="line">      mov cx, 8</span><br><span class="line">  s:		add ax, cs:[bx]</span><br><span class="line">      add bx, 2</span><br><span class="line">      loop s </span><br><span class="line">      </span><br><span class="line">      mov ax, 4c00h </span><br><span class="line">      int 21h </span><br><span class="line">code ends</span><br><span class="line">end start    ;end除了通知编译器程序结束外，还可以通知编译器程序的入口在什么地方</span><br><span class="line">       	 ;用end指令指明了程序的入口在标号start处，也就是说，“mov bx，0”是程序的第一条指令。</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ol start="2">
<li>在代码中使用栈</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">;利用栈，将程序中定义的数据逆序存放。</span><br><span class="line">assume cs:codesg </span><br><span class="line"></span><br><span class="line">codesg segment </span><br><span class="line">  dw 0123h，0456h，0789h，0abch，0defh，0fedh，0cbah，0987h ; 0-15单元</span><br><span class="line">  dw 0，0，0，0，0，0，0，0，0，0，0，0，0，0，0，0 ; 16-47单元作为栈使用</span><br><span class="line">      </span><br><span class="line">  start:	mov ax, cs </span><br><span class="line">      mov ss, ax </span><br><span class="line">      mov sp, 30h ;将设置栈顶ss:sp指向栈底cs:30。   30h = 48d</span><br><span class="line">      mov bx, 0</span><br><span class="line">      </span><br><span class="line">      mov cx, 8</span><br><span class="line">  s:		push cs:[bx]</span><br><span class="line">      add bx, 2</span><br><span class="line">      loop s    ;以上将代码段0~15单元中的8个字型数据依次入栈</span><br><span class="line">      </span><br><span class="line">      mov bx, 0</span><br><span class="line">      </span><br><span class="line">      mov cx, 8</span><br><span class="line">  s0:		pop cs:[bx]		</span><br><span class="line">      add bx，2</span><br><span class="line">      loop s0   ;以上依次出栈8个字型数据到代码段0~15单元中</span><br><span class="line">      </span><br><span class="line">      mov ax，4c00h </span><br><span class="line">      int 21h </span><br><span class="line">codesg ends </span><br><span class="line">end start  ;指明程序的入口在start处</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ol start="3">
<li>将数据、代码、栈放入不同的段</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">assume cs:code,ds:data,ss:stack </span><br><span class="line"></span><br><span class="line">data segment </span><br><span class="line">  dw 0123h,0456h,0789h,0abch,0defh,0fedh,0cbah,0987h ;0-15单元</span><br><span class="line">data ends </span><br><span class="line"></span><br><span class="line">stack segment </span><br><span class="line">  dw 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ;0-31单元</span><br><span class="line">stack ends </span><br><span class="line"></span><br><span class="line">code segment </span><br><span class="line">  start:	mov ax, stack;将名称为“stack”的段的段地址送入ax</span><br><span class="line">      mov ss, ax</span><br><span class="line">      mov sp, 20h  ;设置栈顶ss:sp指向stack:20。 20h = 32d</span><br><span class="line">      </span><br><span class="line">      mov ax, data ;将名称为“data”的段的段地址送入ax</span><br><span class="line">      mov ds, ax   ;ds指向data段</span><br><span class="line">      </span><br><span class="line">      mov bx, 0    ;ds:bx指向data段中的第一个单元</span><br><span class="line">      </span><br><span class="line">      mov cx, 8</span><br><span class="line">  s:	    push [bx]</span><br><span class="line">      add bx, 2</span><br><span class="line">      loop s       ;以上将data段中的0~15单元中的8个字型数据依次入栈</span><br><span class="line">      </span><br><span class="line">      mov bx, 0</span><br><span class="line">      </span><br><span class="line">      mov cx, 8</span><br><span class="line">  s0:		pop [bx]</span><br><span class="line">      add bx, 2</span><br><span class="line">      loop s0      ;以上依次出栈8个字型数据到data段的0~15单元中</span><br><span class="line">      </span><br><span class="line">      mov ax, 4c00h </span><br><span class="line">      int 21h </span><br><span class="line">code ends</span><br><span class="line">end start</span><br><span class="line">;“end start”说明了程序的入口，这个入口将被写入可执行文件的描述信息，</span><br><span class="line">;可执行文件中的程序被加载入内存后，CPU的CS:IP被设置指向这个入口，从而开始执行程序中的第一条指令</span><br><span class="line"></span><br></pre></td></tr></table></figure>







<h2 id="7-更灵活灵活的定位内存地址的方法"><a href="#7-更灵活灵活的定位内存地址的方法" class="headerlink" title="7.更灵活灵活的定位内存地址的方法"></a>7.更灵活灵活的定位内存地址的方法</h2><pre><code>* **and 和 or 指令**
</code></pre>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mov al , 01100011B</span><br><span class="line">and al , 00111011B    ;按位与，执行后：al=00100011B</span><br><span class="line"></span><br><span class="line">mov al, 01100011B</span><br><span class="line">or al, 00111011B    ;按位或，执行后：al=01111011B</span><br></pre></td></tr></table></figure>



<ul>
<li><strong>ASCII</strong></li>
</ul>
<ol>
<li>以字符的形式给出数据</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">assume cs:code,ds:data </span><br><span class="line"></span><br><span class="line">data segment </span><br><span class="line">  db &#x27;unIx&#x27;   ;相当于“db 75H，6EH，49H，58H”</span><br><span class="line">  db &#x27;foRK&#x27;</span><br><span class="line">data ends </span><br><span class="line"></span><br><span class="line">code segment</span><br><span class="line">start:  mov al, &#x27;a&#x27;  ;相当于“mov al, 61H”，“a”的ASCI码为61H；</span><br><span class="line">    mov b1, &#x27;b&#x27;</span><br><span class="line">    </span><br><span class="line">    mov ax, 4c00h </span><br><span class="line">    int 21h </span><br><span class="line">code ends</span><br><span class="line">end start</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>大小写转换</li>
</ol>
<p>​		<strong>小写字母的ASCII码值比大写字母的ASCII码值大20H</strong></p>
<p>​		<strong>大写字母ASCII码的第5位为0，小写字母的第5位为1(其他一致)</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">assume cs:codesg,ds:datasg </span><br><span class="line"></span><br><span class="line">datasg segment </span><br><span class="line">  db &#x27;BaSiC&#x27;</span><br><span class="line">  db &#x27;iNfOrMaTion&#x27;</span><br><span class="line">datasg end</span><br><span class="line"></span><br><span class="line">codesg segment </span><br><span class="line">  start:	mov ax, datasg </span><br><span class="line">      mov ds, ax	;设置ds 指向 datasg段</span><br><span class="line">    </span><br><span class="line">      mov bx, 0	;设置（bx）=0，ds:bx指向’BaSic’的第一个字母</span><br><span class="line">      </span><br><span class="line">      mov cx, 5     	 ;设置循环次数5，因为’Basic&#x27;有5个字母</span><br><span class="line">  s:		mov al, [bx]     ;将ASCII码从ds:bx所指向的单元中取出</span><br><span class="line">      and al, 11011111B;将al中的ASCII码的第5位置为0，变为大写字母</span><br><span class="line">      mov [bx], al	 ;将转变后的ASCII码写回原单元</span><br><span class="line">      inc bx		     ;（bx）加1，ds:bx指向下一个字母</span><br><span class="line">      loop s </span><br><span class="line">      </span><br><span class="line">      mov bx, 5	;设置（bx）=5，ds:bx指向，iNfOrMaTion&#x27;的第一个字母</span><br><span class="line">      </span><br><span class="line">      mov cx, 11	;设置循环次数11，因为‘iNfOrMaTion&#x27;有11个字母</span><br><span class="line">  s0:		mov al, [bx]</span><br><span class="line">      or al, 00100000B;将a1中的ASCII码的第5位置为1，变为小写字母</span><br><span class="line">      mov [bx], al </span><br><span class="line">      inc bx</span><br><span class="line">      loop s0</span><br><span class="line">      </span><br><span class="line">      mov ax, 4c00h </span><br><span class="line">      int 21h </span><br><span class="line">codesg ends</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ol start="3">
<li>SI 和 DI</li>
</ol>
<p>​	SI 和 DI 是8086 CPU中和 bx 功能相近的寄存器，但是 SI 和 DI 不能分成连个该8为寄存器使用。</p>
<blockquote>
<p>idata : 立即数，直接的数据</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mov ax, 1                 ;对于直接包含在机器指令中的数据（执行前在CPU的指令缓冲器中）</span><br><span class="line">add bx, 2000h             ;在汇编语言中称为：立即数（idata）</span><br><span class="line">or bx, 00010000b</span><br><span class="line">mov al, &#x27;a&#x27;</span><br></pre></td></tr></table></figure>

<ol start="4">
<li>处理数据的长度</li>
</ol>
<blockquote>
<p>8086CPU的指令，可以处理两种尺寸的数据，byte和word（字节和字）。</p>
<p>通过寄<strong>存器名</strong>指明要处理的数据的尺寸。<br>例如： mov <strong>al</strong>, ds:[0] 寄存器al指明了数据为1字节</p>
<p>在没有寄存器名存在的情况下，用操作符X ptr指明内存单元的长度，X在汇编指令中可以为word或byte。<br>例如：mov byte ptr ds:[0], 1 byte ptr 指明了指令访问的内存单元是一个字节单元</p>
<p>有些<strong>指令默认</strong>了访问的是字单元还是字节单元<br>例如，push [1000H]，push 指令只进行<strong>字</strong>操作。</p>
</blockquote>
<ol start="6">
<li><strong>div指令、dd、dup、mul指令</strong></li>
</ol>
<blockquote>
<p>div ：除法指令。</p>
<p>除数：有8位和16位两种，在一个寄存器或内存单元中。</p>
<p>被除数：默认放在AX或DX和AX中，<br>如果除数为8位，被除数则为16位，默认在AX中存放；<br>如果除数为16位，被除数则为32位，在DX和AX中存放，DX存放高16位，AX存放低16位。</p>
<p>结果：<br>如果除数为8位，则AL存储除法操作的商，AH存储除法操作的余数；<br>如果除数为16位，则AX存储除法操作的商，DX存储除法操作的余数。</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">;利用除法指令计算100001/100。</span><br><span class="line">;100001D = 186A1H</span><br><span class="line">mov dx, 1</span><br><span class="line">mov ax, 86A1H ;(dx)*10000H+(ax)=100001</span><br><span class="line">mov bx, 100</span><br><span class="line">div bx</span><br><span class="line"></span><br><span class="line">;利用除法指令计算1001/100</span><br><span class="line">mov ax, 1001</span><br><span class="line">mov bl, 100</span><br><span class="line">div b1</span><br></pre></td></tr></table></figure>



<blockquote>
<p>dd：</p>
<ul>
<li><p>db 和 dw 定义字节型数据和字型数据。</p>
</li>
<li><p>dd 是用来定义dword（double word，<strong>双字（四个字节）</strong>）型数据的伪指令</p>
</li>
</ul>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">dd 100001</span><br><span class="line">dw 100</span><br><span class="line">dw 0</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<blockquote>
<p>操作符：</p>
<p>与db、dw、dd等数据定义伪指令配合使用，用来进行数据的重复</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">db 3 dup (0)       ;定义了3个字节，它们的值都是0，相当于db 0，0，0。</span><br><span class="line">db 3 dup (0, 1, 2) ;定义了9个字节，它们是0、1、2、0、1、2、0、1、2，相当于db 0，1，2，0，1，2，0，1，2。</span><br><span class="line">db 3 dup (&#x27;abc&#x27;, &#x27;ABC&#x27;) ;定义了18个字节，它们是abcABCabcABCabcABCC，相当于db &#x27;abc&#x27;, &#x27;ABC&#x27; ,&#x27;abc&#x27; , &#x27;ABC, &#x27;abc&#x27;, &#x27;ABC&#x27;。</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<blockquote>
<p>mul 指令 ：</p>
<ul>
<li><p>mul是乘法指令，使用 mul 做乘法的时候：相乘的两个数：要么都是8位，要么都是16位。</p>
</li>
<li><p>乘数：</p>
<ul>
<li><ol>
<li>8 位： <code>AL</code>中和 <code>8位寄存器</code>或<code>内存字节单元</code>中；</li>
<li>16 位： <code>AX</code>中和 <code>16 位寄存器</code>或<code>内存字单元</code>中。</li>
</ol>
</li>
</ul>
</li>
<li><p>结果：</p>
<ul>
<li>8位：AX中；</li>
<li>16位：DX（高位）和 AX（低位）中</li>
</ul>
</li>
</ul>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">; 8 位</span><br><span class="line">;计算100*10</span><br><span class="line">;100和10小于255，可以做8位乘法</span><br><span class="line">mov al,100</span><br><span class="line">mov bl,10</span><br><span class="line">mul bl</span><br><span class="line"></span><br><span class="line">;结果： (ax)=1000（03E8H） </span><br><span class="line"></span><br><span class="line">; 16 位置</span><br><span class="line"></span><br><span class="line">;计算100*10000</span><br><span class="line">;100小于255，可10000大于255，所以必须做16位乘法，程序如下：</span><br><span class="line">mov ax,100</span><br><span class="line">mov bx,10000</span><br><span class="line">mul bx</span><br><span class="line"></span><br><span class="line">;结果： (ax)=4240H，(dx)=000FH     （F4240H=1000000）</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="8-数据处理的两个基本问题"><a href="#8-数据处理的两个基本问题" class="headerlink" title="8.数据处理的两个基本问题"></a>8.数据处理的两个基本问题</h2><h3 id="寻址方式"><a href="#寻址方式" class="headerlink" title="寻址方式"></a>寻址方式</h3><p><strong>只有四个寄存器可以通过 [ … ] 进行内存单元的寻址</strong> </p>
<ul>
<li>以下代码为错误代码</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mov ax,[cx]</span><br><span class="line">mov ax,[dx]</span><br><span class="line">mov ax,[ax]</span><br><span class="line">mov ax,[ds]</span><br></pre></td></tr></table></figure>

<ul>
<li>在 [ … ] 中四个寄存器可以单独出现，或只能以四种组合出现</li>
</ul>
<blockquote>
<ol>
<li>bx 和 si</li>
<li>bx 和 di</li>
<li>bp 和 si</li>
<li>bp 和 di</li>
</ol>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mov ax,[bx+si]</span><br><span class="line">mov ax,[bx+di]</span><br><span class="line">mov ax,[bp+si]</span><br><span class="line">mov ax,[bp+di]</span><br><span class="line">            ;也可以加上data</span><br><span class="line">mov ax,[bx+si+idata</span><br><span class="line">mov ax,[bx+di+1]</span><br><span class="line">mov ax,[bp+si+2</span><br><span class="line">mov ax,[bp+di+3</span><br></pre></td></tr></table></figure>

<h3 id="处理的数据的大小"><a href="#处理的数据的大小" class="headerlink" title="处理的数据的大小"></a>处理的数据的大小</h3><ul>
<li>一般是字或者字节</li>
</ul>
<blockquote>
<p>在没有寄存器名的情况下可以使用 <code>X ptr</code>指明内存单元的长度</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mov word ptr ds:[0],1</span><br><span class="line">inc word ptr []bx</span><br><span class="line">add word ptr [bx],2</span><br><span class="line"></span><br><span class="line">mov byte ptr ds:[0],1</span><br><span class="line">inc byte ptr []bx</span><br><span class="line">add byte ptr [bx],2</span><br></pre></td></tr></table></figure>





<h2 id="9-转移指令"><a href="#9-转移指令" class="headerlink" title="9.转移指令"></a>9.转移指令</h2><blockquote>
<p>可以修改IP，或同时修改CS和IP的指令统称为转移指令。概括地讲，转移指令就是可以控制CPU执行内存中某处代码的指令。</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">jmp ax        ; 段内转移</span><br><span class="line">jmp 1000:0     ; 段间转移</span><br></pre></td></tr></table></figure>

<p><strong>offset</strong></p>
<blockquote>
<p>操作符offset在编语言中是由编译器处理的符号，它的功能是<strong>取得标号的偏移地址</strong>。</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">                  ;将s处的一条指令复制到s0处</span><br><span class="line">assume cs:codesg</span><br><span class="line">codesg segment</span><br><span class="line"> s:   mov ax, bx                 ;（mov ax,bx 的机器码占两个字节）</span><br><span class="line">      mov si, offset s           ;获得标号s的偏移地址</span><br><span class="line">      mov di, offset s0          ;获得标号s0的偏移地址</span><br><span class="line">      </span><br><span class="line">      mov ax, cs:[si]</span><br><span class="line">      mov cs:[di], ax</span><br><span class="line"> s0:  nop                           ;（nop的机器码占一个字节）</span><br><span class="line">      nop</span><br><span class="line"> codesg ends</span><br><span class="line"> ends</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>jmp指令</strong></p>
<blockquote>
<p><strong>jmp 为无条件转移</strong>，转到标号处执行指令可以只修改IP，也可以同时修改CS和IP；</p>
<p>jmp 指令要给出两种信息：</p>
<ol>
<li><p>转移的目的地址</p>
</li>
<li><p>转移的距离（段间转移、段内短转移，段内近转移）</p>
<p>jmp short 标号 jmp near ptr 标号 jcxz 标号 loop 标号 等几种汇编指令，它们对 IP的修改是根据转移目的地址和转移起始地址之间的位移来进行的。在它们对应的机器码中不包含转移的目的地址，而包含的是到目的地址的位移距离。</p>
</li>
</ol>
</blockquote>
<ol>
<li><strong>jmp short 标号</strong></li>
</ol>
<ul>
<li>实现段内短转移修改范围（-128-127）</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">assume cs:code</span><br><span class="line">code segment</span><br><span class="line">start: mov ax,9527h</span><br><span class="line">jmp short s        ; 跳转到</span><br><span class="line">add ax,1111h</span><br><span class="line">s: mov ax,2222h      ; 这里</span><br><span class="line">mov ax 4c00h</span><br><span class="line">int 21h</span><br><span class="line">code ends</span><br><span class="line">end start</span><br></pre></td></tr></table></figure>



<ol start="2">
<li><strong>jmp near ptr</strong></li>
</ol>
<ul>
<li>实现段内近转移（修改范围大于（-128-127）但是小于-32768～32767，编译成功但链接失败），这是jmp short 实现不了的。</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">assume cs:code</span><br><span class="line">code segment</span><br><span class="line">start: mov ax,9527h</span><br><span class="line">jmp near ptr s        ; 跳转到</span><br><span class="line">db 128 dup(0)        ; 制造距离超过127</span><br><span class="line">s: mov ax,2222h      ; 这里</span><br><span class="line">mov ax 4c00h</span><br><span class="line">int 21h</span><br><span class="line">code ends</span><br><span class="line">end start</span><br></pre></td></tr></table></figure>



<ol start="3">
<li><strong>jmp far ptr</strong></li>
</ol>
<ul>
<li>实现段间转移（修改范围超过-32768～32767）</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">assume cs:code</span><br><span class="line">code segment</span><br><span class="line">start: mov ax,9527h</span><br><span class="line">jmp near ptr s        ; 跳转到</span><br><span class="line">db 32768 dup(0)        ; 制造距离超过32767</span><br><span class="line">s: mov ax,2222h      ; 这里</span><br><span class="line">mov ax 4c00h</span><br><span class="line">int 21h</span><br><span class="line">code ends</span><br><span class="line">end start</span><br></pre></td></tr></table></figure>





<ol start="3">
<li><strong>转移地址在寄存器或内存中的jmp指令</strong></li>
</ol>
<ul>
<li>jmp 寄存器，直接修改ip为寄存器的值</li>
<li>jmp word ptr 内存单元</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mov ax, 0123H</span><br><span class="line">mov ds:[0], ax</span><br><span class="line">jmp word ptr ds:[0]      ;执行后，(IP)=0123H</span><br></pre></td></tr></table></figure>



<p><strong>jxcz 标号</strong> </p>
<blockquote>
<p>如果(cx)&#x3D;0,转移到标号处执行；若(cx) !&#x3D; 0,继续向下执行</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">assume cs:code,ds:data,ss:stack</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">data segment</span><br><span class="line">  db 0,0,0</span><br><span class="line">data ends</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">stack segment</span><br><span class="line"> </span><br><span class="line">  dw 16 dup(0)</span><br><span class="line"> </span><br><span class="line">stack ends</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">code segment  </span><br><span class="line">start:  mov  ax,2000H</span><br><span class="line">    mov  ds,ax</span><br><span class="line">    mov  bx,0</span><br><span class="line"> </span><br><span class="line">s:    mov  ch,0</span><br><span class="line">    mov  cl,ds:[bx]</span><br><span class="line">    jcxz ok		;若(cx)==0，跳转至ok标号处执行</span><br><span class="line">    inc  bx		;继续循环，直至查找到第一个值为0的字节</span><br><span class="line">    jmp  short s</span><br><span class="line"> </span><br><span class="line">ok:    mov  dx,bx</span><br><span class="line">    mov  ax,4c00H</span><br><span class="line">    int  21H</span><br><span class="line">code ends</span><br><span class="line"> </span><br><span class="line">end start</span><br></pre></td></tr></table></figure>



<h2 id="10-call和ret指令"><a href="#10-call和ret指令" class="headerlink" title="10.call和ret指令"></a>10.call和ret指令</h2><ul>
<li><strong>ret和retf</strong></li>
</ul>
<blockquote>
<ul>
<li><strong>ret</strong>指令用栈中的数据，修改IP的内容，从而实现<strong>近转移</strong></li>
</ul>
<p>对于ret：相当于<strong>一次</strong> pop，把数据放在ip里</p>
<ul>
<li><strong>retf</strong>指令用栈中的数据，修改CS和IP的内容，从而实现<strong>远转移</strong>。</li>
</ul>
<p>对于ret：相当于<strong>两次</strong> pop，第一次数据放在ip里，第二次放cs里</p>
</blockquote>
<ul>
<li><strong>call指令</strong></li>
</ul>
<p>类似于jmp，<strong>但是</strong>多了一个功能：<strong>将当前的 IP 或 CS和IP 压入栈中</strong>，此外，call没有短转移</p>
<ul>
<li><strong>call和ret的连招</strong></li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">assume cs:code</span><br><span class="line">code segment</span><br><span class="line">start:  mov ax,1</span><br><span class="line">      mov cx,3</span><br><span class="line">       call s ;（1）CPU指令缓冲器存放call指令，IP指向下一条指令（mov bx, ax），执行call指令，IP入栈，jmp</span><br><span class="line">       </span><br><span class="line">      mov bx,ax;（4）IP重新指向这里  bx = 8</span><br><span class="line">      </span><br><span class="line"></span><br><span class="line">       mov ax,4c00h</span><br><span class="line">       int 21h</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">     s: add ax,ax</span><br><span class="line">       loop s;（2）循环3次ax = 8</span><br><span class="line">      ret;（3）return : pop IP</span><br><span class="line">code ends</span><br><span class="line">end start</span><br><span class="line"></span><br></pre></td></tr></table></figure>







<h2 id="10-错题"><a href="#10-错题" class="headerlink" title="10.错题"></a>10.错题</h2><blockquote>
<p>一、下列关于8086CPU的工作原理的描述错误的是__3__。<br> 1、 汇编程序员可以通过对各种寄存器中内容的修改实现对CPU的控制。<br> 2、 CPU在访问内存时，采用“段地址*16+偏移地址”的形式给出要访问的内存单元的物理地址。<br>3、 任意时刻，CS:IP指向的内容即是此刻CPU正在执行的指令。<br> 4、 传送指令能够更改所有通用寄存器的内容。</p>
<p>注解：</p>
<pre><code> 1、正确，见课本P13
 2、正确 
 3、错误。课本P24，8086机中，任意时刻，CPU将CS：IP指向的内容当作指令执行。此处的含义是**将要执行**，比如输入T,CPU读取CS:IP的内容，载入指令执行，而不是正在执行。
 4、通用寄存器是AX、BX、CX、DX，传送指令是mov，mov指令可以改变4个通用寄存器的内容
</code></pre>
</blockquote>
<blockquote>
<p>六、下列说法中正确的是：<strong>4</strong><br>1、 8086CPU采用“段地址*16+偏移地址&#x3D;物理地址”的寻址模式，所以内存是由一个一个的段组成，每一个段有一个段地址。<br>2、 物理地址为ffff0H的内存单元的偏移地址可能为ffffH。<br>3、 一个段的大小可以是8Byte。<br>4、 在一段没有任何跳转指令的程序中，超出64K的部分将不会被执行。</p>
<p>注解：</p>
<pre><code> 1、第一句、第三句正确，第二句错误。内存没有分段，段的划分来自于CPU.见课本P22
 2、错误，不可能，若偏移地址为FFFFH，则段地址为EFFF1H，是不对的
 3、段大小最小16B(Byte)
 4、正确，CPU执行指令取决于CS;IP，IP最大65535，超过64K的IP不识别，CPU也就无法执行。
</code></pre>
</blockquote>
<blockquote>
<p>五、16位结构的CPU 不一定具备的特性是：<strong>4</strong><br>1、 运算器一次最多可以处理16位的数据<br>2、 寄存器的最大宽度为16位<br>3、 寄存器和运算器之间的通路为16位<br>4、 地址总线为16根</p>
<p>注解：见课本P18<br>      16位CPU特征：运算器一次最多可以处理16位的数据<br>                             寄存器的最大宽度为16位<br>                             寄存器和运算器之间的通路为16位<br>       8086CPU有20根地址总线，可以传送20位地址。故选择4</p>
</blockquote>
<blockquote>
<p>5.若将以1000H为段地址的整个段空间当作栈使用，那么寄存器SP的初始值最合理的设置是_____。 (1)<br>1、  0000H<br>2、  0001H<br>3、  FFFFH<br>4、  FFFEH</p>
<p>注解：以1000H为段地址的整个段空间，偏移地址为0-FFFFH，当栈中只有1个字时，偏移地址是FFFEH，当栈为空时，SP&#x3D;SP+2&#x3D;FFFF+2&#x3D;0000，所以选择1 </p>
<p>下列指令的书写正确的是： 3 。<br>1、 push al<br>2、 mov cs:[0],ds:[10]<br>3、 pop si<br>4、 mov ds:[0],2</p>
<p>解析：答案1错误，压堆指令一次性操作一个字；答案2错误，内存空间之间不能互相传送；答案3正确；答案4错误，不能将立即数送入内存空间</p>
</blockquote>
]]></content>
      <categories>
        <category>软硬件技术</category>
      </categories>
      <tags>
        <tag>笔记</tag>
        <tag>汇编</tag>
      </tags>
  </entry>
  <entry>
    <title>时间胶囊</title>
    <url>/2024/01/26/%E6%97%B6%E9%97%B4%E8%83%B6%E5%9B%8A/</url>
    <content><![CDATA[<p>​	<img src="/../images/timeCapsule/1.jpg"></p>
<p>​	高中晚自习的时候，下暴雨时有感。</p>
<p>​	<img src="/../images/timeCapsule/2.jpg"></p>
<p>​	高中午休时胡思乱想有感。</p>
<p>​	<img src="/../images/timeCapsule/3.jpg"></p>
<p>​	高中数学课有感。</p>
<p>​	<img src="/../images/timeCapsule/4.jpg"></p>
<p>​	高中被室友呼噜声吵失眠有感。</p>
<p>​	<img src="/../images/timeCapsule/5.jpg"></p>
<p>​	看完凯鲁亚克的《在路上》后有感。</p>
]]></content>
      <categories>
        <category>生活</category>
      </categories>
      <tags>
        <tag>随手记</tag>
      </tags>
  </entry>
  <entry>
    <title>模拟电子技术基础</title>
    <url>/2024/02/01/%E6%A8%A1%E6%8B%9F%E7%94%B5%E5%AD%90%E6%8A%80%E6%9C%AF%E5%9F%BA%E7%A1%80/</url>
    <content><![CDATA[<h1 id="模拟电子技术基础"><a href="#模拟电子技术基础" class="headerlink" title="模拟电子技术基础"></a>模拟电子技术基础</h1><h2 id="1-半导体器件"><a href="#1-半导体器件" class="headerlink" title="1.半导体器件"></a>1.半导体器件</h2><ul>
<li><strong>本征半导体</strong>：纯净，具有晶体结构的半导体</li>
<li><strong>N型半导体</strong>：negative，掺入5价元素，多一个电子。</li>
<li><strong>P型半导体</strong>：positive，掺入3价元素，少一个电子。</li>
<li><strong>PN结</strong>：将P型半导体和N型半导体制作在同一硅片上，交界处形成PN结。</li>
<li><strong>空间电荷区</strong>：PN结交接处区域的复合。也称为耗尽层。</li>
</ul>
<h3 id="1-PN结"><a href="#1-PN结" class="headerlink" title="1.PN结"></a>1.PN结</h3><h4 id="1-PN结的伏安特性"><a href="#1-PN结的伏安特性" class="headerlink" title="1.PN结的伏安特性"></a>1.PN结的伏安特性</h4><ul>
<li>反向击穿</li>
</ul>
<blockquote>
<ol>
<li><strong>齐纳击穿</strong>：在高掺杂，耗尽层宽度窄的情况下，较低的反向电压即可击穿</li>
<li><strong>雪崩击穿</strong>：在低掺杂，耗尽层宽度宽的情况下，较高的反向电压可击穿</li>
</ol>
</blockquote>
<h4 id="2-PN结的电容效应"><a href="#2-PN结的电容效应" class="headerlink" title="2.PN结的电容效应"></a>2.PN结的电容效应</h4><ul>
<li>势垒电容</li>
</ul>
<p>​	当PN结的反向电压变化时，空间电荷区的宽度随之变化，耗尽层电荷变化，导致等效电容变化。</p>
<h3 id="2-二极管"><a href="#2-二极管" class="headerlink" title="2.二极管"></a>2.二极管</h3><h4 id="1-伏安特性"><a href="#1-伏安特性" class="headerlink" title="1.伏安特性"></a>1.伏安特性</h4><ul>
<li>同PN结的对比</li>
</ul>
<blockquote>
<ol>
<li>单向导电性</li>
<li>二极管存在半导体体电阻和引线电阻（同电压下正向电压更小）</li>
<li>表面漏电流（反向电流更大）。漏电流（当施加反向电压时，电流仍然流过器件）</li>
</ol>
</blockquote>
<h4 id="2-不同材料二极管的对比"><a href="#2-不同材料二极管的对比" class="headerlink" title="2.不同材料二极管的对比"></a>2.不同材料二极管的对比</h4><table>
<thead>
<tr>
<th>材料</th>
<th>开启电压</th>
<th>导通电压</th>
<th>反向饱和电流</th>
</tr>
</thead>
<tbody><tr>
<td>硅</td>
<td>0.5</td>
<td>0.6-0.8</td>
<td>&lt;0&#x2F;1</td>
</tr>
<tr>
<td>锗</td>
<td>0.1</td>
<td>0.1-0.3</td>
<td>几十</td>
</tr>
</tbody></table>
<h4 id="3-温度的影响"><a href="#3-温度的影响" class="headerlink" title="3.温度的影响"></a>3.温度的影响</h4><ul>
<li>温度越高：正向曲线左移，方向曲线下移</li>
</ul>
<h4 id="4-二极管的参数"><a href="#4-二极管的参数" class="headerlink" title="4.二极管的参数"></a>4.二极管的参数</h4><ul>
<li>If：最大整流电流</li>
<li>UR：最高反向工作电压</li>
<li>IR：反向电流</li>
<li>fM最高反向工作电流</li>
</ul>
<h3 id="3-稳压二极管"><a href="#3-稳压二极管" class="headerlink" title="3.稳压二极管"></a>3.稳压二极管</h3><ul>
<li>反向击穿时在一定功耗损耗范围内端电压几乎不变</li>
</ul>
<h4 id="1-伏安特性-1"><a href="#1-伏安特性-1" class="headerlink" title="1.伏安特性"></a>1.伏安特性</h4><ul>
<li>正向：类似于二极管</li>
<li>反向：电压不变，大到一定程度击穿</li>
</ul>
<h4 id="1-主要参数"><a href="#1-主要参数" class="headerlink" title="1.主要参数"></a>1.主要参数</h4><ul>
<li><p>稳定电压Uz</p>
</li>
<li><p>稳定电流Iz：小于时稳压效果变坏</p>
</li>
<li><p>额定功耗Pzm：最大稳定电流（Izm）与Uz的乘积</p>
</li>
<li><p>在额定功耗内，电流越大稳压效果越好</p>
</li>
</ul>
<p>需串联限流电阻防止烧坏</p>
<h3 id="4-发光二极管（Light-Emit-Diode）"><a href="#4-发光二极管（Light-Emit-Diode）" class="headerlink" title="4.发光二极管（Light Emit Diode）"></a>4.发光二极管（Light Emit Diode）</h3><table>
<thead>
<tr>
<th>颜色</th>
<th>开启电压</th>
</tr>
</thead>
<tbody><tr>
<td>红色</td>
<td>1.6-1.8v</td>
</tr>
<tr>
<td>绿色</td>
<td>2v</td>
</tr>
</tbody></table>
<h3 id="5-光电二极管（Optoelectronic-Diode）"><a href="#5-光电二极管（Optoelectronic-Diode）" class="headerlink" title="5.光电二极管（Optoelectronic Diode）"></a>5.光电二极管（Optoelectronic Diode）</h3><p><img src="/../images/analogElectronics/%E5%85%89%E7%94%B5%E4%BA%8C%E6%9E%81%E7%AE%A1%E7%AC%A6%E5%8F%B7.png" alt="符号"></p>
<ul>
<li>暗电流：反向电压下的产生的反向电流。</li>
<li>光电流：反压下受到光照而产生的电流。（照度越大光电流越大）</li>
</ul>
<h3 id="6-变容二极管（Varicap-Diode）"><a href="#6-变容二极管（Varicap-Diode）" class="headerlink" title="6.变容二极管（Varicap Diode）"></a>6.变容二极管（Varicap Diode）</h3><ul>
<li>变容二极管在反向偏置状态下工作，因此没有直流电流流过器件</li>
<li>反向偏置量控制耗尽区的厚度，因此控制变容二极管的结电容</li>
</ul>
<h3 id="7-隧道二极管（Tunnel-Diode）"><a href="#7-隧道二极管（Tunnel-Diode）" class="headerlink" title="7.隧道二极管（Tunnel Diode）"></a>7.隧道二极管（Tunnel Diode）</h3><ul>
<li>隧道二极管常用于<a href="https://zh.wikipedia.org/w/index.php?title=%E9%A0%BB%E7%8E%87%E8%BD%89%E6%8F%9B%E5%99%A8&action=edit&redlink=1">频率转换器</a>和侦测器上</li>
<li>负微分电阻的特性，其也可应用于<a href="https://zh.wikipedia.org/wiki/%E6%8C%AF%E7%9B%AA%E5%99%A8">振荡器</a>、<a href="https://zh.wikipedia.org/wiki/%E6%94%BE%E5%A4%A7%E5%99%A8">放大器</a>以及<a href="https://zh.wikipedia.org/w/index.php?title=%E9%96%8B%E9%97%9C%E9%9B%BB%E8%B7%AF&action=edit&redlink=1">开关电路</a>的迟滞。</li>
</ul>
<h3 id="8-肖特基二极管（Schottky-diode）"><a href="#8-肖特基二极管（Schottky-diode）" class="headerlink" title="8.肖特基二极管（Schottky diode）"></a>8.肖特基二极管（Schottky diode）</h3><ul>
<li>导通电压降较低、允许高速切换的二极管</li>
<li>肖特基二极管的电压降只有 0.15-0.45 伏特，因此可以提升系统的效率。</li>
<li>缺点是其反向偏置较低及反向漏电流偏大</li>
</ul>
<h2 id="2-晶体三极管"><a href="#2-晶体三极管" class="headerlink" title="2.晶体三极管"></a>2.晶体三极管</h2><p>​	晶体三极管又称为双极性晶体管 （BJT）</p>
<h3 id="1-电流放大作用"><a href="#1-电流放大作用" class="headerlink" title="1.电流放大作用"></a>1.电流放大作用</h3><ul>
<li><p>晶体管是放大电路的核心器件。</p>
</li>
<li><p>输入回路：基极-发射极回路。</p>
</li>
<li><p>输出回路：集电极-发射极回路。</p>
</li>
<li><p>共射放大电路： 发射极为输入回路和输出回路公共端</p>
</li>
<li><p>放大状态的外部条件： 发射结正向偏置，集电结反向偏置。</p>
</li>
</ul>
<h3 id="2-共射特性曲线"><a href="#2-共射特性曲线" class="headerlink" title="2.共射特性曲线"></a>2.共射特性曲线</h3><h4 id="1-输入特性曲线"><a href="#1-输入特性曲线" class="headerlink" title="1.输入特性曲线"></a>1.输入特性曲线</h4><h1 id="杂记"><a href="#杂记" class="headerlink" title="杂记"></a>杂记</h1><blockquote>
<p><strong>阻容耦合</strong>是指在电路中，电阻和电容之间存在相互影响的现象。通常情况下，我们认为电阻和电容是独立的元件，但在某些情况下，它们会相互影响，产生一些非预期的效应。</p>
<p>这种耦合效应可能会出现在许多不同类型的电路中，包括模拟电路和数字电路。在模拟电路中，电阻和电容的耦合可能会导致信号的失真或延迟。在数字电路中，阻容耦合可能会影响信号的稳定性和时序特性，导致逻辑错误或不稳定的操作。</p>
<p>因此，在设计和分析电路时，工程师需要考虑阻容耦合效应，以确保电路的性能和可靠性。这可能涉及到采取一些补偿措施或使用特殊的设计技术来减轻耦合效应带来的影响。</p>
<p>在电路中，电阻和电容是两种常见的元件。通常，我们认为它们是独立的，但在一些情况下，它们会相互影响，这就是阻容耦合。</p>
<p>想象一下，如果你有一根水管，水可以在其中自由流动。现在，如果你在水管的一段放置了一块海绵，海绵会吸收水并储存在其中。这时，水管的流动速度会受到海绵吸水的影响，海绵的湿度也会受到水管中水流的影响。在这个例子中，水管就像电路中的电阻，而海绵就像电路中的电容。阻容耦合就是描述电阻和电容之间这种相互影响的现象。</p>
<p>在实际电路中，阻容耦合可能会导致一些问题，比如信号传输变慢、电路的响应时间变化等。因此，在设计和分析电路时，需要考虑这种耦合效应，以确保电路的正常工作。</p>
</blockquote>
<blockquote>
<p><strong>静态工作点</strong>是指电子设备在没有输入信号时的工作状态。在放大器、晶体管等电子设备中，静态工作点通常表示设备的输出电压、电流以及输出特性的基准状态。</p>
<p>在放大器中，静态工作点通常由放大器的直流偏置电压和直流偏置电流来描述。这个状态对应于放大器没有输入信号时的输出电压和电流水平。静态工作点的选择对于设备的性能和稳定性至关重要。如果静态工作点设置不当，可能会导致设备在工作时出现失真、偏置漂移或不稳定的现象。</p>
<p>因此，在设计电路时，工程师会特别关注静态工作点，并根据设计需求和规格选择合适的偏置电压和电流，以确保设备在正常工作范围内运行。</p>
</blockquote>
<blockquote>
<p>直流偏置电压和直流偏置电流是用于控制电子设备（比如放大器、晶体管等）在静态工作点上的电压和电流值。</p>
<ol>
<li><strong>直流偏置电压（DC Bias Voltage）</strong>：<ul>
<li>在放大器或晶体管等电子设备中，直流偏置电压是用来设置设备工作在适当工作范围内的电压。它通常是在电路中通过电阻分压、电源电压等方式设置的一个恒定的电压值。</li>
<li>直流偏置电压决定了设备的工作点，即静态工作点，它对应于设备在没有输入信号时的输出状态。通过调整直流偏置电压，可以确保设备在合适的电压范围内工作，以避免过饱和或过截止等失真现象。</li>
</ul>
</li>
<li><strong>直流偏置电流（DC Bias Current）</strong>：<ul>
<li>直流偏置电流是指流经电子设备（如晶体管）的恒定电流。它通常是通过电路中设置的偏置电阻来控制的。</li>
<li>直流偏置电流也是设备静态工作点的重要参数之一。它决定了设备的工作状态，如放大器的基准电流值。正确选择直流偏置电流可以确保设备在合适的工作状态下工作，从而提高放大器的线性度和稳定性。</li>
</ul>
</li>
</ol>
<p>这两个参数一起用于确定电子设备的静态工作点，确保设备在正常工作范围内的输出特性。</p>
</blockquote>
<blockquote>
<p><strong>电压型叠加定理</strong>是电路理论中的基本原理之一，它指出在一个线性电路中，当有多个电压源作用于电路时，每个电压源单独作用时的电压可以分别计算，并且最后可以将它们的效应叠加在一起以获得电路中某一点的总电压。这个定理通常适用于直流电路和交流电路中的线性电路，对于非线性电路不适用。</p>
<h3 id="定理表述："><a href="#定理表述：" class="headerlink" title="定理表述："></a>定理表述：</h3><p>在一个电路中，假设有多个电压源<br>$$<br>V<br>total<br>​<br> &#x3D;V<br>1<br>​<br> +V<br>2<br>​<br> +V<br>3<br>​<br> +⋯+V<br>n<br>​<br>$$<br>它们分别作用于电路中的某一点，那么这一点的总电压等于各个电压源单独作用时的电压之和。</p>
<p>数学表达式如下：</p>
<p>�total&#x3D;�1+�2+�3+⋯+��<em>V</em>total&#x3D;<em>V</em>1+<em>V</em>2+<em>V</em>3+⋯+<em>V**n</em></p>
<p>其中，�total<em>V</em>total 表示电路中某一点的总电压，�1,�2,�3,…,��<em>V</em>1,<em>V</em>2,<em>V</em>3,…,<em>V**n</em> 分别表示各个电压源单独作用时的电压值。</p>
<h3 id="应用："><a href="#应用：" class="headerlink" title="应用："></a>应用：</h3><ol>
<li><strong>电路分析简化</strong>：通过叠加定理，可以将复杂的电路分解为简单的部分，分别分析各个部分，最后再将它们的效应叠加在一起，从而简化电路分析的过程。</li>
<li><strong>交流电路分析</strong>：在交流电路中，可以将直流分量和交流分量分别分析，然后再将它们的效应叠加在一起。</li>
<li><strong>电路设计</strong>：在设计电路时，可以通过叠加定理来计算各个电压源的影响，从而更好地设计电路的结构和参数。</li>
</ol>
<p>总的来说，电压型叠加定理是电路分析中非常重要的原理，它为工程师提供了一种简便而有效的方法来理解和分析复杂电路系统。</p>
</blockquote>
]]></content>
      <categories>
        <category>硬件技术</category>
      </categories>
      <tags>
        <tag>笔记</tag>
        <tag>模电</tag>
        <tag>电子元件</tag>
        <tag>模拟电路</tag>
      </tags>
  </entry>
  <entry>
    <title>民谣吉他即兴笔记</title>
    <url>/2024/10/06/%E6%B0%91%E8%B0%A3%E5%90%89%E4%BB%96%E5%8D%B3%E5%85%B4%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h1 id="节奏型武器库"><a href="#节奏型武器库" class="headerlink" title="节奏型武器库"></a>节奏型武器库</h1><iframe src="//player.bilibili.com/player.html?isOutside=true&aid=1852844021&bvid=BV1Mp421977n&cid=1496964053&p=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"></iframe>

<p>【【吉他就该这么玩】节奏太单调？学会它你能弹所有流行歌！扫弦&amp;分解节奏型汇总 伴奏武器库】 <a href="https://www.bilibili.com/video/BV1Mp421977n/?share_source=copy_web&vd_source=7a16ec5db4e5a23503ea8070ff118363">https://www.bilibili.com/video/BV1Mp421977n/?share_source=copy_web&amp;vd_source=7a16ec5db4e5a23503ea8070ff118363</a></p>
<h2 id="分解和弦"><a href="#分解和弦" class="headerlink" title="分解和弦"></a>分解和弦</h2><p>使用的和弦</p>
<p><img src="/../images/guitar/1.png" alt="和弦"></p>
<ul>
<li>节奏型</li>
</ul>
<h3 id=""><a href="#" class="headerlink" title=""></a></h3><ol>
<li><p><img src="/../images/guitar/2.png" alt="1"></p>
</li>
<li><p><img src="/../images/guitar/3.png" alt="2"></p>
</li>
<li><p><img src="/../images/guitar/4.png" alt="3"></p>
</li>
<li><p><img src="/../images/guitar/5.png" alt="4"></p>
</li>
<li><p><img src="/../images/guitar/6.png" alt="6"></p>
</li>
<li><p><img src="/../images/guitar/7.png" alt="6"></p>
</li>
<li><p><img src="/../images/guitar/8.png" alt="和弦"></p>
</li>
<li><p><img src="/../images/guitar/9.png" alt="和弦"></p>
</li>
<li><p><img src="/../images/guitar/10.png" alt="和弦"></p>
</li>
<li><p><img src="/../images/guitar/11.png" alt="和弦"></p>
</li>
<li><p><img src="/../images/guitar/11.png" alt="和弦"></p>
</li>
<li><p><img src="/../images/guitar/12.png" alt="和弦"></p>
</li>
<li><p><img src="/../images/guitar/13.png" alt="和弦"></p>
</li>
<li><p><img src="/../images/guitar/14.png" alt="和弦"></p>
</li>
<li><p><img src="/../images/guitar/15.png" alt="和弦"></p>
</li>
<li><p><img src="/../images/guitar/16.png" alt="和弦"></p>
</li>
<li><p><img src="/../images/guitar/17.png" alt="和弦"></p>
</li>
<li><p><img src="/../images/guitar/18.png" alt="和弦"></p>
</li>
<li><p><img src="/../images/guitar/19.png" alt="和弦"></p>
</li>
</ol>
<h2 id="扫弦节奏型"><a href="#扫弦节奏型" class="headerlink" title="扫弦节奏型"></a>扫弦节奏型</h2><p><img src="/../images/guitar/20.png" alt="和弦"></p>
<ol>
<li><p><img src="/../images/guitar/21.png" alt="扫弦"></p>
</li>
<li><p><img src="/../images/guitar/22.png" alt="扫弦"></p>
</li>
<li><p><img src="/../images/guitar/23.png" alt="扫弦"></p>
</li>
<li><p><img src="/../images/guitar/24.png" alt="扫弦"></p>
</li>
<li><p><img src="/../images/guitar/25.png" alt="扫弦"></p>
</li>
<li><p><img src="/../images/guitar/26.png" alt="扫弦"></p>
</li>
<li><p><img src="/../images/guitar/27.png" alt="扫弦"></p>
</li>
<li><p><img src="/../images/guitar/28.png" alt="扫弦"></p>
</li>
<li><p><img src="/../images/guitar/29.png" alt="扫弦"></p>
</li>
<li><p><img src="/../images/guitar/30.png" alt="扫弦"></p>
</li>
<li><p><img src="/../images/guitar/31.png" alt="扫弦"></p>
</li>
</ol>
]]></content>
      <categories>
        <category>生活</category>
        <category>音乐</category>
      </categories>
      <tags>
        <tag>吉他</tag>
        <tag>音乐</tag>
      </tags>
  </entry>
  <entry>
    <title>英语单词</title>
    <url>/2025/02/24/%E6%AF%8F%E6%97%A5%E8%8B%B1%E8%AF%AD%E5%8D%95%E8%AF%8D/</url>
    <content><![CDATA[<iframe  src="http://127.0.0.1/chatbot/rJkraIM1MfOvmOQM"  style="width: 100%; height: 100%; min-height: 700px"  frameborder="0"> </iframe>

<h1 id="第一天"><a href="#第一天" class="headerlink" title="第一天"></a>第一天</h1><blockquote>
<p>heterogeneous[ ˌhetərəˈdʒiːniəs ]</p>
<p>隐藏词义例句</p>
<ul>
<li><p>adj. 由很多种类组成的</p>
</li>
<li><p><a href="https://langeasy.com.cn/m/player?f=21012121470000022696&i=18">查看来源</a></p>
</li>
</ul>
<p>uniform[ ˈjuːnɪfɔːm ]</p>
<p>隐藏词义例句</p>
<ul>
<li><p>n. 制服</p>
</li>
<li><p>adj. 始终如一的，一律的</p>
</li>
<li><p><a href="https://langeasy.com.cn/m/player?f=19120916294422503001&i=35">查看来源</a></p>
</li>
</ul>
<p>kindred[ ˈkɪndrəd ]</p>
<p>隐藏词义例句</p>
<ul>
<li><p>n. 家人，亲属</p>
</li>
<li><p>adj. 相似的，类似的，同类的</p>
</li>
<li><p><a href="https://langeasy.com.cn/m/player?f=22012008002569103001&i=44">查看来源</a></p>
</li>
</ul>
<p>identical[ aɪˈdentɪkl ]</p>
<p>隐藏词义例句</p>
<ul>
<li><p>adj. 完全相同的，同样的</p>
</li>
<li><p><a href="https://langeasy.com.cn/m/player?f=18080409135338602001&i=68">查看来源</a></p>
</li>
</ul>
<p>homogeneous[ ˌhɒməˈdʒiːniəs ]</p>
<p>隐藏词义例句</p>
<ul>
<li><p>adj. 由同种族人组成的，同类组成的</p>
</li>
<li><p><a href="https://langeasy.com.cn/m/player?f=24082917084837603001&i=32">查看来源</a></p>
</li>
</ul>
<p>apt[ æpt ]</p>
<p>隐藏词义例句</p>
<ul>
<li><p>adj. 有…倾向的；恰当的；聪明的</p>
</li>
<li><p><a href="https://langeasy.com.cn/m/player?f=20150427153411100000044&i=00058">查看来源</a></p>
</li>
</ul>
<p>hurdle[ ˈhɜːdl ]</p>
<p>隐藏词义例句</p>
<ul>
<li><p>n. 障碍，难关；跳栏；跨栏赛跑</p>
</li>
<li><p>vt. vi. (奔跑中) 跳跃，跨越</p>
</li>
<li><p><a href="https://langeasy.com.cn/m/player?f=22072801081587303001&i=30">查看来源</a></p>
</li>
</ul>
<p>destined[ ˈdestɪnd ]</p>
<p>隐藏词义例句</p>
<ul>
<li><p>adj. 命中注定的；开往…的</p>
</li>
<li><p><a href="https://langeasy.com.cn/m/player?f=19080316260083103001&i=21">查看来源</a></p>
</li>
</ul>
</blockquote>
<h1 id="第二天"><a href="#第二天" class="headerlink" title="第二天"></a>第二天</h1><blockquote>
<p>spasm[ ˈspæzəm ]</p>
<p>隐藏词义例句</p>
<ul>
<li><p>n. 痉挛；(不愉快情感的) 迸发</p>
</li>
<li><p><a href="https://langeasy.com.cn/m/player?f=20130418213908100002223&i=00171">查看来源</a></p>
</li>
</ul>
</blockquote>
<h1 id="第三天"><a href="#第三天" class="headerlink" title="第三天"></a>第三天</h1><blockquote>
<p>traverse[ trəˈvɜːs ]</p>
<p>隐藏词义例句</p>
<ul>
<li><p>vt. 横越，横渡</p>
</li>
<li><p>n. (在陡坡上的)侧向移动</p>
</li>
<li><p><a href="https://langeasy.com.cn/m/player?f=22052222321432103001&i=23">查看来源</a></p>
</li>
</ul>
<p>hinterland[ ˈhɪntəlænd ]</p>
<p>隐藏词义例句</p>
<ul>
<li><p>n. 内陆，腹地，内地</p>
</li>
<li><p><a href="https://langeasy.com.cn/m/player?f=23051412203201703001&i=03">查看来源</a></p>
</li>
</ul>
<p>hunched[ hʌntʃt ]</p>
<p>隐藏词义例句</p>
<ul>
<li><p>adj. 耸肩弓身的</p>
</li>
<li><p><a href="https://langeasy.com.cn/m/player?f=24100114585466603001&i=38">查看来源</a></p>
</li>
</ul>
<p>hunch[ hʌntʃ ]</p>
<p>隐藏词义例句</p>
<ul>
<li><p>n. 预感，直觉</p>
</li>
<li><p>vi. vt. 弓身，弓背</p>
</li>
<li><p><a href="https://langeasy.com.cn/m/player?f=23070518595074903001&i=10">查看来源</a></p>
</li>
</ul>
</blockquote>
<h1 id="第四天"><a href="#第四天" class="headerlink" title="第四天"></a>第四天</h1><blockquote>
<p>proceed[ prəˈsiːd ]</p>
<p>隐藏词义例句</p>
<ul>
<li><p>vi. 继续做，接着做；行进，前往</p>
</li>
<li><p><a href="https://langeasy.com.cn/m/player?f=22011408263718903001&i=65">查看来源</a></p>
</li>
</ul>
<p>tug[ tʌɡ ]</p>
<p>隐藏词义例句</p>
<ul>
<li><p>vi. vt. 拉，拖，拽</p>
</li>
<li><p>n. 拖船；猛拽；一股强烈的感情</p>
</li>
<li><p><a href="https://langeasy.com.cn/m/player?f=24011714594508203001&i=09">查看来源</a></p>
</li>
</ul>
<p>casualty[ ˈkæʒuəlti ]</p>
<p>隐藏词义例句</p>
<ul>
<li><p>n. 伤亡人员；受害者；急诊室</p>
</li>
<li><p><a href="https://langeasy.com.cn/m/player?f=20070102443175503001&i=47">查看来源</a></p>
</li>
</ul>
<p>slip[ slɪp ]</p>
<p>隐藏词义例句</p>
<ul>
<li><p>vi. 滑倒；滑落；溜走；变差；陷入</p>
</li>
<li><p>vt. 悄悄塞；摆脱，松开</p>
</li>
<li><p>vi. vt. (迅速且容易地) 穿或脱</p>
</li>
<li><p>n. 差错；纸条；滑倒；衬裙</p>
</li>
<li><p><a href="https://langeasy.com.cn/m/player?f=21080112041279103001&i=65">查看来源</a></p>
</li>
</ul>
<p>glide[ ɡlaɪd ]</p>
<p>隐藏词义例句</p>
<ul>
<li><p>vi. 滑行，滑动；滑翔</p>
</li>
<li><p>n. 滑行，掠过，滑翔</p>
</li>
<li><p><a href="https://langeasy.com.cn/m/player?f=21120218405023803001&i=23">查看来源</a></p>
</li>
</ul>
</blockquote>
<h1 id="第五天"><a href="#第五天" class="headerlink" title="第五天"></a>第五天</h1><blockquote>
<p>limp[ lɪmp ]</p>
<p>隐藏词义例句</p>
<ul>
<li><p>adj. 疲软的，无力的</p>
</li>
<li><p>vi. 一瘸一拐地走；艰难地进展</p>
</li>
<li><p>n. 一瘸一拐，跛行</p>
</li>
<li><p><a href="https://langeasy.com.cn/m/player?f=21012121470000047479&i=13">查看来源</a></p>
</li>
</ul>
<p>revenue[ ˈrevənjuː ]</p>
<p>隐藏词义例句</p>
<ul>
<li><p>n. 收入；财政收入，税收</p>
</li>
<li><p><a href="https://langeasy.com.cn/m/player?f=22072316103609003001&i=03">查看来源</a></p>
</li>
</ul>
<p>acrobat[ ˈækrəbæt ]</p>
<p>隐藏词义例句</p>
<ul>
<li><p>n. 杂技演员</p>
</li>
<li><p><a href="https://langeasy.com.cn/m/player?f=24050521291829003001&i=10">查看来源</a></p>
</li>
</ul>
<p>practically[ ˈpræktɪkli ]</p>
<p>隐藏词义例句</p>
<ul>
<li><p>adv. 几乎，差不多；实际上，实践上</p>
</li>
<li><p><a href="https://langeasy.com.cn/m/player?f=20103114452267003001&i=48">查看来源</a></p>
</li>
</ul>
<p>commitment[ kəˈmɪtmənt ]</p>
<p>隐藏词义例句</p>
<ul>
<li><p>n. 承诺；献身，投入；义务</p>
</li>
<li><p><a href="https://langeasy.com.cn/m/player?f=22122523272872403001&i=46">查看来源</a></p>
</li>
</ul>
<p>committed[ kəˈmɪtɪd ]</p>
<p>隐藏词义例句</p>
<ul>
<li><p>adj. 尽心尽力的，坚定的</p>
</li>
<li><p><a href="https://langeasy.com.cn/m/player?f=23072719085319603001&i=07">查看来源</a></p>
</li>
</ul>
<p>bumpy[ ˈbʌmpi ]</p>
<p>隐藏词义例句</p>
<ul>
<li><p>adj. 崎岖不平的；颠簸的</p>
</li>
<li><p><a href="https://langeasy.com.cn/m/player?f=23102520444101403001&i=19">查看来源</a></p>
</li>
</ul>
<p>interpose[ ˌɪntəˈpəʊz ]</p>
<p>隐藏词义例句</p>
<ul>
<li><p>vt. vi. 插话，插嘴</p>
</li>
<li><p>vt. 使介入 (两者之间)</p>
</li>
<li><p><a href="https://langeasy.com.cn/m/player?f=20150210121123100001321&i=00026">查看来源</a></p>
</li>
</ul>
</blockquote>
<h1 id="第六天"><a href="#第六天" class="headerlink" title="第六天"></a>第六天</h1><blockquote>
<p>pledge[ pledʒ ]</p>
<p>隐藏词义例句</p>
<ul>
<li><p>n. 保证，诺言，承诺；抵押品</p>
</li>
<li><p>vt. (使) 保证，(使) 发誓；抵押</p>
</li>
<li><p><a href="https://langeasy.com.cn/m/player?f=20150618132059100000108&i=00311">查看来源</a></p>
</li>
</ul>
<p>gallop[ ˈɡæləp ]</p>
<p>隐藏词义例句</p>
<ul>
<li><p>vi. (马等) 飞奔，奔驰；(人) 飞跑</p>
</li>
<li><p>vi. vt. 骑马奔驰，使 (马) 飞奔</p>
</li>
<li><p>n. (马的) 飞奔；骑马奔驰；飞快</p>
</li>
<li><p><a href="https://langeasy.com.cn/m/player?f=20141015145424100000042&i=00024">查看来源</a></p>
</li>
</ul>
<p>plagiarism[ ˈpleɪdʒərɪzəm ]</p>
<p>隐藏词义例句</p>
<ul>
<li><p>n. 剽窃 (作品)</p>
</li>
<li><p><a href="https://langeasy.com.cn/m/player?f=24112310465843003001&i=16">查看来源</a></p>
</li>
</ul>
<p>foremost[ ˈfɔːməʊst ]</p>
<p>隐藏词义例句</p>
<ul>
<li><p>adj. 最重要的，最好的</p>
</li>
<li><p>adv. 最重要地，首要地</p>
</li>
<li><p><a href="https://langeasy.com.cn/m/player?f=24030920270271903001&i=52">查看来源</a></p>
</li>
</ul>
<p>magnify[ ˈmæɡnɪfaɪ ]</p>
<p>隐藏词义例句</p>
<ul>
<li><p>vt. 放大；使(问题等)加重；夸大</p>
</li>
<li><p><a href="https://langeasy.com.cn/m/player?f=23112119352863303002&i=58">查看来源</a></p>
</li>
</ul>
</blockquote>
<h1 id="第七天"><a href="#第七天" class="headerlink" title="第七天"></a>第七天</h1><blockquote>
<p>executive[ ɪɡˈzekjətɪv ]</p>
<p>隐藏词义例句</p>
<ul>
<li><p>n. 经理，主管；行政部门</p>
</li>
<li><p>adj. 执行的，行政的；高级的</p>
</li>
<li><p><a href="https://langeasy.com.cn/m/player?f=23040504143023203001&i=05">查看来源</a></p>
</li>
</ul>
<p>notify[ ˈnəʊtɪfaɪ ]</p>
<p>隐藏词义例句</p>
<ul>
<li><p>vt. (正式) 通知，告知</p>
</li>
<li><p><a href="https://langeasy.com.cn/m/player?f=18080409135338602001&i=01">查看来源</a></p>
</li>
</ul>
<p>handy[ ˈhændi ]</p>
<p>隐藏词义例句</p>
<ul>
<li><p>adj. 有用的，方便的；手边的；手巧的</p>
</li>
<li><p><a href="https://langeasy.com.cn/m/player?f=20103114452267003001&i=50">查看来源</a></p>
</li>
</ul>
<p>appreciable[ əˈpriːʃəbl ]</p>
<p>隐藏词义例句</p>
<ul>
<li><p>adj. 明显的，可觉察的，值得重视的</p>
</li>
<li><p><a href="https://langeasy.com.cn/m/player?f=21012121470000048657&i=07">查看来源</a></p>
</li>
</ul>
<p>effective[ ɪˈfektɪv ]</p>
<p>隐藏词义例句</p>
<ul>
<li>adj. 有效的；生效的；实际的</li>
</ul>
</blockquote>
<h1 id="第八天"><a href="#第八天" class="headerlink" title="第八天"></a>第八天</h1><blockquote>
<h4 id="2025年02月25日"><a href="#2025年02月25日" class="headerlink" title="2025年02月25日"></a>2025年02月25日</h4><p>aesthetic[ iːsˈθetɪk ]</p>
<p>隐藏词义例句</p>
<ul>
<li><p>adj. 美学的，审美的</p>
</li>
<li><p>n. 美学，审美学；美感</p>
</li>
<li><p><a href="https://langeasy.com.cn/m/player?f=19082723154077603001&i=05">查看来源</a></p>
</li>
</ul>
<p>mitigate[ ˈmɪtɪɡeɪt ]</p>
<p>隐藏词义例句</p>
<ul>
<li><p>vt. 减轻，缓和</p>
</li>
<li><p><a href="https://langeasy.com.cn/m/player?f=22022008190012003001&i=34">查看来源</a></p>
</li>
</ul>
<p>swift[ swɪft ]</p>
<p>隐藏词义例句</p>
<ul>
<li><p>adj. 快的，迅速的；快速移动的</p>
</li>
<li><p>n. 雨燕</p>
</li>
<li><p><a href="https://langeasy.com.cn/m/player?f=24013110233118403001&i=06">查看来源</a></p>
</li>
</ul>
<p>boast[ bəʊst ]</p>
<p>隐藏词义例句</p>
<ul>
<li><p>vi. vt. 自吹自擂，自夸</p>
</li>
<li><p>vt. 有 (值得自豪的事物)</p>
</li>
<li><p>n. 自吹自擂，自夸</p>
</li>
<li><p><a href="https://langeasy.com.cn/m/player?f=20161221173421100000170&i=00006">查看来源</a></p>
</li>
</ul>
<p>stout[ staʊt ]</p>
<p>隐藏词义例句</p>
<ul>
<li><p>adj. (人) 肥壮的；结实的；坚决的</p>
</li>
<li><p>n. (烈性) 黑啤酒</p>
</li>
<li><p><a href="https://langeasy.com.cn/m/player?f=20150908171313100000021&i=00031">查看来源</a></p>
</li>
</ul>
<p>soak[ səʊk ]</p>
<p>隐藏词义例句</p>
<ul>
<li><p>vt. vi. 浸泡，湿透</p>
</li>
<li><p>vi. 使湿透，把…浸湿；宰客</p>
</li>
<li><p>n. 浸泡，湿透；泡澡</p>
</li>
<li><p><a href="https://langeasy.com.cn/m/player?f=20033117031093803001&i=01">查看来源</a></p>
</li>
</ul>
<p>vessel[ ˈvesl ]</p>
<p>隐藏词义例句</p>
<ul>
<li><p>n. 舰，轮船；容器，器皿；血管</p>
</li>
<li><p><a href="https://langeasy.com.cn/m/player?f=23102520444101403001&i=03">查看来源</a></p>
</li>
</ul>
</blockquote>
<h1 id="第九天"><a href="#第九天" class="headerlink" title="第九天"></a>第九天</h1><blockquote>
<h4 id="2025年02月26日"><a href="#2025年02月26日" class="headerlink" title="2025年02月26日"></a>2025年02月26日</h4><p>clause[ klɔːz ]</p>
<p>隐藏词义例句</p>
<ul>
<li><p>n. 从句；(法律文书的) 条款</p>
</li>
<li><p><a href="https://langeasy.com.cn/m/player?f=20160907145445100000428&i=00005">查看来源</a></p>
</li>
</ul>
<p>perceive[ pəˈsiːv ]</p>
<p>隐藏词义例句</p>
<ul>
<li><p>vt. 看待，视为；注意到，察觉</p>
</li>
<li><p><a href="https://langeasy.com.cn/m/player?f=24080719594956303002&i=02">查看来源</a></p>
</li>
</ul>
<p>recreation[ ˌrekriˈeɪʃn ]</p>
<p>隐藏词义例句</p>
<ul>
<li><p>n. 休闲，娱乐；再现</p>
</li>
<li><p><a href="https://langeasy.com.cn/m/player?f=22110616012029403001&i=45">查看来源</a></p>
</li>
</ul>
<p>scrape[ skreɪp ]</p>
<p>隐藏词义例句</p>
<ul>
<li><p>vt. 刮掉</p>
</li>
<li><p>vt. vi. (使) 摩擦；艰难取得</p>
</li>
<li><p>n. 刮，刮擦声；擦伤，擦痕</p>
</li>
<li><p><a href="https://langeasy.com.cn/m/player?f=21012121470000010838&i=07">查看来源</a></p>
</li>
</ul>
</blockquote>
<h1 id="第十天"><a href="#第十天" class="headerlink" title="第十天"></a>第十天</h1><blockquote>
<h4 id="2025年02月27日"><a href="#2025年02月27日" class="headerlink" title="2025年02月27日"></a>2025年02月27日</h4><p>forgo[ fɔːˈɡəʊ ]</p>
<p>隐藏词义例句</p>
<ul>
<li><p>vt. 摒绝，放弃</p>
</li>
<li><p><a href="https://langeasy.com.cn/m/player?f=20131209135842100000048&i=00114">查看来源</a></p>
</li>
</ul>
<p>forth[ fɔːθ ]</p>
<p>隐藏词义例句</p>
<ul>
<li><p>adv. (从某时) 往前，(从某处) 向外</p>
</li>
<li><p><a href="https://langeasy.com.cn/m/player?f=20052519593113803001&i=45">查看来源</a></p>
</li>
</ul>
<p>extinguisher[ ɪkˈstɪŋɡwɪʃə(r) ]</p>
<p>隐藏词义例句</p>
<ul>
<li><p>n. 灭火器</p>
</li>
<li><p><a href="https://langeasy.com.cn/m/player?f=20010414244715203001&i=07">查看来源</a></p>
</li>
</ul>
<p>destruction[ dɪˈstrʌkʃn ]</p>
<p>隐藏词义例句</p>
<ul>
<li><p>n. 破坏，毁灭</p>
</li>
<li><p><a href="https://langeasy.com.cn/m/player?f=18080316370087602001&i=55">查看来源</a></p>
</li>
</ul>
<p>spasmodic[ spæzˈmɒdɪk ]</p>
<p>隐藏词义例句</p>
<ul>
<li><p>adj. 间歇的；由痉挛引起的</p>
</li>
<li><p><a href="https://langeasy.com.cn/m/player?f=22091411421199603001&i=59">查看来源</a></p>
</li>
</ul>
</blockquote>
<h1 id="第十一天"><a href="#第十一天" class="headerlink" title="第十一天"></a>第十一天</h1><blockquote>
<h4 id="2025年02月28日"><a href="#2025年02月28日" class="headerlink" title="2025年02月28日"></a>2025年02月28日</h4><p>arthritis[ ɑːˈθraɪtɪs ]</p>
<p>隐藏词义例句</p>
<ul>
<li><p>n. 关节炎</p>
</li>
<li><p><a href="https://langeasy.com.cn/m/player?f=21071212183237803001&i=01">查看来源</a></p>
</li>
</ul>
<p>detour[ ˈdiːtʊə(r) ]</p>
<p>隐藏词义例句</p>
<ul>
<li><p>n. 绕行的路；临时支路</p>
</li>
<li><p>vi. vt. (使) 绕行</p>
</li>
<li><p><a href="https://langeasy.com.cn/m/player?f=20140215194758100003462&i=00230">查看来源</a></p>
</li>
</ul>
<p>junction[ ˈdʒʌŋkʃn ]</p>
<p>隐藏词义例句</p>
<ul>
<li><p>n. 汇合点，交叉路口</p>
</li>
<li><p><a href="https://langeasy.com.cn/m/player?f=20170220164211100000007&i=00045">查看来源</a></p>
</li>
</ul>
<p>stripe[ straɪp ]</p>
<p>隐藏词义例句</p>
<ul>
<li><p>n. 条纹，线条；军阶条；种类</p>
</li>
<li><p><a href="https://langeasy.com.cn/m/player?f=20041520310770503001&i=03">查看来源</a></p>
</li>
</ul>
<p>intact[ ɪnˈtækt ]</p>
<p>隐藏词义例句</p>
<ul>
<li><p>adj. 完整无缺的；未受损伤的</p>
</li>
<li><p><a href="https://langeasy.com.cn/m/player?f=24071004124601303001&i=19">查看来源</a></p>
</li>
</ul>
<p>humanity[ hjuːˈmænəti ]</p>
<p>隐藏词义例句</p>
<ul>
<li><p>n. 人类；人性；人道；人文学科</p>
</li>
<li><p><a href="https://langeasy.com.cn/m/player?f=19080316260083003001&i=65">查看来源</a></p>
</li>
</ul>
<p>siesta[ siˈestə ]</p>
<p>隐藏词义例句</p>
<ul>
<li><p>n. (尤指在炎热国家的) 午休</p>
</li>
<li><p><a href="https://langeasy.com.cn/m/player?f=20131017164256100000018&i=00113">查看来源</a></p>
</li>
</ul>
<p>specification[ ˌspesɪfɪˈkeɪʃn ]</p>
<p>隐藏词义例句</p>
<ul>
<li>n. 规格，具体要求</li>
</ul>
</blockquote>
<h1 id="第十二天"><a href="#第十二天" class="headerlink" title="第十二天"></a>第十二天</h1><blockquote>
<p>affluence[ ˈæfluəns ]</p>
<p>隐藏词义例句</p>
<ul>
<li><p>n. 富裕，富足</p>
</li>
<li><p><a href="https://langeasy.com.cn/m/player?f=20150210110857100001176&i=00025">查看来源</a></p>
</li>
</ul>
<p>profusion[ prəˈfjuːʒn ]</p>
<p>隐藏词义例句</p>
<ul>
<li><p>n. 大量，众多</p>
</li>
<li><p><a href="https://langeasy.com.cn/m/player?f=20130801102744100000380&i=00000">查看来源</a></p>
</li>
</ul>
<p>diffusion[ dɪˈfjuːʒn ]</p>
<p>隐藏词义例句</p>
<ul>
<li><p>n. 传播，扩散</p>
</li>
<li><p><a href="https://langeasy.com.cn/m/player?f=23072712171915003001&i=18">查看来源</a></p>
</li>
</ul>
<p>abundance[ əˈbʌndəns ]</p>
<p>隐藏词义例句</p>
<ul>
<li><p>n. 大量，充足</p>
</li>
<li><p><a href="https://langeasy.com.cn/m/player?f=20150120183943100003757&i=00000">查看来源</a></p>
</li>
</ul>
<p>diploma[ dɪˈpləʊmə ]</p>
<p>隐藏词义例句</p>
<ul>
<li><p>n. 毕业文凭，学位证书；文凭课程</p>
</li>
<li><p><a href="https://langeasy.com.cn/m/player?f=23052410421387203001&i=41">查看来源</a></p>
</li>
</ul>
</blockquote>
<h1 id="第十三天"><a href="#第十三天" class="headerlink" title="第十三天"></a>第十三天</h1><blockquote>
<h4 id="2025年03月02日"><a href="#2025年03月02日" class="headerlink" title="2025年03月02日"></a>2025年03月02日</h4><p>dweller[ ˈdwelə(r) ]</p>
<p>隐藏词义例句</p>
<ul>
<li><p>n. 居民；居住者</p>
</li>
<li><p><a href="https://langeasy.com.cn/m/player?f=20061219023055303001&i=02">查看来源</a></p>
</li>
</ul>
<p>cellular[ ˈseljələ(r) ]</p>
<p>隐藏词义例句</p>
<ul>
<li><p>adj. 细胞的；(无线电话) 蜂窝状的</p>
</li>
<li><p><a href="https://langeasy.com.cn/m/player?f=25021620201190703002&i=14">查看来源</a></p>
</li>
</ul>
<p>aquarium[ əˈkweəriəm ]</p>
<p>隐藏词义例句</p>
<ul>
<li><p>n. 鱼缸，水族箱；水族馆</p>
</li>
<li><p><a href="https://langeasy.com.cn/m/player?f=20131205162942100001810&i=00279">查看来源</a></p>
</li>
</ul>
<p>deviate[ ˈdiːvieɪt ]</p>
<p>隐藏词义例句</p>
<ul>
<li><p>vi. 背离，偏离</p>
</li>
<li><p><a href="https://langeasy.com.cn/m/player?f=23060417134376603001&i=13">查看来源</a></p>
</li>
</ul>
<p>calibre[ ˈkælɪbə(r) ]</p>
<p>隐藏词义例句</p>
<ul>
<li><p>n. 才干，能力；(枪、炮的) 口径</p>
</li>
<li><p><a href="https://langeasy.com.cn/m/player?f=20221020140614100000373&i=00075">查看来源</a></p>
</li>
</ul>
<p>proficient[ prəˈfɪʃnt ]</p>
<p>隐藏词义例句</p>
<ul>
<li><p>adj. 熟练的，精通的</p>
</li>
<li><p><a href="https://langeasy.com.cn/m/player?f=23092619360863503001&i=73">查看来源</a></p>
</li>
</ul>
<p>subcontract[ ˌsʌbkənˈtrækt ]</p>
<p>隐藏词义例句</p>
<ul>
<li><p>vt. 分包，转包</p>
</li>
<li><p>n. 分包合同，转包合同</p>
</li>
<li><p><a href="https://langeasy.com.cn/m/player?f=18081821484510003001&i=21">查看来源</a></p>
</li>
</ul>
<p>dividend[ ˈdɪvɪdend ]</p>
<p>隐藏词义例句</p>
<ul>
<li><p>n. 红利，股息；被除数</p>
</li>
<li><p><a href="https://langeasy.com.cn/m/player?f=23122622024413303001&i=14">查看来源</a></p>
</li>
</ul>
<p>wedge[ wedʒ ]</p>
<p>隐藏词义例句</p>
<ul>
<li><p>n. 楔子，楔形物</p>
</li>
<li><p>vt. 将…挤入；把…楔牢</p>
</li>
<li><p><a href="https://langeasy.com.cn/m/player?f=23122622030996803001&i=38">查看来源</a></p>
</li>
</ul>
<p>embedment[ ɪmˈbedmənt ]</p>
<p>隐藏词义例句</p>
<ul>
<li><p>n. 嵌入</p>
</li>
<li><p><a href="https://langeasy.com.cn/m/player?f=21012121470000062789&i=07">查看来源</a></p>
</li>
</ul>
</blockquote>
<h1 id="第十四天"><a href="#第十四天" class="headerlink" title="第十四天"></a>第十四天</h1><blockquote>
<h4 id="2025年03月03日"><a href="#2025年03月03日" class="headerlink" title="2025年03月03日"></a>2025年03月03日</h4><p>intrinsically[ ɪnˈtrɪnzɪkli ]</p>
<p>隐藏词义例句</p>
<ul>
<li><p>adv. 本质上，内在地</p>
</li>
<li><p><a href="https://langeasy.com.cn/m/player?f=24100317053199403001&i=45">查看来源</a></p>
</li>
</ul>
<p>intrinsic[ ɪnˈtrɪnzɪk ]</p>
<p>隐藏词义例句</p>
<ul>
<li><p>adj. 本质的，内在的，固有的</p>
</li>
<li><p><a href="https://langeasy.com.cn/m/player?f=20041214114308703001&i=04">查看来源</a></p>
</li>
</ul>
<p>headquarters[ ˌhedˈkwɔːtəz ]</p>
<p>隐藏词义例句</p>
<ul>
<li><p>n. 总部，总公司，指挥部</p>
</li>
<li><p><a href="https://langeasy.com.cn/m/player?f=18092622240702903001&i=46">查看来源</a></p>
</li>
</ul>
<p>declarative[ dɪˈklærətɪv ]</p>
<p>隐藏词义例句</p>
<ul>
<li><p>adj. (句子) 陈述的</p>
</li>
<li><p><a href="https://langeasy.com.cn/m/player?f=24092500475934603001&i=04">查看来源</a></p>
</li>
</ul>
</blockquote>
<h1 id="第十五天"><a href="#第十五天" class="headerlink" title="第十五天"></a>第十五天</h1><blockquote>
<h4 id="2025年03月04日"><a href="#2025年03月04日" class="headerlink" title="2025年03月04日"></a>2025年03月04日</h4><p>lateralize[ ˈlætərəˌlaɪz ]</p>
<p>隐藏词义例句</p>
<ul>
<li>vt. 把…移到一侧</li>
</ul>
<p>lateral[ ˈlætərəl ]</p>
<p>隐藏词义例句</p>
<ul>
<li><p>adj. 侧面的；横向的；侧向的</p>
</li>
<li><p><a href="https://langeasy.com.cn/m/player?f=22103008394583203001&i=16">查看来源</a></p>
</li>
</ul>
<p>shift[ ʃɪft ]</p>
<p>隐藏词义例句</p>
<ul>
<li><p>vi. vt. 转移，挪动；换 (挡)</p>
</li>
<li><p>vi. (情况等) 改变</p>
</li>
<li><p>vt. 改变观点 (态度等)；推卸 (责任)</p>
</li>
<li><p>n. 改变，转变；轮班 (职工)</p>
</li>
<li><p><a href="https://langeasy.com.cn/m/player?f=23051412203240903001&i=01">查看来源</a></p>
</li>
</ul>
<p>turnover[ ˈtɜːnəʊvə(r) ]</p>
<p>隐藏词义例句</p>
<ul>
<li><p>n. 营业额；人员流动率；三角馅饼</p>
</li>
<li><p><a href="https://langeasy.com.cn/m/player?f=22101117180422503001&i=80">查看来源</a></p>
</li>
</ul>
<p>indifferent[ ɪnˈdɪfrənt ]</p>
<p>隐藏词义例句</p>
<ul>
<li><p>adj. 不感兴趣的，冷淡的；一般的</p>
</li>
<li><p><a href="https://langeasy.com.cn/m/player?f=20070319274215403001&i=22">查看来源</a></p>
</li>
</ul>
<p>extrinsic[ eksˈtrɪnzɪk ]</p>
<p>隐藏词义例句</p>
<ul>
<li><p>adj. 非固有的，外在的，外来的</p>
</li>
<li><p><a href="https://langeasy.com.cn/m/player?f=20030111301780303001&i=24">查看来源</a></p>
</li>
</ul>
<p>creeping[ ˈkriːpɪŋ ]</p>
<p>隐藏词义例句</p>
<ul>
<li><p>adj. 不知不觉发生的，缓慢行进的</p>
</li>
<li><p><a href="https://langeasy.com.cn/m/player?f=20160918102236100000120&i=00036">查看来源</a></p>
</li>
</ul>
</blockquote>
<h1 id="第十六天"><a href="#第十六天" class="headerlink" title="第十六天"></a>第十六天</h1><blockquote>
<h4 id="2025年03月05日"><a href="#2025年03月05日" class="headerlink" title="2025年03月05日"></a>2025年03月05日</h4><p>resume[ rɪˈzjuːm ]</p>
<p>隐藏词义例句</p>
<ul>
<li><p>vt. vi. 继续，重新开始</p>
</li>
<li><p>vt. 恢复 (职位)，回到 (座位)</p>
</li>
<li><p>n. 简历，履历</p>
</li>
<li><p>n. 摘要，概述</p>
</li>
<li><p><a href="https://langeasy.com.cn/m/player?f=22012101515061003001&i=87">查看来源</a></p>
</li>
</ul>
<p>exceptional[ ɪkˈsepʃənl ]</p>
<p>隐藏词义例句</p>
<ul>
<li><p>adj. 杰出的，非凡的；罕见的，异常的</p>
</li>
<li><p><a href="https://langeasy.com.cn/m/player?f=21120218405042003001&i=48">查看来源</a></p>
</li>
</ul>
<p>shorthand[ ˈʃɔːthænd ]</p>
<p>隐藏词义例句</p>
<ul>
<li><p>n. 速记法；简略的表达方式</p>
</li>
<li><p><a href="https://langeasy.com.cn/m/player?f=22010612590339403001&i=06">查看来源</a></p>
</li>
</ul>
<p>sanitary[ ˈsænətri ]</p>
<p>隐藏词义例句</p>
<ul>
<li><p>adj. 有关卫生的；干净的</p>
</li>
<li><p><a href="https://langeasy.com.cn/m/player?f=20130928220319100002281&i=00011">查看来源</a></p>
</li>
</ul>
<p>tribute[ ˈtrɪbjuːt ]</p>
<p>隐藏词义例句</p>
<ul>
<li><p>n. 致敬；是…的充分体现；贡品</p>
</li>
<li><p><a href="https://langeasy.com.cn/m/player?f=20221021155534100000037&i=00033">查看来源</a></p>
</li>
</ul>
</blockquote>
<h1 id="第十七天"><a href="#第十七天" class="headerlink" title="第十七天"></a>第十七天</h1><blockquote>
<h4 id="2025年03月06日"><a href="#2025年03月06日" class="headerlink" title="2025年03月06日"></a>2025年03月06日</h4><p>shrub[ ʃrʌb ]</p>
<p>隐藏词义例句</p>
<ul>
<li><p>n. 灌木</p>
</li>
<li><p><a href="https://langeasy.com.cn/m/player?f=25012523140308803001&i=00">查看来源</a></p>
</li>
</ul>
<p>probing[ ˈprəʊbɪŋ ]</p>
<p>隐藏词义例句</p>
<ul>
<li><p>adj. 寻根究底的；仔细观察的</p>
</li>
<li><p><a href="https://langeasy.com.cn/m/player?f=18072322254851002001&i=84">查看来源</a></p>
</li>
</ul>
<p>aerobics[ eəˈrəʊbɪks ]</p>
<p>隐藏词义例句</p>
<ul>
<li><p>n. 有氧运动</p>
</li>
<li><p><a href="https://langeasy.com.cn/m/player?f=20141117125644100000031&i=00019">查看来源</a></p>
</li>
</ul>
<p>barge[ bɑːdʒ ]</p>
<p>隐藏词义例句</p>
<ul>
<li><p>n. 驳船</p>
</li>
<li><p>vi. vt. 乱撞，乱闯</p>
</li>
<li><p><a href="https://langeasy.com.cn/m/player?f=21120218405047903001&i=21">查看来源</a></p>
</li>
</ul>
<p>goggles[ ˈɡɒɡlz ]</p>
<p>隐藏词义例句</p>
<ul>
<li><p>n. 护目镜；风镜；游泳镜</p>
</li>
<li><p><a href="https://langeasy.com.cn/m/player?f=20130809170244100003171&i=00132">查看来源</a></p>
</li>
</ul>
</blockquote>
<h1 id="第十八天"><a href="#第十八天" class="headerlink" title="第十八天"></a>第十八天</h1><blockquote>
<h4 id="2025年03月07日"><a href="#2025年03月07日" class="headerlink" title="2025年03月07日"></a>2025年03月07日</h4><p>cork[ kɔːk ]</p>
<p>隐藏词义例句</p>
<ul>
<li><p>n. 软木塞；软木</p>
</li>
<li><p>vt. 用软木塞塞住</p>
</li>
<li><p><a href="https://langeasy.com.cn/m/player?f=23091916245587703001&i=17">查看来源</a></p>
</li>
</ul>
<p>exacerbate[ ɪɡˈzæsəbeɪt ]</p>
<p>隐藏词义例句</p>
<ul>
<li><p>vt. 使恶化；使加剧</p>
</li>
<li><p><a href="https://langeasy.com.cn/m/player?f=21100312244448803001&i=16">查看来源</a></p>
</li>
</ul>
<p>bronchitis[ brɒŋˈkaɪtɪs ]</p>
<p>隐藏词义例句</p>
<ul>
<li><p>n. 支气管炎</p>
</li>
<li><p><a href="https://langeasy.com.cn/m/player?f=23041012492616403001&i=04">查看来源</a></p>
</li>
</ul>
<p>orientate[ ˈɔːriənteɪt ]</p>
<p>隐藏词义例句</p>
<ul>
<li><p>vt. 以…为重点；确定方位；使适应</p>
</li>
<li><p><a href="https://langeasy.com.cn/m/player?f=25022310234598603001&i=86">查看来源</a></p>
</li>
</ul>
</blockquote>
<h1 id="第十八天-1"><a href="#第十八天-1" class="headerlink" title="第十八天"></a>第十八天</h1><blockquote>
<h4 id="2025年03月08日"><a href="#2025年03月08日" class="headerlink" title="2025年03月08日"></a>2025年03月08日</h4><p>conditioner[ kənˈdɪʃənə(r) ]</p>
<p>隐藏词义例句</p>
<ul>
<li><p>n. 护发素；(衣物) 柔顺剂</p>
</li>
<li><p><a href="https://langeasy.com.cn/m/player?f=20140205010103100000004&i=00187">查看来源</a></p>
</li>
</ul>
<p>ensue[ ɪnˈsjuː ]</p>
<p>隐藏词义例句</p>
<ul>
<li><p>vi. 接着发生；随之产生</p>
</li>
<li><p><a href="https://langeasy.com.cn/m/player?f=23112216580318603001&i=12">查看来源</a></p>
</li>
</ul>
<p>congregate[ ˈkɒŋɡrɪɡeɪt ]</p>
<p>隐藏词义例句</p>
<ul>
<li><p>vi. 聚集，集合</p>
</li>
<li><p><a href="https://langeasy.com.cn/m/player?f=24103012471987303001&i=05">查看来源</a></p>
</li>
</ul>
<p>crater[ ˈkreɪtə(r) ]</p>
<p>隐藏词义例句</p>
<ul>
<li><p>n. 火山口；陨石坑，弹坑</p>
</li>
<li><p><a href="https://langeasy.com.cn/m/player?f=20160310154108100000039&i=00028">查看来源</a></p>
</li>
</ul>
<p>offspring[ ˈɒfsprɪŋ ]</p>
<p>隐藏词义例句</p>
<ul>
<li><p>n. 子女，后代；幼崽，幼苗</p>
</li>
<li><p><a href="https://langeasy.com.cn/m/player?f=20052720270587503001&i=08">查看来源</a></p>
</li>
</ul>
<p>larva[ ˈlɑːvə ]</p>
<p>隐藏词义例句</p>
<ul>
<li><p>n. 幼虫；幼体</p>
</li>
<li><p><a href="https://langeasy.com.cn/m/player?f=23082711494544603001&i=38">查看来源</a></p>
</li>
</ul>
</blockquote>
<h1 id="第十九天"><a href="#第十九天" class="headerlink" title="第十九天"></a>第十九天</h1><blockquote>
<h4 id="2025年03月09日"><a href="#2025年03月09日" class="headerlink" title="2025年03月09日"></a>2025年03月09日</h4><p>earthwork[ ˈɜːθwɜːk ]</p>
<p>隐藏词义例句</p>
<ul>
<li><p>n. (古代的) 土木防御工事</p>
</li>
<li><p><a href="https://langeasy.com.cn/m/player?f=22070918165807803001&i=01">查看来源</a></p>
</li>
</ul>
<p>tropospheric[ trɒpəʊ’sferɪk ]</p>
<p>隐藏词义例句</p>
<ul>
<li><p>adj. 对流层的</p>
</li>
<li><p><a href="https://langeasy.com.cn/m/player?f=23043009500792903001&i=02">查看来源</a></p>
</li>
</ul>
<p>rivalry[ ˈraɪvlri ]</p>
<p>隐藏词义例句</p>
<ul>
<li><p>n. 竞争，敌对</p>
</li>
<li><p><a href="https://langeasy.com.cn/m/player?f=23110116493097903001&i=07">查看来源</a></p>
</li>
</ul>
<p>rival[ ˈraɪvl ]</p>
<p>隐藏词义例句</p>
<ul>
<li><p>n. 竞争者，对手</p>
</li>
<li><p>vt. 能与…媲美</p>
</li>
<li><p><a href="https://langeasy.com.cn/m/player?f=24012022245341503001&i=32">查看来源</a></p>
</li>
</ul>
<p>duplicate[ ˈdjuːplɪkeɪt ]</p>
<p>隐藏词义例句</p>
<ul>
<li><p>vt. 复制，复印；重复，重做</p>
</li>
<li><p>adj. 完全一样的，副本的</p>
</li>
<li><p>n. 复制品，副本</p>
</li>
<li><p><a href="https://langeasy.com.cn/m/player?f=22010414101549303001&i=00">查看来源</a></p>
</li>
</ul>
<p>recipient[ rɪˈsɪpiənt ]</p>
<p>隐藏词义例句</p>
<ul>
<li><p>n. 接受者，领受人</p>
</li>
<li><p><a href="https://langeasy.com.cn/m/player?f=23092719510690503001&i=06">查看来源</a></p>
</li>
</ul>
<p>debris[ ˈdebriː ]</p>
<p>隐藏词义例句</p>
<ul>
<li><p>n. 残骸；碎片；残屑；垃圾</p>
</li>
<li><p><a href="https://langeasy.com.cn/m/player?f=22112801390117703001&i=07">查看来源</a></p>
</li>
</ul>
<p>scrap[ skræp ]</p>
<p>隐藏词义例句</p>
<ul>
<li><p>n. 碎片；一丁点；剩饭；废品</p>
</li>
<li><p>vt. 废弃，取消，抛弃</p>
</li>
<li><p>vi. 打架</p>
</li>
<li><p><a href="https://langeasy.com.cn/m/player?f=24013110233080303001&i=31">查看来源</a></p>
</li>
</ul>
<p>dwelling[ ˈdwelɪŋ ]</p>
<p>隐藏词义例句</p>
<ul>
<li><p>n. 住宅，住所</p>
</li>
<li><p><a href="https://langeasy.com.cn/m/player?f=20140630151121100000006&i=00012">查看来源</a></p>
</li>
</ul>
</blockquote>
<h1 id="第二十天"><a href="#第二十天" class="headerlink" title="第二十天"></a>第二十天</h1><blockquote>
<h4 id="2025年03月10日"><a href="#2025年03月10日" class="headerlink" title="2025年03月10日"></a>2025年03月10日</h4><p>asthma[ ˈæsmə ]</p>
<p>隐藏词义例句</p>
<ul>
<li><p>n. 哮喘</p>
</li>
<li><p><a href="https://langeasy.com.cn/m/player?f=20161219121108100006647&i=00002">查看来源</a></p>
</li>
</ul>
<p>predominantly[ prɪˈdɒmɪnəntli ]</p>
<p>隐藏词义例句</p>
<ul>
<li><p>adv. 占主导地位地，主要地，多数地</p>
</li>
<li><p><a href="https://langeasy.com.cn/m/player?f=23022811371507403001&i=27">查看来源</a></p>
</li>
</ul>
<p>memorandum[ ˌmeməˈrændəm ]</p>
<p>隐藏词义例句</p>
<ul>
<li><p>n. 备忘录；协议备忘录；意向书</p>
</li>
<li><p><a href="https://langeasy.com.cn/m/player?f=23032016201238903001&i=75">查看来源</a></p>
</li>
</ul>
<p>enquire[ ɪnˈkwaɪə(r) ]</p>
<p>隐藏词义例句</p>
<ul>
<li><p>vi. vt. 询问，打听</p>
</li>
<li><p><a href="https://langeasy.com.cn/m/player?f=20230801140202100001319&i=00483">查看来源</a></p>
</li>
</ul>
<p>offset[ ˈɒfset ]</p>
<p>隐藏词义例句</p>
<ul>
<li><p>vt. 抵消，弥补</p>
</li>
<li><p><a href="https://langeasy.com.cn/m/player?f=23072909300730803001&i=20">查看来源</a></p>
</li>
</ul>
</blockquote>
<h1 id="第二十一天"><a href="#第二十一天" class="headerlink" title="第二十一天"></a>第二十一天</h1><blockquote>
<h4 id="2025年03月11日"><a href="#2025年03月11日" class="headerlink" title="2025年03月11日"></a>2025年03月11日</h4><p>tramp[ træmp ]</p>
<p>隐藏词义例句</p>
<ul>
<li><p>n. 流浪汉；沉重的脚步声</p>
</li>
<li><p>vi. vt. (长时间地) 用沉重的脚步走</p>
</li>
<li><p><a href="https://langeasy.com.cn/m/player?f=20130910204517100000306&i=00022">查看来源</a></p>
</li>
</ul>
<p>entrepreneur[ ˌɒntrəprəˈnɜː(r) ]</p>
<p>隐藏词义例句</p>
<ul>
<li><p>n. 企业家</p>
</li>
<li><p><a href="https://langeasy.com.cn/m/player?f=20131017164256100000018&i=00087">查看来源</a></p>
</li>
</ul>
<p>compatible[ kəmˈpætəbl ]</p>
<p>隐藏词义例句</p>
<ul>
<li><p>adj. 兼容的；可共存的；合得来的</p>
</li>
<li><p><a href="https://langeasy.com.cn/m/player?f=20150918104751100000013&i=00062">查看来源</a></p>
</li>
</ul>
<p>magnitude[ ˈmæɡnɪtjuːd ]</p>
<p>隐藏词义例句</p>
<ul>
<li><p>n. 巨大，重要性；星等；震级</p>
</li>
<li><p><a href="https://langeasy.com.cn/m/player?f=20150507114659100000003&i=00023">查看来源</a></p>
</li>
</ul>
<p>ascribe[ əˈskraɪb ]</p>
<p>隐藏词义例句</p>
<ul>
<li><p>vt. 将…归因于；认为是…的特点</p>
</li>
<li><p><a href="https://langeasy.com.cn/m/player?f=20160123155634100003307&i=00559">查看来源</a></p>
</li>
</ul>
<p>attribute[ əˈtrɪbjuːt ]</p>
<p>隐藏词义例句</p>
<ul>
<li><p>vt. 把…归因于；认为是…所作</p>
</li>
<li><p>n. 特性，属性</p>
</li>
<li><p><a href="https://langeasy.com.cn/m/player?f=21101720211666303001&i=22">查看来源</a></p>
</li>
</ul>
<p>expiry[ ɪkˈspaɪəri ]</p>
<p>隐藏词义例句</p>
<ul>
<li><p>n. (合同等的) 期满，到期</p>
</li>
<li><p><a href="https://langeasy.com.cn/m/player?f=22040811581434044001&i=05">查看来源</a></p>
</li>
</ul>
<p>expire[ ɪkˈspaɪə(r) ]</p>
<p>隐藏词义例句</p>
<ul>
<li><p>vi. (协议等) 到期，失效；死亡</p>
</li>
<li><p><a href="https://langeasy.com.cn/m/player?f=24090404125399403001&i=27">查看来源</a></p>
</li>
</ul>
<p>vocational[ vəʊˈkeɪʃənl ]</p>
<p>隐藏词义例句</p>
<ul>
<li><p>adj. 职业的；职业技术的</p>
</li>
<li><p><a href="https://langeasy.com.cn/m/player?f=22010502373100303001&i=12">查看来源</a></p>
</li>
</ul>
<p>moderation[ ˌmɒdəˈreɪʃn ]</p>
<p>隐藏词义例句</p>
<ul>
<li><p>n. 适度，中庸</p>
</li>
<li><p><a href="https://langeasy.com.cn/m/player?f=21071212183237803001&i=14">查看来源</a></p>
</li>
</ul>
</blockquote>
<h1 id="第二十二天"><a href="#第二十二天" class="headerlink" title="第二十二天"></a>第二十二天</h1><blockquote>
<h4 id="2025年03月12日"><a href="#2025年03月12日" class="headerlink" title="2025年03月12日"></a>2025年03月12日</h4><p>reinstate[ ˌriːɪnˈsteɪt ]</p>
<p>隐藏词义例句</p>
<ul>
<li><p>vt. 使恢复原职；使恢复原状</p>
</li>
<li><p><a href="https://langeasy.com.cn/m/player?f=22061311432362003001&i=06">查看来源</a></p>
</li>
</ul>
<p>inflation[ ɪnˈfleɪʃn ]</p>
<p>隐藏词义例句</p>
<ul>
<li><p>n. 通货膨胀 (率)；充气，膨胀</p>
</li>
<li><p><a href="https://langeasy.com.cn/m/player?f=22123010455713603001&i=35">查看来源</a></p>
</li>
</ul>
<p>deflation[ ˌdiːˈfleɪʃn ]</p>
<p>隐藏词义例句</p>
<ul>
<li><p>n. 通货紧缩；放气，泄气</p>
</li>
<li><p><a href="https://langeasy.com.cn/m/player?f=19062915265124303001&i=14">查看来源</a></p>
</li>
</ul>
<p>disruptive[ dɪsˈrʌptɪv ]</p>
<p>隐藏词义例句</p>
<ul>
<li><p>adj. 破坏性的；制造混乱的；捣乱的</p>
</li>
<li><p><a href="https://langeasy.com.cn/m/player?f=22091620200491203001&i=13">查看来源</a></p>
</li>
</ul>
<p>audacious[ ɔːˈdeɪʃəs ]</p>
<p>隐藏词义例句</p>
<ul>
<li><p>adj. 大胆的，敢于冒险的</p>
</li>
<li><p><a href="https://langeasy.com.cn/m/player?f=21122121274079803001&i=20">查看来源</a></p>
</li>
</ul>
</blockquote>
<h1 id="第二十三天"><a href="#第二十三天" class="headerlink" title="第二十三天"></a>第二十三天</h1><blockquote>
<h4 id="2025年03月13日"><a href="#2025年03月13日" class="headerlink" title="2025年03月13日"></a>2025年03月13日</h4><ol>
<li><strong>Sanctuary</strong> [ˈsæŋktʃuəri]<ul>
<li><strong>Meaning</strong>: 避难所；庇护所；圣地</li>
<li><strong>Example</strong>: 这个野生动物保护区是为了保护濒危物种而建立的。<br>  (This wildlife sanctuary was established to protect endangered species.)</li>
</ul>
</li>
<li><strong>Presumably</strong> [prɪˈzjuːməbli]<ul>
<li><strong>Meaning</strong>: 大概；据推测</li>
<li><strong>Example</strong>: 会议大概会在上午10点开始。<br>  (Presumably, the meeting will start at 10 AM.)</li>
</ul>
</li>
<li><strong>Assailable</strong> [əˈseɪləbəl]<ul>
<li><strong>Meaning</strong>: 易受攻击的；可质疑的</li>
<li><strong>Example</strong>: 他的论点因缺乏证据而容易受到质疑。<br>  (His argument was assailable due to its lack of evidence.)</li>
</ul>
</li>
<li><strong>Freight</strong> [freɪt]<ul>
<li><strong>Meaning</strong>: 货物；运费</li>
<li><strong>Example</strong>: 由于天气恶劣，货物运输被延误了。<br>  (The freight was delayed due to bad weather.)</li>
</ul>
</li>
<li><strong>Juvenile</strong> [ˈdʒuːvənaɪl]<ul>
<li><strong>Meaning</strong>: 青少年的；幼稚的</li>
<li><strong>Example</strong>: 这名未成年罪犯被判处了较轻的刑罚。<br>  (The juvenile offender was given a lighter sentence.)</li>
</ul>
</li>
<li><strong>Maneuver</strong> [məˈnuːvə(r)]<ul>
<li><strong>Meaning</strong>: 策略；操纵；军事行动</li>
<li><strong>Example</strong>: 飞行员完美地执行了一个操作，避开了风暴。<br>  (The pilot executed a perfect maneuver to avoid the storm.)</li>
</ul>
</li>
</ol>
</blockquote>
<h1 id="第二十四天"><a href="#第二十四天" class="headerlink" title="第二十四天"></a>第二十四天</h1><blockquote>
<h4 id="2025年03月14日"><a href="#2025年03月14日" class="headerlink" title="2025年03月14日"></a>2025年03月14日</h4><ol>
<li><strong>linen</strong> [ ˈlɪnɪn ]<ul>
<li><strong>中文释义</strong>：亚麻布</li>
<li>She bought a set of <strong>linen</strong> bedsheets for the summer because they are cool and breathable.<br>  （她买了一套<strong>亚麻</strong>床单，因为夏天用起来凉爽透气。）</li>
<li>The table was covered with a crisp white <strong>linen</strong> tablecloth for the dinner party.<br>  （餐桌上铺了一条干净洁白的<strong>亚麻</strong>桌布，用于晚宴。）</li>
</ul>
</li>
<li><strong>coarse</strong> [ kɔːs ]<ul>
<li><strong>中文释义</strong>：粗糙的；粗俗的；颗粒粗大的</li>
<li>The <strong>coarse</strong> fabric of the rug irritated her skin.<br>  （地毯的<strong>粗糙</strong>面料让她的皮肤感到不适。）</li>
<li>His <strong>coarse</strong> language made everyone in the room uncomfortable.<br>  （他<strong>粗俗</strong>的言语让房间里的人都感到不舒服。）</li>
<li>The bread was made from <strong>coarse</strong> flour, giving it a hearty texture.<br>  （这种面包是用<strong>粗</strong>面粉做的，口感很扎实。）</li>
</ul>
</li>
</ol>
</blockquote>
<h1 id="第二十五天"><a href="#第二十五天" class="headerlink" title="第二十五天"></a>第二十五天</h1><blockquote>
<h4 id="2025年03月15日"><a href="#2025年03月15日" class="headerlink" title="2025年03月15日"></a>2025年03月15日</h4><ol>
<li><strong>disdain</strong> [ dɪsˈdeɪn ]<ul>
<li><strong>中文释义</strong>：轻蔑，鄙视</li>
<li>She looked at him with <strong>disdain</strong>, clearly unimpressed by his arrogant attitude.<br>  （她以<strong>轻蔑</strong>的眼神看着他，显然对他的傲慢态度不以为然。）</li>
<li>His <strong>disdain</strong> for modern art was evident in his dismissive comments.<br>  （他对现代艺术的<strong>鄙视</strong>在他轻蔑的评论中显而易见。）</li>
</ul>
</li>
<li><strong>contempt</strong> [ kənˈtempt ]<ul>
<li><strong>中文释义</strong>：蔑视，轻视</li>
<li>The judge held the defendant in <strong>contempt</strong> for repeatedly ignoring court orders.<br>  （法官对被告一再无视法庭命令的行为表示<strong>蔑视</strong>。）</li>
<li>She felt a deep sense of <strong>contempt</strong> for those who exploited others for personal gain.<br>  （她对那些为个人利益而剥削他人的人感到深深的<strong>蔑视</strong>。）</li>
</ul>
</li>
<li><strong>landform</strong> [ ˈlændfɔːm ]<ul>
<li><strong>中文释义</strong>：地形，地貌</li>
<li>The Grand Canyon is one of the most famous <strong>landforms</strong> in the United States.<br>  （大峡谷是美国最著名的<strong>地貌</strong>之一。）</li>
<li>The study of <strong>landforms</strong> helps geologists understand the Earth’s history.<br>  （对<strong>地形</strong>的研究有助于地质学家了解地球的历史。）</li>
</ul>
</li>
<li><strong>affiliate</strong> [ əˈfɪlieɪt ]<ul>
<li><strong>中文释义</strong>：附属机构；使隶属于</li>
<li>The local television station is an <strong>affiliate</strong> of a major national network.<br>  （这家地方电视台是一家全国性大型电视网的<strong>附属机构</strong>。）</li>
<li>The university decided to <strong>affiliate</strong> with several research institutes to enhance its academic reputation.<br>  （该大学决定与多家研究机构<strong>合作</strong>，以提升其学术声誉。）</li>
</ul>
</li>
<li><strong>subsidiary</strong> [ səbˈsɪdiəri ]<ul>
<li><strong>中文释义</strong>：子公司；辅助的</li>
<li>The company opened a <strong>subsidiary</strong> in Europe to expand its market presence.<br>  （该公司在欧洲开设了一家<strong>子公司</strong>，以扩大其市场影响力。）</li>
<li>The <strong>subsidiary</strong> products are designed to complement the main product line.<br>  （这些<strong>辅助</strong>产品旨在补充主要产品线。）</li>
</ul>
</li>
<li><strong>pliable</strong> [ ˈplaɪəbl ]<ul>
<li><strong>中文释义</strong>：易弯曲的；柔韧的；易受影响的</li>
<li>The <strong>pliable</strong> branches of the willow tree swayed gently in the breeze.<br>  （柳树的<strong>柔韧</strong>枝条在微风中轻轻摇曳。）</li>
<li>He was a <strong>pliable</strong> young man, easily influenced by his peers.<br>  （他是个<strong>易受影响</strong>的年轻人，很容易被同龄人左右。）</li>
</ul>
</li>
<li><strong>deception</strong> [ dɪˈsepʃn ]<ul>
<li><strong>中文释义</strong>：欺骗，欺诈</li>
<li>The magician’s <strong>deception</strong> left the audience in awe, wondering how the trick was done.<br>  （魔术师的<strong>欺骗</strong>让观众惊叹不已，大家都想知道这个戏法是如何完成的。）</li>
<li>The company was fined for its <strong>deception</strong> in advertising its products.<br>  （该公司因在广告中<strong>欺骗</strong>消费者而被罚款。）</li>
</ul>
</li>
<li><strong>aggravate</strong> [ ˈæɡrəveɪt ]<ul>
<li><strong>中文释义</strong>：加重，使恶化；激怒</li>
<li>His constant complaints only served to <strong>aggravate</strong> the situation.<br>  （他不断的抱怨只会<strong>加剧</strong>局势的恶化。）</li>
<li>The cold weather <strong>aggravated</strong> her arthritis, making it difficult for her to move.<br>  （寒冷的天气<strong>加重</strong>了她的关节炎，使她行动困难。）</li>
</ul>
</li>
<li><strong>outcome</strong> [ ˈaʊtkʌm ]<ul>
<li><strong>中文释义</strong>：结果，结局</li>
<li>The <strong>outcome</strong> of the election was a surprise to many political analysts.<br>  （选举的<strong>结果</strong>让许多政治分析家感到意外。）</li>
<li>Despite their efforts, the <strong>outcome</strong> of the project was not as successful as they had hoped.<br>  （尽管他们付出了努力，但项目的<strong>结果</strong>并不如他们希望的那样成功。）</li>
</ul>
</li>
</ol>
</blockquote>
<h1 id="第二十六天"><a href="#第二十六天" class="headerlink" title="第二十六天"></a>第二十六天</h1><blockquote>
<h4 id="2025年03月16日"><a href="#2025年03月16日" class="headerlink" title="2025年03月16日"></a>2025年03月16日</h4><ol>
<li><p><strong>rot</strong> [ rɒt ]</p>
<ul>
<li><strong>中文释义</strong>：腐烂；腐败</li>
<li>The wood began to <strong>rot</strong> after being exposed to rain for months.<br>  （木头在雨水中暴露数月后开始<strong>腐烂</strong>。）</li>
<li>Without proper care, the fruit will <strong>rot</strong> and become inedible.<br>  （如果没有适当的照料，水果会<strong>腐烂</strong>并变得无法食用。）</li>
</ul>
</li>
<li><p><strong>acquire</strong> [ əˈkwaɪə(r) ]</p>
<ul>
<li><strong>中文释义</strong>：获得，取得；学到</li>
<li>She managed to <strong>acquire</strong> a rare painting at the auction.<br>  （她在拍卖会上成功<strong>获得</strong>了一幅稀有画作。）</li>
<li>It takes years of practice to <strong>acquire</strong> the skills needed to play the piano at a professional level.<br>  （需要多年的练习才能<strong>掌握</strong>在专业水平上演奏钢琴所需的技能。）</li>
</ul>
</li>
<li><p><strong>nominal</strong> [ ˈnɒmɪnl ]</p>
<ul>
<li><strong>中文释义</strong>：名义上的；象征性的；微不足道的</li>
<li>He is the <strong>nominal</strong> head of the company, but the real decisions are made by his assistant.<br>  （他是公司的<strong>名义</strong>负责人，但真正的决策是由他的助手做出的。）</li>
<li>The fee for the service is <strong>nominal</strong>, only a few dollars.<br>  （这项服务的费用<strong>微不足道</strong>，只需几美元。）</li>
</ul>
</li>
<li><p><strong>snap</strong> [ snæp ]</p>
<ul>
<li><strong>中文释义</strong>：突然折断；啪地关上；快速拍照</li>
<li>The branch <strong>snapped</strong> under the weight of the snow.<br>  （树枝在雪的重量下<strong>突然折断</strong>了。）</li>
<li>She <strong>snapped</strong> a photo of the sunset before it disappeared behind the mountains.<br>  （她在日落消失在山后之前<strong>快速拍</strong>了一张照片。）</li>
</ul>
</li>
<li><p><strong>pulverise</strong> [ ˈpʌlvəraɪz ]</p>
<ul>
<li><strong>中文释义</strong>：粉碎；彻底击败</li>
<li>The machine is designed to <strong>pulverise</strong> rocks into fine powder.<br>  （这台机器设计用来将岩石<strong>粉碎</strong>成细粉。）</li>
<li>The team was <strong>pulverised</strong> in the final match, losing by a huge margin.<br>  （这支球队在决赛中被<strong>彻底击败</strong>，以巨大分差输掉了比赛。）</li>
</ul>
</li>
<li><p><strong>feeble</strong> [ ˈfiːbl ]</p>
<ul>
<li><strong>中文释义</strong>：虚弱的；无力的；无效的</li>
<li>After the illness, he was too <strong>feeble</strong> to walk without assistance.<br>  （病后，他太<strong>虚弱</strong>了，无法在没有帮助的情况下行走。）</li>
<li>Her <strong>feeble</strong> attempt to explain the situation only made things more confusing.<br>  （她<strong>无力</strong>的解释尝试只会让事情更加混乱。）</li>
</ul>
</li>
</ol>
</blockquote>
<h1 id="第二十七天"><a href="#第二十七天" class="headerlink" title="第二十七天"></a>第二十七天</h1><blockquote>
<h4 id="2025年03月17日"><a href="#2025年03月17日" class="headerlink" title="2025年03月17日"></a>2025年03月17日</h4><ol>
<li><p><strong>simultaneously</strong> [ ˌsɪmlˈteɪniəsli ]  </p>
<ul>
<li><strong>中文释义</strong>：同时地  </li>
<li>The two events happened <strong>simultaneously</strong>, making it impossible for her to attend both.<br>（这两个事件<strong>同时</strong>发生，使她无法同时参加。）  </li>
<li>The dancers moved <strong>simultaneously</strong>, creating a stunning visual effect.<br>（舞者们<strong>同时</strong>移动，创造出令人惊叹的视觉效果。）</li>
</ul>
</li>
<li><p><strong>tome</strong> [ təʊm ]  </p>
<ul>
<li><strong>中文释义</strong>：大部头书；巨著  </li>
<li>He spent months reading the ancient <strong>tome</strong> on philosophy.<br>（他花了几个月时间阅读那本关于哲学的<strong>巨著</strong>。）  </li>
<li>The library is filled with dusty <strong>tomes</strong> that few people ever open.<br>（图书馆里堆满了很少有人打开的布满灰尘的<strong>大部头书</strong>。）</li>
</ul>
</li>
<li><p><strong>cloakroom</strong> [ ˈkləʊkruːm ]  </p>
<ul>
<li><strong>中文释义</strong>：衣帽间；行李寄存处  </li>
<li>Please leave your coat in the <strong>cloakroom</strong> before entering the theater.<br>（请在进入剧院前将外套放在<strong>衣帽间</strong>。）  </li>
<li>The museum’s <strong>cloakroom</strong> provides a convenient place to store bags and luggage.<br>（博物馆的<strong>行李寄存处</strong>为存放包和行李提供了方便。）</li>
</ul>
</li>
<li><p><strong>resonate</strong> [ ˈrezəneɪt ]  </p>
<ul>
<li><strong>中文释义</strong>：共鸣；回响  </li>
<li>Her words <strong>resonated</strong> deeply with the audience, who applauded enthusiastically.<br>（她的话深深<strong>引起</strong>了观众的<strong>共鸣</strong>，大家热烈鼓掌。）  </li>
<li>The sound of the violin <strong>resonated</strong> through the concert hall.<br>（小提琴的声音在音乐厅里<strong>回响</strong>。）</li>
</ul>
</li>
<li><p><strong>vet</strong> [ vet ]  </p>
<ul>
<li><strong>中文释义</strong>：兽医；审查  </li>
<li>She took her dog to the <strong>vet</strong> for a routine check-up.<br>（她带她的狗去<strong>兽医</strong>那里做例行检查。）  </li>
<li>All candidates are thoroughly <strong>vetted</strong> before being offered the job.<br>（所有候选人在获得工作机会前都要经过严格的<strong>审查</strong>。）</li>
</ul>
</li>
<li><p><strong>titular</strong> [ ˈtɪtjulə(r) ]  </p>
<ul>
<li><strong>中文释义</strong>：名义上的；有名无实的  </li>
<li>Although he is the <strong>titular</strong> head of the organization, he has little actual power.<br>（尽管他是该组织的<strong>名义</strong>负责人，但他几乎没有实权。）  </li>
<li>The <strong>titular</strong> character in the novel never actually appears in the story.<br>（小说中的<strong>名义</strong>主角实际上从未在故事中出现过。）</li>
</ul>
</li>
<li><p><strong>intrusion</strong> [ ɪnˈtruːʒn ]  </p>
<ul>
<li><strong>中文释义</strong>：侵入；打扰  </li>
<li>The loud noise from the construction site was an <strong>intrusion</strong> on their peaceful afternoon.<br>（建筑工地的噪音<strong>打扰</strong>了他们宁静的下午。）  </li>
<li>The security system is designed to prevent any <strong>intrusion</strong> into the building.<br>（安全系统旨在防止任何<strong>侵入</strong>建筑物的行为。）</li>
</ul>
</li>
</ol>
</blockquote>
<h1 id="第二十八天"><a href="#第二十八天" class="headerlink" title="第二十八天"></a>第二十八天</h1><blockquote>
<h4 id="2025年03月18日"><a href="#2025年03月18日" class="headerlink" title="2025年03月18日"></a>2025年03月18日</h4><ol>
<li><strong>splint</strong> [ splɪnt ]<ul>
<li><strong>中文释义</strong>：夹板；用夹板固定</li>
<li>The doctor applied a <strong>splint</strong> to the broken finger to keep it stable.<br>  （医生用<strong>夹板</strong>固定住骨折的手指，以保持其稳定。）</li>
<li>She had to wear a <strong>splint</strong> on her wrist for several weeks after the injury.<br>  （受伤后，她不得不在手腕上戴了几个星期的<strong>夹板</strong>。）</li>
</ul>
</li>
<li><strong>tragic</strong> [ ˈtrædʒɪk ]<ul>
<li><strong>中文释义</strong>：悲惨的；悲剧的</li>
<li>The <strong>tragic</strong> accident left the entire community in mourning.<br>  （这场<strong>悲惨的</strong>事故让整个社区陷入悲痛。）</li>
<li>The play tells the <strong>tragic</strong> story of a king who loses everything he loves.<br>  （这部戏剧讲述了一位国王失去他所爱的一切的<strong>悲剧</strong>故事。）</li>
</ul>
</li>
<li><strong>deflect</strong> [ dɪˈflekt ]<ul>
<li><strong>中文释义</strong>：使偏斜；转移（注意力）</li>
<li>The shield was designed to <strong>deflect</strong> arrows and other projectiles.<br>  （这面盾牌的设计是为了<strong>使</strong>箭和其他投射物<strong>偏斜</strong>。）</li>
<li>He tried to <strong>deflect</strong> the conversation away from the sensitive topic.<br>  （他试图将谈话从敏感话题上<strong>转移</strong>开。）</li>
</ul>
</li>
<li><strong>dilute</strong> [ daɪˈluːt ]<ul>
<li><strong>中文释义</strong>：稀释；冲淡</li>
<li>You can <strong>dilute</strong> the juice with water if it’s too strong.<br>  （如果果汁太浓，你可以用水<strong>稀释</strong>它。）</li>
<li>The impact of the policy was <strong>diluted</strong> by poor implementation.<br>  （由于执行不力，这项政策的影响被<strong>削弱</strong>了。）</li>
</ul>
</li>
<li><strong>deplete</strong> [ dɪˈpliːt ]<ul>
<li><strong>中文释义</strong>：耗尽；使枯竭</li>
<li>Overfishing has <strong>depleted</strong> the ocean’s fish populations.<br>  （过度捕捞已<strong>耗尽</strong>了海洋中的鱼类资源。）</li>
<li>The long drought has <strong>depleted</strong> the region’s water reserves.<br>  （长期的干旱已使该地区的水资源储备<strong>枯竭</strong>。）</li>
</ul>
</li>
<li><strong>vitality</strong> [ vaɪˈtæləti ]<ul>
<li><strong>中文释义</strong>：活力；生命力</li>
<li>The young puppy was full of <strong>vitality</strong>, running and playing all day.<br>  （这只小狗充满<strong>活力</strong>，整天跑来跑去玩耍。）</li>
<li>Regular exercise can help maintain your physical and mental <strong>vitality</strong>.<br>  （定期锻炼有助于保持身体和精神的<strong>活力</strong>。）</li>
</ul>
</li>
<li><strong>attentive</strong> [ əˈtentɪv ]<ul>
<li><strong>中文释义</strong>：注意的；关心的</li>
<li>The teacher was very <strong>attentive</strong> to the needs of her students.<br>  （这位老师非常<strong>关心</strong>学生的需求。）</li>
<li>He was <strong>attentive</strong> during the meeting, taking notes and asking questions.<br>  （他在会议期间很<strong>专注</strong>，做笔记并提问。）</li>
</ul>
</li>
<li><strong>interplay</strong> [ ˈɪntəpleɪ ]<ul>
<li><strong>中文释义</strong>：相互作用；相互影响</li>
<li>The <strong>interplay</strong> between light and shadow creates a dramatic effect in the painting.<br>  （光影的<strong>相互作用</strong>在画中创造了戏剧性的效果。）</li>
<li>The success of the project depends on the <strong>interplay</strong> of teamwork and individual effort.<br>  （项目的成功取决于团队合作与个人努力的<strong>相互影响</strong>。）</li>
</ul>
</li>
</ol>
</blockquote>
<h1 id="第二十九天"><a href="#第二十九天" class="headerlink" title="第二十九天"></a>第二十九天</h1><blockquote>
<h4 id="2025年03月19日"><a href="#2025年03月19日" class="headerlink" title="2025年03月19日"></a>2025年03月19日</h4><ol>
<li><strong>assessment</strong> [ əˈsesmənt ]<ul>
<li><strong>中文释义</strong>：评估；评定</li>
<li>The teacher’s <strong>assessment</strong> of the students’ performance was thorough and fair.<br>  （老师对学生的表现进行了全面而公正的<strong>评估</strong>。）</li>
<li>A detailed <strong>assessment</strong> of the damage will be conducted before repairs begin.<br>  （在开始维修之前，将对损坏进行详细的<strong>评估</strong>。）</li>
</ul>
</li>
<li><strong>afflict</strong> [ əˈflɪkt ]<ul>
<li><strong>中文释义</strong>：使痛苦；折磨</li>
<li>Many people in the region are <strong>afflicted</strong> by poverty and disease.<br>  （该地区的许多人饱受贫困和疾病的<strong>折磨</strong>。）</li>
<li>The old man was <strong>afflicted</strong> with arthritis, making it difficult for him to walk.<br>  （这位老人<strong>饱受</strong>关节炎的<strong>折磨</strong>，走路都很困难。）</li>
</ul>
</li>
<li><strong>prey</strong> [ preɪ ]<ul>
<li><strong>中文释义</strong>：猎物；受害者</li>
<li>The lion stalked its <strong>prey</strong> silently through the tall grass.<br>  （狮子在高高的草丛中无声地跟踪它的<strong>猎物</strong>。）</li>
<li>Elderly people are often <strong>prey</strong> to scams and fraudulent schemes.<br>  （老年人常常是诈骗和欺诈计划的<strong>受害者</strong>。）</li>
</ul>
</li>
<li><strong>prerequisite</strong> [ ˌpriːˈrekwəzɪt ]<ul>
<li><strong>中文释义</strong>：先决条件；前提</li>
<li>A basic understanding of math is a <strong>prerequisite</strong> for this course.<br>  （对数学的基本理解是这门课程的<strong>先决条件</strong>。）</li>
<li>Experience in the field is often a <strong>prerequisite</strong> for higher-level positions.<br>  （该领域的经验通常是更高职位的<strong>前提</strong>。）</li>
</ul>
</li>
<li><strong>knotty</strong> [ ˈnɒti ]<ul>
<li><strong>中文释义</strong>：棘手的；多节的</li>
<li>The team faced a <strong>knotty</strong> problem that required creative thinking to solve.<br>  （团队遇到了一个<strong>棘手的</strong>问题，需要创造性思维来解决。）</li>
<li>The old tree had a <strong>knotty</strong> trunk, full of twists and turns.<br>  （这棵老树的树干<strong>多节</strong>，充满了曲折。）</li>
</ul>
</li>
<li><strong>involved</strong> [ ɪnˈvɒlvd ]<ul>
<li><strong>中文释义</strong>：复杂的；参与的</li>
<li>The instructions were so <strong>involved</strong> that it took hours to understand them.<br>  （这些说明非常<strong>复杂</strong>，花了几个小时才理解。）</li>
<li>She was deeply <strong>involved</strong> in the planning of the event.<br>  （她深度<strong>参与</strong>了活动的策划。）</li>
</ul>
</li>
<li><strong>intricate</strong> [ ˈɪntrɪkət ]<ul>
<li><strong>中文释义</strong>：复杂的；精细的</li>
<li>The artist created an <strong>intricate</strong> design with tiny, detailed patterns.<br>  （艺术家用微小的细节图案创作了一个<strong>精细的</strong>设计。）</li>
<li>The plot of the novel was so <strong>intricate</strong> that it kept readers guessing until the end.<br>  （小说的情节非常<strong>复杂</strong>，让读者一直猜测到结尾。）</li>
</ul>
</li>
<li><strong>slope</strong> [ sləʊp ]<ul>
<li><strong>中文释义</strong>：斜坡；倾斜</li>
<li>The children enjoyed sliding down the snowy <strong>slope</strong> on their sleds.<br>  （孩子们喜欢坐在雪橇上从雪<strong>斜坡</strong>上滑下来。）</li>
<li>The garden has a gentle <strong>slope</strong> that leads down to the river.<br>  （花园有一个平缓的<strong>斜坡</strong>，通向河边。）</li>
</ul>
</li>
<li><strong>formative</strong> [ ˈfɔːmətɪv ]<ul>
<li><strong>中文释义</strong>：形成的；影响发展的</li>
<li>The <strong>formative</strong> years of a child’s life are crucial for their development.<br>  （孩子的<strong>成长</strong>阶段对他们的发展至关重要。）</li>
<li>His time at university was a <strong>formative</strong> experience that shaped his career.<br>  （他在大学的那段时光是一次<strong>影响深远</strong>的经历，塑造了他的职业生涯。）</li>
</ul>
</li>
<li><strong>formation</strong> [ fɔːˈmeɪʃn ]</li>
</ol>
<ul>
<li><strong>中文释义</strong>：形成；结构</li>
<li>The <strong>formation</strong> of a new government took several weeks of negotiations.<br>  （新政府的<strong>形成</strong>经过了几周的谈判。）</li>
<li>The rock <strong>formation</strong> in the canyon is millions of years old.<br>  （峡谷中的岩石<strong>结构</strong>已有数百万年的历史。）</li>
</ul>
<ol start="11">
<li><strong>tariff</strong> [ ˈtærɪf ]</li>
</ol>
<ul>
<li><strong>中文释义</strong>：关税；价目表</li>
<li>The government imposed a high <strong>tariff</strong> on imported goods to protect local industries.<br>  （政府对进口商品征收高<strong>关税</strong>以保护本地产业。）</li>
<li>The hotel’s <strong>tariff</strong> includes breakfast and access to the gym.<br>  （酒店的<strong>价目表</strong>包括早餐和健身房的使用权。）</li>
</ul>
</blockquote>
<h1 id="第三十天"><a href="#第三十天" class="headerlink" title="第三十天"></a>第三十天</h1><blockquote>
<h4 id="2025年03月20日"><a href="#2025年03月20日" class="headerlink" title="2025年03月20日"></a>2025年03月20日</h4><ol>
<li><strong>foretell</strong> [ fɔːˈtel ]<ul>
<li><strong>中文释义</strong>：预言；预示</li>
<li>The ancient oracle was believed to <strong>foretell</strong> the future with great accuracy.<br>  （人们相信古代的预言家能非常准确地<strong>预言</strong>未来。）</li>
<li>Dark clouds often <strong>foretell</strong> an approaching storm.<br>  （乌云常常<strong>预示</strong>着暴风雨的来临。）</li>
</ul>
</li>
<li><strong>accreditation</strong> [ əˌkredɪˈteɪʃn ]<ul>
<li><strong>中文释义</strong>：认证；认可</li>
<li>The university received <strong>accreditation</strong> for its new engineering program.<br>  （该大学的新工程课程获得了<strong>认证</strong>。）</li>
<li>The hospital’s <strong>accreditation</strong> ensures that it meets high standards of care.<br>  （医院的<strong>认证</strong>确保了其医疗服务达到高标准。）</li>
</ul>
</li>
<li><strong>commentator</strong> [ ˈkɒmənteɪtə(r) ]<ul>
<li><strong>中文释义</strong>：评论员；解说员</li>
<li>The sports <strong>commentator</strong> provided live analysis during the football match.<br>  （体育<strong>解说员</strong>在足球比赛期间提供了实时分析。）</li>
<li>Political <strong>commentators</strong> often appear on news programs to discuss current events.<br>  （政治<strong>评论员</strong>经常出现在新闻节目中讨论时事。）</li>
</ul>
</li>
<li><strong>flip</strong> [ flɪp ]<ul>
<li><strong>中文释义</strong>：翻转；轻弹</li>
<li>She <strong>flipped</strong> the pancake in the air and caught it perfectly in the pan.<br>  （她把煎饼抛到空中，然后完美地接回锅里。）</li>
<li>He <strong>flipped</strong> through the pages of the book, looking for the right chapter.<br>  （他快速<strong>翻阅</strong>书页，寻找正确的章节。）</li>
</ul>
</li>
<li><strong>stagnant</strong> [ ˈstæɡnənt ]<ul>
<li><strong>中文释义</strong>：停滞的；不流动的</li>
<li>The <strong>stagnant</strong> water in the pond became a breeding ground for mosquitoes.<br>  （池塘里的<strong>死水</strong>成了蚊子的滋生地。）</li>
<li>The economy has been <strong>stagnant</strong> for years, with little growth or development.<br>  （经济多年来一直<strong>停滞不前</strong>，几乎没有增长或发展。）</li>
</ul>
</li>
<li><strong>gland</strong> [ ɡlænd ]<ul>
<li><strong>中文释义</strong>：腺体</li>
<li>The thyroid <strong>gland</strong> plays a crucial role in regulating metabolism.<br>  （甲状腺<strong>腺体</strong>在调节新陈代谢中起着至关重要的作用。）</li>
<li>Sweat is produced by the sweat <strong>glands</strong> in the skin.<br>  （汗液是由皮肤中的汗<strong>腺</strong>分泌的。）</li>
</ul>
</li>
<li><strong>curriculum</strong> [ kəˈrɪkjələm ]<ul>
<li><strong>中文释义</strong>：课程；教学大纲</li>
<li>The school has introduced a new <strong>curriculum</strong> to better meet the needs of students.<br>  （学校引入了新的<strong>课程</strong>，以更好地满足学生的需求。）</li>
<li>The <strong>curriculum</strong> includes subjects like math, science, and literature.<br>  （<strong>教学大纲</strong>包括数学、科学和文学等科目。）</li>
</ul>
</li>
</ol>
</blockquote>
<h1 id="第三十一天"><a href="#第三十一天" class="headerlink" title="第三十一天"></a>第三十一天</h1><blockquote>
<h4 id="2025年03月21日"><a href="#2025年03月21日" class="headerlink" title="2025年03月21日"></a>2025年03月21日</h4><ol>
<li><p><strong>favour</strong> [ ˈfeɪvə(r) ]  </p>
<ul>
<li><strong>中文释义</strong>：偏爱；支持；恩惠  </li>
<li>She asked for a <strong>favour</strong> to help her move to her new apartment.<br>（她请求帮忙搬家的<strong>恩惠</strong>。）  </li>
<li>The teacher showed <strong>favour</strong> to the students who participated actively in class.<br>（老师<strong>偏爱</strong>那些在课堂上积极参与的学生。）</li>
</ul>
</li>
<li><p><strong>marsh</strong> [ mɑːʃ ]  </p>
<ul>
<li><strong>中文释义</strong>：沼泽；湿地  </li>
<li>The <strong>marsh</strong> is home to a variety of birds and aquatic plants.<br>（这片<strong>沼泽</strong>是多种鸟类和水生植物的家园。）  </li>
<li>They went hiking through the <strong>marsh</strong>, careful not to step in the muddy areas.<br>（他们徒步穿过<strong>沼泽</strong>，小心不踩到泥泞的地方。）</li>
</ul>
</li>
<li><p><strong>swamp</strong> [ swɒmp ]  </p>
<ul>
<li><strong>中文释义</strong>：沼泽；使陷入困境  </li>
<li>The heavy rain turned the field into a <strong>swamp</strong>, making it difficult to walk through.<br>（大雨把田地变成了<strong>沼泽</strong>，让人难以行走。）  </li>
<li>She was <strong>swamped</strong> with work and had no time to relax.<br>（她被工作<strong>淹没</strong>，没有时间放松。）</li>
</ul>
</li>
<li><p><strong>stammer</strong> [ ˈstæmə(r) ]  </p>
<ul>
<li><strong>中文释义</strong>：口吃；结结巴巴地说  </li>
<li>He tends to <strong>stammer</strong> when he gets nervous, especially during public speaking.<br>（他紧张时容易<strong>口吃</strong>，尤其是在公开演讲时。）  </li>
<li>She <strong>stammered</strong> an apology, her voice trembling with emotion.<br>（她<strong>结结巴巴地</strong>道歉，声音因情绪激动而颤抖。）</li>
</ul>
</li>
<li><p><strong>anticipated</strong> [ ænˈtɪsəˌpeɪtɪd ]  </p>
<ul>
<li><strong>中文释义</strong>：预期的；期待的  </li>
<li>The <strong>anticipated</strong> release of the new movie has created a lot of excitement among fans.<br>（这部新电影的<strong>预期</strong>上映在粉丝中引起了极大的兴奋。）  </li>
<li>The project was completed ahead of the <strong>anticipated</strong> deadline.<br>（该项目在<strong>预期</strong>截止日期之前完成了。）</li>
</ul>
</li>
<li><p><strong>prospective</strong> [ prəˈspektɪv ]  </p>
<ul>
<li><strong>中文释义</strong>：预期的；未来的  </li>
<li>The company is interviewing <strong>prospective</strong> employees for the new positions.<br>（公司正在面试<strong>未来的</strong>员工以填补新职位。）  </li>
<li>They visited several <strong>prospective</strong> locations before choosing the site for their new store.<br>（在选择新店址之前，他们参观了几个<strong>潜在的</strong>地点。）</li>
</ul>
</li>
<li><p><strong>suspender</strong> [ səˈspendə(r) ]  </p>
<ul>
<li><strong>中文释义</strong>：吊带；背带  </li>
<li>He wore <strong>suspenders</strong> to keep his pants from falling down.<br>（他穿着<strong>背带</strong>以防裤子掉下来。）  </li>
<li>The <strong>suspenders</strong> added a touch of vintage style to his outfit.<br>（<strong>背带</strong>为他的装扮增添了一丝复古风格。）</li>
</ul>
</li>
<li><p><strong>internist</strong> [ ɪnˈtɜːnɪst ]  </p>
<ul>
<li><strong>中文释义</strong>：内科医生  </li>
<li>The <strong>internist</strong> specializes in diagnosing and treating adult diseases.<br>（<strong>内科医生</strong>专门诊断和治疗成人疾病。）  </li>
<li>She visited an <strong>internist</strong> for a thorough check-up of her overall health.<br>（她去看了一位<strong>内科医生</strong>，进行全面的健康检查。）</li>
</ul>
</li>
</ol>
</blockquote>
<h1 id="第三十二天"><a href="#第三十二天" class="headerlink" title="第三十二天"></a>第三十二天</h1><blockquote>
<h4 id="2025年03月22日"><a href="#2025年03月22日" class="headerlink" title="2025年03月22日"></a>2025年03月22日</h4><ol>
<li><strong>uphill</strong> [ ˌʌpˈhɪl ]<ul>
<li><strong>中文释义</strong>：上坡的；艰难的</li>
<li>The cyclists faced an <strong>uphill</strong> climb that tested their endurance.<br>  （骑自行车的人面临一段<strong>上坡</strong>骑行，考验了他们的耐力。）</li>
<li>Starting a new business is often an <strong>uphill</strong> battle, especially in a competitive market.<br>  （创业通常是一场<strong>艰难的</strong>战斗，尤其是在竞争激烈的市场中。）</li>
</ul>
</li>
<li><strong>fickle</strong> [ ˈfɪkl ]<ul>
<li><strong>中文释义</strong>：易变的；无常的</li>
<li>The weather in this region is notoriously <strong>fickle</strong>, changing from sunny to stormy in minutes.<br>  （这个地区的天气以<strong>多变</strong>著称，几分钟内就能从晴天变成暴风雨。）</li>
<li>Her <strong>fickle</strong> nature made it difficult for others to predict her decisions.<br>  （她<strong>善变</strong>的性格让别人很难预测她的决定。）</li>
</ul>
</li>
<li><strong>imminent</strong> [ ˈɪmɪnənt ]<ul>
<li><strong>中文释义</strong>：即将发生的；迫近的</li>
<li>The dark clouds suggested that a storm was <strong>imminent</strong>.<br>  （乌云表明暴风雨<strong>即将来临</strong>。）</li>
<li>The company issued a warning about the <strong>imminent</strong> layoffs due to financial difficulties.<br>  （公司发布了关于因财务困难而<strong>即将</strong>裁员的警告。）</li>
</ul>
</li>
<li><strong>invaluable</strong> [ ɪnˈvæljuəbl ]<ul>
<li><strong>中文释义</strong>：无价的；极其宝贵的</li>
<li>Her experience and expertise were <strong>invaluable</strong> to the success of the project.<br>  （她的经验和专业知识对项目的成功<strong>极其宝贵</strong>。）</li>
<li>The ancient artifact is considered <strong>invaluable</strong> due to its historical significance.<br>  （这件古代文物因其历史意义被认为是<strong>无价的</strong>。）</li>
</ul>
</li>
</ol>
</blockquote>
<h1 id="第三十三天"><a href="#第三十三天" class="headerlink" title="第三十三天"></a>第三十三天</h1><blockquote>
<h4 id="2025年03月23日"><a href="#2025年03月23日" class="headerlink" title="2025年03月23日"></a>2025年03月23日</h4><ol>
<li><strong>gripping</strong> [ ˈɡrɪpɪŋ ]</li>
</ol>
<ul>
<li><strong>中文释义</strong>：扣人心弦的；吸引人的  </li>
<li>The movie was so <strong>gripping</strong> that the audience was on the edge of their seats throughout.<br>（这部电影非常<strong>扣人心弦</strong>，观众从头到尾都坐立不安。）  </li>
<li>She wrote a <strong>gripping</strong> novel that kept readers hooked until the very last page.<br>（她写了一本<strong>吸引人的</strong>小说，让读者一直读到最后一页。）</li>
</ul>
<ol start="2">
<li><strong>grip</strong> [ ɡrɪp ]</li>
</ol>
<ul>
<li><strong>中文释义</strong>：紧握；控制；理解  </li>
<li>He tightened his <strong>grip</strong> on the handlebars as the bike sped down the hill.<br>（当自行车冲下山坡时，他紧紧<strong>握住</strong>把手。）  </li>
<li>The teacher’s explanation helped the students get a better <strong>grip</strong> on the complex topic.<br>（老师的讲解帮助学生更好地<strong>理解</strong>这个复杂的话题。）</li>
</ul>
<ol start="3">
<li><strong>amass</strong> [ əˈmæs ]</li>
</ol>
<ul>
<li><strong>中文释义</strong>：积累；积聚  </li>
<li>Over the years, he managed to <strong>amass</strong> a large collection of rare books.<br>（多年来，他设法<strong>积累</strong>了大量稀有书籍。）  </li>
<li>The company has <strong>amassed</strong> a significant amount of data from its users.<br>（该公司从其用户那里<strong>积累</strong>了大量数据。）</li>
</ul>
<ol start="4">
<li><strong>glossary</strong> [ ˈɡlɒsəri ]</li>
</ol>
<ul>
<li><strong>中文释义</strong>：词汇表；术语表  </li>
<li>The textbook includes a <strong>glossary</strong> at the end to help students understand key terms.<br>（教科书末尾附有<strong>词汇表</strong>，以帮助学生理解关键术语。）  </li>
<li>The technical manual comes with a detailed <strong>glossary</strong> for reference.<br>（技术手册附带了一份详细的<strong>术语表</strong>供参考。）</li>
</ul>
<ol start="5">
<li><strong>prevail</strong> [ prɪˈveɪl ]</li>
</ol>
<ul>
<li><strong>中文释义</strong>：盛行；占优势；说服  </li>
<li>Despite the challenges, justice will <strong>prevail</strong> in the end.<br>（尽管面临挑战，正义最终会<strong>占上风</strong>。）  </li>
<li>The tradition of celebrating the festival still <strong>prevails</strong> in many rural areas.<br>（庆祝节日的传统在许多农村地区仍然<strong>盛行</strong>。）</li>
</ul>
<ol start="6">
<li><strong>internationalist</strong> [ ˌɪntəˈnæʃnəlɪst ]</li>
</ol>
<ul>
<li><strong>中文释义</strong>：国际主义者；支持国际合作的人  </li>
<li>As an <strong>internationalist</strong>, she believes in the importance of global cooperation to solve world problems.<br>（作为一名<strong>国际主义者</strong>，她相信全球合作对解决世界问题的重要性。）  </li>
<li>The organization promotes <strong>internationalist</strong> policies to foster peace and development.<br>（该组织提倡<strong>国际主义</strong>政策，以促进和平与发展。）</li>
</ul>
<ol start="7">
<li><strong>emboss</strong> [ ɪmˈbɒs ]</li>
</ol>
<ul>
<li><strong>中文释义</strong>：浮雕；压印  </li>
<li>The company logo was <strong>embossed</strong> on the leather cover of the notebook.<br>（公司标志被<strong>压印</strong>在笔记本的皮革封面上。）  </li>
<li>The artist used a special tool to <strong>emboss</strong> intricate patterns onto the metal surface.<br>（艺术家用特殊工具在金属表面<strong>压印</strong>出复杂的图案。）</li>
</ul>
</blockquote>
<h1 id="第三十四天"><a href="#第三十四天" class="headerlink" title="第三十四天"></a>第三十四天</h1><blockquote>
<h4 id="2025年03月25日"><a href="#2025年03月25日" class="headerlink" title="2025年03月25日"></a>2025年03月25日</h4><ol>
<li><p><strong>proliferate</strong> [ prəˈlɪfəreɪt ]  </p>
<ul>
<li><strong>中文释义</strong>：激增；扩散；迅速繁殖  </li>
<li>Fast-food chains continue to <strong>proliferate</strong> in urban areas worldwide.<br>（快餐连锁店在全球城市地区持续<strong>激增</strong>。）  </li>
<li>Without proper control, invasive species can <strong>proliferate</strong> and damage local ecosystems.<br>（如不加以控制，入侵物种会<strong>迅速繁殖</strong>并破坏当地生态系统。）</li>
</ul>
</li>
<li><p><strong>microcosm</strong> [ ˈmaɪkrəʊkɒzəm ]  </p>
<ul>
<li><strong>中文释义</strong>：微观世界；缩影  </li>
<li>The classroom serves as a <strong>microcosm</strong> of society, with its diverse interactions.<br>（教室作为社会的<strong>缩影</strong>，展现了多样化的互动。）  </li>
<li>This small coastal town is a <strong>microcosm</strong> of traditional Japanese culture.<br>（这个海滨小镇是日本传统文化的<strong>缩影</strong>。）</li>
</ul>
</li>
<li><p><strong>seam</strong> [ siːm ]  </p>
<ul>
<li><strong>中文释义</strong>：接缝；缝合处  </li>
<li>The tailor reinforced the <strong>seam</strong> of the dress to prevent it from tearing.<br>（裁缝加固了裙子的<strong>接缝</strong>以防开裂。）  </li>
<li>Coal miners worked deep underground in the <strong>seam</strong> of the earth.<br>（矿工在地层深处的矿<strong>脉</strong>中工作。）</li>
</ul>
</li>
<li><p><strong>inspect</strong> [ ɪnˈspekt ]  </p>
<ul>
<li><strong>中文释义</strong>：检查；视察  </li>
<li>Health officials will <strong>inspect</strong> the restaurant for hygiene compliance next week.<br>（卫生官员将于下周<strong>检查</strong>该餐厅的卫生合规情况。）  </li>
<li>The general <strong>inspected</strong> the troops before the military parade.<br>（将军在阅兵前<strong>检阅</strong>了部队。）</li>
</ul>
</li>
<li><p><strong>torrent</strong> [ ˈtɒrənt ]  </p>
<ul>
<li><strong>中文释义</strong>：激流；洪流；（数据）下载流  </li>
<li>After the storm, a <strong>torrent</strong> of water rushed down the mountain.<br>（暴雨过后，<strong>激流</strong>从山上奔涌而下。）  </li>
<li>The scandal triggered a <strong>torrent</strong> of criticism on social media.<br>（丑闻引发了社交媒体上的批评<strong>洪流</strong>。）</li>
</ul>
</li>
<li><p><strong>detach</strong> [ dɪˈtætʃ ]  </p>
<ul>
<li><strong>中文释义</strong>：拆卸；使分离；超然  </li>
<li>Please <strong>detach</strong> the lower part of the form and return it with your payment.<br>（请<strong>撕下</strong>表格下半部分并与付款一并寄回。）  </li>
<li>As a journalist, she tries to remain <strong>detached</strong> when reporting sensitive issues.<br>（作为记者，她在报道敏感问题时尽量保持<strong>超然</strong>。）</li>
</ul>
</li>
<li><p><strong>materialistic</strong> [ məˌtɪəriəˈlɪstɪk ]  </p>
<ul>
<li><strong>中文释义</strong>：物质主义的；实利主义的  </li>
<li>The novel critiques our <strong>materialistic</strong> society that values possessions over relationships.<br>（这部小说批判了我们这个重物质轻关系的<strong>物质主义</strong>社会。）  </li>
<li>His <strong>materialistic</strong> outlook changed after volunteering in developing countries.<br>（在发展中国家志愿服务后，他改变了<strong>实利主义</strong>的价值观。）</li>
</ul>
</li>
</ol>
<hr>
<h3 id="补充说明："><a href="#补充说明：" class="headerlink" title="补充说明："></a>补充说明：</h3><ul>
<li><strong>proliferate</strong> 常用于描述细胞、技术或现象的快速扩散  </li>
<li><strong>microcosm</strong> 强调”以小见大”的类比关系  </li>
<li><strong>seam</strong> 在采矿术语中指”矿层”，与缝纫术语同形异义  </li>
<li><strong>torrent</strong> 在计算机领域特指P2P下载方式  </li>
<li><strong>detach</strong> 的形容词形式 <strong>detached</strong> 可表示”客观的”或”独立的”  </li>
<li><strong>materialistic</strong> 带有贬义，反义词为 <strong>spiritual</strong>（精神的）</li>
</ul>
</blockquote>
<h1 id="第三十五天"><a href="#第三十五天" class="headerlink" title="第三十五天"></a>第三十五天</h1><blockquote>
<h4 id="2025年03月26日"><a href="#2025年03月26日" class="headerlink" title="2025年03月26日"></a>2025年03月26日</h4><ol>
<li><p><strong>ape</strong> [ eɪp ]  </p>
<ul>
<li><strong>中文释义</strong>：猿；模仿  </li>
<li>The <strong>apes</strong> at the zoo displayed remarkable intelligence, using tools to obtain food.<br>（动物园里的<strong>猿类</strong>表现出惊人的智慧，会使用工具获取食物。）  </li>
<li>He loves to <strong>ape</strong> his favorite actor’s mannerisms when telling jokes.<br>（他讲笑话时总爱<strong>模仿</strong>他最喜欢的演员的举止。）</li>
</ul>
</li>
<li><p><strong>fasten</strong> [ ˈfɑːsn ]  </p>
<ul>
<li><strong>中文释义</strong>：系紧；固定  </li>
<li>Please <strong>fasten</strong> your seatbelt before the plane takes off.<br>（飞机起飞前请<strong>系好</strong>安全带。）  </li>
<li>She used a clip to <strong>fasten</strong> her hair back before exercising.<br>（运动前她用发夹把头发<strong>固定</strong>在后面。）</li>
</ul>
</li>
<li><p><strong>menace</strong> [ ˈmenəs ]  </p>
<ul>
<li><strong>中文释义</strong>：威胁；危险物  </li>
<li>The hurricane posed a serious <strong>menace</strong> to coastal communities.<br>（飓风对沿海社区构成严重<strong>威胁</strong>。）  </li>
<li>That aggressive dog is a real <strong>menace</strong> to neighborhood children.<br>（那只凶猛的狗对社区儿童来说是个真正的<strong>危险</strong>。）</li>
</ul>
</li>
<li><p><strong>resit</strong> [ ˈriːsɪt ]  </p>
<ul>
<li><strong>中文释义</strong>：补考；重考  </li>
<li>Students who fail the exam will have to <strong>resit</strong> it next month.<br>（考试不及格的学生下个月必须<strong>补考</strong>。）  </li>
<li>He improved his score significantly after <strong>resitting</strong> the physics test.<br>（<strong>重考</strong>物理后，他的分数显著提高了。）</li>
</ul>
</li>
<li><p><strong>sediment</strong> [ ˈsedɪmənt ]  </p>
<ul>
<li><strong>中文释义</strong>：沉淀物；沉积物  </li>
<li>The river’s <strong>sediment</strong> gives the water its muddy appearance.<br>（河流的<strong>沉积物</strong>使水呈现浑浊的外观。）  </li>
<li>Over millions of years, the <strong>sediment</strong> hardened into layers of rock.<br>（经过数百万年，这些<strong>沉积物</strong>硬化成岩层。）</li>
</ul>
</li>
<li><p><strong>proliferation</strong> [ prəˌlɪfəˈreɪʃn ]  </p>
<ul>
<li><strong>中文释义</strong>：激增；扩散  </li>
<li>The <strong>proliferation</strong> of nuclear weapons is a global concern.<br>（核武器的<strong>扩散</strong>是全球关注的问题。）  </li>
<li>There’s been a worrying <strong>proliferation</strong> of fake news on social media.<br>（社交媒体上假新闻的<strong>激增</strong>令人担忧。）</li>
</ul>
</li>
</ol>
<hr>
<h3 id="用法说明："><a href="#用法说明：" class="headerlink" title="用法说明："></a>用法说明：</h3><ol>
<li><strong>ape</strong> 作动词时多含贬义，指”笨拙地模仿”  </li>
<li><strong>fasten</strong> 后常接介词：fasten A to B（把A固定在B上）  </li>
<li><strong>menace</strong> 作动词时：The storm menaced the coastline.  </li>
<li><strong>resit</strong> 为英式英语用法，美式常用”retake”  </li>
<li><strong>sediment</strong> 的地质学相关词：sedimentary rock（沉积岩）  </li>
<li><strong>proliferation</strong> 是proliferate的名词形式，常见搭配：  <ul>
<li>cell proliferation（细胞增殖）  </li>
<li>weapons proliferation（武器扩散）</li>
</ul>
</li>
</ol>
</blockquote>
<h1 id="第三十六天"><a href="#第三十六天" class="headerlink" title="第三十六天"></a>第三十六天</h1><blockquote>
<h4 id="2025年03月27日"><a href="#2025年03月27日" class="headerlink" title="2025年03月27日"></a>2025年03月27日</h4><ol>
<li><strong>oversee</strong> [ ˌəʊvəˈsiː ]<ul>
<li><strong>中文释义</strong>：监督；监管</li>
<li>The project manager will <strong>oversee</strong> the construction process to ensure quality standards.<br>  （项目经理将<strong>监督</strong>施工过程以确保质量标准。）</li>
<li>A government committee was established to <strong>oversee</strong> the implementation of new regulations.<br>  （成立政府委员会来<strong>监管</strong>新法规的实施。）</li>
</ul>
</li>
<li><strong>institute</strong> [ ˈɪnstɪtjuːt ]<ul>
<li><strong>中文释义</strong>：学院；研究所；建立</li>
<li>She works at a famous research <strong>institute</strong> that specializes in marine biology.<br>  （她在一家著名的海洋生物研究<strong>所</strong>工作。）</li>
<li>The company will <strong>institute</strong> new safety protocols starting next month.<br>  （公司将从下月起<strong>实施</strong>新的安全规程。）</li>
</ul>
</li>
<li><strong>compel</strong> [ kəmˈpel ]<ul>
<li><strong>中文释义</strong>：强迫；迫使</li>
<li>The law <strong>compels</strong> all citizens to pay taxes according to their income.<br>  （法律<strong>强制</strong>所有公民根据收入纳税。）</li>
<li>His passionate speech <strong>compelled</strong> the audience to reconsider their views.<br>  （他激昂的演讲<strong>促使</strong>听众重新思考他们的观点。）</li>
</ul>
</li>
<li><strong>sinew</strong> [ ˈsɪnjuː ]<ul>
<li><strong>中文释义</strong>：肌腱；力量来源</li>
<li>The butcher carefully removed the <strong>sinews</strong> from the meat to make it more tender.<br>  （屠夫仔细剔除肉中的<strong>肌腱</strong>使其更嫩。）</li>
<li>Education is the <strong>sinew</strong> of a nation’s development.<br>  （教育是国家发展的<strong>支柱</strong>。）</li>
</ul>
</li>
<li><strong>illegality</strong> [ ˌɪliˈɡæləti ]<ul>
<li><strong>中文释义</strong>：违法；非法行为</li>
<li>The lawyer argued that the <strong>illegality</strong> of the search made the evidence inadmissible.<br>  （律师辩称搜查的<strong>违法性</strong>使证据不可采信。）</li>
<li>There’s growing concern about the <strong>illegality</strong> of certain online activities.<br>  （人们对某些网络活动的<strong>非法性</strong>日益关注。）</li>
</ul>
</li>
<li><strong>flexitime</strong> [ ˈfleksitaɪm ]<ul>
<li><strong>中文释义</strong>：弹性工作时间制</li>
<li>Our company offers <strong>flexitime</strong>, allowing employees to choose their working hours.<br>  （我们公司实行<strong>弹性工作制</strong>，允许员工自选工作时间。）</li>
<li>With <strong>flexitime</strong>, she can adjust her schedule to pick up her children from school.<br>  （通过<strong>弹性工作制</strong>，她能调整时间接送孩子放学。）</li>
</ul>
</li>
</ol>
<hr>
<h3 id="用法扩展："><a href="#用法扩展：" class="headerlink" title="用法扩展："></a>用法扩展：</h3><ol>
<li><strong>oversee</strong> vs supervise：<br>oversee 侧重宏观监管，supervise 侧重具体指导</li>
<li><strong>institute</strong> 作动词的常见搭配：<ul>
<li>institute proceedings（提起诉讼）</li>
<li>institute an inquiry（展开调查）</li>
</ul>
</li>
<li><strong>compel</strong> 的形容词形式：<br>compelling（令人信服的）<br>compulsory（强制性的）</li>
<li><strong>sinew</strong> 的文学用法：<br>“the sinews of war”（战争的财力&#x2F;资源）</li>
<li><strong>flexitime</strong> 的常见变体：<br>flextime（美式拼写）<br>core hours（核心工作时间）</li>
</ol>
</blockquote>
<h1 id="第三十七天"><a href="#第三十七天" class="headerlink" title="第三十七天"></a>第三十七天</h1><blockquote>
<h4 id="2025年03月29日"><a href="#2025年03月29日" class="headerlink" title="2025年03月29日"></a>2025年03月29日</h4><ol>
<li><p><strong>optic</strong> [ ˈɒptɪk ]  </p>
<ul>
<li><strong>中文释义</strong>：视觉的；光学的；眼睛的  </li>
<li>The <strong>optic</strong> nerve transmits visual information from the eye to the brain.<br>(<strong>视神经</strong>将视觉信息从眼睛传递到大脑。)  </li>
<li>This microscope uses advanced <strong>optic</strong> technology to magnify specimens.<br>(这台显微镜采用先进<strong>光学</strong>技术来放大标本。)</li>
</ul>
</li>
<li><p><strong>overdraft</strong> [ ˈəʊvədrɑːft ]  </p>
<ul>
<li><strong>中文释义</strong>：透支；透支额  </li>
<li>She was charged a fee for going into <strong>overdraft</strong> on her bank account.<br>(她因银行账户<strong>透支</strong>被收取了费用。)  </li>
<li>The bank approved him for a £500 <strong>overdraft</strong> facility.<br>(银行批准了他500英镑的<strong>透支</strong>额度。)</li>
</ul>
</li>
</ol>
<h3 id="补充说明：-1"><a href="#补充说明：-1" class="headerlink" title="补充说明："></a>补充说明：</h3><ul>
<li><p><strong>optic</strong> 相关术语：  </p>
<ul>
<li>optic disc (视神经盘)  </li>
<li>fiber optics (光纤)  </li>
<li>optic illusion (视错觉)</li>
</ul>
</li>
<li><p><strong>overdraft</strong> 银行术语：  </p>
<ul>
<li>arranged overdraft (协议透支)  </li>
<li>unauthorized overdraft (未经授权透支)  </li>
<li>overdraft protection (透支保护)</li>
</ul>
</li>
</ul>
</blockquote>
<h1 id="第三十八天"><a href="#第三十八天" class="headerlink" title="第三十八天"></a>第三十八天</h1><blockquote>
<h4 id="2025年03月30日"><a href="#2025年03月30日" class="headerlink" title="2025年03月30日"></a>2025年03月30日</h4><ol>
<li><p><strong>foetus</strong> [ ˈfiːtəs ]  </p>
<ul>
<li><strong>中文释义</strong>：胎儿（英式拼写，美式拼写为fetus）  </li>
<li>The ultrasound clearly showed the <strong>foetus</strong> moving in the womb.<br>（超声波清楚地显示<strong>胎儿</strong>在子宫中的活动。）  </li>
<li>Smoking during pregnancy can harm the development of the <strong>foetus</strong>.<br>（怀孕期间吸烟会损害<strong>胎儿</strong>的发育。）</li>
</ul>
</li>
<li><p><strong>contrast</strong> [ ˈkɒntrɑːst ]  </p>
<ul>
<li><strong>中文释义</strong>：对比；反差；使形成对比  </li>
<li>The <strong>contrast</strong> between his cheerful appearance and sad eyes was striking.<br>（他开朗的外表和忧郁的眼神形成鲜明<strong>对比</strong>。）  </li>
<li>The report <strong>contrasts</strong> the economic growth of these two countries.<br>（该报告<strong>对比</strong>了两国的经济增长情况。）</li>
</ul>
</li>
<li><p><strong>sprinkle</strong> [ ˈsprɪŋkl ]  </p>
<ul>
<li><strong>中文释义</strong>：洒；撒；少量  </li>
<li>She <strong>sprinkled</strong> cheese on top of the pasta before serving.<br>（上菜前她在意大利面上<strong>撒</strong>了些奶酪。）  </li>
<li>There’s just a <strong>sprinkle</strong> of sugar in this recipe, making it healthier.<br>（这个食谱只用了少量糖，更健康。）</li>
</ul>
</li>
<li><p><strong>splatter</strong> [ ˈsplætə(r) ]  </p>
<ul>
<li><strong>中文释义</strong>：泼溅；溅落；溅泼声  </li>
<li>The painter accidentally <strong>splattered</strong> red paint across the white canvas.<br>（画家不小心把红色颜料<strong>溅</strong>在白色画布上。）  </li>
<li>We heard the <strong>splatter</strong> of raindrops hitting the tin roof.<br>（我们听到雨点打在铁皮屋顶上的<strong>溅泼声</strong>。）</li>
</ul>
</li>
<li><p><strong>twofold</strong> [ ˈtuːfəʊld ]  </p>
<ul>
<li><strong>中文释义</strong>：双重的；两倍的  </li>
<li>The benefits of this policy are <strong>twofold</strong>: economic and environmental.<br>（这项政策的益处是<strong>双重</strong>的：经济和环境。）  </li>
<li>Our sales increased <strong>twofold</strong> after the advertising campaign.<br>（广告活动后我们的销售额增加了<strong>两倍</strong>。）</li>
</ul>
</li>
<li><p><strong>transaction</strong> [ trænˈzækʃn ]  </p>
<ul>
<li><strong>中文释义</strong>：交易；办理  </li>
<li>The bank charges a fee for each financial <strong>transaction</strong>.<br>（银行对每笔金融<strong>交易</strong>收取手续费。）  </li>
<li>All <strong>transactions</strong> are recorded in the company’s database.<br>（所有<strong>交易</strong>都记录在公司数据库中。）</li>
</ul>
</li>
</ol>
<hr>
<h3 id="用法扩展：-1"><a href="#用法扩展：-1" class="headerlink" title="用法扩展："></a>用法扩展：</h3><ol>
<li><p><strong>foetus</strong> 相关术语：  </p>
<ul>
<li>fetal development（胎儿发育）  </li>
<li>embryonic stage（胚胎阶段）</li>
</ul>
</li>
<li><p><strong>contrast</strong> 常用搭配：  </p>
<ul>
<li>in contrast to（与…形成对比）  </li>
<li>contrast agent（造影剂）</li>
</ul>
</li>
<li><p><strong>sprinkle</strong> 生活用法：  </p>
<ul>
<li>sprinkle water（洒水）  </li>
<li>sprinkle with salt（撒盐）</li>
</ul>
</li>
<li><p><strong>splatter</strong> 形象用法：  </p>
<ul>
<li>blood splatter（血迹飞溅）  </li>
<li>splatter film（血腥恐怖片类型）</li>
</ul>
</li>
<li><p><strong>twofold</strong> 比较表达：  </p>
<ul>
<li>threefold（三倍）  </li>
<li>manifold（多倍的）</li>
</ul>
</li>
<li><p><strong>transaction</strong> 专业术语：  </p>
<ul>
<li>transaction record（交易记录）  </li>
<li>cashless transaction（无现金交易）</li>
</ul>
</li>
</ol>
</blockquote>
<h1 id="第三十九天"><a href="#第三十九天" class="headerlink" title="第三十九天"></a>第三十九天</h1><blockquote>
<ul>
<li><h4 id="2025年04月01日"><a href="#2025年04月01日" class="headerlink" title="2025年04月01日"></a>2025年04月01日</h4></li>
</ul>
<ol>
<li><p><strong>limestone</strong> [ ˈlaɪmstəʊn ]  </p>
<ul>
<li><strong>中文释义</strong>：石灰岩；石灰石  </li>
<li>The ancient cathedral was built from local <strong>limestone</strong>, giving it a distinctive pale color.<br>（这座古老的大教堂用当地的<strong>石灰岩</strong>建造，呈现出独特的浅色调。）  </li>
<li><strong>Limestone</strong> caves often contain spectacular stalactites and stalagmites.<br>（<strong>石灰岩</strong>洞穴中常有壮观的钟乳石和石笋。）</li>
</ul>
</li>
<li><p><strong>stationery</strong> [ ˈsteɪʃənri ]  </p>
<ul>
<li><strong>中文释义</strong>：文具；信纸  </li>
<li>She bought a set of elegant <strong>stationery</strong> for writing thank-you letters.<br>（她买了一套精美的<strong>信纸</strong>用来写感谢信。）  </li>
<li>The office keeps all its <strong>stationery</strong> supplies in the storage closet.<br>（办公室把所有<strong>文具</strong>用品都存放在储物柜里。）</li>
</ul>
</li>
</ol>
<hr>
<h3 id="用法扩展：-2"><a href="#用法扩展：-2" class="headerlink" title="用法扩展："></a>用法扩展：</h3><ol>
<li><p><strong>limestone</strong> 相关术语：  </p>
<ul>
<li>limestone quarry（石灰石采石场）  </li>
<li>limestone pavement（石灰岩台地）  </li>
<li>sedimentary limestone（沉积石灰岩）</li>
</ul>
</li>
<li><p><strong>stationery</strong> 常见搭配：  </p>
<ul>
<li>stationery set（文具套装）  </li>
<li>office stationery（办公文具）  </li>
<li>personalized stationery（个性化信纸）</li>
</ul>
</li>
</ol>
<h3 id="易混淆词辨析："><a href="#易混淆词辨析：" class="headerlink" title="易混淆词辨析："></a>易混淆词辨析：</h3><ul>
<li><strong>stationary</strong> [ˈsteɪʃənri]（静止的）与 <strong>stationery</strong>（文具）发音相同但拼写不同  <ul>
<li>The car remained <strong>stationary</strong> at the red light.<br>（汽车在红灯前保持<strong>静止</strong>。）  </li>
<li>She wrote the note on floral <strong>stationery</strong>.<br>（她用花卉图案的<strong>信纸</strong>写了便条。）</li>
</ul>
</li>
</ul>
</blockquote>
<h1 id="第四十天"><a href="#第四十天" class="headerlink" title="第四十天"></a>第四十天</h1><blockquote>
<h4 id="2025年04月02日"><a href="#2025年04月02日" class="headerlink" title="2025年04月02日"></a>2025年04月02日</h4><ol>
<li><p><strong>checked</strong> [tʃekt]  </p>
<ul>
<li><strong>中文释义</strong>：方格纹的；已核对的  </li>
<li>He wore a <strong>checked</strong> shirt that gave him a casual, outdoorsy look.<br>（他穿着一件<strong>方格纹</strong>衬衫，显得随意又充满户外感。）  </li>
<li>All the equipment was <strong>checked</strong> and approved before the experiment began.<br>（所有设备在实验开始前都经过<strong>核查</strong>并获得批准。）</li>
</ul>
</li>
<li><p><strong>check</strong> [tʃek]  </p>
<ul>
<li><strong>中文释义</strong>：检查；核对；支票  </li>
<li>The doctor will <strong>check</strong> your blood pressure during the routine examination.<br>（医生会在常规检查中<strong>测量</strong>你的血压。）  </li>
<li>She paid the bill with a <strong>check</strong> since the restaurant didn’t accept credit cards.<br>（由于餐厅不接受信用卡，她用<strong>支票</strong>支付了账单。）</li>
</ul>
</li>
<li><p><strong>incapacitate</strong> [ˌɪnkəˈpæsɪteɪt]  </p>
<ul>
<li><strong>中文释义</strong>：使无能力；使伤残  </li>
<li>The injury didn’t kill him but <strong>incapacitated</strong> him for several months.<br>（这次受伤没有致命，但让他<strong>丧失能力</strong>数月之久。）  </li>
<li>The cyberattack was designed to <strong>incapacitate</strong> the company’s computer systems.<br>（这次网络攻击旨在<strong>瘫痪</strong>公司的计算机系统。）</li>
</ul>
</li>
<li><p><strong>flora</strong> [ˈflɔːrə]  </p>
<ul>
<li><strong>中文释义</strong>：植物群；（特定地区的）植物  </li>
<li>The tropical rainforest boasts an incredibly diverse <strong>flora</strong> with thousands of plant species.<br>（热带雨林拥有极其多样的<strong>植物群</strong>，有数千种植物。）  </li>
<li>The botanist studied the alpine <strong>flora</strong> that grows above the tree line.<br>（植物学家研究了生长在林木线以上的高山<strong>植物</strong>。）</li>
</ul>
</li>
</ol>
<hr>
<h3 id="用法扩展：-3"><a href="#用法扩展：-3" class="headerlink" title="用法扩展："></a>用法扩展：</h3><ol>
<li><p><strong>checked</strong> 常见搭配：  </p>
<ul>
<li>checked pattern（方格图案）  </li>
<li>double-checked（反复核对的）</li>
</ul>
</li>
<li><p><strong>check</strong> 多义用法：  </p>
<ul>
<li>check in（办理登机&#x2F;入住手续）  </li>
<li>check out（结账离开）  </li>
<li>rain check（改期邀请）</li>
</ul>
</li>
<li><p><strong>incapacitate</strong> 相关词：  </p>
<ul>
<li>capacity（能力）→ incapacity（无能力）  </li>
<li>法律用语：temporarily incapacitated（暂时无行为能力）</li>
</ul>
</li>
<li><p><strong>flora</strong> 与 <strong>fauna</strong>（动物群）常配对使用：  </p>
<ul>
<li>The island’s unique <strong>flora and fauna</strong> attract many biologists.<br>（岛上独特的<strong>动植物群</strong>吸引了许多生物学家。）</li>
</ul>
</li>
</ol>
<h3 id="专业领域用法："><a href="#专业领域用法：" class="headerlink" title="专业领域用法："></a>专业领域用法：</h3><ul>
<li><strong>medical flora</strong>（医用植物志）  </li>
<li><strong>gut flora</strong>（肠道菌群）  </li>
<li><strong>incapacitating agent</strong>（失能性毒剂）</li>
</ul>
</blockquote>
<h1 id="第四十一天"><a href="#第四十一天" class="headerlink" title="第四十一天"></a>第四十一天</h1><blockquote>
<h4 id="2025年04月03日"><a href="#2025年04月03日" class="headerlink" title="2025年04月03日"></a>2025年04月03日</h4><ol>
<li><p><strong>decompose</strong> [ˌdiːkəmˈpəʊz]  </p>
<ul>
<li><strong>中文释义</strong>：分解；腐烂  </li>
<li>Fallen leaves gradually <strong>decompose</strong> and enrich the forest soil.<br>（落叶逐渐<strong>分解</strong>，使森林土壤更肥沃。）  </li>
<li>The compound will <strong>decompose</strong> when heated above 200°C.<br>（这种化合物在200℃以上会<strong>分解</strong>。）</li>
</ul>
</li>
<li><p><strong>demote</strong> [ˌdiːˈməʊt]  </p>
<ul>
<li><strong>中文释义</strong>：使降级；使降职  </li>
<li>The manager was <strong>demoted</strong> to assistant for repeated poor performance.<br>（该经理因屡次表现不佳被<strong>降级</strong>为助理。）  </li>
<li>In the military, officers can be <strong>demoted</strong> as a form of punishment.<br>（军队中，军官可能被<strong>降职</strong>作为一种惩罚。）</li>
</ul>
</li>
<li><p><strong>optometrist</strong> [ɒpˈtɒmətrɪst]  </p>
<ul>
<li><strong>中文释义</strong>：验光师；视力测定师  </li>
<li>The <strong>optometrist</strong> prescribed me new glasses after an eye exam.<br>（<strong>验光师</strong>在眼睛检查后给我配了新眼镜。）  </li>
<li>Unlike ophthalmologists, <strong>optometrists</strong> don’t perform eye surgeries.<br>（与眼科医生不同，<strong>验光师</strong>不做眼部手术。）</li>
</ul>
</li>
<li><p><strong>matchless</strong> [ˈmætʃləs]  </p>
<ul>
<li><strong>中文释义</strong>：无敌的；无比的  </li>
<li>The violinist displayed <strong>matchless</strong> skill during the performance.<br>（小提琴手在演出中展现出<strong>无与伦比</strong>的技巧。）  </li>
<li>The view from the mountaintop was of <strong>matchless</strong> beauty.<br>（从山顶看到的景色<strong>美不胜收</strong>。）</li>
</ul>
</li>
<li><p><strong>conceive</strong> [kənˈsiːv]  </p>
<ul>
<li><strong>中文释义</strong>：构想；怀孕  </li>
<li>The architect <strong>conceived</strong> an innovative design for the new museum.<br>（建筑师为新建博物馆<strong>构想</strong>出创新设计。）  </li>
<li>After years of trying, they finally <strong>conceived</strong> their first child.<br>（经过多年努力，他们终于<strong>怀上</strong>第一个孩子。）</li>
</ul>
</li>
<li><p><strong>agency</strong> [ˈeɪdʒənsi]  </p>
<ul>
<li><strong>中文释义</strong>：机构；代理  </li>
<li>She works at a travel <strong>agency</strong> that specializes in European tours.<br>（她在一家专营欧洲游的旅行<strong>社</strong>工作。）  </li>
<li>The Environmental Protection <strong>Agency</strong> monitors air quality nationwide.<br>（环境保护<strong>署</strong>监测全国空气质量。）</li>
</ul>
</li>
<li><p><strong>chunk</strong> [tʃʌŋk]  </p>
<ul>
<li><strong>中文释义</strong>：大块；大量  </li>
<li>She broke off a <strong>chunk</strong> of chocolate to share with her friend.<br>（她掰下一大<strong>块</strong>巧克力与朋友分享。）  </li>
<li>I need to spend a good <strong>chunk</strong> of time preparing for the exam.<br>（我需要花<strong>大量</strong>时间准备考试。）</li>
</ul>
</li>
<li><p><strong>attractant</strong> [əˈtræktənt]  </p>
<ul>
<li><strong>中文释义</strong>：引诱剂；吸引物  </li>
<li>The flowers produce sweet nectar as an <strong>attractant</strong> for pollinators.<br>（花朵产生甜美的花蜜作为传粉者的<strong>引诱剂</strong>。）  </li>
<li>Pheromones are powerful sexual <strong>attractants</strong> in many insect species.<br>（信息素是许多昆虫物种强效的性<strong>引诱剂</strong>。）</li>
</ul>
</li>
<li><p><strong>collective</strong> [kəˈlektɪv]  </p>
<ul>
<li><strong>中文释义</strong>：集体的；集合的  </li>
<li>The <strong>collective</strong> effort of the team led to the project’s success.<br>（团队的<strong>集体</strong>努力促成了项目成功。）  </li>
<li>This artwork represents the <strong>collective</strong> memory of our community.<br>（这件艺术品代表了我们社区的<strong>集体</strong>记忆。）</li>
</ul>
</li>
</ol>
<hr>
<h3 id="用法扩展：-4"><a href="#用法扩展：-4" class="headerlink" title="用法扩展："></a>用法扩展：</h3><ol>
<li><p><strong>decompose</strong> 相关词：  </p>
<ul>
<li>decomposition（分解作用）  </li>
<li>biodegradable（可生物降解的）</li>
</ul>
</li>
<li><p><strong>demote</strong> 反义词：  </p>
<ul>
<li>promote（晋升）  </li>
<li>常见搭配：demote sb. from…to…（从某职位降到某职位）</li>
</ul>
</li>
<li><p><strong>optometrist</strong> 相关职业：  </p>
<ul>
<li>ophthalmologist（眼科医生）  </li>
<li>optician（配镜师）</li>
</ul>
</li>
<li><p><strong>conceive</strong> 衍生词：  </p>
<ul>
<li>conception（概念；受孕）  </li>
<li>conceivable（可想象的）</li>
</ul>
</li>
<li><p><strong>agency</strong> 常见类型：  </p>
<ul>
<li>news agency（通讯社）  </li>
<li>advertising agency（广告公司）</li>
</ul>
</li>
<li><p><strong>chunk</strong> 计算机术语：  </p>
<ul>
<li>chunk of data（数据块）  </li>
<li>memory chunk（内存块）</li>
</ul>
</li>
<li><p><strong>collective</strong> 特殊用法：  </p>
<ul>
<li>collective noun（集合名词）  </li>
<li>collective bargaining（集体谈判）</li>
</ul>
</li>
</ol>
</blockquote>
<h1 id="第四十二天"><a href="#第四十二天" class="headerlink" title="第四十二天"></a>第四十二天</h1><blockquote>
<h4 id="2025年04月04日"><a href="#2025年04月04日" class="headerlink" title="2025年04月04日"></a>2025年04月04日</h4><ol>
<li><p><strong>oppress</strong> [əˈpres]  </p>
<ul>
<li><strong>中文释义</strong>：压迫；压制；使心情沉重  </li>
<li>The dictator’s regime <strong>oppressed</strong> its people through fear and violence.<br>（独裁者政权通过恐惧和暴力<strong>压迫</strong>人民。）  </li>
<li>The gloomy weather <strong>oppressed</strong> her spirits, making her feel melancholy.<br>（阴沉的天气<strong>压抑</strong>着她的情绪，使她感到忧郁。）</li>
</ul>
</li>
<li><p><strong>seal</strong> [siːl]  </p>
<ul>
<li><strong>中文释义</strong>：海豹；密封；印章  </li>
<li>The Arctic <strong>seals</strong> were basking on the ice under the midnight sun.<br>（北极<strong>海豹</strong>在午夜的阳光下躺在冰面上休息。）  </li>
<li>Remember to <strong>seal</strong> the envelope before mailing the important documents.<br>（邮寄重要文件前记得<strong>密封</strong>信封。）  </li>
<li>The contract became official when both parties applied their <strong>seals</strong>.<br>（当双方盖上<strong>印章</strong>后，合同正式生效。）</li>
</ul>
</li>
<li><p><strong>detract</strong> [dɪˈtrækt]  </p>
<ul>
<li><strong>中文释义</strong>：贬低；减损  </li>
<li>The small stain doesn’t <strong>detract</strong> from the overall beauty of the painting.<br>（小污渍并不<strong>影响</strong>这幅画的整体美感。）  </li>
<li>His constant interruptions <strong>detracted</strong> from the speaker’s presentation.<br>（他不断的打断<strong>减损</strong>了演讲者的展示效果。）</li>
</ul>
</li>
<li><p><strong>gorge</strong> [ɡɔːdʒ]  </p>
<ul>
<li><strong>中文释义</strong>：峡谷；暴食；使饱食  </li>
<li>The hikers stood in awe at the edge of the deep <strong>gorge</strong>.<br>（徒步者们在深<strong>峡谷</strong>边缘肃然起敬。）  </li>
<li>After the diet, she <strong>gorged</strong> herself on chocolate and pastries.<br>（节食结束后，她<strong>狼吞虎咽</strong>地吃巧克力和糕点。）</li>
</ul>
</li>
</ol>
<hr>
<h3 id="用法扩展：-5"><a href="#用法扩展：-5" class="headerlink" title="用法扩展："></a>用法扩展：</h3><ol>
<li><p><strong>oppress</strong> 相关词：  </p>
<ul>
<li>oppression（压迫）  </li>
<li>oppressive（压迫的；闷热的）  </li>
<li>常见搭配：oppressed people（被压迫人民）</li>
</ul>
</li>
<li><p><strong>seal</strong> 多义用法：  </p>
<ul>
<li>seal off（封闭）  </li>
<li>seal one’s fate（决定命运）  </li>
<li>break the seal（拆封）  </li>
<li>动物：seal pup（小海豹）</li>
</ul>
</li>
<li><p><strong>detract</strong> 固定搭配：  </p>
<ul>
<li>detract from（贬低；减损）  </li>
<li>反义词：enhance（增强）</li>
</ul>
</li>
<li><p><strong>gorge</strong> 特殊用法：  </p>
<ul>
<li>make sb’s gorge rise（令人作呕）  </li>
<li>地理名词：Three Gorges（三峡）  </li>
<li>同义词：canyon（峡谷）</li>
</ul>
</li>
</ol>
</blockquote>
<h1 id="第四十三天"><a href="#第四十三天" class="headerlink" title="第四十三天"></a>第四十三天</h1><blockquote>
<h4 id="2025年04月05日"><a href="#2025年04月05日" class="headerlink" title="2025年04月05日"></a>2025年04月05日</h4><ol>
<li><p><strong>ailment</strong> [ˈeɪlmənt]  </p>
<ul>
<li><strong>中文释义</strong>：小病；不适  </li>
<li>The pharmacy offers remedies for common <strong>ailments</strong> like colds and headaches.<br>（这家药店提供治疗感冒头痛等常见<strong>小病</strong>的药物。）  </li>
<li>Despite her chronic <strong>ailment</strong>, she maintains an active lifestyle.<br>（尽管患有慢性<strong>疾病</strong>，她仍保持着积极的生活方式。）</li>
</ul>
</li>
<li><p><strong>flat</strong> [flæt]  </p>
<ul>
<li><strong>中文释义</strong>：公寓（英式）；平坦的；瘪的（轮胎）  </li>
<li>They rented a cozy <strong>flat</strong> in downtown London.<br>（他们在伦敦市中心租了间舒适的<strong>公寓</strong>。）  </li>
<li>The tire went <strong>flat</strong> after hitting a sharp object on the road.<br>（轮胎轧到路上的尖锐物体后<strong>瘪了</strong>。）  </li>
<li>The prairie land was remarkably <strong>flat</strong>, stretching for miles.<br>（草原异常<strong>平坦</strong>，绵延数英里。）</li>
</ul>
</li>
<li><p><strong>herbivore</strong> [ˈhɜːbɪvɔː(r)]  </p>
<ul>
<li><strong>中文释义</strong>：草食动物  </li>
<li>The panda is technically a carnivore but functions as a <strong>herbivore</strong>.<br>（熊猫在分类上是肉食动物，但实际是<strong>草食性</strong>的。）  </li>
<li><strong>Herbivores</strong> like deer and rabbits play crucial roles in the ecosystem.<br>（鹿和兔子等<strong>草食动物</strong>在生态系统中起关键作用。）</li>
</ul>
</li>
<li><p><strong>chancellor</strong> [ˈtʃɑːnsələ(r)]  </p>
<ul>
<li><strong>中文释义</strong>：（德国&#x2F;奥地利）总理；（英国）财政大臣；（大学）名誉校长  </li>
<li>The German <strong>Chancellor</strong> will visit China next month for trade talks.<br>（德国<strong>总理</strong>将于下月访华进行贸易谈判。）  </li>
<li>As university <strong>Chancellor</strong>, she presided over graduation ceremonies.<br>（作为大学<strong>名誉校长</strong>，她主持了毕业典礼。）</li>
</ul>
</li>
</ol>
<hr>
<h3 id="用法扩展：-6"><a href="#用法扩展：-6" class="headerlink" title="用法扩展："></a>用法扩展：</h3><ol>
<li><p><strong>ailment</strong> 常见类型：  </p>
<ul>
<li>minor ailment（小毛病）  </li>
<li>chronic ailment（慢性病）  </li>
<li>stomach ailment（胃部不适）</li>
</ul>
</li>
<li><p><strong>flat</strong> 其他用法：  </p>
<ul>
<li>flat out（全速地）  </li>
<li>fall flat（失败；未达预期效果）  </li>
<li>flat fee（统一费用）</li>
</ul>
</li>
<li><p><strong>herbivore</strong> 相关词：  </p>
<ul>
<li>carnivore（肉食动物）  </li>
<li>omnivore（杂食动物）  </li>
<li>herbivorous（草食的）</li>
</ul>
</li>
<li><p><strong>chancellor</strong> 职务差异：  </p>
<ul>
<li>德国：相当于总理（Angela Merkel was the first female Chancellor）  </li>
<li>英国：财政大臣（正式头衔Chancellor of the Exchequer）  </li>
<li>美国大学：通常指首席行政官</li>
</ul>
</li>
</ol>
</blockquote>
<h1 id="第四十四天"><a href="#第四十四天" class="headerlink" title="第四十四天"></a>第四十四天</h1><blockquote>
<h3 id="2025年04月06日-词汇表"><a href="#2025年04月06日-词汇表" class="headerlink" title="2025年04月06日 词汇表"></a><strong>2025年04月06日 词汇表</strong></h3><h4 id="1-embezzlement-ɪmˈbezlmənt"><a href="#1-embezzlement-ɪmˈbezlmənt" class="headerlink" title="1. embezzlement [ɪmˈbezlmənt]"></a><strong>1. embezzlement</strong> [ɪmˈbezlmənt]</h4><ul>
<li><strong>中文释义</strong>：贪污；挪用公款  </li>
<li>The accountant was arrested for <strong>embezzlement</strong> after stealing company funds.<br>（该会计因<strong>贪污</strong>公司资金被捕。）  </li>
<li><strong>Embezzlement</strong> of public money is a serious crime punishable by law.<br>（<strong>挪用公款</strong>是法律严惩的严重罪行。）</li>
</ul>
<h4 id="2-poultry-ˈpəʊltri"><a href="#2-poultry-ˈpəʊltri" class="headerlink" title="2. poultry [ˈpəʊltri]"></a><strong>2. poultry</strong> [ˈpəʊltri]</h4><ul>
<li><strong>中文释义</strong>：家禽（总称）  </li>
<li>The farm specializes in organic <strong>poultry</strong>, including chickens and ducks.<br>（该农场专门饲养有机<strong>家禽</strong>，包括鸡和鸭。）  </li>
<li><strong>Poultry</strong> prices have risen due to increased demand.<br>（由于需求增加，<strong>家禽</strong>价格上涨。）</li>
</ul>
<h4 id="3-overlapping-ˌəʊvəˈlaepɪŋ"><a href="#3-overlapping-ˌəʊvəˈlaepɪŋ" class="headerlink" title="3. overlapping [ˌəʊvəˈlæpɪŋ]"></a><strong>3. overlapping</strong> [ˌəʊvəˈlæpɪŋ]</h4><ul>
<li><strong>中文释义</strong>：重叠的；交叉的  </li>
<li>The two projects have <strong>overlapping</strong> deadlines, making it hard to manage both.<br>（这两个项目的截止日期<strong>重叠</strong>，难以同时管理。）  </li>
<li>The <strong>overlapping</strong> responsibilities caused confusion among team members.<br>（<strong>交叉的</strong>职责导致团队成员困惑。）</li>
</ul>
<h4 id="4-whereas-ˌweərˈaez"><a href="#4-whereas-ˌweərˈaez" class="headerlink" title="4. whereas [ˌweərˈæz]"></a><strong>4. whereas</strong> [ˌweərˈæz]</h4><ul>
<li><strong>中文释义</strong>：然而；尽管（用于对比）  </li>
<li>He enjoys spicy food, <strong>whereas</strong> his sister prefers mild flavors.<br>（他喜欢辛辣食物，<strong>而</strong>他妹妹喜欢清淡口味。）  </li>
<li>The company profits increased this year, <strong>whereas</strong> last year they suffered losses.<br>（公司今年盈利，<strong>而</strong>去年亏损。）</li>
</ul>
<h4 id="5-teem-tiːm"><a href="#5-teem-tiːm" class="headerlink" title="5. teem [tiːm]"></a><strong>5. teem</strong> [tiːm]</h4><ul>
<li><strong>中文释义</strong>：充满；大量存在  </li>
<li>The rainforest <strong>teems</strong> with diverse wildlife.<br>（热带雨林<strong>充满</strong>各种野生动物。）  </li>
<li>During summer, the beaches <strong>teem</strong> with tourists.<br>（夏季时，海滩上<strong>挤满</strong>游客。）</li>
</ul>
<h4 id="6-dock-dɒk"><a href="#6-dock-dɒk" class="headerlink" title="6. dock [dɒk]"></a><strong>6. dock</strong> [dɒk]</h4><ul>
<li><strong>中文释义</strong>：码头；船坞；扣除（工资等）  </li>
<li>The ship arrived at the <strong>dock</strong> early in the morning.<br>（船在清晨抵达<strong>码头</strong>。）  </li>
<li>His salary was <strong>docked</strong> for arriving late to work.<br>（他因迟到被<strong>扣</strong>工资。）</li>
</ul>
<h4 id="7-glacial-ˈɡleɪʃl"><a href="#7-glacial-ˈɡleɪʃl" class="headerlink" title="7. glacial [ˈɡleɪʃl]"></a><strong>7. glacial</strong> [ˈɡleɪʃl]</h4><ul>
<li><strong>中文释义</strong>：冰川的；极冷的；缓慢的  </li>
<li>The <strong>glacial</strong> landscape was breathtaking, with towering ice formations.<br>（<strong>冰川</strong>景观令人惊叹，冰峰耸立。）  </li>
<li>His response was <strong>glacial</strong>, taking weeks to reply.<br>（他的反应<strong>极其缓慢</strong>，几周后才回复。）</li>
</ul>
<h4 id="8-plummet-ˈplvmɪt"><a href="#8-plummet-ˈplvmɪt" class="headerlink" title="8. plummet [ˈplʌmɪt]"></a><strong>8. plummet</strong> [ˈplʌmɪt]</h4><ul>
<li><strong>中文释义</strong>：暴跌；急速下降  </li>
<li>Stock prices <strong>plummeted</strong> after the economic crisis.<br>（经济危机后，股价<strong>暴跌</strong>。）  </li>
<li>The temperature <strong>plummeted</strong> overnight, causing frost.<br>（气温<strong>骤降</strong>，导致霜冻。）</li>
</ul>
<h4 id="9-impel-ɪmˈpel"><a href="#9-impel-ɪmˈpel" class="headerlink" title="9. impel [ɪmˈpel]"></a><strong>9. impel</strong> [ɪmˈpel]</h4><ul>
<li><strong>中文释义</strong>：驱使；迫使  </li>
<li>His passion for justice <strong>impelled</strong> him to become a lawyer.<br>（对正义的热情<strong>驱使</strong>他成为律师。）  </li>
<li>Financial difficulties <strong>impelled</strong> her to find a second job.<br>（经济困难<strong>迫使</strong>她找第二份工作。）</li>
</ul>
<h4 id="10-propel-prəˈpel"><a href="#10-propel-prəˈpel" class="headerlink" title="10. propel [prəˈpel]"></a><strong>10. propel</strong> [prəˈpel]</h4><ul>
<li><strong>中文释义</strong>：推进；推动  </li>
<li>The strong wind <strong>propelled</strong> the sailboat forward.<br>（强风<strong>推动</strong>帆船前进。）  </li>
<li>Technological advancements <strong>propel</strong> economic growth.<br>（技术进步<strong>推动</strong>经济增长。）</li>
</ul>
<h4 id="11-extracurricular-ˌekstrəkəˈrɪkjələ-r"><a href="#11-extracurricular-ˌekstrəkəˈrɪkjələ-r" class="headerlink" title="11. extracurricular [ˌekstrəkəˈrɪkjələ(r)]"></a><strong>11. extracurricular</strong> [ˌekstrəkəˈrɪkjələ(r)]</h4><ul>
<li><strong>中文释义</strong>：课外的；业余的  </li>
<li>She participates in <strong>extracurricular</strong> activities like debate club and soccer.<br>（她参加辩论社和足球等<strong>课外</strong>活动。）  </li>
<li>Employers value <strong>extracurricular</strong> experiences in job applicants.<br>（雇主看重求职者的<strong>课外</strong>经历。）</li>
</ul>
<h4 id="12-adhere-ədˈhɪə-r"><a href="#12-adhere-ədˈhɪə-r" class="headerlink" title="12. adhere [ədˈhɪə(r)]"></a><strong>12. adhere</strong> [ədˈhɪə(r)]</h4><ul>
<li><strong>中文释义</strong>：黏附；坚持（原则等）  </li>
<li>The sticker doesn’t <strong>adhere</strong> well to wet surfaces.<br>（贴纸无法很好地<strong>黏附</strong>在潮湿表面。）  </li>
<li>The company strictly <strong>adheres</strong> to environmental regulations.<br>（公司严格<strong>遵守</strong>环保法规。）</li>
</ul>
<hr>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a><strong>总结</strong></h3><table>
<thead>
<tr>
<th>单词</th>
<th>主要含义</th>
<th>例句</th>
</tr>
</thead>
<tbody><tr>
<td><strong>embezzlement</strong></td>
<td>贪污</td>
<td>He was jailed for <strong>embezzlement</strong>.</td>
</tr>
<tr>
<td><strong>poultry</strong></td>
<td>家禽</td>
<td><strong>Poultry</strong> farming is common here.</td>
</tr>
<tr>
<td><strong>overlapping</strong></td>
<td>重叠的</td>
<td>The schedules are <strong>overlapping</strong>.</td>
</tr>
<tr>
<td><strong>whereas</strong></td>
<td>然而</td>
<td>She’s outgoing, <strong>whereas</strong> he’s shy.</td>
</tr>
<tr>
<td><strong>teem</strong></td>
<td>充满</td>
<td>The market <strong>teems</strong> with people.</td>
</tr>
<tr>
<td><strong>dock</strong></td>
<td>码头；扣除</td>
<td>The ship is at the <strong>dock</strong>.</td>
</tr>
<tr>
<td><strong>glacial</strong></td>
<td>冰川的；极慢的</td>
<td>His progress was <strong>glacial</strong>.</td>
</tr>
<tr>
<td><strong>plummet</strong></td>
<td>暴跌</td>
<td>Sales <strong>plummeted</strong> after the scandal.</td>
</tr>
<tr>
<td><strong>impel</strong></td>
<td>驱使</td>
<td>Fear <strong>impelled</strong> him to run.</td>
</tr>
<tr>
<td><strong>propel</strong></td>
<td>推动</td>
<td>The engine <strong>propels</strong> the car.</td>
</tr>
<tr>
<td><strong>extracurricular</strong></td>
<td>课外的</td>
<td>She enjoys <strong>extracurricular</strong> sports.</td>
</tr>
<tr>
<td><strong>adhere</strong></td>
<td>黏附；遵守</td>
<td>Glue helps paper <strong>adhere</strong>.</td>
</tr>
</tbody></table>
</blockquote>
<h1 id="第四十五天"><a href="#第四十五天" class="headerlink" title="第四十五天"></a>第四十五天</h1><blockquote>
<h3 id="2025年04月08日-词汇表"><a href="#2025年04月08日-词汇表" class="headerlink" title="2025年04月08日 词汇表"></a><strong>2025年04月08日 词汇表</strong></h3><p>以下是2025年04月06日词汇表的详细解析（按使用频率排序）：</p>
<ol>
<li><p><strong>settlement</strong> [ˈsetlmənt]</p>
<ul>
<li>高频商务&#x2F;法律词汇</li>
<li>中文释义：定居点；和解协议；结算</li>
<li>The two companies reached a $2 million out-of-court settlement.<br>(两家公司达成200万美元庭外和解)</li>
<li>This area was the first European settlement in North America.<br>(该地区是欧洲人在北美的首个定居点)</li>
</ul>
</li>
<li><p><strong>modernism</strong> [ˈmɒdənɪzəm] &amp; <strong>modernist</strong> [ˈmɒdənɪst]</p>
<ul>
<li>艺术&#x2F;文学高频术语</li>
<li>中文释义：现代主义（思潮）；现代主义的</li>
<li>James Joyce was a leading modernist writer.<br>(詹姆斯·乔伊斯是现代主义代表作家)</li>
<li>The building reflects the principles of architectural modernism.<br>(该建筑体现现代主义建筑原则)</li>
</ul>
</li>
<li><p><strong>excavation</strong> [ˌekskəˈveɪʃn]</p>
<ul>
<li>考古&#x2F;工程常用词</li>
<li>中文释义：挖掘；发掘现场</li>
<li>The excavation uncovered a 3,000-year-old temple complex.<br>(挖掘发现了一座3000年前的庙宇群)</li>
<li>Safety barriers were installed around the excavation site.<br>(挖掘现场周围设置了安全护栏)</li>
</ul>
</li>
<li><p><strong>hypothesis</strong> [haɪˈpɒθəsɪs]</p>
<ul>
<li>学术写作核心词</li>
<li>中文释义：假设；假说</li>
<li>The research team is testing their hypothesis about memory formation.<br>(研究团队正在验证关于记忆形成的假说)</li>
<li>This theory remains a unproven hypothesis.<br>(该理论仍是个未证实的假设)</li>
</ul>
</li>
<li><p><strong>premise</strong> [ˈpremɪs]</p>
<ul>
<li>逻辑&#x2F;法律重要词</li>
<li>中文释义：前提；经营场所</li>
<li>The argument is based on a false premise.<br>(该论点建立在错误前提上)</li>
<li>Alcohol is prohibited on school premises.<br>(校园内禁止饮酒)</li>
</ul>
</li>
<li><p><strong>discerning</strong> [dɪˈsɜːnɪŋ]</p>
<ul>
<li>高端书面用语</li>
<li>中文释义：有洞察力的；眼光独到的</li>
<li>The shop caters to discerning customers who appreciate quality.<br>(该店服务追求品质的鉴赏型顾客)</li>
<li>She has a discerning eye for antique furniture.<br>(她对古董家具有独到眼光)</li>
</ul>
</li>
<li><p><strong>liaise</strong> [liˈeɪz]</p>
<ul>
<li>职场高频动词</li>
<li>中文释义：联络；协作</li>
<li>My job is to liaise between the design and marketing teams.<br>(我的工作是协调设计部和市场部)</li>
<li>We need to liaise with local authorities.<br>(我们需要与地方政府沟通)</li>
</ul>
</li>
<li><p><strong>troupe</strong> [truːp]</p>
<ul>
<li>艺术领域专有词</li>
<li>中文释义：表演团体</li>
<li>The dance troupe is touring Europe this summer.<br>(该舞蹈团今夏在欧洲巡演)</li>
<li>A troupe of actors performed Shakespeare in the park.<br>(剧团在公园表演莎士比亚戏剧)</li>
</ul>
</li>
<li><p><strong>fallow</strong> [ˈfæləʊ]</p>
<ul>
<li>农业&#x2F;生态术语</li>
<li>中文释义：休耕的；闲置的</li>
<li>Farmers leave fields fallow to restore soil nutrients.<br>(农民休耕以恢复土壤养分)</li>
<li>Her creative talents lay fallow for years.<br>(她的创作才能多年闲置)</li>
</ul>
</li>
<li><p><strong>prospectus</strong> [prəˈspektəs]</p>
<ul>
<li>教育&#x2F;金融文件</li>
<li>中文释义：章程；招股说明书</li>
<li>The university prospectus details all degree programs.<br>(大学章程详列所有学位课程)</li>
<li>Read the investment prospectus carefully before buying shares.<br>(购股前仔细阅读招股书)</li>
</ul>
</li>
<li><p><strong>niggle</strong> [ˈnɪɡl]</p>
<ul>
<li>英式口语词</li>
<li>中文释义：小问题；不断挑剔</li>
<li>A back niggle prevented him from playing.<br>(背部小伤使他无法参赛)</li>
<li>She’s always niggling about minor details.<br>(她总爱挑剔细枝末节)</li>
</ul>
</li>
</ol>
<p>记忆技巧：</p>
<ul>
<li>词根联想：modern(现代)+ism(主义)&#x3D;现代主义</li>
<li>对比记忆：premise(前提)-promise(承诺)</li>
<li>场景记忆：excavation(挖掘)+site(现场)&#x3D;考古现场</li>
</ul>
<p>常见搭配：</p>
<ul>
<li>reach a settlement 达成和解</li>
<li>working hypothesis 工作假设</li>
<li>main premise 主要前提</li>
<li>fallow period 休眠期</li>
<li>prospectus requirements 招生要求</li>
</ul>
</blockquote>
<h1 id="第四十六天"><a href="#第四十六天" class="headerlink" title="第四十六天"></a>第四十六天</h1><blockquote>
<h3 id="2025年04月09日-词汇表"><a href="#2025年04月09日-词汇表" class="headerlink" title="2025年04月09日 词汇表"></a><strong>2025年04月09日 词汇表</strong></h3><h3 id="premium-ˈpriːmiəm"><a href="#premium-ˈpriːmiəm" class="headerlink" title="premium [ˈpriːmiəm]"></a><strong>premium</strong> [ˈpriːmiəm]</h3><p><strong>中文释义</strong>：  </p>
<ol>
<li><strong>高价的；优质的</strong>  </li>
<li><strong>保险费</strong>  </li>
<li><strong>额外费用；溢价</strong></li>
</ol>
<p><strong>例句</strong>：  </p>
<ol>
<li><p><strong>优质&#x2F;高价</strong>  </p>
<ul>
<li>This brand is known for its <strong>premium</strong> quality products.<br>（该品牌以其<strong>优质</strong>产品闻名。）  </li>
<li>They stayed at a <strong>premium</strong> hotel during their vacation.<br>（度假期间，他们住在一家<strong>高档</strong>酒店。）</li>
</ul>
</li>
<li><p><strong>保险费</strong>  </p>
<ul>
<li>Car insurance <strong>premiums</strong> have increased this year.<br>（今年汽车保险<strong>费</strong>上涨了。）  </li>
<li>He pays a monthly <strong>premium</strong> for his health insurance.<br>（他每月支付健康保险<strong>费</strong>。）</li>
</ul>
</li>
<li><p><strong>额外费用；溢价</strong>  </p>
<ul>
<li>You have to pay a <strong>premium</strong> for express delivery.<br>（快递需支付<strong>额外费用</strong>。）  </li>
<li>Shares of the company are trading at a <strong>premium</strong>.<br>（该公司股票正以<strong>溢价</strong>交易。）</li>
</ul>
</li>
</ol>
<p><strong>常见搭配</strong>：  </p>
<ul>
<li><strong>at a premium</strong>（供不应求；高价）  <ul>
<li>Office space in the city center is <strong>at a premium</strong>.<br>（市中心的办公空间<strong>供不应求</strong>。）</li>
</ul>
</li>
<li><strong>premium price</strong>（溢价价格）  </li>
<li><strong>premium service</strong>（高端服务）</li>
</ul>
<hr>
<h3 id="artery-ˈɑːtəri"><a href="#artery-ˈɑːtəri" class="headerlink" title="artery [ˈɑːtəri]"></a><strong>artery</strong> [ˈɑːtəri]</h3><p><strong>中文释义</strong>：  </p>
<ol>
<li><strong>动脉</strong>（解剖学）  </li>
<li><strong>交通要道；主干道</strong></li>
</ol>
<p><strong>例句</strong>：  </p>
<ol>
<li><p><strong>动脉（医学）</strong>  </p>
<ul>
<li>A blocked <strong>artery</strong> can cause a heart attack.<br>（<strong>动脉</strong>堵塞可能导致心脏病发作。）  </li>
<li>The doctor checked his <strong>arteries</strong> for signs of plaque buildup.<br>（医生检查他的<strong>动脉</strong>是否有斑块堆积。）</li>
</ul>
</li>
<li><p><strong>交通要道</strong>  </p>
<ul>
<li>The highway serves as a major <strong>artery</strong> for commuters.<br>（这条高速公路是通勤者的<strong>主干道</strong>。）  </li>
<li>The city plans to widen the main <strong>artery</strong> to reduce traffic jams.<br>（该市计划拓宽<strong>主干道</strong>以减少拥堵。）</li>
</ul>
</li>
</ol>
<p><strong>常见搭配</strong>：  </p>
<ul>
<li><strong>coronary artery</strong>（冠状动脉）  </li>
<li><strong>major artery</strong>（主要干道）  </li>
<li><strong>arterial road</strong>（主干道路）</li>
</ul>
<p><strong>记忆技巧</strong>：  </p>
<ul>
<li><strong>artery（动脉）↔ vein（静脉）</strong>（动脉输送血液<strong>离开心脏</strong>，静脉输送血液<strong>回到心脏</strong>）  </li>
<li><strong>交通比喻</strong>：城市的主干道就像人体的动脉，承担主要运输功能。</li>
</ul>
<hr>
<h3 id="对比记忆"><a href="#对比记忆" class="headerlink" title="对比记忆"></a><strong>对比记忆</strong></h3><table>
<thead>
<tr>
<th>单词</th>
<th>主要含义</th>
<th>例句</th>
</tr>
</thead>
<tbody><tr>
<td><strong>premium</strong></td>
<td>高价的；保险费</td>
<td>He bought a <strong>premium</strong> car.</td>
</tr>
<tr>
<td><strong>artery</strong></td>
<td>动脉；主干道</td>
<td>The highway is a key <strong>artery</strong>.</td>
</tr>
</tbody></table>
</blockquote>
<h1 id="第四十七天"><a href="#第四十七天" class="headerlink" title="第四十七天"></a>第四十七天</h1><blockquote>
<h3 id="2025年04月10日-词汇表"><a href="#2025年04月10日-词汇表" class="headerlink" title="2025年04月10日 词汇表"></a><strong>2025年04月10日 词汇表</strong></h3><ol>
<li><strong>surplus</strong> [ˈsɜːpləs] ★★★★</li>
</ol>
<ul>
<li>中文释义：过剩；盈余</li>
<li>经济高频词：<br><em>The budget has a $2 million surplus this year.</em><br>（今年预算有200万美元盈余）</li>
<li>反义词：deficit（赤字）</li>
<li>搭配：trade surplus（贸易顺差）&#x2F; surplus stock（过剩库存）</li>
</ul>
<ol start="2">
<li><strong>surpass</strong> [səˈpɑːs] ★★★★</li>
</ol>
<ul>
<li>中文释义：超越</li>
<li>商务&#x2F;学术常用：<br><em>The new model surpasses all competitors in fuel efficiency.</em><br>（新款在燃油效率上超越所有竞品）</li>
<li>近义词：exceed（更中性）&#x2F; outstrip（速度上超越）</li>
</ul>
<ol start="3">
<li><strong>procession</strong> [prəˈseʃn] ★★★</li>
</ol>
<ul>
<li>中文释义：游行队伍；列队行进</li>
<li>文化场景：<br><em>The wedding procession moved slowly through the village.</em><br>（婚礼队伍缓行穿过村庄）</li>
<li>派生词：processional（行进式的）</li>
</ul>
<ol start="4">
<li><strong>succession</strong> [səkˈseʃn] ★★★</li>
</ol>
<ul>
<li>中文释义：继任；连续</li>
<li>两个核心用法：<br><em>The succession of wet days ruined the crops.</em><br>（连续的雨天毁了庄稼）<br><em>The board discussed the CEO succession plan.</em><br>（董事会讨论CEO继任计划）</li>
<li>法律短语：in succession to（继承…职位）</li>
</ul>
<ol start="5">
<li><strong>haul</strong> [hɔːl] ★★★</li>
</ol>
<ul>
<li>中文释义：拖运；运输量</li>
<li>物流术语：<br><em>The truck made three hauls per day.</em><br>（卡车每天运输三趟）</li>
<li>渔业用语：a good haul of fish（大量渔获）</li>
</ul>
<ol start="6">
<li><strong>surmount</strong> [səˈmaʊnt] ★★</li>
</ol>
<ul>
<li>中文释义：克服（困难）</li>
<li>正式用语：<br><em>They surmounted language barriers through gestures.</em><br>（他们通过手势克服语言障碍）</li>
<li>近义词：overcome（更口语化）</li>
</ul>
<ol start="7">
<li><strong>sift</strong> [sɪft] ★★</li>
</ol>
<ul>
<li>中文释义：筛选；细查</li>
<li>两个典型场景：<br><em>Sift the flour before baking.</em><br>（烘焙前先筛面粉）<br><em>Police are sifting through the evidence.</em><br>（警方正在仔细审查证据）</li>
</ul>
<ol start="8">
<li><strong>crash</strong> [kræʃ] ★★</li>
</ol>
<ul>
<li>中文释义：碰撞；暴跌；崩溃</li>
<li>多义词注意：<br>*The stock market crashed.*（股市暴跌）<br>*A loud crash came from the kitchen.*（厨房传来撞击声）<br>*My computer keeps crashing.*（电脑不断死机）</li>
</ul>
<ol start="9">
<li><strong>bistro</strong> [ˈbiːstrəʊ] ★</li>
</ol>
<ul>
<li>中文释义：小餐馆</li>
<li>文化背景：<br><em>Parisian bistros serve simple French dishes.</em><br>（巴黎小餐馆供应简法餐）</li>
<li>辨析：bistro（休闲）&#x2F; brasserie（更大更正式）</li>
</ul>
<ol start="10">
<li><strong>gullibly</strong> [ˈɡʌləbəlɪ] ★</li>
</ol>
<ul>
<li>中文释义：轻信地</li>
<li>心理学词汇：<br><em>He gullibly believed the email scam.</em><br>（他轻信了邮件诈骗）</li>
<li>词根：gull（欺骗）+ible（易…的）</li>
</ul>
<p>记忆策略：</p>
<ol>
<li><p>“sur-“前缀三兄弟：</p>
<ul>
<li>surmount（克服障碍）</li>
<li>surplus（多到溢出来）</li>
<li>surpass（超越他人）</li>
</ul>
</li>
<li><p>场景联想：</p>
<ul>
<li>烘焙时需要sift面粉</li>
<li>金融新闻常出现surplus和crash</li>
</ul>
</li>
<li><p>对比记忆：</p>
<ul>
<li>procession（有序行进）</li>
<li>succession（时间上的连续）</li>
</ul>
</li>
</ol>
<p>常见错误警示：</p>
<ul>
<li>surplus ≠ sufficient（足够）</li>
<li>surpass ≠ surprise（惊喜）</li>
<li>succession ≠ success（成功）</li>
</ul>
<p>专业领域应用：</p>
<ul>
<li>经济报告：surplus&#x2F;shortage</li>
<li>企业管理：succession planning</li>
<li>计算机：system crash</li>
<li>烹饪：sifting dry ingredients</li>
</ul>
</blockquote>
<h1 id="第四十八天"><a href="#第四十八天" class="headerlink" title="第四十八天"></a>第四十八天</h1><blockquote>
<h3 id="2025年04月14日-词汇表"><a href="#2025年04月14日-词汇表" class="headerlink" title="2025年04月14日 词汇表"></a><strong>2025年04月14日 词汇表</strong></h3><h3 id="1-sundial-ˈsvndaɪəl"><a href="#1-sundial-ˈsvndaɪəl" class="headerlink" title="1. sundial [ˈsʌndaɪəl]"></a><strong>1. sundial</strong> [ˈsʌndaɪəl]</h3><p><strong>中文释义</strong>：日晷（古代计时工具）<br><strong>例句</strong>：  </p>
<ul>
<li>The ancient <strong>sundial</strong> in the garden still accurately tells time on sunny days.<br>（花园里的古老<strong>日晷</strong>在晴天仍能准确计时。）  </li>
<li>Unlike modern clocks, a <strong>sundial</strong> uses shadows to indicate the time.<br>（与现代时钟不同，<strong>日晷</strong>利用影子显示时间。）</li>
</ul>
<hr>
<h3 id="2-coinstantaneous-ˌkəʊɪnstənˈteɪnɪəs"><a href="#2-coinstantaneous-ˌkəʊɪnstənˈteɪnɪəs" class="headerlink" title="2. coinstantaneous [ˌkəʊɪnstənˈteɪnɪəs]"></a><strong>2. coinstantaneous</strong> [ˌkəʊɪnstənˈteɪnɪəs]</h3><p><strong>中文释义</strong>：同时发生的（学术用语，罕见）<br><strong>例句</strong>：  </p>
<ul>
<li>The two scientific discoveries were <strong>coinstantaneous</strong>, published within days of each other.<br>（这两项科学发现是<strong>同时发生的</strong>，发表时间仅隔数日。）  </li>
<li>In physics, <strong>coinstantaneous</strong> events occur at exactly the same moment in time.<br>（在物理学中，<strong>同时发生</strong>的事件精确出现在同一时刻。）</li>
</ul>
<hr>
<h3 id="3-assumption-əˈsvmpʃn"><a href="#3-assumption-əˈsvmpʃn" class="headerlink" title="3. assumption [əˈsʌmpʃn]"></a><strong>3. assumption</strong> [əˈsʌmpʃn]</h3><p><strong>中文释义</strong>：假设；假定<br><strong>例句</strong>：  </p>
<ul>
<li>The theory is based on the <strong>assumption</strong> that human behavior is predictable.<br>（该理论基于人类行为可预测的<strong>假设</strong>。）  </li>
<li>Never make <strong>assumptions</strong> about someone’s background without asking.<br>（切勿在未询问的情况下<strong>臆断</strong>他人的背景。）</li>
</ul>
<hr>
<h3 id="4-texture-ˈtekstʃə-r"><a href="#4-texture-ˈtekstʃə-r" class="headerlink" title="4. texture [ˈtekstʃə(r)]"></a><strong>4. texture</strong> [ˈtekstʃə(r)]</h3><p><strong>中文释义</strong>：质地；纹理<br><strong>例句</strong>：  </p>
<ul>
<li>The fabric has a soft, velvety <strong>texture</strong> that feels luxurious.<br>（这种面料具有柔软天鹅绒般的<strong>质地</strong>，触感奢华。）  </li>
<li>The artist added sand to the paint to create a rough <strong>texture</strong>.<br>（艺术家在颜料中添加沙子以制造粗糙<strong>质感</strong>。）</li>
</ul>
<hr>
<h3 id="5-unravel-vnˈraevl"><a href="#5-unravel-vnˈraevl" class="headerlink" title="5. unravel [ʌnˈrævl]"></a><strong>5. unravel</strong> [ʌnˈrævl]</h3><p><strong>中文释义</strong>：解开；阐明；崩溃<br><strong>例句</strong>：  </p>
<ul>
<li>She carefully <strong>unraveled</strong> the tangled thread.<br>（她小心地<strong>解开</strong>缠结的线。）  </li>
<li>The detective <strong>unraveled</strong> the complex mystery step by step.<br>（侦探逐步<strong>解开</strong>了复杂的谜团。）  </li>
<li>Without proper management, the project could quickly <strong>unravel</strong>.<br>（若管理不当，项目可能迅速<strong>崩溃</strong>。）</li>
</ul>
<hr>
<h3 id="6-consolation-ˌkɒnsəˈleɪʃn"><a href="#6-consolation-ˌkɒnsəˈleɪʃn" class="headerlink" title="6. consolation [ˌkɒnsəˈleɪʃn]"></a><strong>6. consolation</strong> [ˌkɒnsəˈleɪʃn]</h3><p><strong>中文释义</strong>：安慰；慰藉<br><strong>例句</strong>：  </p>
<ul>
<li>The kind words from her friend were a great <strong>consolation</strong> after the loss.<br>（朋友的暖心话语是她遭遇损失后的莫大<strong>安慰</strong>。）  </li>
<li>Winning the bronze medal was some <strong>consolation</strong> for the disappointed athlete.<br>（对失望的运动员来说，铜牌是一种<strong>慰藉</strong>。）</li>
</ul>
<hr>
<h3 id="7-prevalent-ˈprevələnt"><a href="#7-prevalent-ˈprevələnt" class="headerlink" title="7. prevalent [ˈprevələnt]"></a><strong>7. prevalent</strong> [ˈprevələnt]</h3><p><strong>中文释义</strong>：普遍的；盛行的<br><strong>例句</strong>：  </p>
<ul>
<li>Smartphone use is <strong>prevalent</strong> among teenagers worldwide.<br>（智能手机在全球青少年中<strong>普及</strong>。）  </li>
<li>In tropical regions, mosquito-borne diseases are more <strong>prevalent</strong>.<br>（在热带地区，蚊媒疾病更为<strong>盛行</strong>。）</li>
</ul>
<hr>
<h3 id="8-contagious-kənˈteɪdʒəs"><a href="#8-contagious-kənˈteɪdʒəs" class="headerlink" title="8. contagious [kənˈteɪdʒəs]"></a><strong>8. contagious</strong> [kənˈteɪdʒəs]</h3><p><strong>中文释义</strong>：传染性的；有感染力的<br><strong>例句</strong>：  </p>
<ul>
<li>The flu is highly <strong>contagious</strong>, especially in crowded places.<br>（流感极具<strong>传染性</strong>，尤其在拥挤场所。）  </li>
<li>Her laughter was so <strong>contagious</strong> that everyone in the room started smiling.<br>（她的笑声极富<strong>感染力</strong>，房间里的人都笑了。）</li>
</ul>
<hr>
<h3 id="对比记忆表"><a href="#对比记忆表" class="headerlink" title="对比记忆表"></a><strong>对比记忆表</strong></h3><table>
<thead>
<tr>
<th>单词</th>
<th>核心含义</th>
<th>使用场景</th>
</tr>
</thead>
<tbody><tr>
<td><strong>sundial</strong></td>
<td>日晷</td>
<td>历史&#x2F;天文</td>
</tr>
<tr>
<td><strong>coinstantaneous</strong></td>
<td>同时发生</td>
<td>学术&#x2F;科技</td>
</tr>
<tr>
<td><strong>assumption</strong></td>
<td>假设</td>
<td>研究&#x2F;日常</td>
</tr>
<tr>
<td><strong>texture</strong></td>
<td>质地</td>
<td>艺术&#x2F;设计</td>
</tr>
<tr>
<td><strong>unravel</strong></td>
<td>解开；崩溃</td>
<td>侦探&#x2F;商业</td>
</tr>
<tr>
<td><strong>consolation</strong></td>
<td>安慰</td>
<td>情感支持</td>
</tr>
<tr>
<td><strong>prevalent</strong></td>
<td>普遍的</td>
<td>社会现象</td>
</tr>
<tr>
<td><strong>contagious</strong></td>
<td>传染的</td>
<td>医学&#x2F;行为</td>
</tr>
</tbody></table>
<h3 id="记忆技巧"><a href="#记忆技巧" class="headerlink" title="记忆技巧"></a><strong>记忆技巧</strong></h3><ul>
<li><strong>词根联想</strong>：  <ul>
<li>“con-“（共同）+ “tag”（接触）→ <strong>contagious</strong>（接触传染）  </li>
<li>“pre-“（前）+ “valent”（强效的）→ <strong>prevalent</strong>（占优势的→盛行的）</li>
</ul>
</li>
<li><strong>场景联想</strong>：  <ul>
<li>想象古代人用<strong>sundial</strong>看时间，现代人用手机（对比）  </li>
<li><strong>Unravel</strong> a mystery（解开谜团）像拆开一团毛线</li>
</ul>
</li>
</ul>
<h3 id="常见搭配"><a href="#常见搭配" class="headerlink" title="常见搭配"></a><strong>常见搭配</strong></h3><ul>
<li><strong>False assumption</strong>（错误假设）  </li>
<li><strong>Smooth&#x2F;rough texture</strong>（光滑&#x2F;粗糙质地）  </li>
<li><strong>Contagious disease</strong>（传染病）  </li>
<li><strong>Cold consolation</strong>（微不足道的安慰）</li>
</ul>
</blockquote>
<h1 id="第四十九天"><a href="#第四十九天" class="headerlink" title="第四十九天"></a>第四十九天</h1><blockquote>
<h4 id="2025年04月15日"><a href="#2025年04月15日" class="headerlink" title="2025年04月15日"></a>2025年04月15日</h4><p>以下是这组词汇的详细解析，按实用频率排序并标注学术等级（★为日常词汇，★★★为学术高频词）：</p>
<ol>
<li><strong>displace</strong> [dɪsˈpleɪs] ★★★</li>
</ol>
<ul>
<li>中文释义：取代；置换；迫使迁移</li>
<li>物理&#x2F;社会学术语：<br><em>The flood displaced thousands of residents.</em><br>（洪水使数千居民流离失所）</li>
<li>工程学用法：<br><em>Electric vehicles are displacing traditional cars.</em><br>（电动车正在取代传统汽车）</li>
<li>词根：dis（相反）+place（放置）&#x3D; 移出原位置</li>
<li>常见搭配：<ul>
<li>displaced person（流离失所者）</li>
<li>displacement effect（置换效应）</li>
</ul>
</li>
</ul>
<ol start="2">
<li><strong>dormant</strong> [ˈdɔːmənt] ★★</li>
</ol>
<ul>
<li>中文释义：休眠的；潜伏的</li>
<li>生物学&#x2F;金融用语：<br><em>The volcano has been dormant for centuries.</em><br>（该火山已休眠数个世纪）<br><em>Dormant bank accounts may incur fees.</em><br>（休眠银行账户可能产生费用）</li>
<li>近义词对比：<ul>
<li>dormant（暂时不活跃）</li>
<li>extinct（永久灭绝）</li>
</ul>
</li>
<li>记忆技巧：dorm（宿舍）+ant → 像在宿舍睡觉一样休眠</li>
</ul>
<ol start="3">
<li><strong>conformity</strong> [kənˈfɔːməti] ★★★</li>
</ol>
<ul>
<li>中文释义：遵从；一致性</li>
<li>社会心理学核心概念：<br><em>The experiment revealed strong peer pressure for conformity.</em><br>（实验显示出强烈的从众压力）</li>
<li>法律&#x2F;商业场景：<br><em>Product must be in conformity with safety standards.</em><br>（产品必须符合安全标准）</li>
<li>派生词：<ul>
<li>conform（v. 遵守）</li>
<li>nonconformity（n. 不遵从）</li>
</ul>
</li>
</ul>
<ol start="4">
<li><strong>utilisation</strong> [ˌjuːtəlaɪˈzeɪʃn] ★★</li>
</ol>
<ul>
<li>中文释义：利用（英式拼写，美式：utilization）</li>
<li>资源管理术语：<br><em>Optimal utilisation of energy is crucial.</em><br>（能源的优化利用至关重要）</li>
<li>医疗场景：<br><em>Hospital bed utilisation rate reached 95%.</em><br>（病床使用率达95%）</li>
<li>词源：utilis（拉丁语”有用”）+ation</li>
</ul>
<ol start="5">
<li><strong>noxious</strong> [ˈnɒkʃəs] ★</li>
</ol>
<ul>
<li>中文释义：有毒的；有害的</li>
<li>环境科学用语：<br><em>Noxious fumes from the factory caused evacuations.</em><br>（工厂的有毒烟雾导致疏散）</li>
<li>法律文件：<br><em>Noxious substances are strictly regulated.</em><br>（有毒物质受到严格管制）</li>
<li>词根：nox（拉丁语”伤害”）+ious</li>
<li>近义词对比：<ul>
<li>noxious（化学&#x2F;生物危害）</li>
<li>toxic（更广泛的毒性）</li>
</ul>
</li>
</ul>
<p>▌高频搭配总结：</p>
<ul>
<li>displace: <ul>
<li>displaced workers（下岗工人）</li>
<li>water displacement method（排水法测量体积）</li>
</ul>
</li>
<li>dormant: <ul>
<li>dormant season（休眠期）</li>
<li>dormant company（停业公司）</li>
</ul>
</li>
<li>conformity: <ul>
<li>social conformity（社会从众）</li>
<li>conformity assessment（合规性评估）</li>
</ul>
</li>
<li>utilisation: <ul>
<li>capacity utilisation（产能利用率）</li>
<li>resource utilisation（资源利用）</li>
</ul>
</li>
<li>noxious: <ul>
<li>noxious weed（恶性杂草）</li>
<li>noxious stimulus（有害刺激）</li>
</ul>
</li>
</ul>
<p>▌易混淆点辨析：</p>
<ol>
<li><p>displace vs. replace：</p>
<ul>
<li>displace 强调强制取代（常含负面意义）</li>
<li>replace 中性词，指普通替换</li>
</ul>
</li>
<li><p>dormant vs. latent：</p>
<ul>
<li>dormant 指可唤醒的休眠状态</li>
<li>latent 指潜在但未显现的特性</li>
</ul>
</li>
<li><p>conformity vs. compliance：</p>
<ul>
<li>conformity 侧重社会行为一致</li>
<li>compliance 强调遵守规则</li>
</ul>
</li>
</ol>
<p>▌学术写作应用示例：<br>“The displacement of indigenous species by invasive organisms often triggers dormant ecological issues. This phenomenon requires conformity to international biosafety protocols to prevent noxious consequences, while improving the utilisation of native species’ competitive advantages.”</p>
<p>（入侵生物对本地物种的取代常引发潜在的生态问题，该现象需要遵循国际生物安全协议以防止有害后果，同时提升对本地物种竞争优势的利用）</p>
</blockquote>
<h1 id="第五十天"><a href="#第五十天" class="headerlink" title="第五十天"></a>第五十天</h1><blockquote>
<h4 id="2025年04月20日"><a href="#2025年04月20日" class="headerlink" title="2025年04月20日"></a>2025年04月20日</h4><p>以下是这组词汇的深度解析，按使用场景分类并标注学术权重（★为生活常用，★★★★为学术高频）：</p>
<hr>
<h3 id="1-territory-ˈterətri-★★★★"><a href="#1-territory-ˈterətri-★★★★" class="headerlink" title="1. territory [ˈterətri] ★★★★"></a><strong>1. territory</strong> [ˈterətri] ★★★★</h3><p><strong>核心释义</strong>：领土；领域（生物&#x2F;商业&#x2F;心理）<br><strong>专业应用</strong>：  </p>
<ul>
<li><em>Animal territory marking</em>（动物领地标记）  </li>
<li><em>Sales territory allocation</em>（销售区域划分）<br><strong>例句</strong>：  </li>
<li>Wolves defend their <strong>territory</strong> aggressively.<br>（狼群会激烈保卫自己的<strong>领地</strong>）  </li>
<li>The dispute over maritime <strong>territory</strong> caused diplomatic tensions.<br>（海洋<strong>领土</strong>争端引发外交紧张）</li>
</ul>
<hr>
<h3 id="2-regularity-ˌreɡjuˈlaerəti-★★★"><a href="#2-regularity-ˌreɡjuˈlaerəti-★★★" class="headerlink" title="2. regularity [ˌreɡjuˈlærəti] ★★★"></a><strong>2. regularity</strong> [ˌreɡjuˈlærəti] ★★★</h3><p><strong>核心释义</strong>：规律性；正则性（数学&#x2F;物理）<br><strong>学科用法对比</strong>：  </p>
<table>
<thead>
<tr>
<th>领域</th>
<th>应用示例</th>
</tr>
</thead>
<tbody><tr>
<td>数学</td>
<td><em>regularity condition</em>（正则性条件）</td>
</tr>
<tr>
<td>语言学</td>
<td><em>morphological regularity</em>（词法规则性）</td>
</tr>
<tr>
<td><strong>生活场景</strong>：</td>
<td></td>
</tr>
</tbody></table>
<ul>
<li>Eating with <strong>regularity</strong> improves digestion.<br>（规律饮食促进消化）</li>
</ul>
<hr>
<h3 id="3-reluctant-rɪˈlvktənt-★★"><a href="#3-reluctant-rɪˈlvktənt-★★" class="headerlink" title="3. reluctant [rɪˈlʌktənt] ★★"></a><strong>3. reluctant</strong> [rɪˈlʌktənt] ★★</h3><p><strong>情感维度分析</strong>：<br>![情感强度量表]  </p>
<ul>
<li>比 hesitant（犹豫）更强烈  </li>
<li>比 unwilling（不情愿）更委婉<br><strong>商务用法</strong>：  </li>
<li><em>Reluctant acceptance</em> of terms（勉强接受条款）</li>
</ul>
<hr>
<h3 id="4-laterality-laetəˈraelɪtɪ-★"><a href="#4-laterality-laetəˈraelɪtɪ-★" class="headerlink" title="4. laterality [lætəˈrælɪtɪ] ★"></a><strong>4. laterality</strong> [lætəˈrælɪtɪ] ★</h3><p><strong>神经科学专有名词</strong>：  </p>
<ul>
<li>左&#x2F;右脑功能侧化现象<br><strong>临床案例</strong>：  </li>
<li>Damage to left hemisphere affects language <strong>laterality</strong>.<br>（左脑损伤影响语言<strong>偏侧性</strong>）</li>
</ul>
<hr>
<h3 id="5-hallowed-ˈhaeləʊd-★"><a href="#5-hallowed-ˈhaeləʊd-★" class="headerlink" title="5. hallowed [ˈhæləʊd] ★"></a><strong>5. hallowed</strong> [ˈhæləʊd] ★</h3><p><strong>语义演变史</strong>：<br>宗教神圣 → 传统尊崇 → 反讽用法<br><strong>现代语境对比</strong>：  </p>
<ul>
<li>正面：<em>hallowed tradition</em>（神圣传统）  </li>
<li>反讽：<em>the hallowed coffee machine</em>（被奉若神明的咖啡机）</li>
</ul>
<hr>
<h3 id="6-pension-ˈpenʃn-★★★"><a href="#6-pension-ˈpenʃn-★★★" class="headerlink" title="6. pension [ˈpenʃn] ★★★"></a><strong>6. pension</strong> [ˈpenʃn] ★★★</h3><p><strong>全球体系差异</strong>：  </p>
<table>
<thead>
<tr>
<th>国家类型</th>
<th>养老金特征</th>
</tr>
</thead>
<tbody><tr>
<td>北欧</td>
<td>Universal state <strong>pension</strong></td>
</tr>
<tr>
<td>美国</td>
<td>401(k)-based system</td>
</tr>
<tr>
<td><strong>动词用法</strong>：</td>
<td></td>
</tr>
</tbody></table>
<ul>
<li>He was <strong>pensioned off</strong> at 55.（被动退休）</li>
</ul>
<hr>
<h3 id="7-truce-truːs-★★"><a href="#7-truce-truːs-★★" class="headerlink" title="7. truce [truːs] ★★"></a><strong>7. truce</strong> [truːs] ★★</h3><p><strong>战争术语层级</strong>：<br>ceasefire（停火） &lt; <strong>truce</strong>（休战） &lt; armistice（停战协定）<br><strong>商业隐喻</strong>：  </p>
<ul>
<li>The rivals declared a <strong>truce</strong> during merger talks.<br>（竞争对手在并购谈判期间宣布<strong>休战</strong>）</li>
</ul>
<hr>
<h3 id="8-engrave-ɪnˈɡreɪv-★"><a href="#8-engrave-ɪnˈɡreɪv-★" class="headerlink" title="8. engrave [ɪnˈɡreɪv] ★"></a><strong>8. engrave</strong> [ɪnˈɡreɪv] ★</h3><p><strong>工艺技术发展</strong>：  </p>
<ul>
<li>传统：hand-<strong>engraved</strong> silverware（手工雕刻银器）  </li>
<li>现代：laser <strong>engraving</strong>（激光雕刻）<br><strong>比喻用法</strong>：  </li>
<li>The memory is <strong>engraved</strong> in my mind.<br>（记忆铭刻于心）</li>
</ul>
<hr>
<h3 id="记忆矩阵"><a href="#记忆矩阵" class="headerlink" title="记忆矩阵"></a><strong>记忆矩阵</strong></h3><table>
<thead>
<tr>
<th>词汇</th>
<th>词根</th>
<th>联想线索</th>
<th>跨学科关联</th>
</tr>
</thead>
<tbody><tr>
<td>territory</td>
<td>terra（土地）</td>
<td>动物纪录片场景</td>
<td>政治地理学</td>
</tr>
<tr>
<td>regularity</td>
<td>reg（规则）</td>
<td>数学公式图像</td>
<td>量子物理</td>
</tr>
<tr>
<td>laterality</td>
<td>lateral（侧面）</td>
<td>左手写字实验</td>
<td>脑神经科学</td>
</tr>
</tbody></table>
<hr>
<h3 id="高频搭配预警"><a href="#高频搭配预警" class="headerlink" title="高频搭配预警"></a><strong>高频搭配预警</strong></h3><ul>
<li><strong>territory</strong>: uncharted ~（未知领域）&#x2F; defend one’s ~  </li>
<li><strong>regularity</strong>: with clockwork ~（极其规律）&#x2F; statistical ~  </li>
<li><strong>pension</strong>: ~ fund（养老基金）&#x2F; ~ scheme</li>
</ul>
<hr>
<h3 id="易错点辨析"><a href="#易错点辨析" class="headerlink" title="易错点辨析"></a><strong>易错点辨析</strong></h3><ol>
<li><p><strong>reluctant vs. reticent</strong>：  </p>
<ul>
<li>reluctant：不情愿做某事  </li>
<li>reticent：沉默寡言</li>
</ul>
</li>
<li><p><strong>truce vs. armistice</strong>：  </p>
<ul>
<li>truce：临时性休战  </li>
<li>armistice：正式停战协议</li>
</ul>
</li>
</ol>
<hr>
<h3 id="学术写作模板"><a href="#学术写作模板" class="headerlink" title="学术写作模板"></a><strong>学术写作模板</strong></h3><p>“The <strong>regularity</strong> of circadian rhythms demonstrates cerebral <strong>laterality</strong>, while corporate <strong>territory</strong> disputes often end in uneasy <strong>truces</strong>—a phenomenon <strong>engraved</strong> in economic history, though many remain <strong>reluctant</strong> to acknowledge its connection to <strong>pension</strong> system stability.”</p>
<p>（昼夜节律的<strong>规律性</strong>体现了大脑<strong>偏侧性</strong>，而企业<strong>领地</strong>争端常以不安的<strong>休战</strong>告终——这一<strong>铭刻</strong>在经济史中的现象，却少有人愿承认其与<strong>养老金</strong>体系稳定性的关联。）</p>
<hr>
</blockquote>
<h1 id="第五十一天"><a href="#第五十一天" class="headerlink" title="第五十一天"></a>第五十一天</h1><blockquote>
<h4 id="2025年04月21日"><a href="#2025年04月21日" class="headerlink" title="2025年04月21日"></a>2025年04月21日</h4><p>以下是这组词汇的深度解析，采用「三维记忆法」（词源+场景+认知关联），并标注实用指数（🌍旅行高频 🔬学术中频 💼商务低频）：</p>
<hr>
<h3 id="1-acclimatise-əˈklaɪmətaɪz-🌍🌍🌍🔬"><a href="#1-acclimatise-əˈklaɪmətaɪz-🌍🌍🌍🔬" class="headerlink" title="1. acclimatise [əˈklaɪmətaɪz] 🌍🌍🌍🔬"></a><strong>1. acclimatise</strong> [əˈklaɪmətaɪz] 🌍🌍🌍🔬</h3><p><strong>词源分解</strong>：ac-（朝向）+ climate（气候）+ -ise（动词化）→ 适应气候<br><strong>场景应用</strong>：  </p>
<ul>
<li><strong>高原旅行</strong>：<em>It takes 3 days to acclimatise to Lhasa’s altitude.</em><br>（适应拉萨海拔需要3天）  </li>
<li><strong>职场隐喻</strong>：<em>New employees need time to acclimatise to corporate culture.</em><br>（新员工需时间适应企业文化）<br><strong>认知陷阱</strong>：<br>⚠️ 易混淆：acclimate（美式拼写）&#x2F; acclimatize（英式拼写）</li>
</ul>
<hr>
<h3 id="2-itinerary-aɪˈtɪnərəri-🌍🌍🌍💼"><a href="#2-itinerary-aɪˈtɪnərəri-🌍🌍🌍💼" class="headerlink" title="2. itinerary [aɪˈtɪnərəri] 🌍🌍🌍💼"></a><strong>2. itinerary</strong> [aɪˈtɪnərəri] 🌍🌍🌍💼</h3><p><strong>结构解析</strong>：源自拉丁语 <em>iter</em>（旅程）+ -ary（相关物）→ 行程计划<br><strong>专业变体</strong>：  </p>
<table>
<thead>
<tr>
<th>类型</th>
<th>特点</th>
<th>例句</th>
</tr>
</thead>
<tbody><tr>
<td>旅行行程</td>
<td>时间节点明确</td>
<td><em>The tour itinerary includes 5 UNESCO sites</em></td>
</tr>
<tr>
<td>商务差旅</td>
<td>会议安排优先</td>
<td><em>Your itinerary shows back-to-back meetings</em></td>
</tr>
<tr>
<td><strong>记忆技巧</strong>：</td>
<td></td>
<td></td>
</tr>
<tr>
<td>🔹 联想：*”I-TIN”-erary* → 我的锡罐（假想把行程表塞进锡罐）</td>
<td></td>
<td></td>
</tr>
</tbody></table>
<hr>
<h3 id="3-daunting-ˈdoːntɪŋ-🌍🔬💼💼"><a href="#3-daunting-ˈdoːntɪŋ-🌍🔬💼💼" class="headerlink" title="3. daunting [ˈdɔːntɪŋ] 🌍🔬💼💼"></a><strong>3. daunting</strong> [ˈdɔːntɪŋ] 🌍🔬💼💼</h3><p><strong>情感维度</strong>：<br>![信心量表]<br>介于 intimidating（令人畏惧）和 challenging（有挑战性）之间<br><strong>场景对比</strong>：  </p>
<ul>
<li><strong>学术</strong>：<em>The 10,000-word thesis seemed daunting at first.</em>  </li>
<li><strong>职场</strong>：<em>Presenting to the board is a daunting prospect.</em><br><strong>词族扩展</strong>：<br>▸ dauntless（形容词）→ 无畏的（<em>dauntless hero</em>）</li>
</ul>
<hr>
<h3 id="4-daunt-doːnt-🔬💼"><a href="#4-daunt-doːnt-🔬💼" class="headerlink" title="4. daunt [dɔːnt] 🔬💼"></a><strong>4. daunt</strong> [dɔːnt] 🔬💼</h3><p><strong>古典用法</strong>：  </p>
<ul>
<li>原指「驯服战马」，现多用于书面语<br><strong>现代语境</strong>：  </li>
<li><em>Not daunted by failures, she persisted.</em><br>（未被失败吓倒，她坚持着）<br><strong>商务文书</strong>：  </li>
<li><em>Market fluctuations shouldn’t daunt long-term investors.</em></li>
</ul>
<hr>
<h3 id="5-trek-trek-🌍🌍🔬"><a href="#5-trek-trek-🌍🌍🔬" class="headerlink" title="5. trek [trek] 🌍🌍🔬"></a><strong>5. trek</strong> [trek] 🌍🌍🔬</h3><p><strong>词源故事</strong>：<br>源自南非荷兰语 <em>trek</em>（牛车迁徙），现指：  </p>
<ol>
<li><strong>徒步旅行</strong>（中性）：<em>a 3-day trek through the Andes</em>  </li>
<li><strong>艰难跋涉</strong>（消极）：<em>my daily trek to the office</em><br><strong>学科迁移</strong>：</li>
</ol>
<ul>
<li>生物学：<em>animal migration treks</em>  </li>
<li>历史：<em>the Great Trek of the Boers</em></li>
</ul>
<hr>
<h3 id="记忆矩阵-1"><a href="#记忆矩阵-1" class="headerlink" title="记忆矩阵"></a><strong>记忆矩阵</strong></h3><table>
<thead>
<tr>
<th>词汇</th>
<th>身体反应关联</th>
<th>视觉符号</th>
<th>反向情境</th>
</tr>
</thead>
<tbody><tr>
<td>acclimatise</td>
<td>高原呼吸急促</td>
<td>⛰️</td>
<td>culture shock</td>
</tr>
<tr>
<td>itinerary</td>
<td>查看手表行程</td>
<td>🗓️</td>
<td>aimless wandering</td>
</tr>
<tr>
<td>daunting</td>
<td>手心出汗</td>
<td>🧗</td>
<td>encouraging</td>
</tr>
</tbody></table>
<hr>
<h3 id="高频搭配预警-1"><a href="#高频搭配预警-1" class="headerlink" title="高频搭配预警"></a><strong>高频搭配预警</strong></h3><ul>
<li><strong>acclimatise</strong>：~ to thin air&#x2F;new environment  </li>
<li><strong>itinerary</strong>：flexible ~ &#x2F; ~ change &#x2F; ~ planning  </li>
<li><strong>daunting</strong>：~ task &#x2F; ~ challenge &#x2F; ~ amount of work  </li>
<li><strong>trek</strong>：~king pole &#x2F; ~king route &#x2F; arduous ~</li>
</ul>
<hr>
<h3 id="易混淆点辨析"><a href="#易混淆点辨析" class="headerlink" title="易混淆点辨析"></a><strong>易混淆点辨析</strong></h3><ol>
<li><p><strong>daunting vs. discouraging</strong>：  </p>
<ul>
<li>daunting：强调任务艰巨但未必放弃  </li>
<li>discouraging：直接导致丧失信心</li>
</ul>
</li>
<li><p><strong>trek vs. hike</strong>：  </p>
<ul>
<li>trek：更艰苦的长途跋涉  </li>
<li>hike：休闲徒步</li>
</ul>
</li>
</ol>
<hr>
<h3 id="场景化练习"><a href="#场景化练习" class="headerlink" title="场景化练习"></a><strong>场景化练习</strong></h3><p><strong>旅行顾问对话</strong>：<br>“While <em>acclimatising</em> to high altitudes, follow our <em>itinerary</em> strictly. The <em>trek</em> may seem <em>daunting</em>, but proper preparation will <em>daunt</em> none of your adventurous spirit!”  </p>
</blockquote>
<h1 id="第五十二天"><a href="#第五十二天" class="headerlink" title="第五十二天"></a>第五十二天</h1><blockquote>
<h4 id="2025年04月22日"><a href="#2025年04月22日" class="headerlink" title="2025年04月22日"></a>2025年04月22日</h4><h3 id="liquor-ˈlɪkə-r"><a href="#liquor-ˈlɪkə-r" class="headerlink" title="liquor [ˈlɪkə(r)]"></a><strong>liquor</strong> [ˈlɪkə(r)]</h3><p><strong>中文释义</strong>：烈酒；酒精饮料<br><strong>深度解析</strong>：  </p>
<ol>
<li><strong>词源</strong>：源自拉丁语 <em>liquere</em>（流动），指蒸馏后的浓缩酒精饮料  </li>
<li><strong>法律界定</strong>（以美国为例）：  <ul>
<li>啤酒&#x2F;葡萄酒 ≠ liquor（通常指40%以上酒精度的蒸馏酒）</li>
</ul>
</li>
<li><strong>文化差异</strong>：  <ul>
<li>英式英语：spirits（更常用）  </li>
<li>美式英语：liquor（法律文件高频词）</li>
</ul>
</li>
</ol>
<p><strong>专业场景应用</strong>：  </p>
<ul>
<li><strong>餐饮管理</strong>：<br><em>The bar’s liquor license prohibits serving minors.</em><br>（该酒吧的<strong>烈酒</strong>经营许可证禁止向未成年人售酒）  </li>
<li><strong>化学工程</strong>：<br><em>The liquor from the distillation column contains 95% ethanol.</em><br>（蒸馏塔输出的<strong>酒液</strong>含95%乙醇）</li>
</ul>
<p><strong>高频搭配</strong>：<br>▸ liquor store（烈酒专卖店）<br>▸ hard liquor（高度烈酒）<br>▸ in liquor（醉酒状态）  </p>
<hr>
<h3 id="integral-ˈɪntɪɡrəl"><a href="#integral-ˈɪntɪɡrəl" class="headerlink" title="integral [ˈɪntɪɡrəl]"></a><strong>integral</strong> [ˈɪntɪɡrəl]</h3><p><strong>中文释义</strong>：  </p>
<ol>
<li><strong>构成整体必需的</strong>（形容词）  </li>
<li><strong>积分</strong>（数学名词）</li>
</ol>
<p><strong>学术分级解析</strong>：  </p>
<table>
<thead>
<tr>
<th>领域</th>
<th>释义侧重</th>
<th>例句</th>
</tr>
</thead>
<tbody><tr>
<td>工程学</td>
<td>不可分割的</td>
<td><em>The cooling system is integral to engine performance.</em></td>
</tr>
<tr>
<td>数学</td>
<td>积分运算</td>
<td><em>Calculate the definite integral of this function.</em></td>
</tr>
<tr>
<td>管理学</td>
<td>核心组成部分</td>
<td><em>Employee training is integral to our quality control.</em></td>
</tr>
</tbody></table>
<p><strong>词义演变史</strong>：<br>拉丁语 <em>integer</em>（完整的）→ 中世纪数学术语 → 现代多学科应用  </p>
<p><strong>易混淆点辨析</strong>：  </p>
<ul>
<li><strong>integral vs. essential</strong>：  <ul>
<li>integral 强调结构性不可或缺（如零件之于机器）  </li>
<li>essential 强调必要性（如水之于生命）</li>
</ul>
</li>
</ul>
<p><strong>专业搭配</strong>：<br>▸ integral calculus（积分学）<br>▸ integral membrane protein（膜整合蛋白）<br>▸ integral part（有机组成部分）  </p>
<hr>
<h3 id="对比记忆表-1"><a href="#对比记忆表-1" class="headerlink" title="对比记忆表"></a><strong>对比记忆表</strong></h3><table>
<thead>
<tr>
<th>维度</th>
<th>liquor</th>
<th>integral</th>
</tr>
</thead>
<tbody><tr>
<td>词性</td>
<td>仅名词</td>
<td>名&#x2F;形容词</td>
</tr>
<tr>
<td>专业领域</td>
<td>食品科学</td>
<td>数学&#x2F;工程</td>
</tr>
<tr>
<td>反义词</td>
<td>non-alcoholic</td>
<td>non-integral</td>
</tr>
<tr>
<td>常见错误</td>
<td>与”liqueur”混淆</td>
<td>与”internal”混淆</td>
</tr>
</tbody></table>
</blockquote>
<h1 id="第五十三天"><a href="#第五十三天" class="headerlink" title="第五十三天"></a>第五十三天</h1><blockquote>
<h4 id="2025年04月24日"><a href="#2025年04月24日" class="headerlink" title="2025年04月24日"></a>2025年04月24日</h4><p>以下是这组词汇的深度解析，采用「认知语言学分类法」并标注使用频率（🌐通用 🔬学术 💼商务）：</p>
<hr>
<h3 id="1-culminate-ˈkvlmɪneɪt-🌐🔬"><a href="#1-culminate-ˈkvlmɪneɪt-🌐🔬" class="headerlink" title="1. culminate [ˈkʌlmɪneɪt] 🌐🔬"></a><strong>1. culminate</strong> [ˈkʌlmɪneɪt] 🌐🔬</h3><p><strong>词源意象</strong>：源自拉丁语 <em>culmen</em>（顶点），比喻「达到高潮」<br><strong>场景应用</strong>：  </p>
<ul>
<li><strong>学术写作</strong>：<br><em>The research culminated in a groundbreaking discovery.</em><br>（研究最终取得突破性发现）  </li>
<li><strong>项目管理</strong>：<br><em>The campaign will culminate with a product launch event.</em><br>（活动将以产品发布会收尾）<br><strong>搭配预警</strong>：<br>⚠️ 必须接介词：culminate <strong>in</strong>（成功）&#x2F; <strong>with</strong>（事件）</li>
</ul>
<hr>
<h3 id="2-retain-rɪˈteɪn-💼🔬"><a href="#2-retain-rɪˈteɪn-💼🔬" class="headerlink" title="2. retain [rɪˈteɪn] 💼🔬"></a><strong>2. retain</strong> [rɪˈteɪn] 💼🔬</h3><p><strong>法律&#x2F;商业核心词</strong>：  </p>
<ul>
<li><strong>客户留存</strong>：<em>retention rate</em>（留存率）  </li>
<li><strong>记忆机制</strong>：<em>retained knowledge</em>（保留知识）<br><strong>认知对比</strong>：  <table>
<thead>
<tr>
<th>retain</th>
<th>maintain</th>
</tr>
</thead>
<tbody><tr>
<td>保持既有状态</td>
<td>持续维护</td>
</tr>
<tr>
<td><em>Retain</em> original data but <em>maintain</em> the system.</td>
<td></td>
</tr>
</tbody></table>
</li>
</ul>
<hr>
<h3 id="3-preface-ˈprefəs-🔬"><a href="#3-preface-ˈprefəs-🔬" class="headerlink" title="3. preface [ˈprefəs] 🔬"></a><strong>3. preface</strong> [ˈprefəs] 🔬</h3><p><strong>学术写作三要素</strong>：  </p>
<ol>
<li>Preface（序言：作者自述）  </li>
<li>Foreword（他人作序）  </li>
<li>Introduction（章节导论）<br><strong>隐喻用法</strong>：<br><em>She prefaced her speech with a personal anecdote.</em><br>（她用个人轶事作为演讲开场）</li>
</ol>
<hr>
<h3 id="4-unbiased-vnˈbaɪəst-🔬🌐"><a href="#4-unbiased-vnˈbaɪəst-🔬🌐" class="headerlink" title="4. unbiased [ʌnˈbaɪəst] 🔬🌐"></a><strong>4. unbiased</strong> [ʌnˈbaɪəst] 🔬🌐</h3><p><strong>科学研究标准</strong>：  </p>
<ul>
<li><em>double-blind unbiased experiment</em>（双盲无偏实验）<br><strong>近义矩阵</strong>：<br>![客观性词汇谱系]<br>unbiased &gt; neutral &gt; impartial &gt; objective</li>
</ul>
<hr>
<h3 id="5-unfounded-vnˈfaʊndɪd-💼🔬"><a href="#5-unfounded-vnˈfaʊndɪd-💼🔬" class="headerlink" title="5. unfounded [ʌnˈfaʊndɪd] 💼🔬"></a><strong>5. unfounded</strong> [ʌnˈfaʊndɪd] 💼🔬</h3><p><strong>逻辑谬误检测</strong>：  </p>
<ul>
<li><em>unfounded assumption</em>（无根据假设）  </li>
<li><em>unfounded rumors</em>（不实传言）<br><strong>法律文书</strong>：<br><em>The lawsuit was dismissed due to unfounded claims.</em></li>
</ul>
<hr>
<h3 id="6-impotent-ˈɪmpətənt-🔬"><a href="#6-impotent-ˈɪmpətənt-🔬" class="headerlink" title="6. impotent [ˈɪmpətənt] 🔬"></a><strong>6. impotent</strong> [ˈɪmpətənt] 🔬</h3><p><strong>专业领域差异</strong>：  </p>
<table>
<thead>
<tr>
<th>医学</th>
<th>政治学</th>
</tr>
</thead>
<tbody><tr>
<td>性功能障碍</td>
<td>权力失效</td>
</tr>
<tr>
<td><em>The impotent government failed to pass reforms.</em></td>
<td></td>
</tr>
</tbody></table>
<hr>
<h3 id="7-encase-ɪnˈkeɪs-🌐"><a href="#7-encase-ɪnˈkeɪs-🌐" class="headerlink" title="7. encase [ɪnˈkeɪs] 🌐"></a><strong>7. encase</strong> [ɪnˈkeɪs] 🌐</h3><p><strong>工程学术语</strong>：  </p>
<ul>
<li><em>encased beam</em>（包覆梁）<br><strong>生活场景</strong>：<br><em>The phone was securely encased in rubber.</em></li>
</ul>
<hr>
<h3 id="8-incendiary-ɪnˈsendiəri-🔬"><a href="#8-incendiary-ɪnˈsendiəri-🔬" class="headerlink" title="8. incendiary [ɪnˈsendiəri] 🔬"></a><strong>8. incendiary</strong> [ɪnˈsendiəri] 🔬</h3><p><strong>多义解析</strong>：  </p>
<ol>
<li>燃烧弹（名词）  </li>
<li>煽动性的（形容词）<br><em>His incendiary speech provoked riots.</em></li>
</ol>
<hr>
<h3 id="9-spouse-spaʊs-🌐💼"><a href="#9-spouse-spaʊs-🌐💼" class="headerlink" title="9. spouse [spaʊs] 🌐💼"></a><strong>9. spouse</strong> [spaʊs] 🌐💼</h3><p><strong>法律文件要点</strong>：  </p>
<ul>
<li>性别中立术语（替代husband&#x2F;wife）  </li>
<li><em>spousal benefits</em>（配偶福利）</li>
</ul>
<hr>
<h3 id="10-advocate-ˈaedvəkeɪt-💼🔬"><a href="#10-advocate-ˈaedvəkeɪt-💼🔬" class="headerlink" title="10. advocate [ˈædvəkeɪt] 💼🔬"></a><strong>10. advocate</strong> [ˈædvəkeɪt] 💼🔬</h3><p><strong>职业层级</strong>：  </p>
<ul>
<li>普通支持者（v.）  </li>
<li>专业律师&#x2F;倡导者（n.）<br><em>She advocates for policy changes as a legal advocate.</em></li>
</ul>
<hr>
<h3 id="11-sporadically-spəˈraedɪkli-🌐"><a href="#11-sporadically-spəˈraedɪkli-🌐" class="headerlink" title="11. sporadically [spəˈrædɪkli] 🌐"></a><strong>11. sporadically</strong> [spəˈrædɪkli] 🌐</h3><p><strong>频率图谱</strong>：<br>occasionally &lt; <strong>sporadically</strong> &lt; intermittently<br><em>Rain occurred sporadically throughout the day.</em>  </p>
<hr>
<h3 id="记忆策略"><a href="#记忆策略" class="headerlink" title="记忆策略"></a><strong>记忆策略</strong></h3><p><strong>词根网络</strong>：  </p>
<ul>
<li><em>culminate</em>：联想mountain summit  </li>
<li><em>retain</em>：re（回）+ tain（hold）→ 抓回来  </li>
<li><em>incendiary</em>：in（进入）+ cand（燃烧）→ 点燃</li>
</ul>
<p><strong>场景记忆</strong>：  </p>
<ul>
<li>写论文：preface → unbiased research → culminate  </li>
<li>法庭：advocate → unfounded claims → spouse testimony</li>
</ul>
</blockquote>
<h1 id="第五十五天"><a href="#第五十五天" class="headerlink" title="第五十五天"></a>第五十五天</h1><blockquote>
<h4 id="2025年04月27日"><a href="#2025年04月27日" class="headerlink" title="2025年04月27日"></a>2025年04月27日</h4><p>以下是新增词汇的深度解析，采用「认知语言学分类法」并标注使用频率（🌐通用 🔬学术 💼商务）：</p>
<hr>
<p><strong>1. underlying [ˌʌndəˈlaɪɪŋ] 🔬💼</strong><br> 词源意象：under（在下方） + lie（躺） → 隐藏的基础层<br> 场景应用：<br> • 经济学：</p>
<p><em>The underlying cause of inflation is supply chain disruption.</em><br> （通胀的根本原因是供应链中断。）<br> • 医学：</p>
<p><em>The patient has an underlying condition (e.g., diabetes).</em><br> （患者有基础疾病，如糖尿病。）<br> 搭配预警：<br> ⚠️ 固定搭配：underlying factor&#x2F;issue&#x2F;problem（根本因素&#x2F;问题）</p>
<hr>
<p><strong>2. lull [lʌl] 🌐</strong><br> 多义解析：<br> • 名词：短暂平静期（尤指风暴、冲突中的间歇）</p>
<p><em>There was a lull in the fighting.</em><br> • 动词：使安静&#x2F;放松（常带欺骗性）</p>
<p><em>The soft music lulled the baby to sleep.</em><br> 认知对比：</p>
<table>
<thead>
<tr>
<th>lull</th>
<th>pause</th>
<th>hiatus</th>
</tr>
</thead>
<tbody><tr>
<td>自然间歇</td>
<td>人为暂停</td>
<td>长期中断</td>
</tr>
</tbody></table>
<hr>
<p><strong>3. spice [spaɪs] 🌐</strong><br> 隐喻扩展：<br> • 字面：调味料（cinnamon, cumin）</p>
<p><em>Add spice to the curry.</em><br> • 抽象：增加趣味性</p>
<p><em>Her jokes spiced up the meeting.</em><br> 商业场景：<br> • *Market volatility spices up trading.*（市场波动让交易更刺激。）</p>
<hr>
<p><strong>4. incidence [ˈɪnsɪdəns] 🔬</strong><br> 学术精确用法：<br> • 流行病学：发生率（&#x3D;病例数&#x2F;人口）</p>
<p><em>The incidence of COVID-19 peaked in winter.</em><br> • 物理学：入射角（angle of incidence）</p>
<p>⚠️ 易混淆：</p>
<table>
<thead>
<tr>
<th>incidence</th>
<th>incident</th>
</tr>
</thead>
<tbody><tr>
<td>统计频率</td>
<td>具体事件</td>
</tr>
</tbody></table>
<hr>
<p><strong>5. incident [ˈɪnsɪdənt] 🌐💼</strong><br> 法律&#x2F;商务场景：<br> • 安全事故报告：</p>
<p><em>All workplace incidents must be documented.</em><br> • 外交事件：</p>
<p><em>The border incident escalated into a conflict.</em><br> 记忆策略：<br> 联想 “accident”（意外事故），但 “incident” 更中性，可指计划内事件。</p>
<hr>
<p><strong>6. salinity [səˈlɪnəti] 🔬</strong><br> 领域专用：<br> • 海洋学：盐度（单位：PSU）</p>
<p><em>High salinity reduces coral survival.</em><br> • 农业：土壤盐碱化（soil salinity）</p>
<p>词根网络：<br> sal（盐） + -inity（性质） → 同源词：saline（生理盐水）</p>
<hr>
<p><strong>7. bias [ˈbaɪəs] 🔬🌐</strong><br> 科学方法论核心概念：<br> • 统计偏差：</p>
<p><em>Selection bias skews research results.</em><br> • 认知偏见：</p>
<p><em>Confirmation bias leads to poor decisions.</em><br> 近义矩阵：<br> ![偏见类型谱系]<br> intentional bias &gt; unconscious bias &gt; systemic bias</p>
<hr>
<p><strong>记忆策略与场景整合</strong><br> 词根网络：<br> • underlying：under（下） + lie（躺） → 藏在下面的</p>
<p>• incidence&#x2F;incident：in（进入） + cid（落） → 事件“落入”发生</p>
</blockquote>
<h1 id="第五十六天"><a href="#第五十六天" class="headerlink" title="第五十六天"></a>第五十六天</h1><blockquote>
<h4 id="2025年04月28日"><a href="#2025年04月28日" class="headerlink" title="2025年04月28日"></a>2025年04月28日</h4><p>以下是 dispense, plush, opulent 的深度解析，采用 认知语言学分类法 并标注使用频率（🌐通用 🔬学术 💼商务）：</p>
<hr>
<p><strong>1. dispense [dɪˈspens] 💼🔬</strong><br> 词源意象：源自拉丁语 <em>dispendere</em>（称量分发）→ 分配、免除<br> 场景应用：<br> • 医疗&#x2F;药学（核心用法）：</p>
<p><em>The machine dispenses medication automatically.</em><br> （这台机器自动配药。）<br> • 法律&#x2F;行政（正式语境）：</p>
<p><em>The judge dispensed justice fairly.</em><br> （法官公正执法。）<br> • 商业（免除义务）：</p>
<p><em>Small businesses may be dispensed from certain regulations.</em><br> （小企业可能被豁免某些规定。）<br> 搭配预警：<br> ⚠️ dispense with &#x3D; 省去、无需<br> <em>Let’s dispense with formalities and get to the point.</em><br> （我们省去客套，直接谈重点。）</p>
<hr>
<p><strong>2. plush [plʌʃ] 🌐💼</strong><br> 多维度解析：<br> • 字面义（材质）：长毛绒（比 <em>velvet</em> 更厚软）</p>
<p><em>a plush teddy bear</em>（毛绒泰迪熊）<br> • 隐喻义（奢华感）：</p>
<p><em>The hotel lobby was decorated in plush style.</em><br> （酒店大堂装饰得富丽堂皇。）<br> 商业营销用例：<br> <em>“Our plush subscription service offers VIP treatment.”</em><br> （我们的高端订阅服务提供VIP待遇。）<br> 认知对比：</p>
<table>
<thead>
<tr>
<th>plush</th>
<th>luxurious</th>
<th>opulent</th>
</tr>
</thead>
<tbody><tr>
<td>柔软舒适</td>
<td>广义奢华</td>
<td>极致铺张</td>
</tr>
</tbody></table>
<hr>
<p><strong>3. opulent [ˈɒpjələnt] 🌐💼</strong><br> 词源意象：拉丁语 <em>opulentus</em>（财富丰裕）→ 极度奢华<br> 场景应用：<br> • 建筑&#x2F;设计：</p>
<p><em>The palace’s opulent gold decorations dazzled visitors.</em><br> （宫殿的金碧辉煌让游客目眩。）<br> • 社会批判（隐含负面）：</p>
<p><em>The opulent lifestyle of elites contrasts with widespread poverty.</em><br> （精英的挥霍生活与普遍贫困形成对比。）<br> 近义梯度：<br> lavish（慷慨的） &lt; opulent（奢华的） &lt; ostentatious（炫富的）</p>
<hr>
<p><strong>记忆策略</strong><br> • dispense：联想 <em>dispenser</em>（分配器），如 <em>water dispenser</em>（饮水机）。</p>
<p>• plush：谐音“扑噜嘘”→ 摸毛绒玩具的声音。</p>
<p>• opulent：拆解 <em>op（财富） + ulent（充满）</em> → 充满财富的。</p>
</blockquote>
<hr>
<h1 id="坚持不下去了…-吗？"><a href="#坚持不下去了…-吗？" class="headerlink" title="坚持不下去了….吗？"></a>坚持不下去了….吗？</h1><blockquote>
<p>还是不够自律</p>
<p>所以我选择他律。</p>
</blockquote>
<h2 id="第一版-英语陪练机器人"><a href="#第一版-英语陪练机器人" class="headerlink" title="第一版 英语陪练机器人"></a>第一版 英语陪练机器人</h2><blockquote>
<p>搭建思路：python脚本+smtp+大模型API+crontab</p>
</blockquote>
<p>写了一些脚本，放到了我的服务器，实现每天早上六点发给我学习邮件。</p>
<p><img src="H:\git_project\RegenBlogs\hexo\blog\source\images\English\image-20250724103445830.png" alt="image-20250724103445830"></p>
<p><img src="C:\Users\Regen\AppData\Roaming\Typora\typora-user-images\image-20250724103656188.png" alt="image-20250724103656188"></p>
]]></content>
      <categories>
        <category>英语学习</category>
      </categories>
      <tags>
        <tag>笔记</tag>
        <tag>英文</tag>
        <tag>单词</tag>
      </tags>
  </entry>
  <entry>
    <title>物联网协议扫盲</title>
    <url>/2024/08/25/%E7%89%A9%E8%81%94%E7%BD%91%E5%8D%8F%E8%AE%AE%E6%89%AB%E7%9B%B2/</url>
    <content><![CDATA[<h1 id="MQTT（消息队列遥测传输协议）"><a href="#MQTT（消息队列遥测传输协议）" class="headerlink" title="MQTT（消息队列遥测传输协议）"></a>MQTT（消息队列遥测传输协议）</h1><p>​	MQTT是轻量级的消息发布&#x2F;订阅协议，设计用于资源受限的设备和低带宽、高延迟的网络环境。它已成为物联网领域的事实标准，广泛应用于智能家居、工业自动化等领域。</p>
<p>​	mqtt比较简单，算是我入门物联网使用的第一种方式（协议）。从搭建mqtt服务器，协议原理，连接方式以及mqtt上位机编写，通过实操都有了一定了解了。</p>
<p>​	<a href="https://regenm.github.io/2024/02/09/MQTT%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%90%AD%E5%BB%BA%EF%BC%88mosquitto%EF%BC%89/">MQTT服务器搭建（mosquitto） | Regen (regenm.github.io)</a></p>
<p>​	<a href="https://regenm.github.io/2024/02/09/esp8266%E8%BF%9E%E6%8E%A5%E6%9C%8D%E5%8A%A1%E5%99%A8%EF%BC%88%E5%9F%BA%E4%BA%8Emosquitto%E7%9A%84mqtt-server%EF%BC%89/">esp8266连接服务器（基于mosquitto的mqtt server） | Regen (regenm.github.io)</a></p>
<p>​	<a href="https://regenm.github.io/2024/04/27/mqttSender/">mqttSender | Regen (regenm.github.io)</a></p>
<h1 id="CoAP（受限应用协议）"><a href="#CoAP（受限应用协议）" class="headerlink" title="CoAP（受限应用协议）"></a>CoAP（受限应用协议）</h1><ul>
<li>Coap（Constrained Application Protocol）</li>
</ul>
<blockquote>
<p>使用在资源受限的物联网设备上，</p>
<p><strong>Coap协议特点</strong></p>
<ol>
<li>COAP协议网络传输层由TCP改为UDP。</li>
<li>它基于REST，server的资源地址和互联网一样也有类似url的格式，客户端同样有POST，GET,PUT,DELETE方法来访问server，HTTP做了简化。</li>
<li>COAP是二进制格式的，HTTP是文本格式的，COAP比HTTP更加紧凑。</li>
<li>轻量化，COAP最小长度仅仅4B，一个HTTP的头都几十个B了。</li>
<li>支持可靠传输，数据重传，块传输。确保数据可靠到达。</li>
<li>支持IP多播，即可以同时向多个设备发送请求。</li>
<li>非长连接通信，适用于低功耗物联网场景</li>
</ol>
</blockquote>
<p>CoAP是为物联网设备设计的轻量级协议，基于REST架构，与HTTP类似，但更加节能和高效，适用于低功耗、受限网络的物联网设备。</p>
<p><a href="">to be continued</a></p>
<h1 id="LoRaWAN"><a href="#LoRaWAN" class="headerlink" title="LoRaWAN"></a>LoRaWAN</h1><ul>
<li><h3 id="LoRa和LoRaWAN的区别"><a href="#LoRa和LoRaWAN的区别" class="headerlink" title="LoRa和LoRaWAN的区别"></a>LoRa和LoRaWAN的区别</h3><ul>
<li><strong>LoRa</strong>：LoRa是一种物理层的调制技术，用于在设备之间传输无线电信号。它能够在不消耗大量电力的情况下，实现设备之间的长距离数据传输。LoRa的通信通常是点对点的，或者在某些场景下是点对多点的。</li>
<li><strong>LoRaWAN</strong>：LoRaWAN是LoRa的网络层协议，用于管理LoRa设备如何在广域网中进行通信。它定义了设备如何与集中式网络服务器（通常通过网关）通信，从而实现设备数据的收集和处理。</li>
</ul>
</li>
</ul>
<blockquote>
<h3 id="1-LoRa："><a href="#1-LoRa：" class="headerlink" title="1. LoRa："></a>1. <strong>LoRa</strong>：</h3><ul>
<li><strong>定义</strong>：LoRa（Long Range）是一种调制技术，用于无线数据传输。它属于物理层（PHY），负责将数据编码成无线电信号，以便设备在长距离内进行低功耗通信。</li>
<li><strong>作用</strong>：LoRa技术的主要优势是支持低功耗、长距离的通信，通常可以在几公里到几十公里的范围内工作，具体取决于环境和地理条件。</li>
<li><strong>用途</strong>：LoRa用于设备之间的直接无线通信，它不涉及设备如何联网或管理通信的高级功能。</li>
</ul>
<h3 id="2-LoRaWAN："><a href="#2-LoRaWAN：" class="headerlink" title="2. LoRaWAN："></a>2. <strong>LoRaWAN</strong>：</h3><ul>
<li><strong>定义</strong>：LoRaWAN（LoRa Wide Area Network）是基于LoRa技术的网络层协议，定义了设备如何在广域网中进行通信。它包括了数据传输的管理、设备与网络的互联，以及如何实现数据的加密、认证等高级功能。</li>
<li><strong>作用</strong>：LoRaWAN管理LoRa设备与网关、服务器之间的通信，确保数据能够从设备安全地传输到网络服务器，并从服务器发送指令到设备。它定义了星型拓扑结构、设备的通信模式、数据传输的时间窗口等。</li>
<li><strong>用途</strong>：LoRaWAN使得LoRa设备能够连接到互联网，实现大规模物联网应用中的设备管理和数据处理。</li>
</ul>
</blockquote>
<p>LoRaWAN协议用于LoRa设备之间的通信，支持长距离、低功耗的无线通信。它在智能城市、农业监控和远程传感应用中得到广泛采用。</p>
<p><a href="">to be continued</a></p>
<h1 id="IPv6和6LoWPAN"><a href="#IPv6和6LoWPAN" class="headerlink" title="IPv6和6LoWPAN"></a>IPv6和6LoWPAN</h1><p>IPv6的普及为每个物联网设备提供了一个唯一的IP地址，解决了地址匮乏问题。6LoWPAN（IPv6 over Low-Power Wireless Personal Area Networks）使得IPv6能够在低功耗、低速率的无线网络中使用，支持大规模物联网部署。</p>
<p><a href="">to be continued</a></p>
<h1 id="Thread："><a href="#Thread：" class="headerlink" title="Thread："></a><strong>Thread</strong>：</h1><p>Thread是一种为智能家居和建筑自动化设计的低功耗无线协议，基于IPv6，提供了更好的安全性、可靠性和可扩展性。它兼容现有的IP网络，并支持数百个设备的互联。</p>
<p><a href="">to be continued</a></p>
<h1 id="Zigbee"><a href="#Zigbee" class="headerlink" title="Zigbee"></a>Zigbee</h1><ul>
<li><strong>特点</strong>：低功耗、短距离、基于IEEE 802.15.4标准的无线网络协议。</li>
<li><strong>应用场景</strong>：适用于家庭自动化、楼宇控制、传感器网络等应用。</li>
<li><strong>优点</strong>：低功耗，支持网状网络（Mesh Network），具有较强的自愈能力和扩展性。</li>
</ul>
<p><a href="">to be continued</a></p>
<h1 id="Z-Wave"><a href="#Z-Wave" class="headerlink" title="Z-Wave"></a>Z-Wave</h1><ul>
<li><strong>特点</strong>：低功耗、短距离、专为智能家居设计的无线通信协议。</li>
<li><strong>应用场景</strong>：广泛应用于家庭自动化系统，如灯光控制、门锁、安全系统。</li>
<li><strong>优点</strong>：低功耗，良好的互操作性，支持家庭网络的点对点通信。</li>
</ul>
<p><a href="">to be continued</a></p>
<h1 id="Bluetooth-Low-Energy（BLE）"><a href="#Bluetooth-Low-Energy（BLE）" class="headerlink" title="Bluetooth Low Energy（BLE）"></a>Bluetooth Low Energy（BLE）</h1><ul>
<li><strong>特点</strong>：低功耗、短距离、蓝牙4.0及以上版本的特性。</li>
<li><strong>应用场景</strong>：适用于短距离、低功耗的设备，如可穿戴设备、医疗设备、智能家居。</li>
<li><strong>优点</strong>：低功耗，广泛支持，适合需要定期传输小数据量的设备。</li>
</ul>
<p><a href="">to be continued</a></p>
<h1 id="NB-IoT（Narrowband-IoT）"><a href="#NB-IoT（Narrowband-IoT）" class="headerlink" title="NB-IoT（Narrowband IoT）"></a>NB-IoT（Narrowband IoT）</h1><ul>
<li><strong>特点</strong>：低功耗广域网技术，基于蜂窝网络。</li>
<li><strong>应用场景</strong>：适用于广域覆盖和低数据速率的物联网应用，如智能计量、资产追踪、智慧城市。</li>
<li><strong>优点</strong>：深度覆盖，支持海量设备连接，电池寿命长。</li>
</ul>
<p><a href="">to be continued</a></p>
<h1 id="Sigfox"><a href="#Sigfox" class="headerlink" title="Sigfox"></a>Sigfox</h1><ul>
<li><strong>特点</strong>：超窄带、低功耗广域网技术。</li>
<li><strong>应用场景</strong>：适用于低数据传输速率和低功耗的应用，如资产跟踪、环境监测、智能城市。</li>
<li><strong>优点</strong>：全球覆盖，超低功耗，成本低，适合大规模部署。</li>
</ul>
<p><a href="">to be continued</a></p>
<h1 id="6LoWPAN（IPv6-over-Low-Power-Wireless-Personal-Area-Networks）"><a href="#6LoWPAN（IPv6-over-Low-Power-Wireless-Personal-Area-Networks）" class="headerlink" title="6LoWPAN（IPv6 over Low-Power Wireless Personal Area Networks）"></a>6LoWPAN（IPv6 over Low-Power Wireless Personal Area Networks）</h1><ul>
<li><strong>特点</strong>：将IPv6引入低功耗无线网络，适用于资源受限的设备。</li>
<li><strong>应用场景</strong>：适用于需要与互联网通信的物联网设备，如智能家居、工业自动化。</li>
<li><strong>优点</strong>：支持IP地址的直接分配，便于与现有互联网基础设施集成。</li>
</ul>
<p><a href="">to be continued</a></p>
<h1 id="Wi-Fi"><a href="#Wi-Fi" class="headerlink" title="Wi-Fi"></a>Wi-Fi</h1><ul>
<li><strong>特点</strong>：基于IEEE 802.11标准，提供高速、短距离无线通信。</li>
<li><strong>应用场景</strong>：适用于需要高带宽、连续供电的物联网设备，如智能摄像头、家庭自动化设备。</li>
<li><strong>优点</strong>：高速数据传输，广泛应用，易于部署。</li>
</ul>
<p><a href="">to be continued</a></p>
<h1 id="Cellular-LTE-M-NB-IoT-5G"><a href="#Cellular-LTE-M-NB-IoT-5G" class="headerlink" title="Cellular (LTE-M, NB-IoT, 5G)"></a>Cellular (LTE-M, NB-IoT, 5G)</h1><ul>
<li><strong>特点</strong>：基于蜂窝网络的物联网通信协议，提供广域覆盖和高带宽。</li>
<li><strong>应用场景</strong>：适用于需要广域覆盖和高可靠性的应用，如车联网、远程监控、物流追踪。</li>
<li><strong>优点</strong>：广域覆盖，支持移动性，高带宽，适合大规模物联网部署。</li>
</ul>
<p><a href="">to be continued</a></p>
]]></content>
      <categories>
        <category>硬件技术</category>
      </categories>
      <tags>
        <tag>STM32</tag>
        <tag>笔记</tag>
        <tag>嵌入式</tag>
        <tag>51</tag>
        <tag>Iot</tag>
        <tag>物联网协议</tag>
      </tags>
  </entry>
  <entry>
    <title>物联网水控系统</title>
    <url>/2024/09/19/%E7%89%A9%E8%81%94%E7%BD%91%E6%B0%B4%E6%8E%A7%E7%B3%BB%E7%BB%9F/</url>
    <content><![CDATA[<p><img src="/../images/iotWaterPump/xmind.png" alt="regen"></p>
<h1 id="技术栈"><a href="#技术栈" class="headerlink" title="技术栈"></a>技术栈</h1><h2 id="1-软件系统"><a href="#1-软件系统" class="headerlink" title="1. 软件系统"></a>1. 软件系统</h2><ul>
<li>Flask+VUE+MySQL</li>
<li>Python脚本使用Mqtt协议传送命令以及数据</li>
</ul>
<h2 id="2-硬件系统"><a href="#2-硬件系统" class="headerlink" title="2. 硬件系统"></a>2. 硬件系统</h2><ul>
<li>esp8266连接WIFI以及MQ服务器</li>
<li>220v水泵</li>
</ul>
<h1 id="实现过程"><a href="#实现过程" class="headerlink" title="实现过程"></a>实现过程</h1><h2 id="1-esp8266连接emqx服务器"><a href="#1-esp8266连接emqx服务器" class="headerlink" title="1. esp8266连接emqx服务器"></a>1. esp8266连接emqx服务器</h2><ul>
<li>CA认证关键代码</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// WiFi and MQTT client initialization</span></span><br><span class="line">BearSSL::WiFiClientSecure espClient;</span><br><span class="line"><span class="function">PubSubClient <span class="title">mqtt_client</span><span class="params">(espClient)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// SSL certificate for MQTT broker</span></span><br><span class="line"><span class="comment">// Load DigiCert Global Root G2, which is used by EMQX Public Broker: broker.emqx.io</span></span><br><span class="line"><span class="type">static</span> <span class="type">const</span> <span class="type">char</span> ca_cert[]</span><br><span class="line">PROGMEM = <span class="string">R&quot;EOF(</span></span><br><span class="line"><span class="string">-----BEGIN CERTIFICATE-----</span></span><br><span class="line"><span class="string">***********ca CRT***********</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">-----END CERTIFICATE-----</span></span><br><span class="line"><span class="string">)EOF&quot;</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h2 id="2-esp8266收发指令并进行作业"><a href="#2-esp8266收发指令并进行作业" class="headerlink" title="2. esp8266收发指令并进行作业"></a>2. esp8266收发指令并进行作业</h2><ul>
<li>将payload输出到字符数组，在进行对比后分支操作</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">char</span> *mqtt_start = <span class="string">&quot;start&quot;</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">char</span> *mqtt_stop = <span class="string">&quot;stop&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">mqttCallback</span><span class="params">(<span class="type">char</span> *topic, byte *payload, <span class="type">unsigned</span> <span class="type">int</span> length)</span> </span>&#123;</span><br><span class="line">    Serial.<span class="built_in">print</span>(<span class="string">&quot;Message received on topic: &quot;</span>);</span><br><span class="line">    Serial.<span class="built_in">print</span>(topic);</span><br><span class="line">    Serial.<span class="built_in">print</span>(<span class="string">&quot;]: &quot;</span>);</span><br><span class="line">    <span class="type">char</span> judge[<span class="number">5</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; length; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span>(i&gt;=<span class="number">12</span>)&#123;</span><br><span class="line">            judge[i<span class="number">-12</span>]=payload[i];</span><br><span class="line">        &#125;</span><br><span class="line">        Serial.<span class="built_in">print</span>((<span class="type">char</span>) payload[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">judgeEqual</span>(judge,mqtt_start,<span class="number">5</span>))&#123;</span><br><span class="line">      Serial.<span class="built_in">print</span>(<span class="string">&quot;ssssssssssssssssssssssssssssssssuccessful&quot;</span>);</span><br><span class="line">        <span class="built_in">digitalWrite</span>(<span class="number">16</span>, HIGH);  <span class="comment">// turn the LED on (HIGH is the voltage level)                    // wait for a second</span></span><br><span class="line">    &#125;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">judgeEqual</span>(judge,mqtt_stop,<span class="number">4</span>))&#123;</span><br><span class="line">      Serial.<span class="built_in">print</span>(<span class="string">&quot;ssssssssssssssssssssssssssssssssuccessful&quot;</span>);</span><br><span class="line">        <span class="built_in">digitalWrite</span>(<span class="number">16</span>, LOW);  <span class="comment">// turn the LED on (HIGH is the voltage level)                    // wait for a second</span></span><br><span class="line">    &#125;</span><br><span class="line">    Serial.<span class="built_in">println</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">judgeEqual</span><span class="params">(<span class="type">char</span> *str1,<span class="type">const</span> <span class="type">char</span> *str2,<span class="type">int</span> length)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;length;i++)&#123;</span><br><span class="line">    <span class="keyword">if</span>(str1[i]!=str2[i]) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="3-搭建服务器并部署"><a href="#3-搭建服务器并部署" class="headerlink" title="3. 搭建服务器并部署"></a>3. 搭建服务器并部署</h2><ul>
<li><p>无数据库的Flak+Vue项目部署</p>
<ol>
<li><p>服务器的准备阶段 </p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt install nginx -y <span class="comment"># 安装nginx</span></span><br><span class="line"><span class="built_in">sudo</span> aot install python3 python3-pip3 -y</span><br><span class="line"><span class="built_in">sudo</span> pip3 install paho-mqtt Flask Flask-CORS</span><br></pre></td></tr></table></figure>
</li>
<li><p>打包阶段</p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> frontend</span><br><span class="line">scp -r dist/ root@123.456.789.000:/var/www/vue-app</span><br><span class="line">spc -r backend/ root@123.456.789.000:/var/www/flask-app</span><br></pre></td></tr></table></figure>

</li>
<li><p>启动阶段</p>
</li>
</ol>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /etc/nginx/sites-available/default</span><br><span class="line">code .</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置</span></span><br><span class="line">server &#123;</span><br><span class="line">    listen 80;</span><br><span class="line">    server_name _;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 处理 Vue 前端</span></span><br><span class="line">    location / &#123;</span><br><span class="line">        root /var/www/vue-app;   <span class="comment"># Vue 静态文件的路径</span></span><br><span class="line">        try_files <span class="variable">$uri</span> <span class="variable">$uri</span>/ /index.html;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 处理 Flask 后端 API 请求</span></span><br><span class="line">    location /api/ &#123;</span><br><span class="line">        proxy_pass http://127.0.0.1:5000;  <span class="comment"># Flask 应用运行在本地的 5000 端口</span></span><br><span class="line">        proxy_set_header Host <span class="variable">$host</span>;</span><br><span class="line">        proxy_set_header X-Real-IP <span class="variable">$remote_addr</span>;</span><br><span class="line">        proxy_set_header X-Forwarded-For <span class="variable">$proxy_add_x_forwarded_for</span>;</span><br><span class="line">        proxy_set_header X-Forwarded-Proto <span class="variable">$scheme</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="4-编写命令发送脚本，其他功能脚本"><a href="#4-编写命令发送脚本，其他功能脚本" class="headerlink" title="4. 编写命令发送脚本，其他功能脚本"></a>4. 编写命令发送脚本，其他功能脚本</h2><p>见下</p>
<h1 id="进度追踪"><a href="#进度追踪" class="headerlink" title="进度追踪"></a>进度追踪</h1><h2 id="前端基本功能完成"><a href="#前端基本功能完成" class="headerlink" title="前端基本功能完成"></a>前端基本功能完成</h2><ul>
<li>登录</li>
</ul>
<p><img src="/../images/iotWaterPump/1.png" alt="regen"></p>
<ul>
<li>先实现基本的点灯功能（开关）</li>
</ul>
<p><img src="/../images/iotWaterPump/2.png" alt="regen"></p>
<h2 id="后端功能"><a href="#后端功能" class="headerlink" title="后端功能"></a>后端功能</h2><ul>
<li>提供密码认证</li>
</ul>
<p>​	因为是私人使用，所以只在后端检验密码</p>
<p><img src="/../images/iotWaterPump/3.png" alt="regen"></p>
<ul>
<li>获取命令信息</li>
</ul>
<h2 id=""><a href="#" class="headerlink" title=""></a><img src="/../images/iotWaterPump/4.png" alt="regen"></h2><h2 id="脚本运行"><a href="#脚本运行" class="headerlink" title="脚本运行"></a>脚本运行</h2><p>前后端都做得基本大差不差了。接下来开始Mqtt基于Python的脚本。</p>
<ul>
<li>简单脚本的运行</li>
</ul>
<p><img src="/../images/iotWaterPump/5.png" alt="regen"></p>
<ul>
<li><p>最终脚本的运行</p>
</li>
<li><p>很烦mqtt的版本问题 记得选择version</p>
</li>
<li><p>mqtt脚本直接运行可以成功，但是使用<code>subprocess</code>会失败就是因为版本问题。</p>
</li>
</ul>
<p>以下是两种情况都能运行的代码</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># mqtt_publish.py</span></span><br><span class="line"><span class="keyword">import</span> paho.mqtt.client <span class="keyword">as</span> mqtt</span><br><span class="line"><span class="keyword">import</span> ssl</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;mqtt_publish.py running&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">on_connect</span>(<span class="params">client, userdata, flags, rc</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Connected with result code &quot;</span> + <span class="built_in">str</span>(rc))</span><br><span class="line">    message = <span class="string">&quot;&#123;\n\&quot;  msg\&quot;: \&quot;start\&quot;\n&#125;&quot;</span></span><br><span class="line">    client.publish(<span class="string">&quot;/esp8266/test&quot;</span>, message)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;Published: <span class="subst">&#123;message&#125;</span>&quot;</span>)</span><br><span class="line">    time.sleep(<span class="number">1</span>)  <span class="comment"># Wait a second before sending the next message</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Create an MQTT client instance without callback_api_version</span></span><br><span class="line">client = mqtt.Client(mqtt.CallbackAPIVersion.VERSION1,client_id=<span class="string">&quot;&quot;</span>, clean_session=<span class="literal">True</span>, userdata=<span class="literal">None</span>, protocol=mqtt.MQTTv311,)</span><br><span class="line"></span><br><span class="line">client.on_connect = on_connect</span><br><span class="line"></span><br><span class="line">client.tls_set(ca_certs=<span class="string">&quot;emqxsl-ca.crt&quot;</span>, certfile=<span class="literal">None</span>, keyfile=<span class="literal">None</span>, tls_version=ssl.PROTOCOL_TLSv1_2)</span><br><span class="line"></span><br><span class="line">broker_address = <span class="string">&quot;url&quot;</span></span><br><span class="line">broker_port = <span class="number">8883</span></span><br><span class="line">username = <span class="string">&quot;regen&quot;</span></span><br><span class="line">password = <span class="string">&quot;123456&quot;</span></span><br><span class="line"></span><br><span class="line">client.username_pw_set(username, password)</span><br><span class="line">client.connect(broker_address, broker_port, keepalive=<span class="number">60</span>)</span><br><span class="line">client.loop_start()</span><br><span class="line"></span><br><span class="line">time.sleep(<span class="number">6</span>)  <span class="comment"># Wait a little longer to ensure all messages are sent</span></span><br><span class="line"></span><br><span class="line">client.loop_stop()</span><br><span class="line">client.disconnect()</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>成功截图</li>
</ul>
<p><img src="/../images/iotWaterPump/6.png" alt="regen"></p>
<p><img src="/../images/iotWaterPump/7.png" alt="regen"></p>
<h2 id="Final-部署到服务器"><a href="#Final-部署到服务器" class="headerlink" title="Final!!!!!!部署到服务器"></a>Final!!!!!!部署到服务器</h2><ul>
<li><p>发现一个神器<code>remote-ssh</code>，一个vscode插件，可以直接连接服务器，使用vscode进行部署和编辑。</p>
</li>
<li><p>部署flask后端</p>
<ol>
<li>只需要传源代码，一开始不小心把虚拟环境也传上去了qwq</li>
<li>使用 <code>gunicorn</code> 启动 Flask 应用</li>
</ol>
</li>
<li><p>部署前端VUE</p>
<ol>
<li>使用打包工具<code>npm run build</code></li>
<li>使用nginx进行的代理</li>
</ol>
</li>
</ul>
<h2 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h2><p>每个人都可以访问网站 <a href="142.171.33.151">WaterPump</a>来控制水泵了！</p>
<p><img src="/../images/iotWaterPump/8.png" alt="regen"></p>
<p><img src="/../images/iotWaterPump/9.png" alt="regen"></p>
<h1 id="报错"><a href="#报错" class="headerlink" title="报错"></a>报错</h1><ol>
<li>VUE前端没有加入登录认证导致每个人都可以<code>IP/admin</code>进入后台，登录界面形同虚设</li>
<li>Linux(ubuntu)使用<code>subprocess</code>运行脚本需要加python版本<code>python3</code></li>
<li>mqtt库函数参数需要加<code>CallbackAPIVersion</code></li>
<li>使用emqx服务器集群的CA认证</li>
</ol>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>​	这一次没有采用自己搭建的mqtt服务器，使用的是emqx的免费服务器集群，说实话有点麻烦，需要ca认证才能连接上。早知道就用自己之前搭建的服务器了。不过学到了新的东西，也是蛮不错的。	</p>
<p>​	接下来试试加上别的传感器，再写个dashboard，方便展示数据和发送命令。</p>
<h1 id="升级—-V2-0"><a href="#升级—-V2-0" class="headerlink" title="升级—-&gt; V2.0"></a>升级—-&gt; V2.0</h1><p>​	加入数据可视化显示以及实时显示当前数据的功能。</p>
<p><img src="/../images/iotWaterPump/v2/1.png" alt="v2"></p>
<h2 id="功能实现"><a href="#功能实现" class="headerlink" title="功能实现"></a>功能实现</h2><h3 id="1-获取当地天气等数据"><a href="#1-获取当地天气等数据" class="headerlink" title="1. 获取当地天气等数据"></a>1. 获取当地天气等数据</h3><ul>
<li><p><strong>实现方法</strong></p>
<p>  ​	尝试使用现有的api，例如高德。</p>
</li>
</ul>
<h4 id="高德api的使用"><a href="#高德api的使用" class="headerlink" title="高德api的使用"></a>高德api的使用</h4><blockquote>
<ol>
<li>打开并注册<a href="https://lbs.amap.com/">高德开放平台</a></li>
<li>进入<a href="https://console.amap.com/dev/key/app">高德开发平台的控制台</a></li>
<li>创建<strong>web服务</strong>应用并获取 API Key</li>
</ol>
</blockquote>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line">https://restapi.amap.com/v3/weather/weatherInfo?city=110101&amp;key=&lt;用户key&gt;</span><br></pre></td></tr></table></figure>

<ol>
<li><p>参数的选择</p>
<table>
<thead>
<tr>
<th><strong>参数名</strong></th>
<th><strong>含义</strong></th>
<th><strong>规则说明</strong></th>
<th><strong>是否必须</strong></th>
<th><strong>缺省值</strong></th>
</tr>
</thead>
<tbody><tr>
<td>key</td>
<td>请求服务权限标识</td>
<td>用户在高德地图官网 <a href="https://lbs.amap.com/dev/">申请 web 服务 API 类型 KEY</a></td>
<td>必填</td>
<td>无</td>
</tr>
<tr>
<td>city</td>
<td>城市编码</td>
<td>输入城市的 adcode，adcode 信息可参考 <a href="https://lbs.amap.com/api/webservice/download">城市编码表</a></td>
<td>必填</td>
<td>无</td>
</tr>
<tr>
<td>extensions</td>
<td>气象类型</td>
<td>可选值：base&#x2F;allbase:返回实况天气all:返回预报天气</td>
<td>可选</td>
<td>无</td>
</tr>
<tr>
<td>output</td>
<td>返回格式</td>
<td>可选值：JSON,XML</td>
<td>可选</td>
<td>JSON</td>
</tr>
</tbody></table>
</li>
<li><p>返回案例结果，浦东新区为案例</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;status&quot;</span><span class="punctuation">:</span> <span class="string">&quot;1&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;count&quot;</span><span class="punctuation">:</span> <span class="string">&quot;1&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;info&quot;</span><span class="punctuation">:</span> <span class="string">&quot;OK&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;infocode&quot;</span><span class="punctuation">:</span> <span class="string">&quot;10000&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;lives&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;province&quot;</span><span class="punctuation">:</span> <span class="string">&quot;上海&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;city&quot;</span><span class="punctuation">:</span> <span class="string">&quot;浦东新区&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;adcode&quot;</span><span class="punctuation">:</span> <span class="string">&quot;310115&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;weather&quot;</span><span class="punctuation">:</span> <span class="string">&quot;阴&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;temperature&quot;</span><span class="punctuation">:</span> <span class="string">&quot;19&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;winddirection&quot;</span><span class="punctuation">:</span> <span class="string">&quot;西北&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;windpower&quot;</span><span class="punctuation">:</span> <span class="string">&quot;≤3&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;humidity&quot;</span><span class="punctuation">:</span> <span class="string">&quot;77&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;reporttime&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2024-10-20 15:33:12&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;temperature_float&quot;</span><span class="punctuation">:</span> <span class="string">&quot;19.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;humidity_float&quot;</span><span class="punctuation">:</span> <span class="string">&quot;77.0&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></li>
</ol>
<h4 id="前端展示"><a href="#前端展示" class="headerlink" title="前端展示"></a>前端展示</h4><p><img src="/../images/iotWaterPump/v2/2.png" alt="v2 show GD api"></p>
<h3 id="2-获取传感器数据（实时更新）"><a href="#2-获取传感器数据（实时更新）" class="headerlink" title="2. 获取传感器数据（实时更新）"></a>2. 获取传感器数据（实时更新）</h3><h4 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h4><ol>
<li>使用Flask制作api。每次刷新即重新发送请求获取传感器数据。</li>
<li>服务器获取到的数据存进MySQL数据库，然后每次请求则返回数据库最新数据</li>
<li>使用实时通信技术，前端直接使用mqtt库，获取数据<ol>
<li>WebSocket</li>
<li>ServerSentEvents</li>
</ol>
</li>
</ol>
<h3 id="3-数据可视化（折线图等方式）"><a href="#3-数据可视化（折线图等方式）" class="headerlink" title="3. 数据可视化（折线图等方式）"></a>3. 数据可视化（折线图等方式）</h3><p>已经崩溃了。</p>
<p>下图是VUE+MQTT.js的效果，可以直接从emqx获取数据，省去了get后端api的步骤，实时更新。</p>
<ul>
<li>遇到的报错<ol>
<li>mqtt.js包版本问题</li>
<li>WebSocket over SSL 连接不上emqx</li>
<li>数据json化</li>
<li>官方项目和自己的项目各种包版本不同</li>
</ol>
</li>
<li>涨的知识<ol>
<li>一般前端使用WebSocket获取数据，后端用mqtts获取数据。</li>
<li>github可以直接使用codespace！直接一步调试太厉害了。</li>
</ol>
</li>
</ul>
<p><img src="/../images/iotWaterPump/10.png" alt="v2 "></p>
<h1 id="升级—-V3-0"><a href="#升级—-V3-0" class="headerlink" title="升级—-&gt; V3.0"></a>升级—-&gt; V3.0</h1><p>增加其他功能</p>
<p><img src="/../images/iotWaterPump/v3/1.png" alt="v3"></p>
<p><img src="/../images/iotWaterPump/v3/2.png" alt="v3"></p>
<p><img src="/../images/iotWaterPump/v3/3.png" alt="v3"></p>
<p><img src="/../images/iotWaterPump/v3/4.png" alt="v3"></p>
]]></content>
      <categories>
        <category>软硬件技术</category>
      </categories>
      <tags>
        <tag>笔记</tag>
        <tag>嵌入式</tag>
        <tag>Iot</tag>
        <tag>物联网协议</tag>
        <tag>esp8266</tag>
      </tags>
  </entry>
  <entry>
    <title>物联网水控系统硬件部分</title>
    <url>/2024/10/11/%E7%89%A9%E8%81%94%E7%BD%91%E6%B0%B4%E6%8E%A7%E7%B3%BB%E7%BB%9F%E7%A1%AC%E4%BB%B6%E9%83%A8%E5%88%86/</url>
    <content><![CDATA[<p>硬件部分实现记录</p>
<h1 id="PCB-电路图"><a href="#PCB-电路图" class="headerlink" title="PCB&amp;电路图"></a>PCB&amp;电路图</h1><h2 id="esp32-wroom-32E"><a href="#esp32-wroom-32E" class="headerlink" title="esp32-wroom-32E"></a>esp32-wroom-32E</h2><h3 id="下载电路"><a href="#下载电路" class="headerlink" title="下载电路"></a>下载电路</h3><ul>
<li><p>串口烧录</p>
<ul>
<li>IO1（tx）&amp;IO3（rx）：与CH340C连接</li>
</ul>
</li>
<li><p>自动烧录</p>
<ul>
<li><p>烧录条件</p>
<p>  <img src="/../images/iotWaterPump/hardware/2.png"></p>
</li>
<li><p>原理图</p>
<p>  <img src="/../images/iotWaterPump/hardware/3.png"></p>
</li>
</ul>
</li>
</ul>
<p><img src="/../images/iotWaterPump/hardware/4.png"></p>
<h2 id="CH340C"><a href="#CH340C" class="headerlink" title="CH340C"></a>CH340C</h2><ul>
<li><p>RXD &amp; TXD 串口输入输出</p>
</li>
<li><p>D+ &amp; D- USB  输入</p>
</li>
<li><p>VCC</p>
<blockquote>
<p>Positive power input terminal, requires an external </p>
<p>0.1uF power decoupling capacitor. </p>
<p>去耦电容（Decoupling Capacitor）是电子电路设计中常用的一种电容，主要用于稳定电源电压，减少电源噪声和干扰，确保电路的正常工作。</p>
</blockquote>
</li>
<li><p>V3 </p>
<blockquote>
<p>When the power supply voltage is 3.3V, connect </p>
<p>VCC to input the external power supply. When the </p>
<p>power supply voltage is 5V, connect an external </p>
<p>decoupling capacitor with a capacity of 0.1uF. </p>
</blockquote>
</li>
<li><p><strong>RTS# &amp; DTR#</strong></p>
<blockquote>
<p>进行esp32的自动下载电路</p>
</blockquote>
<ul>
<li><p>DTR#</p>
<blockquote>
<p>MODEM contact output signal, data terminal ready, </p>
<p>active low (high) </p>
</blockquote>
</li>
<li><p>RTS# </p>
<blockquote>
<p>MODEM contact output signal, request to send, </p>
<p>active low (high)</p>
</blockquote>
</li>
</ul>
</li>
</ul>
<p><img src="/../images/iotWaterPump/hardware/1.png"></p>
<h2 id="继电器模块"><a href="#继电器模块" class="headerlink" title="继电器模块"></a>继电器模块</h2><p><img src="/../images/iotWaterPump/hardware/5.png"></p>
<h2 id="PCB"><a href="#PCB" class="headerlink" title="PCB"></a>PCB</h2><p><img src="/../images/iotwaterpump/hardware/pcb.png"></p>
]]></content>
      <categories>
        <category>硬件技术</category>
      </categories>
      <tags>
        <tag>笔记</tag>
        <tag>嵌入式</tag>
        <tag>Iot</tag>
        <tag>esp32</tag>
        <tag>物联网协议</tag>
        <tag>esp8266</tag>
      </tags>
  </entry>
  <entry>
    <title>电子电路基础</title>
    <url>/2024/11/07/%E7%94%B5%E5%AD%90%E7%94%B5%E8%B7%AF%E5%9F%BA%E7%A1%80/</url>
    <content><![CDATA[<p>随手记下一些不清楚的电子电路知识点</p>
<h1 id="反应性原件"><a href="#反应性原件" class="headerlink" title="反应性原件"></a>反应性原件</h1><h2 id="L-R时间常数"><a href="#L-R时间常数" class="headerlink" title="L&#x2F;R时间常数"></a>L&#x2F;R时间常数</h2><blockquote>
<p>描述电感电路（RL电路）中的一个重要参数，它表示电流达到其最终值的63.2%所需的时间。</p>
<p>L代表电感量（以亨利H为单位），R代表电阻值（以欧姆Ω为单位），因此L&#x2F;R时间常数的单位是秒（s）。</p>
<p>在RL电路中，当施加一个电压时，电流不会立刻达到最大值，而是逐渐增加，达到最终稳定值。电流随时间的变化可以用指数函数描述，公式为：<br>$$<br>I(t)&#x3D;Imax×(1−e^{-τ&#x2F;t})<br>$$<br>其中：</p>
<ul>
<li><p>I(t)I(t)I(t) 是时间 ttt 时刻的电流，</p>
</li>
<li><p>ImaxI_{\text{max}}Imax 是最终的最大电流值，</p>
</li>
<li><p>eee 是自然对数的底，</p>
</li>
<li><p>τ&#x3D;LR\tau &#x3D; \frac{L}{R}τ&#x3D;RL 是时间常数。</p>
</li>
</ul>
<p>当时间 t&#x3D;τt &#x3D; \taut&#x3D;τ 时，电流 I(t)I(t)I(t) 达到最大值的约63.2%。在工程应用中，这个时间常数描述了电路响应的速度——L&#x2F;R越大，电流建立的速度越慢。</p>
</blockquote>
]]></content>
      <categories>
        <category>硬件技术</category>
      </categories>
      <tags>
        <tag>笔记</tag>
        <tag>模电</tag>
        <tag>电子元件</tag>
        <tag>模拟电路</tag>
        <tag>电路基础</tag>
      </tags>
  </entry>
  <entry>
    <title>系统运维</title>
    <url>/2025/02/24/%E7%B3%BB%E7%BB%9F%E8%BF%90%E7%BB%B4/</url>
    <content><![CDATA[<p><strong>学习路线以及方向</strong></p>
<p><img src="/../images/OperationsAndMaintenanceEngineer/1.png"></p>
]]></content>
      <categories>
        <category>软件技术</category>
      </categories>
      <tags>
        <tag>笔记</tag>
        <tag>linux</tag>
        <tag>系统运维</tag>
        <tag>K8s</tag>
      </tags>
  </entry>
  <entry>
    <title>一行代码搭建私有云（基于docker NextCloud）</title>
    <url>/2024/05/15/%E7%A7%81%E6%9C%89%E4%BA%91%E6%90%AD%E5%BB%BA_NextCloud/</url>
    <content><![CDATA[<h1 id="一行代码搭建私有云（基于docker-NextCloud）"><a href="#一行代码搭建私有云（基于docker-NextCloud）" class="headerlink" title="一行代码搭建私有云（基于docker NextCloud）"></a>一行代码搭建私有云（基于docker NextCloud）</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>​	老早以前就很想有一朵属于自己的云了，机缘巧合发现了<strong>NextCloud</strong>	这个项目，使用Docker一键部署简直不要太简单！    </p>
<p>​	项目地址：	<a href="https://github.com/nextcloud/docker">NextCloud repo on github</a><br>​	搭完以后再也没有用过文件传输助手，多平台文件传输秒传。太厉害了。<br>​	开源不易，感谢大佬</p>
<h2 id="一行代码"><a href="#一行代码" class="headerlink" title="一行代码"></a>一行代码</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run -d -p 8080:80 nextcloud</span><br></pre></td></tr></table></figure>

<p>然后直接<code>IP:8080</code>就访问到了</p>
<p><img src="/../images/nc/1.png" alt="1"></p>
<p><img src="/../images/nc/2.png" alt="2"></p>
]]></content>
      <categories>
        <category>软件技术</category>
      </categories>
      <tags>
        <tag>笔记</tag>
        <tag>docker</tag>
        <tag>私有云</tag>
        <tag>Linux</tag>
        <tag>NextCloud</tag>
        <tag>云盘</tag>
        <tag>跨平台</tag>
        <tag>github项目</tag>
      </tags>
  </entry>
  <entry>
    <title>编译原理</title>
    <url>/2025/05/26/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/</url>
    <content><![CDATA[<h1 id="编译原理课程笔记"><a href="#编译原理课程笔记" class="headerlink" title="编译原理课程笔记"></a><strong>编译原理课程笔记</strong></h1><h1 id="第一章-引论"><a href="#第一章-引论" class="headerlink" title="第一章 引论"></a>第一章 引论</h1><h2 id="编译器概述"><a href="#编译器概述" class="headerlink" title="编译器概述"></a>编译器概述</h2><ul>
<li>翻译器:<ul>
<li>把某一种语言程序(称为源语言程序)等价地转换成另一种语言程序(称为目标语言程序)的程序</li>
</ul>
</li>
<li>解释器：<ul>
<li>把源语言（高级语言）写的源程序作为输入，但不产生目标程序，而是边解释边执行源程序</li>
</ul>
</li>
<li>编译器：<ul>
<li>把一种高级语言程序等价地转换成另一种低级语言程序(汇编语言或机器语言程序)的程序</li>
</ul>
</li>
</ul>
<h3 id="编译前端与后端"><a href="#编译前端与后端" class="headerlink" title="编译前端与后端"></a>编译前端与后端</h3><ul>
<li>编译前端：<ul>
<li>与源语言有关，如词法分析，语法分析，语义分析与中间代码产生，与机器无关的优化</li>
</ul>
</li>
<li>编译后端：<ul>
<li>与目标机有关，与目标机有关的优化，目标代码产生</li>
</ul>
</li>
</ul>
<h3 id="编译过程"><a href="#编译过程" class="headerlink" title="编译过程"></a>编译过程</h3><ol>
<li>词法分析</li>
<li>语法分析</li>
<li>语义分析</li>
<li>中间代码产生</li>
<li>优化</li>
<li>目标代码产生</li>
</ol>
<h4 id="词法分析"><a href="#词法分析" class="headerlink" title="词法分析"></a>词法分析</h4><p>任务: 输入源程序，对构成源程序的字符串进行扫描和分解，识别出一个个单词符号。依循的原则：构词规则描述工具：有限自动机</p>
<h4 id="语法分析"><a href="#语法分析" class="headerlink" title="语法分析"></a>语法分析</h4><p>任务:在词法分析的基础上，根据语言的语法规则把单词符号串分解成各类语法单位。依循的原则：语法规则,语法树描述工具：上下文无关文法</p>
<h4 id="语义分析和中间代码产生"><a href="#语义分析和中间代码产生" class="headerlink" title="语义分析和中间代码产生"></a>语义分析和中间代码产生</h4><p>任务:对各类不同语法范畴按语言的语义进行初步翻译。–声明语句和操作语句依循的原则：语义规则中间代码:三元式，四元式，树形结构等</p>
<h4 id="优化"><a href="#优化" class="headerlink" title="优化"></a>优化</h4><p>任务：对于前阶段产生的中间代码进行加工变换，以期在最后阶段产生更高效的目标代码。依循的原则：程序的等价变换规则</p>
<h4 id="目标代码产生"><a href="#目标代码产生" class="headerlink" title="目标代码产生"></a>目标代码产生</h4><p>任务: 把中间代码变换成特定机器上的目标代码。依赖于硬件系统结构和机器指令的含义目标代码三种形式:绝对指令代码: 可直接运行 汇编指令代码: 需要进行汇编可重新定位指令代码: 需要连接装配</p>
<h2 id="编译技术的应用"><a href="#编译技术的应用" class="headerlink" title="编译技术的应用"></a>编译技术的应用</h2><p>编译技术广泛应用于计算机领域核心场景：  </p>
<ol>
<li><strong>程序开发</strong>：将高级语言（C&#x2F;Java&#x2F;Python）编译为机器码或字节码，支撑编程语言生态；解释器实现动态执行；  </li>
<li><strong>性能优化</strong>：通过代码精简、内联扩展、循环优化提升效率，JIT技术（如Java&#x2F;JavaScript）实现运行时加速；  </li>
<li><strong>跨平台支持</strong>：交叉编译生成多平台目标代码，虚拟机（如JVM）通过中间码实现“一次编写，到处运行”；  </li>
<li><strong>静态分析</strong>：检测代码漏洞、内存泄漏，支撑IDE智能提示与代码规范检查；  </li>
<li><strong>硬件与嵌入式</strong>：编译Verilog&#x2F;VHDL生成电路，为物联网设备生成低功耗固件；  </li>
<li><strong>安全防护</strong>：代码混淆防止反编译，静态分析识别恶意代码；  </li>
<li><strong>领域专用</strong>：实现SQL、正则表达式等DSL，提升领域开发效率。<br>此外，编译技术还用于代码生成工具、并行计算框架（如CUDA）和教育研究领域，是软件与硬件协同的核心纽带。（199字）</li>
</ol>
<h1 id="第二章-词法分析"><a href="#第二章-词法分析" class="headerlink" title="第二章 词法分析"></a>第二章 词法分析</h1><h2 id="词法分析的任务"><a href="#词法分析的任务" class="headerlink" title="词法分析的任务"></a>词法分析的任务</h2><p>​	从左至右逐个字符地对源程序进行扫描，产生一个个单词符号。</p>
<ul>
<li>词法分析器(Lexical Analyzer) 又称扫描器(Scanner)：<ul>
<li>是执行词法分析的程序</li>
</ul>
</li>
</ul>
<h2 id="词法分析器构造"><a href="#词法分析器构造" class="headerlink" title="词法分析器构造"></a>词法分析器构造</h2><h3 id="方法一-通过状态转换图编写词法分析器"><a href="#方法一-通过状态转换图编写词法分析器" class="headerlink" title="方法一:   通过状态转换图编写词法分析器"></a>方法一:   通过状态转换图编写词法分析器</h3><ul>
<li><p>词法分析器手工编制方法</p>
</li>
<li><p>词法分析器的功能和输出形式</p>
<ul>
<li>功能:输入源程序、输出单词符号</li>
</ul>
</li>
</ul>
<h4 id="状态转换图"><a href="#状态转换图" class="headerlink" title="状态转换图"></a>状态转换图</h4><ul>
<li>状态转换图是一张有限方向图。<ol>
<li>结点代表状态，用圆圈表示。</li>
<li>状态之间用代箭头的弧线连结，弧线上的标记(字符或其他)代表射出结点状态下可能出现的输入字符或字符类。</li>
<li>一张转换图只包含有限个状态，其中有一个为初态，至少要有一个终态双圆圈</li>
</ol>
</li>
</ul>
<h1 id="第三章-语法分析"><a href="#第三章-语法分析" class="headerlink" title="第三章 语法分析"></a>第三章 语法分析</h1><p>​	要进行语法分析，必须对语言的语法结构进行描述。</p>
<ol>
<li>采用正规式可以描述语言的单词符号、有限自动机进行词法识别；</li>
<li>用上下文无关文法来描述语法规则。</li>
</ol>
<h2 id="文法"><a href="#文法" class="headerlink" title="文法"></a>文法</h2><p>​	描述语言的语法结构的形式规则</p>
<h2 id="上下文无关文法"><a href="#上下文无关文法" class="headerlink" title="上下文无关文法"></a>上下文无关文法</h2><blockquote>
<p>一个上下文无关文法G是一个四元式  </p>
<p>G&#x3D;(VT，VN，S，P)，其中</p>
<p>VT：终结符集合(非空)</p>
<p>VN：非终结符集合(非空)，且VT ∩ VN&#x3D;∅</p>
<p>S：文法的开始符号，S∈VN</p>
<p>P：产生式集合(有限)，每个产生式形式为</p>
<p>P→α， P∈VN， α ∈(VT ∪ VN)*</p>
<p>开始符S至少必须在某个产生式的左部出现一次。</p>
</blockquote>
<h3 id="推导"><a href="#推导" class="headerlink" title="推导"></a>推导</h3><p>​	<img src="/../images/compiler/4.png"></p>
<h3 id="句型、句子、语言"><a href="#句型、句子、语言" class="headerlink" title="句型、句子、语言"></a>句型、句子、语言</h3><p><img src="/../images/compiler/5.png"></p>
<h2 id="形式语言类型"><a href="#形式语言类型" class="headerlink" title="形式语言类型"></a>形式语言类型</h2><p>Chomsky于1956年建立形式语言体系，他把文法分成四种类型：0，1，2，3型。与上下文无关文法一样，它们都由四部分组成，但对产生式的限制有所不同。</p>
<p><img src="/../images/compiler/6.png"></p>
<h2 id="语法树及二义性"><a href="#语法树及二义性" class="headerlink" title="语法树及二义性"></a>语法树及二义性</h2><p>​	反应句子结构的最好方法是树</p>
<p>​	对于程序设计语言，每个句子是非二义的，只对应唯一的语法树，因此可通过对该句子构造语法树来分析此句子。</p>
<p>​	定义：若G对同一句子产生不止一棵分析树，则称G是<strong>二义</strong>的。   原因：在产生句子的过程中某些直接推导有多于一种选择 </p>
<p>​	定义：如果一个文法存在某个句子对应两棵不同的语法树，则说这个<strong>文法</strong>是二义的。</p>
<h1 id="第四章-语法制导翻译"><a href="#第四章-语法制导翻译" class="headerlink" title="第四章 语法制导翻译"></a>第四章 语法制导翻译</h1><h2 id="主要概念"><a href="#主要概念" class="headerlink" title="主要概念"></a>主要概念</h2><blockquote>
<p>属性文法（基础文法）</p>
<p>属性</p>
<p>语义规则</p>
<p>翻译方案	</p>
</blockquote>
<h3 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h3><p>​	<strong>综合属性</strong>：“自下而上”传递信息    只使用综合属性的语法制导定义–S属性定义</p>
<p>​	<strong>继承属性</strong>：“自上而下”传递信息    只使用继承属性的语法制导定义–L属性定义</p>
<h2 id="语法制导翻译基本思想"><a href="#语法制导翻译基本思想" class="headerlink" title="语法制导翻译基本思想:"></a>语法制导翻译基本思想:</h2><blockquote>
<p>​	<strong>属性文法</strong>是在上下文无关文法的基础上，为每个文法符号配备若干相关的“值”，称为属性，属性与变量一样可以进行计算和传递，属性加工的过程即是语义处理的过程。</p>
<p>​	对文法的每个产生式配备的一组属性的计算规则，叫<strong>语义规则</strong>，语义分析和中间代码的产生就是根据该规则进行的，在自上而下或自下而上语法分析过程中，在适当的时候进行属性的计算，或其它语义动作（如查填符号表 、产生中间代码、发布出错信息）就可进行语法制导翻译得到中间代码。</p>
</blockquote>
<blockquote>
<p>通过用各种语法树分析</p>
<p>编译器的实现过程</p>
</blockquote>
<h1 id="第六章-运行时存储空间组织"><a href="#第六章-运行时存储空间组织" class="headerlink" title="第六章 运行时存储空间组织"></a>第六章 运行时存储空间组织</h1><blockquote>
<p>1、运行一个程序所需的存储空间包括几部分？2、编译器的存储分配策略有哪几种?3、编译器何时采用哪种存储分配策略?</p>
<hr>
<h3 id="1-运行一个程序所需的存储空间包括几部分？"><a href="#1-运行一个程序所需的存储空间包括几部分？" class="headerlink" title="1. 运行一个程序所需的存储空间包括几部分？"></a><strong>1. 运行一个程序所需的存储空间包括几部分？</strong></h3><p>运行一个程序所需的内存通常分为以下四部分：</p>
<table>
<thead>
<tr>
<th>部分</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td><strong>代码区（Text）</strong></td>
<td>存放编译后的机器指令，只读。</td>
</tr>
<tr>
<td><strong>静态数据区</strong></td>
<td>存放全局变量和静态变量。</td>
</tr>
<tr>
<td><strong>栈区（Stack）</strong></td>
<td>存放函数调用时的局部变量、参数、返回地址等。</td>
</tr>
<tr>
<td><strong>堆区（Heap）</strong></td>
<td>动态分配的内存（如 <code>malloc</code> 或 <code>new</code> 分配的内存）。</td>
</tr>
</tbody></table>
<hr>
<h3 id="2-编译器的存储分配策略有哪几种？"><a href="#2-编译器的存储分配策略有哪几种？" class="headerlink" title="2. 编译器的存储分配策略有哪几种？"></a><strong>2. 编译器的存储分配策略有哪几种？</strong></h3><p>主要有三种存储分配策略：</p>
<table>
<thead>
<tr>
<th>策略</th>
<th>特点</th>
</tr>
</thead>
<tbody><tr>
<td><strong>静态分配</strong></td>
<td>编译时分配，适合全局&#x2F;静态变量，不支持递归。</td>
</tr>
<tr>
<td><strong>栈式分配</strong></td>
<td>函数调用时在栈上分配，适合局部变量，自动释放，支持递归。</td>
</tr>
<tr>
<td><strong>堆式分配</strong></td>
<td>运行时动态分配，适合不确定大小或生命周期长的数据，需手动或GC释放。</td>
</tr>
</tbody></table>
<hr>
<h3 id="3-编译器何时采用哪种存储分配策略？"><a href="#3-编译器何时采用哪种存储分配策略？" class="headerlink" title="3. 编译器何时采用哪种存储分配策略？"></a><strong>3. 编译器何时采用哪种存储分配策略？</strong></h3><table>
<thead>
<tr>
<th>变量类型</th>
<th>使用策略</th>
</tr>
</thead>
<tbody><tr>
<td>全局变量、静态变量</td>
<td><strong>静态分配</strong></td>
</tr>
<tr>
<td>局部变量、函数参数</td>
<td><strong>栈式分配</strong></td>
</tr>
<tr>
<td>动态创建的对象、链表等</td>
<td><strong>堆式分配</strong></td>
</tr>
</tbody></table>
<hr>
</blockquote>
<h2 id="存储分配策略"><a href="#存储分配策略" class="headerlink" title="存储分配策略"></a>存储分配策略</h2><h3 id="静态分配策略-C语言"><a href="#静态分配策略-C语言" class="headerlink" title="静态分配策略(C语言 )"></a>静态分配策略(C语言 )</h3><p>​	如果在编译时能确定数据空间的大小，则可采用静态分配方法：在编译时刻为每个数据项目确定出在运行时刻的存储空间中的位置。</p>
<h3 id="动态分配策略-C语言"><a href="#动态分配策略-C语言" class="headerlink" title="动态分配策略(C语言 )"></a>动态分配策略(C语言 )</h3><p>​	如果在编译时不能确定运行时数据空间的大小，则必须采用动态分配方法。允许递归过程和动态申请释放内存。</p>
<pre><code>1. 栈式动态分配
1. 堆式动态分配
</code></pre>
<h1 id="第七章-中间代码生成"><a href="#第七章-中间代码生成" class="headerlink" title="第七章 中间代码生成"></a>第七章 中间代码生成</h1><h2 id="使用中间语言的好处："><a href="#使用中间语言的好处：" class="headerlink" title="使用中间语言的好处："></a>使用中间语言的好处：</h2><pre><code>1. 复杂性界于源语言和目标语言之间
1. 便于进行与机器无关的代码优化工作
1. 易于移植
1. 使编译程序的结构在逻辑上更为简单明确 
</code></pre>
<h3 id="常用的中间语言"><a href="#常用的中间语言" class="headerlink" title="常用的中间语言"></a>常用的中间语言</h3><ol>
<li>后缀式：逆波兰表示</li>
<li>图表示： DAG、抽象语法树</li>
<li>三地址代码：三元式、四元式</li>
</ol>
<h3 id="中间代码的选择"><a href="#中间代码的选择" class="headerlink" title="中间代码的选择"></a>中间代码的选择</h3><p>​	可以是一种实际的语言也可以是编译各阶段共享的内部数据结构</p>
<h2 id="图表示法"><a href="#图表示法" class="headerlink" title="图表示法"></a>图表示法</h2><p>无循环有向图(简称DAG)</p>
<ol>
<li>对表达式中的每个子表达式，DAG中都有一个结点</li>
<li>一个内部结点代表一个操作符，它的孩子代表操作数</li>
<li>在一个DAG中代表公共子表达式的结点具有多个父结点</li>
</ol>
<h1 id="第八章-代码生成"><a href="#第八章-代码生成" class="headerlink" title="第八章 代码生成"></a>第八章 代码生成</h1><p>目标代码一般有以下三种形式</p>
<ol>
<li>能够立即执行的机器语言代码，所有地址已经定位；</li>
<li>待装配的机器语言模块。执行时，由连接装配程序把它们和某些运行程序连接起来，转换成能执行的机器语言代码；</li>
<li>汇编语言代码。尚须经过汇编程序汇编，转换成可执行的机器语言代码。</li>
</ol>
<h1 id="第九章-优化"><a href="#第九章-优化" class="headerlink" title="第九章 优化"></a>第九章 优化</h1><p>​	优化：对程序进行各种等价变换，使得从变换后的程序出发，能生成更有效的目标代码。</p>
<p>​	优化的目的是为了产生更高效的代码。由优化编译程序提供的对代码的各种变换必须遵循一定的原则：	</p>
<pre><code>1. 等价原则：经过优化后不应改变程序运行的结果；
1. 有效原则：使优化后所产生的目标代码运行时间较短，占用的存储空间较小；
1. 合算原则：应尽可能以较低的代价取得较好的优化效果。
</code></pre>
<h4 id=""><a href="#" class="headerlink" title=""></a></h4><h2 id="窥孔优化"><a href="#窥孔优化" class="headerlink" title="窥孔优化"></a>窥孔优化</h2><p>​	窥孔优化：</p>
<p>​	窥孔优化技术</p>
<pre><code>1. 冗余存取指令删除
1. 不可达代码删除
1. 控制流优化
1. 强度消弱
1. 删除无用操作
</code></pre>
<hr>
<h1 id="编译原理PPT作业"><a href="#编译原理PPT作业" class="headerlink" title="编译原理PPT作业"></a><strong>编译原理PPT作业</strong></h1><h2 id="第一章"><a href="#第一章" class="headerlink" title="第一章"></a>第一章</h2><p><img src="/../images/compiler/1.png"></p>
<blockquote>
<p>**1. ** 词法分析器以源程序的字符流为输入，按词法规则将其识别为一个个单词，并转换为统一的（单词类别，单词值）二元组内部表示形式。它还负责检查词法错误，如非法字符、错误关键字等，之后将单词逐个传递给语法分析器，为其提供输入单元，同时在预处理时简化源程序，提高编译效率。 </p>
<p>**2. ** 状态转换图是由状态节点与带条件或事件标注的有向转换边构成的有向图 。它能直观展现系统或对象的运行逻辑，清晰呈现各种状态及转换关系，在系统设计时辅助架构规划，开发中用于检测错误、辅助调试，也是团队沟通的有力工具，在算法设计与分析领域，还能描述算法执行、助力性能分析 。 </p>
<p>**3. ** </p>
<p>知识点：</p>
<ol>
<li>词法分析器、输入输出</li>
<li>语法分析器</li>
<li>状态转换图</li>
</ol>
</blockquote>
<h2 id="第二章"><a href="#第二章" class="headerlink" title="第二章"></a>第二章</h2><p><img src="/../images/compiler/3.png"></p>
<blockquote>
<h3 id="1-词法分析器的功能（或词法分析的任务）"><a href="#1-词法分析器的功能（或词法分析的任务）" class="headerlink" title="1. 词法分析器的功能（或词法分析的任务）"></a><strong>1. 词法分析器的功能（或词法分析的任务）</strong></h3><p>词法分析器是编译过程的第一个阶段，其核心任务是将字符序列转换为<strong>标记（Tokens）</strong>，并为后续的语法分析提供支持。具体功能包括：</p>
<h4 id="（1）字符序列转换为标记（Tokens）"><a href="#（1）字符序列转换为标记（Tokens）" class="headerlink" title="（1）字符序列转换为标记（Tokens）"></a>（1）<strong>字符序列转换为标记（Tokens）</strong></h4><ul>
<li>识别源程序中的<strong>基本语法单元</strong>（即标记），例如：<ul>
<li><strong>关键字</strong>（如 <code>if</code>、<code>while</code>、<code>int</code> 等）</li>
<li><strong>标识符</strong>（变量名、函数名等）</li>
<li><strong>常量</strong>（整数、浮点数、字符串等）</li>
<li><strong>运算符</strong>（如 <code>+</code>、<code>-</code>、<code>*</code>、<code>/</code> 等）</li>
<li><strong>分隔符</strong>（如 <code>;</code>、<code>,</code>、<code>(</code>、<code>)</code> 等）</li>
</ul>
</li>
</ul>
<h4 id="（2）过滤无关字符"><a href="#（2）过滤无关字符" class="headerlink" title="（2）过滤无关字符"></a>（2）<strong>过滤无关字符</strong></h4><ul>
<li>跳过空白字符（如空格、换行、制表符）和注释，减少后续处理的复杂度。</li>
</ul>
<h4 id="（3）错误处理"><a href="#（3）错误处理" class="headerlink" title="（3）错误处理"></a>（3）<strong>错误处理</strong></h4><ul>
<li>检测并报告<strong>非法字符</strong>（如 <code>@</code> 在大多数语言中不合法）或<strong>无法识别的字符序列</strong>（如 <code>3a</code> 作为标识符开头）。</li>
</ul>
<h4 id="（4）符号表管理"><a href="#（4）符号表管理" class="headerlink" title="（4）符号表管理"></a>（4）<strong>符号表管理</strong></h4><ul>
<li>将识别出的标识符和常量存入<strong>符号表</strong>，记录其名称、类型、值等信息，供后续阶段使用。</li>
</ul>
<h4 id="（5）预处理支持"><a href="#（5）预处理支持" class="headerlink" title="（5）预处理支持"></a>（5）<strong>预处理支持</strong></h4><ul>
<li>对宏定义、条件编译等预处理指令进行初步处理（部分编译器中由单独的预处理器完成）。</li>
</ul>
<hr>
<h3 id="2-状态转换图及其作用"><a href="#2-状态转换图及其作用" class="headerlink" title="2. 状态转换图及其作用"></a><strong>2. 状态转换图及其作用</strong></h3><h4 id="状态转换图（State-Transition-Diagram）"><a href="#状态转换图（State-Transition-Diagram）" class="headerlink" title="状态转换图（State Transition Diagram）"></a><strong>状态转换图（State Transition Diagram）</strong></h4><p>状态转换图是一种<strong>有限状态自动机（Finite Automaton）</strong>的图形表示，用于描述词法分析器如何识别记号（Tokens）。</p>
<h4 id="组成"><a href="#组成" class="headerlink" title="组成"></a><strong>组成</strong></h4><ul>
<li><strong>状态节点</strong>：表示当前的识别状态（如初始状态、中间状态、终止状态）。</li>
<li><strong>转移边</strong>：标注输入字符，表示在当前状态下读取某字符时转移到的下一个状态。</li>
<li><strong>起始状态</strong>：通常用箭头指向，表示识别的起点。</li>
<li><strong>终止状态</strong>：用双圈表示，表示成功识别一个记号。</li>
</ul>
<h4 id="作用"><a href="#作用" class="headerlink" title="作用"></a><strong>作用</strong></h4><ol>
<li><strong>指导词法分析器设计</strong>：<ul>
<li>清晰展示如何从字符序列中逐步识别出记号（如标识符、数字、运算符）。</li>
</ul>
</li>
<li><strong>处理复杂模式</strong>：<ul>
<li>支持正则表达式定义的模式匹配（如识别 <code>if</code> 关键字或 <code>a123</code> 标识符）。</li>
</ul>
</li>
<li><strong>错误检测</strong>：<ul>
<li>当输入字符无法匹配任何转移边时，触发错误处理机制。</li>
</ul>
</li>
</ol>
<h4 id="示例：识别标识符的状态转换图"><a href="#示例：识别标识符的状态转换图" class="headerlink" title="示例：识别标识符的状态转换图"></a><strong>示例：识别标识符的状态转换图</strong></h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">   [字母或下划线]</span><br><span class="line">      ↓</span><br><span class="line">→(0)──────→(1)←┐</span><br><span class="line">      ↑        └─[字母或数字]</span><br><span class="line">      └──────┘</span><br></pre></td></tr></table></figure>
<ul>
<li><strong>状态0</strong>：初始状态。</li>
<li><strong>状态1</strong>：识别标识符的中间和终止状态。</li>
<li>规则：标识符以字母或下划线开头，后跟任意字母、数字或下划线。</li>
</ul>
<hr>
</blockquote>
<h1 id="第三章-语法分析-1"><a href="#第三章-语法分析-1" class="headerlink" title="第三章 语法分析"></a>第三章 语法分析</h1><p><img src="/../images/compiler/7.png"></p>
<blockquote>
<p>1、语法分析方法有几种？有几类？如何划分?</p>
<p>2、自上而下语法分析所面临的困难有哪些？分别如何解决？</p>
<p>3、简述自上而下语法分析的基本思想。</p>
<p>4、从语法树的角度看自上而下语法分析得到的语法树的根节点和末端（叶）节点分别代表什么？</p>
<p>5、自上而下语法分析方法有几种？分别给出它们的基本思想，并简述它们之间的区别（各自的特点）</p>
</blockquote>
<hr>
<h2 id="1-语法分析方法有几种？有几类？如何划分？"><a href="#1-语法分析方法有几种？有几类？如何划分？" class="headerlink" title="1. 语法分析方法有几种？有几类？如何划分？"></a><strong>1. 语法分析方法有几种？有几类？如何划分？</strong></h2><h3 id="✅-分类方式一：按分析方向"><a href="#✅-分类方式一：按分析方向" class="headerlink" title="✅ 分类方式一：按分析方向"></a>✅ <strong>分类方式一：按分析方向</strong></h3><p>语法分析方法主要分为两大类：</p>
<table>
<thead>
<tr>
<th>类别</th>
<th>名称</th>
<th>特点</th>
</tr>
</thead>
<tbody><tr>
<td>自上而下（Top-down）</td>
<td>从开始符号出发，逐步推导出输入串</td>
<td>适用于LL文法</td>
</tr>
<tr>
<td>自下而上（Bottom-up）</td>
<td>从输入串出发，逐步归约到开始符号</td>
<td>适用于LR文法</td>
</tr>
</tbody></table>
<h3 id="✅-分类方式二：按是否使用递归"><a href="#✅-分类方式二：按是否使用递归" class="headerlink" title="✅ 分类方式二：按是否使用递归"></a>✅ <strong>分类方式二：按是否使用递归</strong></h3><ul>
<li><strong>递归下降分析法</strong>（Recursive Descent Parsing）</li>
<li><strong>非递归预测分析法</strong>（Non-recursive Predictive Parsing）</li>
</ul>
<h3 id="✅-分类方式三：按是否回溯"><a href="#✅-分类方式三：按是否回溯" class="headerlink" title="✅ 分类方式三：按是否回溯"></a>✅ <strong>分类方式三：按是否回溯</strong></h3><ul>
<li><strong>带回溯的分析法</strong>（Backtracking Parsing）</li>
<li><strong>不带回溯的分析法</strong>（Predictive Parsing）</li>
</ul>
<hr>
<h2 id="2-自上而下语法分析所面临的困难有哪些？分别如何解决？"><a href="#2-自上而下语法分析所面临的困难有哪些？分别如何解决？" class="headerlink" title="2. 自上而下语法分析所面临的困难有哪些？分别如何解决？"></a><strong>2. 自上而下语法分析所面临的困难有哪些？分别如何解决？</strong></h2><h3 id="🚧-困难一：左递归（Left-Recursion）"><a href="#🚧-困难一：左递归（Left-Recursion）" class="headerlink" title="🚧 困难一：左递归（Left Recursion）"></a>🚧 困难一：<strong>左递归（Left Recursion）</strong></h3><ul>
<li><strong>问题</strong>：直接使用形如 <code>A → Aα</code> 的产生式会导致无限递归。</li>
<li><strong>解决</strong>：<ul>
<li><strong>消除左递归</strong>：<ul>
<li>将左递归形式 <code>A → Aα | β</code> 改写为：<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">A → βA&#x27;</span><br><span class="line">A&#x27; → αA&#x27; | ε</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="🚧-困难二：公共前缀（Left-Factoring）"><a href="#🚧-困难二：公共前缀（Left-Factoring）" class="headerlink" title="🚧 困难二：公共前缀（Left Factoring）"></a>🚧 困难二：<strong>公共前缀（Left Factoring）</strong></h3><ul>
<li><strong>问题</strong>：多个产生式以相同前缀开头，无法确定选择哪个分支。</li>
<li><strong>解决</strong>：<ul>
<li><strong>提取左因子</strong>（Left Factoring）：<ul>
<li>如将 <code>A → αβ | αγ</code> 改写为：<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">A → αA&#x27;</span><br><span class="line">A&#x27; → β | γ</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="🚧-困难三：回溯（Backtracking）"><a href="#🚧-困难三：回溯（Backtracking）" class="headerlink" title="🚧 困难三：回溯（Backtracking）"></a>🚧 困难三：<strong>回溯（Backtracking）</strong></h3><ul>
<li><strong>问题</strong>：在不确定选择哪个产生式时，需尝试所有可能，效率低。</li>
<li><strong>解决</strong>：<ul>
<li>使用<strong>预测分析表</strong>（Predictive Parsing Table），根据当前栈顶和输入符号直接决定使用哪个产生式，避免回溯。</li>
</ul>
</li>
</ul>
<hr>
<h2 id="3-简述自上而下语法分析的基本思想"><a href="#3-简述自上而下语法分析的基本思想" class="headerlink" title="3. 简述自上而下语法分析的基本思想"></a><strong>3. 简述自上而下语法分析的基本思想</strong></h2><h3 id="✅-基本思想："><a href="#✅-基本思想：" class="headerlink" title="✅ 基本思想："></a>✅ 基本思想：</h3><p><strong>从文法的开始符号出发，试图通过一系列推导步骤，构造一个最左推导，使得最终得到的字符串与输入串匹配。</strong></p>
<p>换句话说：</p>
<ul>
<li>从根节点（开始符号）开始；</li>
<li>按照文法规则一步步扩展非终结符；</li>
<li>直到所有叶子节点都为终结符，并与输入串完全一致。</li>
</ul>
<h3 id="🔍-实现方式："><a href="#🔍-实现方式：" class="headerlink" title="🔍 实现方式："></a>🔍 实现方式：</h3><ul>
<li>可以是<strong>递归的</strong>（每个非终结符对应一个过程）；</li>
<li>或者是非递归的（使用栈和预测分析表）。</li>
</ul>
<hr>
<h2 id="4-从语法树的角度看自上而下语法分析得到的语法树的根节点和末端（叶）节点分别代表什么？"><a href="#4-从语法树的角度看自上而下语法分析得到的语法树的根节点和末端（叶）节点分别代表什么？" class="headerlink" title="4. 从语法树的角度看自上而下语法分析得到的语法树的根节点和末端（叶）节点分别代表什么？"></a><strong>4. 从语法树的角度看自上而下语法分析得到的语法树的根节点和末端（叶）节点分别代表什么？</strong></h2><h3 id="✅-根节点（Root-Node）："><a href="#✅-根节点（Root-Node）：" class="headerlink" title="✅ 根节点（Root Node）："></a>✅ 根节点（Root Node）：</h3><ul>
<li>表示文法的<strong>开始符号</strong>（通常是 <code>S</code> 或 <code>E</code>）。</li>
<li>是整个语法分析过程的起点。</li>
</ul>
<h3 id="✅-叶节点（Leaf-Nodes）："><a href="#✅-叶节点（Leaf-Nodes）：" class="headerlink" title="✅ 叶节点（Leaf Nodes）："></a>✅ 叶节点（Leaf Nodes）：</h3><ul>
<li>表示<strong>终结符</strong>，即输入串中的实际字符（如 <code>id</code>, <code>+</code>, <code>(</code>, <code>)</code> 等）。</li>
<li>当语法树的所有叶节点拼接起来等于输入串时，表示分析成功。</li>
</ul>
<h3 id="📌-示例："><a href="#📌-示例：" class="headerlink" title="📌 示例："></a>📌 示例：</h3><p>对于表达式 <code>id + id</code>，其语法树如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">    E</span><br><span class="line">  / | \</span><br><span class="line"> T  +  E</span><br><span class="line"> |     |</span><br><span class="line">id    T</span><br><span class="line">      |</span><br><span class="line">     id</span><br></pre></td></tr></table></figure>

<ul>
<li>根节点：<code>E</code>（开始符号）</li>
<li>叶节点：<code>id</code>, <code>+</code>, <code>id</code></li>
</ul>
<hr>
<h2 id="5-自上而下语法分析方法有几种？分别给出它们的基本思想，并简述它们之间的区别（各自的特点）"><a href="#5-自上而下语法分析方法有几种？分别给出它们的基本思想，并简述它们之间的区别（各自的特点）" class="headerlink" title="5. 自上而下语法分析方法有几种？分别给出它们的基本思想，并简述它们之间的区别（各自的特点）"></a><strong>5. 自上而下语法分析方法有几种？分别给出它们的基本思想，并简述它们之间的区别（各自的特点）</strong></h2><h3 id="✅-主要方法有两种："><a href="#✅-主要方法有两种：" class="headerlink" title="✅ 主要方法有两种："></a>✅ 主要方法有两种：</h3><table>
<thead>
<tr>
<th>方法名称</th>
<th>基本思想</th>
<th>特点</th>
<th>是否需要预测表</th>
<th>是否需要消除左递归&#x2F;提取左因子</th>
<th>是否带回溯</th>
</tr>
</thead>
<tbody><tr>
<td><strong>递归下降分析法</strong><br>（Recursive Descent Parsing）</td>
<td>每个非终结符对应一个函数，递归调用进行推导</td>
<td>实现简单，适合教学</td>
<td>❌ 不需要</td>
<td>✅ 需要</td>
<td>✅ 可能需要</td>
</tr>
<tr>
<td><strong>非递归预测分析法</strong><br>（Non-recursive Predictive Parsing）</td>
<td>使用栈和预测分析表控制推导过程</td>
<td>效率高，适合工程实现</td>
<td>✅ 需要</td>
<td>✅ 需要</td>
<td>❌ 不需要</td>
</tr>
</tbody></table>
<hr>
<h3 id="🧠-对比总结："><a href="#🧠-对比总结：" class="headerlink" title="🧠 对比总结："></a>🧠 对比总结：</h3><table>
<thead>
<tr>
<th>对比维度</th>
<th>递归下降分析法</th>
<th>非递归预测分析法</th>
</tr>
</thead>
<tbody><tr>
<td><strong>实现方式</strong></td>
<td>函数调用模拟推导</td>
<td>栈 + 分析表控制推导</td>
</tr>
<tr>
<td><strong>可读性</strong></td>
<td>易理解，适合教学</td>
<td>较复杂，适合实际应用</td>
</tr>
<tr>
<td><strong>效率</strong></td>
<td>较低（函数调用开销）</td>
<td>高效（查表 + 栈操作）</td>
</tr>
<tr>
<td><strong>灵活性</strong></td>
<td>手动编写每个函数</td>
<td>自动生成分析器更方便</td>
</tr>
<tr>
<td><strong>适用范围</strong></td>
<td>LL(1) 文法</td>
<td>LL(1) 文法</td>
</tr>
<tr>
<td><strong>是否需要预测表</strong></td>
<td>否</td>
<td>是</td>
</tr>
<tr>
<td><strong>是否需要预处理文法</strong></td>
<td>是（去左递归、提左因子）</td>
<td>是</td>
</tr>
<tr>
<td><strong>是否带回溯</strong></td>
<td>可能带回溯（若无预测机制）</td>
<td>不带回溯</td>
</tr>
</tbody></table>
<hr>
<h2 id="✅-总结"><a href="#✅-总结" class="headerlink" title="✅ 总结"></a>✅ 总结</h2><table>
<thead>
<tr>
<th>问题</th>
<th>回答</th>
</tr>
</thead>
<tbody><tr>
<td>语法分析方法有几类？</td>
<td>自上而下、自下而上两类；也可按是否递归或是否回溯细分</td>
</tr>
<tr>
<td>自上而下分析的困难</td>
<td>左递归、公共前缀、回溯；可通过消除左递归、提取左因子、使用预测表解决</td>
</tr>
<tr>
<td>基本思想</td>
<td>从开始符号出发，通过推导构造输入串</td>
</tr>
<tr>
<td>语法树结构</td>
<td>根节点是开始符号，叶节点是输入串中的终结符</td>
</tr>
<tr>
<td>自上而下方法种类</td>
<td>两种：递归下降分析法 和 非递归预测分析法；前者易懂但效率低，后者高效但依赖预测表</td>
</tr>
</tbody></table>
<p>如需进一步了解每种方法的具体实现（如预测分析表构造、递归下降代码示例），可以继续提问！</p>
<h1 id="编译原理自测题目"><a href="#编译原理自测题目" class="headerlink" title="编译原理自测题目"></a><strong>编译原理自测题目</strong></h1><h1 id="第一章-1"><a href="#第一章-1" class="headerlink" title="第一章"></a>第一章</h1><blockquote>
<p>结合常用的语言，例如JAVA、Python 、C、C++等，说明：</p>
<p>1．什么是编译程序</p>
<p>\2. 什么是解释程序</p>
<p>\3. 什么是翻译程序</p>
<p>\4. 以上3种程序的区别</p>
<p>5、简述什么是编译前端和编译后端，编译前端包括编译器的哪几个阶段？</p>
<p><strong>综合题</strong></p>
<p>1、 论述编译过程的每个阶段的输入及输出，以及每个阶段所采用的相关技术（P6图1.3）, 以声明语句的处理过程为例。</p>
</blockquote>
<p>根据《编译原理》（第三版）教材内容，并结合常见编程语言（如 Java、Python、C、C++），我们来逐一解答你的问题：</p>
<hr>
<h2 id="1-什么是编译程序？"><a href="#1-什么是编译程序？" class="headerlink" title="1. 什么是编译程序？"></a><strong>1. 什么是编译程序？</strong></h2><p><strong>定义：</strong><br>编译程序（Compiler）是一种将高级语言源程序翻译成等价的低级语言（如汇编语言或机器语言）的程序。</p>
<p><strong>特点：</strong></p>
<ul>
<li>编译是一次性翻译整个程序。</li>
<li>翻译后生成目标代码，可执行文件可以脱离原语言环境运行。</li>
<li>执行效率高，但开发调试周期较长。</li>
</ul>
<p><strong>举例说明：</strong></p>
<ul>
<li>C、C++ 是典型的编译型语言。使用 <code>gcc</code> 或 <code>g++</code> 编译器将 <code>.c</code> 或 <code>.cpp</code> 文件编译为可执行文件（如 <code>.exe</code> 或 Linux 下的可执行文件）。</li>
<li>Java 的 <code>.java</code> 文件也被编译为字节码（<code>.class</code>），由 JVM 解释或即时编译执行。</li>
</ul>
<hr>
<h2 id="2-什么是解释程序？"><a href="#2-什么是解释程序？" class="headerlink" title="2. 什么是解释程序？"></a><strong>2. 什么是解释程序？</strong></h2><p><strong>定义：</strong><br>解释程序（Interpreter）是直接分析并执行高级语言源代码的程序，不生成独立的目标代码。</p>
<p><strong>特点：</strong></p>
<ul>
<li>每次运行都要逐行解释执行。</li>
<li>调试方便，但执行速度较慢。</li>
<li>不需要编译过程，适合脚本语言和交互式编程。</li>
</ul>
<p><strong>举例说明：</strong></p>
<ul>
<li>Python 默认使用解释执行方式。例如使用 <code>python script.py</code> 直接运行源代码。</li>
<li>JavaScript 在浏览器中通常由 JS 引擎解释执行。</li>
</ul>
<hr>
<h2 id="3-什么是翻译程序？"><a href="#3-什么是翻译程序？" class="headerlink" title="3. 什么是翻译程序？"></a><strong>3. 什么是翻译程序？</strong></h2><p><strong>定义：</strong><br>翻译程序（Translator）是一个更广义的概念，指任何将一种语言转换为另一种语言的程序。包括：</p>
<ul>
<li>编译程序（高级语言 → 低级语言）</li>
<li>汇编程序（汇编语言 → 机器语言）</li>
<li>源到源翻译程序（如将 Python 转换为 C）</li>
</ul>
<p><strong>总结：</strong></p>
<blockquote>
<p>编译程序是翻译程序的一种特殊形式，翻译程序是一个更大的类别。</p>
</blockquote>
<hr>
<h2 id="4-上述三种程序的区别"><a href="#4-上述三种程序的区别" class="headerlink" title="4. 上述三种程序的区别"></a><strong>4. 上述三种程序的区别</strong></h2><table>
<thead>
<tr>
<th>类别</th>
<th>工作方式</th>
<th>是否生成目标代码</th>
<th>执行效率</th>
<th>典型语言</th>
</tr>
</thead>
<tbody><tr>
<td>编译程序</td>
<td>将源程序一次性翻译为目标代码</td>
<td>✅</td>
<td>高</td>
<td>C、C++、Java</td>
</tr>
<tr>
<td>解释程序</td>
<td>逐行读取并执行源程序</td>
<td>❌</td>
<td>较低</td>
<td>Python、JS</td>
</tr>
<tr>
<td>翻译程序</td>
<td>广义概念，涵盖编译与汇编等</td>
<td>可能有</td>
<td>视情况而定</td>
<td>多种</td>
</tr>
</tbody></table>
<hr>
<h2 id="5-简述什么是编译前端和编译后端，编译前端包括编译器的哪几个阶段？"><a href="#5-简述什么是编译前端和编译后端，编译前端包括编译器的哪几个阶段？" class="headerlink" title="5. 简述什么是编译前端和编译后端，编译前端包括编译器的哪几个阶段？"></a><strong>5. 简述什么是编译前端和编译后端，编译前端包括编译器的哪几个阶段？</strong></h2><h3 id="编译前端（Front-End）："><a href="#编译前端（Front-End）：" class="headerlink" title="编译前端（Front End）："></a><strong>编译前端（Front End）：</strong></h3><p>负责处理与源语言相关的任务，主要关注语法结构和语义分析。</p>
<h4 id="编译前端包含的主要阶段（依据《编译原理》第三版）："><a href="#编译前端包含的主要阶段（依据《编译原理》第三版）：" class="headerlink" title="编译前端包含的主要阶段（依据《编译原理》第三版）："></a><strong>编译前端包含的主要阶段（依据《编译原理》第三版）：</strong></h4><ol>
<li><p><strong>词法分析（Lexical Analysis）：</strong></p>
<ul>
<li>输入：字符序列</li>
<li>输出：记号（Token）序列</li>
<li>功能：识别关键字、标识符、运算符等基本单位</li>
</ul>
</li>
<li><p><strong>语法分析（Syntax Analysis）：</strong></p>
<ul>
<li>输入：Token 序列</li>
<li>输出：语法树（Parse Tree &#x2F; Abstract Syntax Tree）</li>
<li>功能：检查语法是否符合文法规则</li>
</ul>
</li>
<li><p><strong>语义分析（Semantic Analysis）：</strong></p>
<ul>
<li>输入：语法树</li>
<li>输出：带类型信息的中间表示</li>
<li>功能：检查变量类型、作用域、函数调用是否合法等</li>
</ul>
</li>
<li><p><strong>中间代码生成（Intermediate Code Generation）：</strong></p>
<ul>
<li>输入：语义分析后的结构</li>
<li>输出：中间语言（如三地址码、四元式等）</li>
<li>功能：生成便于优化和目标代码生成的中间表示</li>
</ul>
</li>
</ol>
<hr>
<h3 id="编译后端（Back-End）："><a href="#编译后端（Back-End）：" class="headerlink" title="编译后端（Back End）："></a><strong>编译后端（Back End）：</strong></h3><p>负责与目标机器相关的任务，主要目标是生成高效的目标代码。</p>
<h4 id="编译后端的主要任务包括："><a href="#编译后端的主要任务包括：" class="headerlink" title="编译后端的主要任务包括："></a><strong>编译后端的主要任务包括：</strong></h4><ol>
<li><p><strong>代码优化（Code Optimization）：</strong></p>
<ul>
<li>对中间代码进行优化以提高性能（如常量折叠、死代码消除等）</li>
</ul>
</li>
<li><p><strong>目标代码生成（Target Code Generation）：</strong></p>
<ul>
<li>将中间代码转换为目标机器指令</li>
</ul>
</li>
<li><p><strong>寄存器分配（Register Allocation）：</strong></p>
<ul>
<li>分配寄存器以减少内存访问，提高执行效率</li>
</ul>
</li>
<li><p><strong>指令选择（Instruction Selection）：</strong></p>
<ul>
<li>根据目标架构选择合适的机器指令</li>
</ul>
</li>
</ol>
<hr>
<h2 id="✅-总结图示（简化流程）："><a href="#✅-总结图示（简化流程）：" class="headerlink" title="✅ 总结图示（简化流程）："></a>✅ 总结图示（简化流程）：</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">源程序</span><br><span class="line">   ↓ 词法分析</span><br><span class="line">Token流</span><br><span class="line">   ↓ 语法分析</span><br><span class="line">语法树</span><br><span class="line">   ↓ 语义分析</span><br><span class="line">中间表示（IR）</span><br><span class="line">   ↓ 中间代码优化（前端）</span><br><span class="line">   ↓ 目标代码生成</span><br><span class="line">目标代码</span><br><span class="line">   ↓ 优化（后端）</span><br><span class="line">最终可执行代码</span><br></pre></td></tr></table></figure>

<p>根据《编译原理》（第三版）教材中第1章图1.3所示的<strong>编译过程主要阶段</strong>，我们可以以一个典型的<strong>声明语句</strong>为例（如：<code>int x = 5;</code>），来系统地论述每个阶段的输入、输出以及所采用的相关技术。</p>
<hr>
<h2 id="✅-一、总体流程概述（参考P6-图1-3）"><a href="#✅-一、总体流程概述（参考P6-图1-3）" class="headerlink" title="✅ 一、总体流程概述（参考P6 图1.3）"></a>✅ 一、总体流程概述（参考P6 图1.3）</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">源程序 → 词法分析 → 语法分析 → 语义分析 → 中间代码生成 → 代码优化 → 目标代码生成 → 目标程序</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="✅-二、以声明语句-int-x-5-为例，逐阶段分析"><a href="#✅-二、以声明语句-int-x-5-为例，逐阶段分析" class="headerlink" title="✅ 二、以声明语句 int x = 5; 为例，逐阶段分析"></a>✅ 二、以声明语句 <code>int x = 5;</code> 为例，逐阶段分析</h2><h3 id="1-词法分析（Lexical-Analysis）"><a href="#1-词法分析（Lexical-Analysis）" class="headerlink" title="1. 词法分析（Lexical Analysis）"></a><strong>1. 词法分析（Lexical Analysis）</strong></h3><ul>
<li><p><strong>输入</strong>：字符序列<br><code>&quot;int x = 5;&quot;</code></p>
</li>
<li><p><strong>输出</strong>：记号（Token）序列<br><code>[keyword(int), identifier(x), operator(=), number(5), punctuation(;)]</code></p>
</li>
<li><p><strong>相关技术</strong>：</p>
<ul>
<li>正则表达式（Regular Expressions）</li>
<li>确定有限自动机（DFA）</li>
<li>使用工具：Flex &#x2F; Lex</li>
</ul>
</li>
<li><p><strong>作用</strong>：将字符序列转换为有意义的记号，便于后续处理。</p>
</li>
</ul>
<hr>
<h3 id="2-语法分析（Syntax-Analysis）"><a href="#2-语法分析（Syntax-Analysis）" class="headerlink" title="2. 语法分析（Syntax Analysis）"></a><strong>2. 语法分析（Syntax Analysis）</strong></h3><ul>
<li><p><strong>输入</strong>：Token 序列<br><code>[int, x, =, 5, ;]</code></p>
</li>
<li><p><strong>输出</strong>：语法树（Parse Tree 或 Abstract Syntax Tree, AST）  </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Declaration</span><br><span class="line"> ├── Type: int</span><br><span class="line"> └── Assignment</span><br><span class="line">     ├── Variable: x</span><br><span class="line">     └── Value: 5</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>相关技术</strong>：</p>
<ul>
<li>上下文无关文法（CFG）</li>
<li>自顶向下解析（LL 文法）</li>
<li>自底向上解析（LR 文法）</li>
<li>使用工具：Yacc &#x2F; Bison &#x2F; ANTLR</li>
</ul>
</li>
<li><p><strong>作用</strong>：验证 Token 序列是否符合语言的语法规则，并构建结构化表示。</p>
</li>
</ul>
<hr>
<h3 id="3-语义分析（Semantic-Analysis）"><a href="#3-语义分析（Semantic-Analysis）" class="headerlink" title="3. 语义分析（Semantic Analysis）"></a><strong>3. 语义分析（Semantic Analysis）</strong></h3><ul>
<li><p><strong>输入</strong>：语法树</p>
</li>
<li><p><strong>输出</strong>：带有类型信息和符号表信息的中间表示<br>（例如添加变量类型、检查赋值类型匹配等）</p>
</li>
<li><p><strong>相关技术</strong>：</p>
<ul>
<li>类型检查（Type Checking）</li>
<li>符号表管理（Symbol Table）</li>
<li>属性文法（Attribute Grammar）</li>
</ul>
</li>
<li><p><strong>示例</strong>：</p>
<ul>
<li>检查 <code>x</code> 是否为合法标识符</li>
<li>检查 <code>5</code> 是否可以赋给 <code>int</code> 类型变量</li>
<li>在符号表中插入变量 <code>x</code> 的类型为 <code>int</code></li>
</ul>
</li>
<li><p><strong>作用</strong>：确保程序在语义上是正确的，避免类型错误、未定义变量等问题。</p>
</li>
</ul>
<hr>
<h3 id="4-中间代码生成（Intermediate-Code-Generation）"><a href="#4-中间代码生成（Intermediate-Code-Generation）" class="headerlink" title="4. 中间代码生成（Intermediate Code Generation）"></a><strong>4. 中间代码生成（Intermediate Code Generation）</strong></h3><ul>
<li><p><strong>输入</strong>：带语义信息的语法树或抽象语法树（AST）</p>
</li>
<li><p><strong>输出</strong>：中间代码（如三地址码、四元式、SSA 形式）<br>示例（三地址码）：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">t1 = 5</span><br><span class="line">x = t1</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>相关技术</strong>：</p>
<ul>
<li>三地址码（Three-address code）</li>
<li>四元式&#x2F;三元式</li>
<li>控制流图（CFG）</li>
</ul>
</li>
<li><p><strong>作用</strong>：生成与目标机器无关的中间表示，便于后续优化和代码生成。</p>
</li>
</ul>
<hr>
<h3 id="5-代码优化（Code-Optimization）"><a href="#5-代码优化（Code-Optimization）" class="headerlink" title="5. 代码优化（Code Optimization）"></a><strong>5. 代码优化（Code Optimization）</strong></h3><ul>
<li><p><strong>输入</strong>：中间代码（如上述三地址码）</p>
</li>
<li><p><strong>输出</strong>：优化后的中间代码<br>示例（常量折叠）：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">x = 5</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>相关技术</strong>：</p>
<ul>
<li>常量传播与折叠（Constant Folding）</li>
<li>死代码消除（Dead Code Elimination）</li>
<li>公共子表达式消除（Common Subexpression Elimination）</li>
<li>循环优化（Loop Optimization）</li>
</ul>
</li>
<li><p><strong>作用</strong>：提高程序执行效率，减少资源消耗。</p>
</li>
</ul>
<hr>
<h3 id="6-目标代码生成（Target-Code-Generation）"><a href="#6-目标代码生成（Target-Code-Generation）" class="headerlink" title="6. 目标代码生成（Target Code Generation）"></a><strong>6. 目标代码生成（Target Code Generation）</strong></h3><ul>
<li><p><strong>输入</strong>：优化后的中间代码<br><code>x = 5</code></p>
</li>
<li><p><strong>输出</strong>：目标机器指令（如汇编代码或机器码）<br>示例（x86 汇编）：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">movl $5, x</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>相关技术</strong>：</p>
<ul>
<li>指令选择（Instruction Selection）</li>
<li>寄存器分配（Register Allocation）</li>
<li>指令调度（Instruction Scheduling）</li>
</ul>
</li>
<li><p><strong>作用</strong>：将中间代码翻译为目标平台上的可执行指令。</p>
</li>
</ul>
<hr>
<h3 id="7-表格管理（Symbol-Table-Management）"><a href="#7-表格管理（Symbol-Table-Management）" class="headerlink" title="7. 表格管理（Symbol Table Management）"></a><strong>7. 表格管理（Symbol Table Management）</strong></h3><ul>
<li><strong>贯穿整个编译过程</strong></li>
<li><strong>作用</strong>：<ul>
<li>记录变量名、函数名、类型、作用域等信息</li>
<li>支持语义分析、代码生成等阶段使用</li>
</ul>
</li>
</ul>
<hr>
<h3 id="8-错误处理（Error-Handling）"><a href="#8-错误处理（Error-Handling）" class="headerlink" title="8. 错误处理（Error Handling）"></a><strong>8. 错误处理（Error Handling）</strong></h3><ul>
<li><strong>贯穿整个编译过程</strong></li>
<li><strong>作用</strong>：<ul>
<li>检测并报告词法、语法、语义错误</li>
<li>尽可能恢复并继续编译，给出多个错误提示</li>
</ul>
</li>
</ul>
<hr>
<h2 id="✅-三、总结表格（以-int-x-5-为例）"><a href="#✅-三、总结表格（以-int-x-5-为例）" class="headerlink" title="✅ 三、总结表格（以 int x = 5; 为例）"></a>✅ 三、总结表格（以 <code>int x = 5;</code> 为例）</h2><table>
<thead>
<tr>
<th>阶段</th>
<th>输入</th>
<th>输出</th>
<th>主要技术</th>
</tr>
</thead>
<tbody><tr>
<td>词法分析</td>
<td>字符串 <code>&quot;int x = 5;&quot;</code></td>
<td>Token 序列</td>
<td>DFA、正则表达式</td>
</tr>
<tr>
<td>语法分析</td>
<td>Token 序列</td>
<td>语法树 &#x2F; AST</td>
<td>CFG、LL&#x2F;LR 分析</td>
</tr>
<tr>
<td>语义分析</td>
<td>语法树</td>
<td>带类型信息的 AST</td>
<td>类型检查、符号表</td>
</tr>
<tr>
<td>中间代码生成</td>
<td>AST</td>
<td>三地址码</td>
<td>IR 构建</td>
</tr>
<tr>
<td>代码优化</td>
<td>中间代码</td>
<td>优化后的中间代码</td>
<td>常量折叠、死代码消除</td>
</tr>
<tr>
<td>目标代码生成</td>
<td>优化后的中间代码</td>
<td>汇编或机器码</td>
<td>指令选择、寄存器分配</td>
</tr>
<tr>
<td>表格管理</td>
<td>所有阶段</td>
<td>符号表</td>
<td>哈希表、作用域链</td>
</tr>
<tr>
<td>错误处理</td>
<td>各阶段输入</td>
<td>错误信息</td>
<td>错误恢复、错误提示</td>
</tr>
</tbody></table>
<hr>
<h2 id="✅-四、结语"><a href="#✅-四、结语" class="headerlink" title="✅ 四、结语"></a>✅ 四、结语</h2><p>通过以上对 <code>int x = 5;</code> 编译过程的逐阶段分析，可以看出编译器是一个高度模块化的系统，各阶段协同工作，最终将高级语言转化为高效的机器代码。理解这些阶段及其关键技术，有助于深入掌握《编译原理》课程的核心内容。</p>
<p>如果你需要我为你整理成 <strong>思维导图</strong> 或 <strong>PPT提纲</strong>，也可以告诉我，我可以帮你进一步整理用于复习或汇报。</p>
<h1 id="第二章-1"><a href="#第二章-1" class="headerlink" title="第二章"></a>第二章</h1><blockquote>
<p>1、词法分析器常用的构造方法有哪几种？</p>
<p>2、判断如下图所示的有限自动机是NFA还是DFA，并判断它能识别何种字符串，给出它对应的状态转换表。</p>
<p><img src="/../images/compiler/2.png"></p>
</blockquote>
<h3 id="一、词法分析器常用的构造方法"><a href="#一、词法分析器常用的构造方法" class="headerlink" title="一、词法分析器常用的构造方法"></a><strong>一、词法分析器常用的构造方法</strong></h3><p>词法分析器（Lexical Analyzer）是编译器的第一个阶段，其主要任务是将源程序的字符序列转换为记号（Token）序列。词法分析器的构造方法主要有以下几种：</p>
<hr>
<h4 id="1-手工编写词法分析器"><a href="#1-手工编写词法分析器" class="headerlink" title="1. 手工编写词法分析器"></a><strong>1. 手工编写词法分析器</strong></h4><ul>
<li><strong>描述</strong>：开发人员手动编写代码来识别和处理输入字符流。</li>
<li><strong>优点</strong>：<ul>
<li>灵活性高，可以针对特定语言进行定制化设计。</li>
<li>对于简单的语言或特殊情况，手工实现可能更高效。</li>
</ul>
</li>
<li><strong>缺点</strong>：<ul>
<li>编写复杂，容易出错。</li>
<li>维护成本高，难以扩展。</li>
</ul>
</li>
</ul>
<hr>
<h4 id="2-使用正则表达式"><a href="#2-使用正则表达式" class="headerlink" title="2. 使用正则表达式"></a><strong>2. 使用正则表达式</strong></h4><ul>
<li><strong>描述</strong>：利用正则表达式定义词法规则，然后通过正则表达式匹配引擎自动识别记号。</li>
<li><strong>优点</strong>：<ul>
<li>表达能力强，适合描述复杂的模式。</li>
<li>开发效率高，易于维护。</li>
</ul>
</li>
<li><strong>缺点</strong>：<ul>
<li>正则表达式可能不够灵活，难以处理某些复杂的上下文依赖问题。</li>
<li>性能可能不如手工优化的词法分析器。</li>
</ul>
</li>
</ul>
<hr>
<h4 id="3-使用工具生成词法分析器"><a href="#3-使用工具生成词法分析器" class="headerlink" title="3. 使用工具生成词法分析器"></a><strong>3. 使用工具生成词法分析器</strong></h4><ul>
<li><strong>描述</strong>：使用专门的工具自动生成词法分析器。常见的工具有：<ul>
<li><strong>Flex</strong>（Fast Lexical Analyzer）：基于正则表达式的词法分析器生成器。</li>
<li><strong>Lex</strong>：早期的词法分析器生成器，与 Yacc 配合使用。</li>
<li><strong>ANTLR</strong>：支持语法和词法分析的综合工具，也可以单独用于词法分析。</li>
</ul>
</li>
<li><strong>优点</strong>：<ul>
<li>自动化程度高，减少手写代码的工作量。</li>
<li>生成的词法分析器通常性能较好。</li>
</ul>
</li>
<li><strong>缺点</strong>：<ul>
<li>工具的学习曲线可能较陡峭。</li>
<li>对于非常规语言，可能需要额外的配置或扩展。</li>
</ul>
</li>
</ul>
<hr>
<h4 id="4-基于有限自动机（Finite-Automaton）"><a href="#4-基于有限自动机（Finite-Automaton）" class="headerlink" title="4. 基于有限自动机（Finite Automaton）"></a><strong>4. 基于有限自动机（Finite Automaton）</strong></h4><ul>
<li><strong>描述</strong>：通过构建确定有限自动机（DFA）或非确定有限自动机（NFA），并将其转化为词法分析器。</li>
<li><strong>优点</strong>：<ul>
<li>理论基础清晰，易于理解。</li>
<li>可以精确控制词法分析的过程。</li>
</ul>
</li>
<li><strong>缺点</strong>：<ul>
<li>手动构建 DFA 或 NFA 的过程较为繁琐。</li>
<li>需要一定的理论知识。</li>
</ul>
</li>
</ul>
<hr>
<h4 id="5-混合方法"><a href="#5-混合方法" class="headerlink" title="5. 混合方法"></a><strong>5. 混合方法</strong></h4><ul>
<li><strong>描述</strong>：结合上述方法，例如先用工具生成初步的词法分析器，再根据需求进行手动调整。</li>
<li><strong>优点</strong>：<ul>
<li>结合了工具的自动化优势和手工的灵活性。</li>
</ul>
</li>
<li><strong>缺点</strong>：<ul>
<li>需要开发者具备较高的技术水平。</li>
</ul>
</li>
</ul>
<hr>
<h1 id="第三章"><a href="#第三章" class="headerlink" title="第三章"></a>第三章</h1><blockquote>
<p>\1. 什么是上下文无关文法，上下文无关文法由哪几部分组成。</p>
<p>\2.  什么是LL（1）文法。</p>
<p>\3.  预测分析器模型由哪些部分组成。</p>
<p>\4.  LR分析器模型由哪些部分组成。</p>
<p>5．自上而下语法分析的基本思想。</p>
<p>6．自下而上语法分析的基本思想</p>
</blockquote>
<ol>
<li><p><strong>上下文无关文法（CFG）</strong>是一种形式文法，其产生式规则具有形式 $ A \rightarrow \alpha $，其中 $ A $ 是非终结符，$ \alpha $ 是由终结符和非终结符组成的字符串。它由四部分组成：  </p>
<ul>
<li><strong>非终结符集合（V）</strong>：有限的变量集合，表示语法结构（如语句、表达式）。  </li>
<li><strong>终结符集合（Σ）</strong>：与非终结符集合不相交的有限符号集合（如关键字、运算符）。  </li>
<li><strong>产生式规则集合（P）</strong>：定义非终结符如何替换为其他符号的规则。  </li>
<li><strong>起始符号（S）</strong>：唯一的初始非终结符，代表整个语言的结构 。</li>
</ul>
</li>
<li><p><strong>LL(1)文法</strong>是一种适用于自顶向下语法分析的文法类型。其分析表中每个表项最多包含一个产生式，且能通过向前查看一个输入符号（即“1”）确定当前应使用的产生式规则 。  </p>
</li>
<li><p><strong>预测分析器模型</strong>由以下部分组成：  </p>
<ul>
<li><strong>栈</strong>：存储待处理的非终结符和匹配的终结符。  </li>
<li><strong>输入</strong>：待分析的符号序列。  </li>
<li><strong>预测分析程序</strong>：根据当前栈顶符号和输入符号选择产生式规则。  </li>
<li><strong>分析表M</strong>：指导分析过程的二维表格，行对应非终结符，列对应终结符。  </li>
<li><strong>输出</strong>：生成的语法分析树或错误信息 。</li>
</ul>
</li>
<li><p><strong>LR分析器模型</strong>由以下部分组成：  </p>
<ul>
<li><strong>输入</strong>：待分析的符号序列。  </li>
<li><strong>栈</strong>：记录已处理状态和符号的历史。  </li>
<li><strong>分析表</strong>：包含动作（移进&#x2F;归约）和转移函数的表格。  </li>
<li><strong>动作函数（ACTION）</strong>：决定当前状态下的操作（如移进、归约）。  </li>
<li><strong>转移函数（GOTO）</strong>：指导状态转移 。</li>
</ul>
</li>
<li><p><strong>自上而下语法分析</strong>的基本思想是从起始符号出发，逐步应用产生式规则推导出输入串。分析过程通过递归下降或预测分析的方式，尝试构建与输入匹配的最左推导 。  </p>
</li>
<li><p><strong>自下而上语法分析</strong>的基本思想是从输入符号串出发，逐步归约到起始符号。通过移进输入符号到栈中，并在栈顶发现可归约的“句柄”时，用对应的产生式左部替换该句柄，最终完成语法分析 。</p>
</li>
</ol>
<h1 id="第四章"><a href="#第四章" class="headerlink" title="第四章"></a>第四章</h1><blockquote>
<p>1、 简述语法制导翻译的基本思想</p>
<p>2、 文法符号的属性有哪两类，两类属性的计算过程是怎样的？</p>
</blockquote>
<ol>
<li><p><strong>语法制导翻译的基本思想</strong>是：在语法分析的过程中，根据每个产生式所附带的语义规则来计算与文法符号相关的属性值。这些属性用于描述语法结构的语义信息，例如变量的类型、表达式的值等。通过这种方式，可以将语法结构和其对应的语义（如中间代码生成、类型检查等）紧密结合，从而实现对程序的翻译或处理。</p>
</li>
<li><p><strong>文法符号的属性</strong>通常分为两类：</p>
<ul>
<li><strong>综合属性（Synthesized Attributes）</strong>：这类属性的值是由当前文法符号的子节点（即该非终结符的产生式右部的符号）的属性计算而来的。综合属性通常是自底向上的计算方式，在语法分析树的叶子节点开始计算，并逐步向上传播到根节点。</li>
<li><strong>继承属性（Inherited Attributes）</strong>：这类属性的值是由当前文法符号的父节点或兄弟节点传递下来的。继承属性的计算通常是自顶向下的方式，在语法分析过程中从上层节点向下传递到下层节点。</li>
</ul>
</li>
</ol>
<p>具体来说，综合属性由产生式右部的符号的属性推导而来，而继承属性则是由当前符号的上下文（如父节点或相邻的兄弟节点）提供。</p>
<h1 id="第六章"><a href="#第六章" class="headerlink" title="第六章"></a>第六章</h1><blockquote>
<p>1、JAVA、Python 、C、C++语言的编译系统应该采用哪种存储分配策略，并简述理由。</p>
<p>2、编译系统常见的存储分配策略有几种？它们都适合于什么性质的语言？</p>
</blockquote>
<ol>
<li><p><strong>JAVA、Python、C、C++语言的编译系统应该采用的存储分配策略</strong>如下：  </p>
<ul>
<li><strong>Java</strong>：采用<strong>堆式和栈式相结合的存储分配策略</strong>。因为Java支持面向对象编程，其对象通常在堆上动态创建，而方法调用中的局部变量则在栈上分配。  </li>
<li><strong>Python</strong>：主要使用<strong>堆式存储分配</strong>。Python是一种动态类型语言，其变量在运行时才能确定大小和类型，因此需要灵活的堆内存管理来支持动态数据结构。  </li>
<li><strong>C</strong>：采用<strong>静态和栈式存储分配相结合的策略</strong>。全局变量和静态变量在程序的数据段中进行静态分配，而函数调用中的局部变量则在栈上分配。  </li>
<li><strong>C++<strong>：采用</strong>静态、栈式和堆式三者结合的存储分配策略</strong>。全局变量和静态变量采用静态分配，局部变量在栈上分配，而动态创建的对象则使用堆式分配。</li>
</ul>
</li>
<li><p><strong>编译系统常见的存储分配策略</strong>有以下几种：  </p>
<ul>
<li><strong>静态存储分配</strong>：在编译时就能确定每个数据目标在运行时刻的存储空间需求，适用于生命周期固定且大小不变的数据结构，如全局变量和静态变量。这种策略适合像C语言这样的静态类型语言。  </li>
<li><strong>栈式存储分配</strong>：用于支持过程调用和递归，变量的生命周期与函数调用相关，在进入函数时分配，退出函数时释放。它适合具有块结构和嵌套作用域的语言，例如C和C++。  </li>
<li><strong>堆式存储分配</strong>：提供灵活的内存管理方式，变量或对象的生命周期由程序员显式控制（如通过<code>malloc</code>&#x2F;<code>free</code>或<code>new</code>&#x2F;<code>delete</code>），适合支持动态数据结构或面向对象特性的语言，如Java和Python。  。</li>
</ul>
</li>
</ol>
<h1 id="第七章"><a href="#第七章" class="headerlink" title="第七章"></a>第七章</h1><blockquote>
<p><strong>简答题</strong></p>
<p>一．给出下面表达式的语法树和有向无环图DAG。</p>
<p>（1）P201图7.2</p>
<p>（2）c&#x3D;a*(b-c)+ d* (b-c)</p>
<p>（3）c&#x3D;(a+b)*(c+d)-(a+b+c)</p>
</blockquote>
<h1 id="第八章"><a href="#第八章" class="headerlink" title="第八章"></a>第八章</h1><blockquote>
<p>1、简述编译过程中代码优化必须遵循的原则</p>
<p>2、对中间代码中基本块的优化和循环优化都是与机器无关的代码优化吗？请给出3-5种对中间代码优化的方法。</p>
</blockquote>
<ol>
<li><p><strong>编译过程中代码优化必须遵循的原则</strong>是：优化必须严格遵循“不能改变原有程序语义”的原则，即优化后的程序必须与原程序在功能上完全等价，同时尽可能提高程序的执行效率或减少资源占用。  </p>
</li>
<li><p><strong>对中间代码中基本块的优化和循环优化通常是与机器无关的代码优化</strong>。因为这类优化主要针对程序的逻辑结构和算法层面，不涉及具体目标机器的指令集或硬件特性。<br><strong>常见的中间代码优化方法</strong>包括：  </p>
<ul>
<li><strong>局部公共子表达式消除</strong>：在基本块内避免重复计算已计算过的表达式，提升效率。  </li>
<li><strong>局部无用代码消除</strong>：删除基本块中仅存储但未使用的变量或计算结果。  </li>
<li><strong>循环不变代码外提</strong>：将循环中不随迭代变化的计算移到循环体外，减少冗余计算。  </li>
<li><strong>循环展开</strong>：通过复制循环体代码减少分支判断次数，提高执行速度。  </li>
<li><strong>复写传播</strong>：利用变量间的赋值关系替换冗余赋值，简化代码逻辑。</li>
</ul>
</li>
</ol>
]]></content>
      <categories>
        <category>软硬件技术</category>
      </categories>
      <tags>
        <tag>笔记</tag>
        <tag>编译原理</tag>
        <tag>复习</tag>
      </tags>
  </entry>
  <entry>
    <title>苏州行</title>
    <url>/2024/05/19/%E8%8B%8F%E5%B7%9E%E8%A1%8C/</url>
    <content><![CDATA[<h1 id="平江路"><a href="#平江路" class="headerlink" title="平江路"></a>平江路</h1><p>苏州-＞平江路。<br>     初见时是辰时，庆幸自己通宵到五点后直奔平江路。若是晚一两个时辰则是截然不同的人山人海。<br>     此时摇船还未开始 河面平静,水波不兴.阳光刚开始洒入这条小街.江南古街的倒影跃然水面，沿着主街直走,我的眼光全在黑白灰的建筑与绿色的树木和蓝色的天空和水面之间游走.这时的平江路尚未被外人所打搅,几对老翁坐在河旁的藤椅上,借着尚不刺眼的阳光看报,一切都显得与背景和谐。<br>     一个时辰不到这条小街就变得喧闹与繁忙.越来越多的女性穿着汉服，涌入这条小巷,或摆拍撒骄,或漫步于河边桥头.刚开始紧闭大门的店铺也逐渐开张,宁静典雅的小巷也就逐渐消失。<br>     我庆幸自己看到了平江路的本原面貌,也看到了她浓妆粉饰后的面貌.但我总觉得少了些东西,可能是恋人或朋友吧.下次带本散文书好了。</p>
<p><img src="/../images/suzhou_trip/1.jpg" alt="lonely chair"><img src="/../images/suzhou_trip/2.jpg" alt="lonely chair"><img src="/../images/suzhou_trip/3.jpg" alt="lonely chair"><img src="/../images/suzhou_trip/4.jpg" alt="lonely chair"><img src="/../images/suzhou_trip/5.jpg" alt="lonely chair"><img src="/../images/suzhou_trip/6.jpg" alt="lonely chair"><img src="/../images/suzhou_trip/7.jpg" alt="lonely chair"><img src="/../images/suzhou_trip/8.jpg" alt="lonely chair"><img src="/../images/suzhou_trip/9.jpg" alt="lonely chair"><img src="/images/suzhou_trip/10.jpg" alt="lonely chair"></p>
]]></content>
      <categories>
        <category>生活</category>
        <category>摄影</category>
      </categories>
      <tags>
        <tag>旅行</tag>
        <tag>摄影</tag>
        <tag>photo</tag>
        <tag>苏州</tag>
      </tags>
  </entry>
  <entry>
    <title>网络连通性测试总结</title>
    <url>/2025/07/04/%E7%BD%91%E7%BB%9C%E8%BF%9E%E9%80%9A%E6%80%A7%E6%B5%8B%E8%AF%95%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<h1 id="测试云端主机策略是否生效"><a href="#测试云端主机策略是否生效" class="headerlink" title="测试云端主机策略是否生效"></a>测试云端主机策略是否生效</h1><p>​		在云服务器控制台，例如阿里云等服务商设置好安全组策略，开放对应的TCP、UDP端口号，出入权限。</p>
<h2 id="1-服务端检查"><a href="#1-服务端检查" class="headerlink" title="1. 服务端检查"></a>1. 服务端检查</h2><h3 id="1-检查已开放端口"><a href="#1-检查已开放端口" class="headerlink" title="1. 检查已开放端口"></a>1. 检查已开放端口</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ss -tulnp</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">netstat -ano</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th><code>-a</code></th>
<th>显示所有连接和监听端口（All）</th>
</tr>
</thead>
<tbody><tr>
<td><code>-n</code></td>
<td>以数字形式显示地址和端口（不解析域名）</td>
</tr>
<tr>
<td><code>-o</code></td>
<td>显示与每个连接关联的进程 ID（PID）</td>
</tr>
</tbody></table>
<p><img src="/../images/Linux/%E8%BF%90%E7%BB%B4/port_test/image-20250704180412786.png" alt="image-20250704180412786"></p>
<h3 id="2-如果太多可以进行过滤端口，仅查看目标端口"><a href="#2-如果太多可以进行过滤端口，仅查看目标端口" class="headerlink" title="2. 如果太多可以进行过滤端口，仅查看目标端口"></a>2. 如果太多可以进行过滤端口，仅查看目标端口</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">netstat -ano | grep 80</span><br></pre></td></tr></table></figure>

<p><img src="/../images/Linux/%E8%BF%90%E7%BB%B4/port_test/image-20250704180817439.png" alt="image-20250704180817439"></p>
<h3 id="3-如果显示为空则为空闲，可以进行部署服务。"><a href="#3-如果显示为空则为空闲，可以进行部署服务。" class="headerlink" title="3. 如果显示为空则为空闲，可以进行部署服务。"></a>3. 如果显示为空则为空闲，可以进行部署服务。</h3><h2 id="2-客户端检查"><a href="#2-客户端检查" class="headerlink" title="2. 客户端检查"></a>2. 客户端检查</h2><h3 id="1-首先测试网络连通性"><a href="#1-首先测试网络连通性" class="headerlink" title="1. 首先测试网络连通性"></a>1. 首先测试网络连通性</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ping 192.168.20.87</span><br></pre></td></tr></table></figure>

<p><img src="/../images/Linux/%E8%BF%90%E7%BB%B4/port_test/image-20250704181027402.png" alt="image-20250704181027402"></p>
<p>如果不通则可测试其他已知网站排除自身网络问题</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ping www.baidu.com</span><br></pre></td></tr></table></figure>

<p><img src="/../images/Linux/%E8%BF%90%E7%BB%B4/port_test/image-20250704181206638.png" alt="image-20250704181206638"></p>
<h3 id="2-进行对应端口的测试，根据服务不同分别测试tcp协议、udp协议"><a href="#2-进行对应端口的测试，根据服务不同分别测试tcp协议、udp协议" class="headerlink" title="2. 进行对应端口的测试，根据服务不同分别测试tcp协议、udp协议"></a>2. 进行对应端口的测试，根据服务不同分别测试tcp协议、udp协议</h3><ul>
<li>检测<strong>TCP</strong>服务端口是否开启</li>
</ul>
<blockquote>
<ul>
<li><strong>Telnet</strong></li>
</ul>
<p>Telnet 是一个经典的网络测试和远程连接工具，主要用于通过 <strong>TCP</strong> 协议与远程主机建立连接。它最初用于远程登录服务器的终端（默认端口为 23），但由于其不加密、不安全的特性，现在已基本被 SSH 替代。如今，Telnet 更常用于测试网络端口是否开放，例如测试某台主机的 HTTP（80）、HTTPS（443）、SMTP（25）或数据库服务端口是否可达。使用方式通常是在命令行中输入 <code>telnet [IP或域名] [端口号]</code>，如 <code>telnet www.example.com 80</code>，若连接成功则说明该端口可访问。Telnet 只能用于测试 TCP 端口，不能测试 UDP，而且在 Windows 中使用前需要手动启用该功能。虽然 Telnet 简单易用，但由于其功能较为基础和安全性低，现代系统中常用 <code>nc</code>（netcat）、<code>curl</code> 或 <code>nmap</code> 等工具来替代 Telnet 进行更复杂或更安全的网络测试。</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">telnet 192.168.72.128</span><br></pre></td></tr></table></figure>

<p><img src="/../images/Linux/%E8%BF%90%E7%BB%B4/port_test/image-20250707090537361.png" alt="image-20250707090537361"></p>
<p><img src="/../images/Linux/%E8%BF%90%E7%BB%B4/port_test/image-20250707090735097.png" alt="image-20250707090735097"></p>
<p>可以看到连接成功了，说明<code>192.168.72.128:80</code>和<code>192.168.72.128:22</code>有服务存在并且端口已经开放。</p>
<p><img src="/../images/Linux/%E8%BF%90%E7%BB%B4/port_test/image-20250707091119138.png" alt="image-20250707091119138"></p>
<p>可以看到<code>1080</code>和<code>443</code>都无法连接，说明目标主机无服务或者防火墙拒绝了连接，但是通过上面服务器端的<code>netstat</code>命令可以知道这些端口是无服务，而不是防火墙导致。</p>
<ul>
<li>检测UDP端口服务是否开启</li>
</ul>
<blockquote>
<p><strong>nc</strong></p>
<p><code>nc</code>（netcat）是一款功能强大的网络工具，被称为“网络界的瑞士军刀”，常用于测试端口连通性、调试网络服务、传输文件和搭建简单的 TCP&#x2F;UDP 服务器。它支持 TCP 和 UDP 协议，可以用来检查远程主机的端口是否开放（如 <code>nc -vz IP 端口</code>），也可以监听本地端口等待连接（如 <code>nc -l 端口</code>），甚至可以通过重定向实现文件传输。相比 <code>telnet</code>，<code>nc</code> 功能更强、更灵活，适用于更多网络调试场景。多数 Linux 发行版默认已安装 <code>nc</code>，如果没有可以通过软件包管理器快速安装。</p>
</blockquote>
<ul>
<li>TCP端口</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nc -vz 192.168.72.128 80</span><br></pre></td></tr></table></figure>

<p><img src="/../images/Linux/%E8%BF%90%E7%BB%B4/port_test/image-20250707092716137.png" alt="image-20250707092716137"></p>
<p>可以看到连接成功了，说明<code>192.168.72.128:80</code>有tcp服务存在并且端口已经开放。</p>
<ul>
<li>UDP端口</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nc -vzu 192.168.72.128 45690</span><br></pre></td></tr></table></figure>

<p><img src="/../images/Linux/%E8%BF%90%E7%BB%B4/port_test/image-20250707093319671.png" alt="image-20250707093319671"></p>
<p>可以看到连接成功了，说明<code>192.168.72.128:45690</code>有udp服务存在并且端口已经开放。</p>
]]></content>
      <categories>
        <category>软件技术</category>
      </categories>
      <tags>
        <tag>笔记</tag>
        <tag>linux</tag>
        <tag>system</tag>
        <tag>command</tag>
        <tag>运维</tag>
        <tag>WinServer</tag>
      </tags>
  </entry>
  <entry>
    <title>计算机网络-证书理解</title>
    <url>/2025/07/17/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C-%E8%AF%81%E4%B9%A6%E7%90%86%E8%A7%A3/</url>
    <content><![CDATA[<p>证书是<strong>非常核心也非常实用</strong>的东西，尤其是做 LDAP、SSO、HTTPS、MQTT 之类的服务都会涉及到。</p>
<hr>
<h2 id="一、什么是证书"><a href="#一、什么是证书" class="headerlink" title="一、什么是证书"></a>一、什么是证书</h2><p>证书（通常是 X.509 格式）本质是一个带有数字签名的数据结构，用来<strong>证明某个公钥属于某个主体（如域名、组织）</strong>。</p>
<ul>
<li>包含：主体信息（如 CN&#x3D;<a href="http://www.example.㯘/">www.example.com）、公钥、签发者信息、有效期、用途（Key</a>(key-im3gaaa2917h7re0wkvu6c2hr5gh8lal90v711at2u0n8fi5wa&#x2F;) Usage &#x2F; Extended Key Usage）、数字签名等</li>
<li>目的是让客户端通过验证签名来<strong>信任这个公钥</strong>确实属于目标服务</li>
</ul>
<hr>
<h2 id="二、证书的信任体系"><a href="#二、证书的信任体系" class="headerlink" title="二、证书的信任体系"></a>二、证书的信任体系</h2><ol>
<li>自签名证书：自己生成公私钥并自己签名，只能在内部或测试中用，需要客户端手动信任</li>
<li>CA 签发证书：向受信任的证书颁发机构（CA）申请，由 CA 使用它的私钥签名，全世界的客户端默认信任</li>
</ol>
<blockquote>
<p><strong>受信任的证书颁发机构是什么？</strong></p>
<p><strong>我自己搭建的winserver增加CA角色并导出的根证书有什么用？</strong></p>
<p><strong>CA服务器可以是对的对吗？</strong></p>
<h2 id="1-什么是-CA-和根证书"><a href="#1-什么是-CA-和根证书" class="headerlink" title="1. 什么是 CA 和根证书"></a>1. 什么是 CA 和根证书</h2><ul>
<li>CA（证书颁发机构）是一个专门用来签发证书的角色</li>
<li>公共 CA（DigiCert 等）默认在操作系统&#x2F;浏览器里就被信任</li>
<li>自建 CA（比如你在 WinServer 上加的 CA 角色）需要手动把导出的根证书导入客户端系统，客户端才会信任它签发的证书</li>
</ul>
<hr>
<h2 id="2-自建-CA-的作用"><a href="#2-自建-CA-的作用" class="headerlink" title="2. 自建 CA 的作用"></a>2. 自建 CA 的作用</h2><ul>
<li>核心目的：让客户端信任<strong>由这个 CA 签发的所有服务端证书</strong>（例如 LDAP、Web 服务）</li>
<li>客户端并不需要访问 CA 服务器本身，只需要信任它的根证书</li>
</ul>
<hr>
<h2 id="3-TLS-握手和证书的关系"><a href="#3-TLS-握手和证书的关系" class="headerlink" title="3. TLS 握手和证书的关系"></a>3. TLS 握手和证书的关系</h2><ul>
<li>客户端连接服务（如 LDAP over TLS）时，会通过 TLS 握手验证服务端证书</li>
<li>验证包括：<ul>
<li>服务端证书是由已信任的 CA 签发的</li>
<li>CN&#x2F;SAN 是否匹配实际访问的域名</li>
<li>证书链是否完整</li>
</ul>
</li>
<li>自建 CA 的根证书必须导入客户端受信任根证书列表，否则握手会失败</li>
</ul>
<hr>
<h2 id="4-关键点总结"><a href="#4-关键点总结" class="headerlink" title="4. 关键点总结"></a>4. 关键点总结</h2><ul>
<li>CA 服务器只负责签发证书，不需要跟服务端 IP 相同，也不需要客户端访问</li>
<li>客户端只要信任根证书，就会信任这个 CA 签发的所有证书</li>
<li>TLS 握手核心作用：验证身份并协商加密</li>
</ul>
<blockquote>
<h1 id="举例"><a href="#举例" class="headerlink" title="举例"></a>举例</h1><h2 id="用自建CA实现正常HTTPS访问示例（服务器A做CA，服务器B做Web）"><a href="#用自建CA实现正常HTTPS访问示例（服务器A做CA，服务器B做Web）" class="headerlink" title="用自建CA实现正常HTTPS访问示例（服务器A做CA，服务器B做Web）"></a>用自建CA实现正常HTTPS访问示例（服务器A做CA，服务器B做Web）</h2><h3 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h3><ul>
<li>服务器A：搭建自建CA，生成根证书和CA私钥</li>
<li>服务器B：用服务器A的CA签发HTTPS证书，配置Web服务器（如nginx、Apache）</li>
<li>客户端：访问服务器B的HTTPS网页</li>
</ul>
<ol>
<li><strong>搭建自建CA服务器（服务器A）</strong>，生成根证书和私钥。</li>
<li><strong>用CA给服务器B的Web服务生成并签发证书</strong>（包含正确的域名信息）。</li>
<li><strong>服务器B部署该证书和私钥，配置HTTPS服务。</strong></li>
<li><strong>客户端导入服务器A的根证书</strong>，将其加入受信任根证书列表。</li>
<li><strong>客户端用与证书匹配的域名访问服务器B的HTTPS网站</strong>，完成TLS握手并建立安全连接。</li>
</ol>
<p>关键点是：</p>
<ul>
<li>客户端必须信任你自建的CA根证书，</li>
<li>访问时域名要和证书一致，</li>
<li>服务器B配置证书链完整。</li>
</ul>
</blockquote>
</blockquote>
<p>证书通常由根证书和中间证书组成一条<strong>证书链</strong>。客户端只要信任根证书，就能通过链验证服务端证书。</p>
<hr>
<h2 id="三、TLS-握手与证书的作用"><a href="#三、TLS-握手与证书的作用" class="headerlink" title="三、TLS 握手与证书的作用"></a>三、TLS 握手与证书的作用</h2><p>使用证书的方式就是通过<strong>TLS 握手</strong>实现的。TLS 握手流程大致如下：</p>
<ol>
<li>客户端发送 Client Hello：告知支持的加密算法、TLS 版本、随机数等</li>
<li>服务端发送 Server Hello：选定加密算法、返回服务端证书（带公钥）、随机数</li>
<li>客户端验证服务端证书：检查证书是否在信任列表（CA 根证书）、证书是否过期、CN&#x2F;SAN 是否匹配实际访问域名、证书链是否完整</li>
<li>客户端生成预主密钥（pre-master secret），用服务端公钥加密发送给服务端</li>
<li>服务端用自己的私钥解密，得到预主密钥</li>
<li>双方基于随机数和预主密钥生成对称密钥，后续通信用对称加密</li>
</ol>
<p>如果配置了双向认证（Mutual TLS），客户端也会在握手中发送自己的证书，服务端验证客户端身份。</p>
<blockquote>
<p><strong>OpenSSL 和 GnuTLS</strong> </p>
<ul>
<li>都是开源的 SSL&#x2F;TLS 加密库。</li>
</ul>
<ul>
<li><strong>OpenSSL</strong> 功能强大、兼容性好，工具成熟且宽容，处理证书链和握手更灵活，连接更容易成功。</li>
<li><strong>GnuTLS</strong> 更加严格和标准化，对证书链和配置要求高，安全策略保守，配置不完善时连接容易失败。</li>
</ul>
</blockquote>
<hr>
<h2 id="四、常见实际问题"><a href="#四、常见实际问题" class="headerlink" title="四、常见实际问题"></a>四、常见实际问题</h2><p>即使导入了信任系统，也可能连接不成功，原因包括：</p>
<ol>
<li><p>服务端证书 <strong>CN&#x2F;SAN 与客户端访问的主机名或域名</strong>不一致</p>
<blockquote>
<p>遇到过签发证书只包含域名sAN，而客户端只能通过IP访问的情况</p>
<p>我的解决方式：</p>
<ol>
<li>直接修改客户端hosts，因为只有一个客户端（内网提供其他服务）。本地修改一次即可继续为其他客户端提供服务。</li>
<li>如果是openssl可以通过一些手段放宽验证以实现TLS握手。例如<code>TLS_CIPHER_SUITE NORMAL</code>以及<code>TLS_REQCERT allow # or TLS_REQCERT never</code></li>
</ol>
</blockquote>
</li>
<li><p>服务端证书是中间 CA 签发，但客户端只导入根证书，缺少中间证书</p>
</li>
<li><p>服务端证书用途（Key Usage &#x2F; Extended Key Usage）不包含 Server Authentication</p>
</li>
<li><p>服务端配置证书链不完整（只返回了单个证书，没有带中间证书）</p>
</li>
<li><p>如果服务端启用了双向认证，客户端没有提供证书</p>
</li>
</ol>
<hr>
<h2 id="五、常见工具"><a href="#五、常见工具" class="headerlink" title="五、常见工具"></a>五、常见工具</h2><ul>
<li>openssl：查看、生成、验证证书，排查握手问题</li>
<li>keytool：管理 Java keystore 和 truststore</li>
<li>certbot：申请 Let’s Encrypt 免费证书</li>
<li>浏览器：查看证书链和信任情况</li>
</ul>
<hr>
<h2 id="六、排查思路"><a href="#六、排查思路" class="headerlink" title="六、排查思路"></a>六、排查思路</h2><ol>
<li>用 openssl s_client -connect server:port -showcerts 看服务端返回的证书链是否完整，验证是否信任</li>
<li>检查证书的 CN&#x2F;SAN 是否和实际访问的域名一致</li>
<li>确保客户端 truststore 中导入了正确的根证书（有时还要导入中间证书）</li>
<li>确认服务端配置的证书文件包含完整的证书链（server cert + intermediate cert）</li>
<li>如果服务端需要客户端证书，确认客户端是否配置</li>
</ol>
<hr>
<h2 id="七、总结"><a href="#七、总结" class="headerlink" title="七、总结"></a>七、总结</h2><ul>
<li>TLS 握手核心目的是：验证身份 + 协商对称密钥</li>
<li>证书的核心作用是把公钥和身份绑定，并且让别人信任</li>
<li>常见的连接失败，多数不是“没有导入信任”，而是：证书链不完整、域名不一致、用途不对或缺少客户端证书等</li>
</ul>
]]></content>
      <categories>
        <category>软硬件技术</category>
      </categories>
      <tags>
        <tag>笔记</tag>
        <tag>计算机网络</tag>
        <tag>证书</tag>
      </tags>
  </entry>
  <entry>
    <title>英文演讲</title>
    <url>/2024/10/03/%E8%8B%B1%E6%96%87%E6%BC%94%E8%AE%B2/</url>
    <content><![CDATA[<h1 id="便于随时阅读"><a href="#便于随时阅读" class="headerlink" title="便于随时阅读"></a><strong>便于随时阅读</strong></h1><h1 id="1-speech-from-youtube"><a href="#1-speech-from-youtube" class="headerlink" title="1. speech from youtube"></a>1. speech from youtube</h1><blockquote>
<p><strong>TRANSCRIPT:</strong></p>
<p>*<strong>Michael Norton – Social science researcher*</strong></p>
<p>So I want to talk today about money and happiness, which are two things a lot of us spend a lot of our time thinking about, either trying to earn them or trying to increase them. And a lot of us resonate with this phrase, we see it in religions and self-help books: <em>money can’t buy happiness</em>. And I want to suggest today that, in fact, that’s wrong.</p>
<p>I’m at a business school, so that’s what we do. So that’s wrong, and in fact, if you think that, you’re just not spending it right. So instead of spending it the way you usually spend it, maybe if you spent it differently, that might work a little bit better.</p>
<p>Before I tell you the ways you can spend it that will make you happier, let’s think about the ways we usually spend it that don’t, in fact, make us happier. We had a little natural experiment. So CNN, a little while ago, wrote this interesting article on what happens to people when they win the lottery. It turns out people think when they win the lottery their lives will be amazing. This article’s about how their lives get ruined.</p>
<p><strong>What happens when people win the lottery is</strong>, one, they spend all the money and go into debt; and two, all of their friends and everyone they’ve ever met find them and bug them for money. It ruins their social relationships, in fact. So they have more debt and worse friendships than they had before they won the lottery.</p>
<p>What was interesting about the article was, people started commenting on the article, readers of the thing. And instead of talking about how it made them realize that money doesn’t lead to happiness, everyone started saying, “You know what I’d do if I won the lottery …?” and fantasizing about what they’d do. Here’s just two of the ones we saw that are interesting to think about. One person wrote, “When I win, I’m going to buy my own little mountain and have a little house on top.”</p>
<p>And another person wrote, “I would fill a big bathtub with money and get in the tub while smoking a big fat cigar and sipping a glass of champagne.” This is even worse: “… then I’d have a picture taken and dozens of glossies made. Anyone begging for money or trying to extort from me would receive a copy of the picture and nothing else.”</p>
<p>And so many of the comments were exactly of this type, where people got money and, in fact, it made them antisocial. So I told you it ruins people’s lives and their friends bug them. Also, money often makes us feel very selfish and we do things only for ourselves. We thought maybe the reason money doesn’t make us happy is that we’re spending it on the wrong things; in particular, we’re always spending it on ourselves. And we wondered what would happen if we made people spend more of their money on others. So instead of being antisocial with your money, what if you were more pro-social with it?</p>
<p>We thought, let’s make people do it and see what happens. Let’s have some people do what they usually do, spend money on themselves, and let’s make some people give money away, and measure their happiness and see if, in fact, they get happier.</p>
<p>The first way we did this was, one Vancouver morning, we went out on the campus at University of British Columbia, approached people and said, “Do you want to be in an experiment?” They said, “Yes.” We asked them how happy they were, and then gave them an envelope. One of the envelopes had things in it that said, “By 5pm today, spend this money on yourself.” We gave some examples of what you could spend it on. Other people got a slip of paper that said, “By 5pm today, spend this money on somebody else.” Also inside the envelope was money.</p>
<p>And we manipulated how much money we gave them; some people got this slip of paper and five dollars, some got this slip of paper and 20 dollars. We let them go about their day and do whatever they wanted. We found out they did spend it in the way we asked them to. We called them up and asked them, “What did you spend it on? How happy do you feel now?” What did they spend it on? These are college undergrads; a lot of what they spent it on for themselves were things like earrings and makeup. One woman said she bought a stuffed animal for her niece. People gave money to homeless people. Huge effect here of Starbucks.</p>
<p><a href="https://singjupost.com/how-social-networks-drive-creativity-katherine-giuffre-at-tedxmilehigh-transcript/"><strong>ALSO READ:</strong> How Social Networks Drive Creativity: Katherine Giuffre at TEDxMileHigh (Transcript)</a></p>
<p>So if you give undergraduates five dollars, it looks like coffee to them, and they run over to Starbucks and spend it as fast as they can. Some people bought coffee for themselves, the way they usually would, but others bought coffee for somebody else. So the very same purchase, just targeted toward yourself or targeted toward somebody else. What did we find when we called at the end of the day? People who spent money on others got happier; people who spent it on themselves, nothing happened. It didn’t make them less happy, it just didn’t do much for them.</p>
<p>The other thing we saw is the amount of money doesn’t matter much. People thought 20 dollars would be way better than five. In fact, it doesn’t matter how much money you spent. What really matters is that you spent it on somebody else rather than on yourself. We see this again and again when we give people money to spend on others instead of on themselves. Of course, these are undergraduates in Canada — not the world’s most representative population. They’re also fairly wealthy and affluent and other sorts of things.</p>
<p>We wanted to see if this holds true everywhere in the world or just among wealthy countries. So we went to Uganda and ran a very similar experiment. Imagine, instead of just people in Canada, we say, “Name the last time you spent money on yourself or others. Describe it. How happy did it make you?” Or in Uganda, “Name the last time you spent money on yourself or others and describe that.”</p>
<p>Then we asked them how happy they are, again. And what we see is sort of amazing, because there’s human universals on what you do with your money, and real cultural differences on what you do as well. So for example, one guy from Uganda says this: “I called a girl I wished to love.” They basically went out on a date, and he says at the end that he didn’t “achieve” her up till now.</p>
<p>Here’s a guy from Canada. Very similar thing. “I took my girlfriend out for dinner. We went to a movie, we left early, and then went back to her room for … cake,” just cake. Human universal: you spend money on others, you’re being nice. Maybe you have something in mind, maybe not.</p>
<p>But then we see extraordinary differences. So look at these two. This is a woman from Canada. We say, “Name a time you spent money on somebody else.” She says, “I bought a present for my mom. I drove to the mall, bought a present, gave it to my mom.” Perfectly nice thing to do. It’s good to get gifts for people you know.</p>
<p>Compare that to this woman from Uganda: “I was walking and met a longtime friend whose son was sick with malaria. They had no money, they went to a clinic and I gave her this money.” This isn’t $10,000, it’s the local currency. So it’s a very small amount of money, in fact. But enormously different motivations here. This is a real medical need, literally a lifesaving donation. Above, it’s just kind of, I bought a gift for my mother.</p>
<p>What we see again, though, is that the specific way you spend on other people isn’t nearly as important as the fact that you spend on other people in order to make yourself happy, which is really quite important. So you don’t have to do amazing things with your money to make yourself happy. You can do small, trivial things and still get the benefits from doing this. These are only two countries. We wanted to look at every country in the world if we could, to see what the relationship is between money and happiness.</p>
<p>We got data from the Gallup Organization, which you know from all the political polls happening lately. They asked people, “Did you donate money to charity recently?” and, “How happy are you with life in general?” We can see what the relationship is between those two things. Are they positively correlated, giving money makes you happy? Or are they negatively correlated? On this map, green will mean they’re positively correlated, red means they’re negatively correlated.</p>
<p><a href="https://singjupost.com/david-baron-you-owe-it-to-yourself-to-experience-a-total-solar-eclipse-transcript/"><strong>ALSO READ:</strong> David Baron: You Owe it to Yourself to Experience a Total Solar Eclipse (Transcript)</a></p>
<p>And you can see, the world is crazily green. So in almost every country in the world where we have this data, people who give money to charity are happier people than people who don’t give money to charity. I know you’re looking at the red country in the middle. I would be a jerk and not tell you what it is, but it’s Central African Republic. You can make up stories. Maybe it’s different there for some reason. Just below that to the right is Rwanda, though, which is amazingly green.</p>
<p>So almost everywhere we look, we see that giving money away makes you happier than keeping it for yourself. What about work, which is where we spend the rest of our time, when we’re not with the people we know. We decided to infiltrate some companies and do a very similar thing. These are sales teams in Belgium. They work in teams, go out and sell to doctors and try to get them to buy drugs. We can look and see how well they sell things as a function of being a member of a team. We give people on some teams some money “Spend it however you want on yourself,” just like we did with the undergrads in Canada.</p>
<p>To other teams we say, “Here’s 15 euro. Spend it on one of your teammates. Buy them something as a gift and give it to them. Then we can see, we’ve got teams that spend on themselves and these pro-social teams who we give money to make the team better.</p>
<p>The reason I have a ridiculous pinata there is one team pooled their money and bought a pinata, they smashed the pinata, the candy fell out and things like that. A silly, trivial thing to do, but think of the difference on a team that didn’t do that at all, that got 15 euro, put it in their pocket, maybe bought themselves a coffee, or teams that had this pro-social experience where they bonded together to buy something and do a group activity. What we see is that the teams that are pro-social sell more stuff than the teams that only got money for themselves.</p>
<p>One way to think of it is: for every 15 euro you give people for themselves, they put it in their pocket and don’t do anything different than before. You don’t get money from that; you lose money, since it doesn’t motivate them to perform better. But when you give them 15 euro to spend on their teammates, they do so much better on their teams that you actually get a huge win on investing this kind of money.</p>
<p>You’re probably thinking to yourselves, this is all fine, but there’s a context that’s incredibly important for public policy, and I can’t imagine it would work there. And if he doesn’t show me that it works here, I don’t believe anything he said. I know what you’re all thinking about are dodgeball teams.</p>
<p>This was a huge criticism that we got, that if you can’t show it with dodgeball teams, this is all stupid. So we went and found these dodgeball teams and infiltrated them, and did the exact same thing as before. So we give people on some teams money to spend on themselves. Other teams, we give them money to spend on their dodgeball teammates. The teams that spend money on themselves have the same winning percentages as before. The teams we give the money to spend on each other become different teams; they dominate the league by the time they’re done.</p>
<p>Across all of these different contexts — your personal life, you work life, even things like intramural sports — we see spending on other people has a bigger return for you than spending on yourself. So if you think money can’t buy happiness, you’re not spending it right. The implication isn’t you should buy this product instead of that product, and that’s the way to make yourself happier. It’s that you should stop thinking about which product to buy for yourself, and try giving some of it to other people instead.</p>
<p>And we luckily have an opportunity for you. DonorsChoose.org is a nonprofit for mainly public school teachers in low-income schools. They post projects like, “I want to teach Huckleberry Finn and we don’t have the books,” or, “I want a microscope to teach my students science and we don’t have a microscope.” You and I can go on and buy it for them. The teacher and the kids write you thank-you notes, sometimes they send pictures of them using the microscope. It’s an extraordinary thing.</p>
<p><a href="https://singjupost.com/worst-moments-lives-make-us-andrew-solomon-transcript/"><strong>ALSO READ:</strong> How the worst moments in our lives make us who we are by Andrew Solomon (Transcript)</a></p>
<p>Go to the website and start yourself on the process of thinking less about “How can I spend money on myself?” and more about “If I’ve got five dollars or 15 dollars, what can I do to benefit other people?” Ultimately, when you do that, you’ll find you benefit yourself much more.</p>
<p>Thank you.</p>
</blockquote>
<h1 id="2-speech-from-Good-WIll-Hunting"><a href="#2-speech-from-Good-WIll-Hunting" class="headerlink" title="2. speech from Good WIll Hunting"></a>2. speech from Good WIll Hunting</h1><blockquote>
<p>615<br>00:46:35,878 –&gt; 00:46:40,089<br>I thought about what you said to me<br>the other day. About my painting.</p>
<p>616<br>00:46:40,215 –&gt; 00:46:41,413<br>Oh.</p>
<p>617<br>00:46:41,549 –&gt; 00:46:44,170<br>Stayed up half the night<br>thinkin’ about it.</p>
<p>618<br>00:46:45,511 –&gt; 00:46:47,717<br>Something occurred to me.</p>
<p>619<br>00:46:47,846 –&gt; 00:46:52,306<br>I fell into a deep, peaceful sleep<br>and haven’t thought about you since.</p>
<p>620<br>00:46:52,433 –&gt; 00:46:55,387</p>
<p>You know what occurred to me?</p>
<p>No.</p>
<p>621<br>00:46:55,519 –&gt; 00:46:59,647<br>You’re just a kid. You don’t have the<br>faintest idea what you’re talking about.</p>
<p>622<br>00:46:59,773 –&gt; 00:47:03,272</p>
<p>Why, thank you.</p>
<p>It’s all right.</p>
<p>623<br>00:47:03,401 –&gt; 00:47:05,726<br>You’ve never been out of Boston.</p>
<p>624<br>00:47:07,988 –&gt; 00:47:09,612<br>Nope.</p>
<p>625<br>00:47:09,740 –&gt; 00:47:14,733<br>So if I asked you about art, you’d probably give<br>me the skinny on every art book ever written.</p>
<p>626<br>00:47:14,869 –&gt; 00:47:18,736<br>Michelangelo.<br>You know a lot about him.</p>
<p>627<br>00:47:18,872 –&gt; 00:47:22,241<br>Life’s work. Political aspirations.<br>Him and the pope.</p>
<p>628<br>00:47:22,375 –&gt; 00:47:26,835<br>Sexual orientation.<br>The whole works, right?</p>
<p>629<br>00:47:26,962 –&gt; 00:47:31,209<br>I bet you can’t tell me what<br>it smells like in the Sistine Chapel.</p>
<p>630<br>00:47:33,426 –&gt; 00:47:37,470<br>You never actually stood there<br>and looked up at that beautiful ceiling.</p>
<p>631<br>00:47:40,265 –&gt; 00:47:42,803<br>Seen that.</p>
<p>632<br>00:47:42,934 –&gt; 00:47:44,808<br>If I ask you about women…</p>
<p>633<br>00:47:44,936 –&gt; 00:47:48,518<br>you’ll probably give me a syllabus<br>of your personal favourites.</p>
<p>634<br>00:47:48,647 –&gt; 00:47:51,138<br>You may have even been laid<br>a few times.</p>
<p>635<br>00:47:56,946 –&gt; 00:48:00,112<br>But you can’t tell me what it feels like<br>to wake up next to a woman…</p>
<p>636<br>00:48:00,241 –&gt; 00:48:02,565<br>and feel truly happy.</p>
<p>637<br>00:48:05,787 –&gt; 00:48:07,660<br>You’re a tough kid.</p>
<p>638<br>00:48:09,457 –&gt; 00:48:13,039<br>I ask you about war, you’d probably, uh,<br>throw Shakespeare at me, right?</p>
<p>639<br>00:48:13,168 –&gt; 00:48:16,453<br>“Once more into the breach,<br>dear friends. “</p>
<p>640<br>00:48:18,131 –&gt; 00:48:21,084<br>But you’ve never been near one.</p>
<p>641<br>00:48:21,217 –&gt; 00:48:23,968<br>You’ve never held<br>your best friend’s head in your lap…</p>
<p>642<br>00:48:24,094 –&gt; 00:48:28,091<br>and watch him gasp his last breath<br>lookin’ to you for help.</p>
<p>643<br>00:48:30,391 –&gt; 00:48:33,842<br>I ask you about love,<br>you’d probably quote me a sonnet…</p>
<p>644<br>00:48:35,479 –&gt; 00:48:39,855<br>but you’ve never looked at a woman<br>and been totally vulnerable.</p>
<p>645<br>00:48:39,982 –&gt; 00:48:44,062<br>Known someone that could<br>level you with her eyes.</p>
<p>646<br>00:48:44,194 –&gt; 00:48:48,690<br>Feelin’ like God put an angel on Earth<br>just for you…</p>
<p>647<br>00:48:48,823 –&gt; 00:48:51,528<br>who could rescue you<br>from the depths of hell.</p>
<p>648<br>00:48:51,659 –&gt; 00:48:54,944<br>And you wouldn’t know<br>what it’s like to be her angel…</p>
<p>649<br>00:48:55,078 –&gt; 00:48:58,114<br>to have that love for her<br>be there forever.</p>
<p>650<br>00:48:58,248 –&gt; 00:49:02,708<br>Through anything. Through cancer.</p>
<p>651<br>00:49:02,835 –&gt; 00:49:06,879<br>And you wouldn’t know about sleepin’ sittin’ up in<br>a hospital room for two months holding her hand…</p>
<p>652<br>00:49:07,005 –&gt; 00:49:08,914<br>because the doctors could see<br>in your eyes…</p>
<p>653<br>00:49:09,049 –&gt; 00:49:12,168<br>that the terms “visiting hours”<br>don’t apply to you.</p>
<p>654<br>00:49:13,969 –&gt; 00:49:16,092<br>You don’t know about real loss…</p>
<p>655<br>00:49:16,221 –&gt; 00:49:19,886<br>‘cause that only occurs when you love<br>something more than you love yourself.</p>
<p>656<br>00:49:21,309 –&gt; 00:49:24,724<br>I doubt you’ve ever dared<br>to love anybody that much.</p>
<p>657<br>00:49:27,648 –&gt; 00:49:32,641<br>I look at you, I don’t see<br>an intelligent, confident man.</p>
<p>658<br>00:49:34,862 –&gt; 00:49:38,231<br>I see a cocky, scared shitless kid.</p>
<p>659<br>00:49:39,950 –&gt; 00:49:43,283<br>But you’re a genius, Will.<br>No one denies that.</p>
<p>660<br>00:49:43,411 –&gt; 00:49:46,993<br>No one could possibly understand<br>the depths of you.</p>
<p>661<br>00:49:47,122 –&gt; 00:49:50,076<br>But you presume to know everything about<br>me because you saw a painting of mine.</p>
<p>662<br>00:49:50,208 –&gt; 00:49:52,877<br>You ripped my fuckin’ life apart.</p>
<p>663<br>00:49:56,881 –&gt; 00:49:58,837<br>You’re an orphan, right?</p>
<p>664<br>00:50:03,261 –&gt; 00:50:06,843<br>Do you think I’d know the first thing<br>about how hard your life has been…</p>
<p>665<br>00:50:06,972 –&gt; 00:50:09,545<br>how you feel, who you are…</p>
<p>666<br>00:50:09,683 –&gt; 00:50:12,968<br>because I read Oliver Twist?</p>
<p>667<br>00:50:13,103 –&gt; 00:50:15,510<br>Does that encapsulate you?</p>
<p>668<br>00:50:17,732 –&gt; 00:50:20,269<br>Personally, I don’t give a shit<br>about all that.</p>
<p>669<br>00:50:20,400 –&gt; 00:50:25,560<br>Because you know what? I can’t learn anything<br>from you I can’t read in some fuckin’ book.</p>
<p>670<br>00:50:27,198 –&gt; 00:50:31,361<br>Unless you want to talk about you,<br>who you are.</p>
<p>671<br>00:50:32,869 –&gt; 00:50:36,913<br>Then I’m fascinated.<br>I’m in.</p>
<p>672<br>00:50:38,874 –&gt; 00:50:41,626<br>But you don’t wanna do that,<br>do you, sport?</p>
<p>673<br>00:50:44,254 –&gt; 00:50:46,127<br>You’re terrified<br>of what you might say.</p>
<p>674<br>00:50:52,219 –&gt; 00:50:54,211<br>Your move, chief.</p>
</blockquote>
<h1 id="3-What-can-I-hold-you-with"><a href="#3-What-can-I-hold-you-with" class="headerlink" title="3. What can I hold you with?"></a>3. What can I hold you with?</h1><blockquote>
<p><strong>What can I hold you with?</strong></p>
<p>I offer you lean streets, desperate sunsets, the moon of the ragged suburbs.</p>
<p>I offer you the bitterness of a man who has looked long and long at the lonely moon.</p>
<p>I offer you my ancestors, my dead men, the ghost that living men have honoured in marble: my father’s father killed in the frontier of Buenos Aires, two bullets through his lungs, bearded and dead, wrapped by his soldiers in the hide of a cow; my mother’s grandfather—just twentyfour—heading a charge of three hundred men in Perú, now ghosts on vanished horses.</p>
<p>I offer you whatever insight my books may hold, whatever manliness humour my life.</p>
<p>I offer you the loyalty of a man who has never been loyal.</p>
<p>I offer her that kernel of myself that I have saved, somehow–the central heart that deals not in words, traffics not with dreams and is untouched by time, by joy, by adversities.</p>
<p>I offer you the memory of a yellow rose seen at sunset, years before you were born.</p>
<p>I offer you explanations of yourself, theories about yourself, authentic and surprising news of yourself.</p>
<p>I can give you my loneliness, my darkness, the hunger of my heart; I am trying to bribe you with uncertainty, with danger, with defeat.</p>
</blockquote>
<h1 id="4-We-choose-to-go-to-the-moon"><a href="#4-We-choose-to-go-to-the-moon" class="headerlink" title="4. We choose to go to the moon."></a>4. We choose to go to the moon.</h1><blockquote>
<p>But why, some say, the moon? Why choose this as our goal? And they may well ask why climb the highest mountain? Why, 35 years ago, fly the Atlantic? Why does Rice play Texas? We choose to go to the moon. We choose to go to the moon – We choose to go to the moon in this decade and do the other things, not because they are easy, but because they are hard, because that goal will serve to organize and measure the best of our energies and skills, because that challenge is one that we’re willing to accept, one we are unwilling to postpone, and one we intend to win, and the others, too.</p>
<p>It is for these reasons that I regard the decision last year to shift our efforts in space from low to high gear as among the most important decisions that will be made during my incumbency in the office of the Presidency.</p>
<p>In the last 24 hours we have seen facilities now being created for the greatest and most complex exploration in man’s history. We have felt the ground shake and the air shattered by the testing of a <a href="http://www.apollosaturn.com/s5news/p2-7.htm">Saturn C-1 booster rocket</a>, many times as powerful as the Atlas which launched John Glenn, generating power equivalent to 10,000 automobiles with their accelerator on the floor. We have seen the site where five <a href="http://www.nasm.si.edu/exhibitions/attm/nojs/rm.br.s5.1.html">F-1 rocket engines</a>, each one as powerful as all eight engines of the Saturn combined, will be clustered together to make the advanced Saturn missile, assembled in a new building to be built at <a href="https://en.wikipedia.org/wiki/Cape_Canaveral">Cape Canaveral</a> as tall as a 48 story structure, as wide as a city block, and as long as two lengths of this field.</p>
<p>Within these last 19 months at least 45 satellites have circled the earth. Some 40 of them were made in the United States of America and they were far more sophisticated and supplied far more knowledge to the people of the world than those of the Soviet Union. The <a href="http://www.astronautix.com/craft/marner12.htm">Mariner spacecraft</a> – The Mariner spacecraft now on its way to Venus is the most intricate instrument in the history of space science. The accuracy of that shot is comparable to firing a missile from Cape Canaveral and dropping it in this stadium between the 40-yard lines. Transit satellites are helping our ships at sea to steer a safer course. Tiros satellites have given us unprecedented warnings of hurricanes and storms, and will do the same for forest fires and icebergs.</p>
<p>We have had our failures, but so have others, even if they do not admit them. And they may be less public.</p>
<p>To be sure – To be sure, we are behind, and will be behind for some time in manned flight. But we do not intend to stay behind, and in this decade, we shall make up and move ahead.</p>
<p>The growth of our science and education will be enriched by new knowledge of our universe and environment, by new techniques of learning and mapping and observation, by new tools and computers for industry, medicine, in the home as well as the school. Technical institutions, such as Rice, will reap the harvest of these gains.</p>
<p>And finally, the space effort itself, while still in its infancy, has already created a great number of new companies, and tens and thousands of new jobs. Space and related industries are generating new demands in investment and skilled personnel, and this city and this State and this region will share greatly in this growth. What was once the furthest outpost on the old frontier of the West will be the furthest outpost on the new frontier of science and space. Houston – Your city of Houston, with its <a href="https://en.wikipedia.org/wiki/Manned_Spacecraft_Center">Manned Spacecraft Center</a>, will become the heart of a large scientific and engineering community. During the next 5 years the [National Aeronautic<a href="https://en.wikipedia.org/wiki/National_Aeronautics_and_Space_Administration">s] and Space Administration</a> expects to double the number of scientists and engineers in this area, to increase its outlays for salaries and expenses to 60 million dollars a year; to invest some 200 million dollars in plant and laboratory facilities; and to direct or contract for new space efforts over 1 billion dollars from this Center in this city.</p>
</blockquote>
<h1 id="5-“The-Power-of-Vulnerability”-by-Brene-Brown"><a href="#5-“The-Power-of-Vulnerability”-by-Brene-Brown" class="headerlink" title="5. “The Power of Vulnerability” by Brené Brown"></a>5. “The Power of Vulnerability” by Brené Brown</h1><blockquote>
<p>I spent the past decade studying vulnerability, courage, worthiness, and shame. And I found that there’s one thing that we all have in common, and that is vulnerability. We often see vulnerability as a weakness, something that we want to hide at all costs. But in fact, vulnerability is the other side of courage.</p>
<p>For example, when we fall in love, we are essentially saying to someone, “I see you, I am here, and I am willing to be completely myself with you, flaws and all.” It’s a vulnerable act because we are exposing our hearts, risking rejection and heartbreak. When we start a new business, we are putting our ideas, our resources, and our reputations on the line. We are vulnerable to failure, to criticism, and to the unknown. And when we share our art with others, whether it’s a painting, a song, a poem, or a story, we are revealing a part of ourselves that is deeply personal. We are vulnerable to judgment and indifference.</p>
<p>I interviewed thousands of people and they shared their most vulnerable moments. One woman told me that after losing her job, she had to move back in with her parents. She felt like a failure and was ashamed to admit her situation to her friends. But when she finally mustered the courage to tell them, she was surprised by their support and understanding. Another man said that when he was diagnosed with a serious illness, he was terrified of how it would change his life. He had to face his mortality and rely on others for help. But in the process, he discovered a strength and resilience within himself that he didn’t know he had.</p>
<p>However, it’s precisely these vulnerable moments that enable us to form deep connections with others. When we have the courage to show our vulnerability, we are sending a message to others that it’s okay to be imperfect, that we all have struggles and insecurities. We create a space for others to show their true selves, to share their own vulnerabilities. And in that space, true intimacy and connection can grow. Moreover, admitting our vulnerability doesn’t mean that we’re not strong enough. On the contrary, it’s the source of our strength. Because only by facing our vulnerability can we truly face our fears, learn from our mistakes, and grow in the process.</p>
</blockquote>
<h1 id="6-“How-Great-Leaders-Inspire-Action”-by-Simon-Sinek"><a href="#6-“How-Great-Leaders-Inspire-Action”-by-Simon-Sinek" class="headerlink" title="6. “How Great Leaders Inspire Action” by Simon Sinek"></a>6. “How Great Leaders Inspire Action” by Simon Sinek</h1><blockquote>
<p>All great leaders and organizations think, act, and communicate from the inside out, starting with the “why.” Let me give you an example. Apple. Apple doesn’t sell computers, mobile phones, or other electronics. They sell an idea, an idea of challenging the status quo, pursuing innovation and simplicity.</p>
<p>When you walk into an Apple store, you won’t see the salespeople coming up and introducing you to the product’s various specifications first. They’ll ask you, how do you want to change your life? What kind of tools do you hope to use to express your creativity? This is starting from the “why.” Apple believes that people don’t just buy products; they buy what those products can do for them, how they can help them achieve their dreams and fulfill their potential.</p>
<p>In contrast, other companies often start with the “what.” They’ll say, we make the best laptops, and it has a high-resolution screen, a fast processor, and so on. But this way of communication makes it difficult for consumers to have an emotional resonance. They may be impressed by the features, but they won’t necessarily feel a deep connection to the brand. Starting from the “why” is like a magnetic field that attracts those who share the same beliefs as you. It creates a sense of loyalty and commitment among customers, employees, and partners.</p>
<p>This approach is not only applicable to enterprises but also to social movements and personal growth. Martin Luther King had a “why,” that was the dream of racial equality. He didn’t just say, “We should end segregation because it’s unfair.” He said, “I have a dream that one day this nation will rise up and live out the true meaning of its creed: ‘We hold these truths to be self-evident, that all men are created equal.’” His “why” inspired countless people to join the civil rights movement, to fight for justice and equality, not because they were forced to, but because they believed in the same dream.</p>
</blockquote>
<h1 id="7-“Inside-the-Mind-of-a-Master-Procrastinator”-by-Tim-Urban"><a href="#7-“Inside-the-Mind-of-a-Master-Procrastinator”-by-Tim-Urban" class="headerlink" title="7. “Inside the Mind of a Master Procrastinator” by Tim Urban"></a>7. “Inside the Mind of a Master Procrastinator” by Tim Urban</h1><blockquote>
<p>Procrastination is a very common phenomenon in our lives. There’s a rational decision-maker and an instant-gratification monkey in our brains. For example, you plan to write an essay today. When you sit at your desk, the rational decision-maker tells you that this is important and we should start working. But then, the instant-gratification monkey jumps out and says, hey, watch an episode of TV first, or play a game first.</p>
<p>The procrastinator’s brain is like a stage, and this monkey is playing around on it, while the rational decision-maker can only sigh helplessly in the corner. I myself have a deep understanding of this. I once had an important project, and the deadline was getting closer and closer, but I could always find various excuses to procrastinate. One moment I thought I wasn’t ready with the right tools, and the next moment I thought I wasn’t in the right state.</p>
<p>It’s not until the pressure of the deadline is so great that the monkey can’t ignore it that it jumps off the stage and the rational decision-maker can regain control. But at this time, we often have to complete the task under tremendous pressure. So, understanding these two characters in our brains is the first step in overcoming procrastination. We need to learn to tame that instant-gratification monkey, to make it listen to the rational decision-maker. One way to do this is to break the task into smaller, more manageable steps, and set clear deadlines for each step. Another way is to find an accountability partner, someone who can check on your progress and hold you accountable. By doing these, we can gradually train our brains to make better decisions and overcome procrastination.</p>
</blockquote>
]]></content>
      <categories>
        <category>英语学习</category>
      </categories>
      <tags>
        <tag>英文</tag>
        <tag>演讲稿</tag>
        <tag>read</tag>
      </tags>
  </entry>
  <entry>
    <title>计算机网络笔记</title>
    <url>/2024/09/29/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<p>基于计算机网络第八版，用于考试。</p>
<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><ul>
<li><p>1983年，ARPANET采用TCP&#x2F;IP，标志着互联网诞生</p>
</li>
<li><p><strong>ISP</strong>   互联网服务提供者 ISP (Internet Service Provider)</p>
</li>
<li><p><strong>IXP</strong>  互联网交换点，允许两个网络直接相连并快速交换分组。</p>
<ul>
<li>常采用工作在数据链路层的网络交换机。</li>
</ul>
</li>
<li><p><strong>万维网 (World Wide Web, 简称 WWW)</strong>   全球性的信息空间，人们可以通过互联网访问和共享信息</p>
</li>
</ul>
<h2 id="互联网的组成"><a href="#互联网的组成" class="headerlink" title="互联网的组成"></a>互联网的组成</h2><p>网络协议三要素</p>
<ol>
<li><p>语法</p>
</li>
<li><p>语义</p>
</li>
<li><p>同步</p>
</li>
<li><p><strong>边缘部分</strong></p>
<p> ​	由所有连接在互联网上的主机组成。这部分是用户直接使用的，用来进行通信（传送数据、音频或视频）和资源共享。</p>
</li>
<li><p><strong>核心部分</strong></p>
<p> ​	由大量网络和连接这些网络的路由器组成。这部分是为边缘部分提供服务的（提供连通性和交换）。</p>
</li>
</ol>
<h3 id="边缘部分"><a href="#边缘部分" class="headerlink" title="边缘部分"></a>边缘部分</h3><ul>
<li><strong>端系统</strong>  用户直接使用的设备和应用程序，它们包括个人电脑、手机、服务器等终端设备，用于发送或接收数据。端系统通过网络传输数据，与其他设备通信，实现互联网服务的交互。</li>
</ul>
<p>端系统中运行的程序之间的通信方式分为</p>
<ol>
<li>客户服务器方式（C&#x2F;S 方式）<ul>
<li>客户 (client) 和服务器 (server) 都是指通信中所涉及的两个应用进程。</li>
<li>客户-服务器方式所描述的是进程之间服务和被服务的关系。</li>
<li>客户是服务的请求方，服务器是服务的提供方。</li>
<li><strong>客户端特点</strong><ol>
<li>被用户调用后运行，在打算通信时主动向远地服务器发起通信（请求服务）。因此，客户程序必须知道服务器程序的地址。</li>
<li>不需要特殊的硬件和很复杂的操作系统</li>
</ol>
</li>
<li><strong>服务端特点</strong><ol>
<li>可同时处理多个远地或本地客户的请求。</li>
<li>系统启动后即自动调用并一直不断地运行着，被动地等待并接受来自各地的客户的通信请求。因此，服务器程序不需要知道客户程序的地址。</li>
<li>需要强大的硬件和高级的操作系统支持</li>
</ol>
</li>
</ul>
</li>
<li>对等方式（P2P 方式）   即 Peer-to-Peer方式  <ul>
<li><strong>特点</strong><ol>
<li>对等连接方式从本质上看仍然是使用客户服务器方式，只是对等连接中的每一个主机既是客户又是服务器。</li>
<li>对等连接工作方式可支持大量对等用户（如上百万个）同时工作。</li>
</ol>
</li>
</ul>
</li>
</ol>
<h3 id="核心部分"><a href="#核心部分" class="headerlink" title="核心部分"></a>核心部分</h3><p><strong>特点</strong></p>
<ul>
<li>是互联网中最复杂的部分</li>
<li>要向网络边缘中的大量主机提供连通性</li>
<li>在网络核心部分起特殊作用的是：路由器(router)</li>
<li>路由器是实现分组交换 (packet switching) 的关键构件，其任务是转发收到的分组，这是网络核心部分最重要的功能。</li>
</ul>
<h4 id="电路交换"><a href="#电路交换" class="headerlink" title="电路交换"></a>电路交换</h4><p>​		<strong>面向连接，利用率很低</strong></p>
<p>电路交换分为三个阶段：</p>
<ol>
<li>建立连接：建立一条专用的物理通路，以保证双方通话时所需的通信资源在通信时不会被其他用户占用；</li>
<li>通信：主叫和被叫双方就能互相通电话；</li>
<li>释放连接：释放刚才使用的这条专用的物理通路（释放刚才占用的所有通信资源）。</li>
</ol>
<h4 id="分组交换"><a href="#分组交换" class="headerlink" title="分组交换"></a>分组交换</h4><p><strong>以分组为单位传输，采用存储转发技术。</strong></p>
<ol>
<li>在发送端，先把较长的报文划分成较短的、固定长度的数据段。</li>
<li>每一个数据段前面添加上首部构成分组(packet)。</li>
<li>每一个分组的首部都含有地址（诸如目的地址和源地址）等控制信息。</li>
<li>分组交换网中的结点交换机根据收到的分组首部中的地址信息，把分组转发到下一个结点交换机。</li>
<li>每个分组在互联网中独立地选择传输路径。</li>
<li>用这样的存储转发方式，最后分组就能到达最终目的地。</li>
</ol>
<p><strong>路由器处理分组的过程</strong></p>
<ol>
<li>把收到的分组先放入缓存（暂时存储）；</li>
<li>查找转发表，找出到某个目的地址应从哪个端口转发；</li>
<li>把分组送到适当的端口转发出去。</li>
</ol>
<p><strong>优点</strong></p>
<table>
<thead>
<tr>
<th><strong>高效</strong></th>
<th align="left">在分组传输的过程中<strong>动态分配</strong>传输带宽，对通信链路是逐段占用。</th>
</tr>
</thead>
<tbody><tr>
<td><strong>灵活</strong></td>
<td align="left">为每一个分组<strong>独立</strong>地选择最合适的转发路由**<strong>。</strong></td>
</tr>
<tr>
<td><strong>迅速</strong></td>
<td align="left">以分组作为传送单位，可以<strong>不先建立连接</strong>就能向其他主机发送分组。</td>
</tr>
<tr>
<td><strong>可靠</strong></td>
<td align="left">保证可靠性的网络协议；分布式多路由的分组交换网，使网络有很好的生存性。</td>
</tr>
</tbody></table>
<p><strong>问题</strong></p>
<ol>
<li><p>分组在各结点存储转发时需要排队，这就会造成一定的时延。 </p>
</li>
<li><p>分组必须携带的首部（里面有必不可少的控制信息）也造成了一定的开销。</p>
</li>
</ol>
<p>若要连续传送大量的数据，且其<strong>传送时间远大于连接建立时间，则电路交换的传输速率较快</strong>。报文交换和分组交换不需要预先分配传输带宽，在传送突发数据时可提高整个网络的信道利用率。由于一个分组的长度往往远小于整个报文的长度，因此<strong>分组交换比报文交换的时延小，同时也具有更好的灵活性。</strong></p>
<h2 id="计算机网络类别"><a href="#计算机网络类别" class="headerlink" title="计算机网络类别"></a>计算机网络类别</h2><ul>
<li>个域网PAN（ Personal Area Network ）<ul>
<li>能在便携式消费电器与通信设备之间进行短距离通信的网络</li>
<li>覆盖范围一般在10米半径以内，如蓝牙耳机等</li>
</ul>
</li>
<li>局域网LAN（Local Area Network）<ul>
<li>局部地区形成的区域网络，如企业网络</li>
<li>分布地区范围有限，可大可小，大到一栋建筑、小到办公室内的组网电脑WLAN接入，打印机共享等等</li>
</ul>
</li>
<li>城域网MAN（Metropolitan Area Network ）<ul>
<li>范围覆盖一个城市的网络</li>
</ul>
</li>
<li>广域网WAN（Wide Area Network）<ul>
<li>覆盖很大地理区域，乃至覆盖地区和国家</li>
</ul>
</li>
</ul>
<h2 id="计算机网络的性能"><a href="#计算机网络的性能" class="headerlink" title="计算机网络的性能"></a>计算机网络的性能</h2><ol>
<li><p>速率</p>
<ol>
<li>数据的传送速率，它也称为数据率 (data rate)或比特率 (bit rate)。速率的单位是 bit&#x2F;s，或 kbit&#x2F;s、Mbit&#x2F;s、 Gbit&#x2F;s 等。例如 4  1010 bit&#x2F;s 的数据率就记为 40 Gbit&#x2F;s。</li>
<li>速率往往是指额定速率或标称速率，非实际运行速率。</li>
</ol>
</li>
<li><p>带宽</p>
<ol>
<li>在单位时间内网络中的某信道所能通过的“最高数据率”。单位是 bit&#x2F;s ，即 “比特每秒”。</li>
</ol>
</li>
<li><p>吞吐率</p>
<ol>
<li>单位时间内通过某个网络（或信道、接口）的数据量。</li>
<li>吞吐量受网络的带宽或网络的额定速率的限制。</li>
</ol>
</li>
<li><p>时延</p>
<ol>
<li><p>数据（一个报文或分组，甚至比特）从网络（或链路）的一端传送到另一端所需的时间。</p>
</li>
<li><p>组成部分</p>
<ol>
<li><p>发送时延</p>
<ol>
<li>从发送数据帧的第一个比特算起，到该帧的最后一个比特发送完毕所需的时间。</li>
<li><img src="/../images/computerNetwork/1.png" alt="formula"></li>
</ol>
</li>
<li><p>传播时延</p>
<p> <img src="/../images/computerNetwork/2.png" alt="formula"></p>
</li>
<li><p>处理时延</p>
<ol>
<li>主机或路由器在收到分组时，为处理分组（例如分析首部、提取数据、差错检验或查找路由）所花费的时间。</li>
</ol>
</li>
<li><p>排队时延</p>
<ol>
<li>分组在路由器输入输出队列中排队等待处理所经历的时延。</li>
<li>排队时延的长短往往取决于网络中当时的通信量。</li>
</ol>
</li>
</ol>
</li>
<li><p><strong>总时延</strong>  &#x3D; 	   发送时延  		+ 传播时延  		+ 处理时延  		+ 排队时延</p>
</li>
</ol>
</li>
<li><p>时延带宽积</p>
<ol>
<li><img src="/../images/computerNetwork/3.png" alt="formula"></li>
</ol>
</li>
<li><p>9 往返时间 RTT</p>
<ol>
<li>从发送方发送数据开始，到发送方收到来自接收方的确认，总共经历的时间。</li>
<li>包括各中间结点的处理时延、排队时延以及转发数据时的发送时延。</li>
</ol>
</li>
<li><p>利用率</p>
<ol>
<li>信道利用率<ol>
<li>某信道有百分之几的时间是被利用的（有数据通过）。</li>
<li>当某信道的利用率增大时，该信道引起的时延也就迅速增加。</li>
</ol>
</li>
<li>网络利用率<ol>
<li>全网络的信道利用率的加权平均值。</li>
</ol>
</li>
</ol>
</li>
</ol>
<h2 id="计算机网络的体系结构"><a href="#计算机网络的体系结构" class="headerlink" title="计算机网络的体系结构"></a>计算机网络的体系结构</h2><h3 id="计算机网络的分层"><a href="#计算机网络的分层" class="headerlink" title="计算机网络的分层"></a>计算机网络的分层</h3><ul>
<li><p>优点</p>
<ol>
<li>各层之间是独立的。</li>
<li>灵活性好。</li>
<li>结构上可分割开。</li>
<li>易于实现和维护。</li>
<li>能促进标准化工作。</li>
</ol>
</li>
<li><p>缺点</p>
<ol>
<li>降低效率。</li>
<li>有些功能会在不同的层次中重复出现，因而产生了额外开销。</li>
</ol>
</li>
</ul>
<h3 id="五层协议的体系结构"><a href="#五层协议的体系结构" class="headerlink" title="五层协议的体系结构"></a>五层协议的体系结构</h3><ol>
<li>应用层</li>
<li>运输层</li>
<li>网络层</li>
<li>数据链路层</li>
<li>物理层</li>
</ol>
<ul>
<li><p><strong>对等层</strong>  任何两个同样的层次把数据（即数据单元加上控制信息）通过水平虚线直接传递给对方。这就是所谓的“对等层”(peer layers)之间的通信。</p>
</li>
<li><p><strong>协议数据单元 PDU</strong>   对等层次之间传送的数据单位</p>
</li>
<li><p><strong>实体</strong>  表示任何可发送或接收信息的硬件或软件进程。</p>
</li>
<li><p><strong>协议</strong>  是控制两个对等实体进行通信的规则的集合。</p>
</li>
<li><p><strong>服务访问点 SAP</strong>  同一系统相邻两层的实体进行交互的地方</p>
</li>
</ul>
<h1 id="物理层"><a href="#物理层" class="headerlink" title="物理层"></a>物理层</h1><p>​	物理层考虑的是<strong>怎样才能在连接</strong>各种计算机的传输媒体上传输<strong>比特流数据</strong>，而不是指具体的传输媒体。尽可能地屏蔽掉不同传输媒体和通信手段的差异。</p>
<h2 id="数据通信"><a href="#数据通信" class="headerlink" title="数据通信"></a>数据通信</h2><h3 id="数据通信系统模型"><a href="#数据通信系统模型" class="headerlink" title="数据通信系统模型"></a>数据通信系统模型</h3><ul>
<li><strong>数据通信系统包括三大部分：</strong><ol>
<li>源系统（或发送端、发送方）</li>
<li>传输系统（或传输网络）</li>
<li>目的系统（或接收端、接收方）</li>
</ol>
</li>
</ul>
<h3 id="有关信道的几个基本概念"><a href="#有关信道的几个基本概念" class="headerlink" title="有关信道的几个基本概念"></a>有关信道的几个基本概念</h3><blockquote>
<ol>
<li><strong>数据 (data)</strong> —— 运送消息的实体。</li>
<li><strong>信号 (signal)</strong> —— 数据的电气的或电磁的表现。 </li>
<li><strong>模拟信号 (analogous signal)</strong> —— 代表消息的参数的取值是连续的。 </li>
<li><strong>数字信号 (digital signal)</strong> —— 代表消息的参数的取值是离散的。 </li>
<li><strong>码元 (code)</strong> —— 在使用时间域（或简称为时域）的波形表示数字信号时，代表不同离散数值的基本波形。</li>
</ol>
</blockquote>
<blockquote>
<ol>
<li><strong>信道</strong> —— 一般用来表示向某一个方向传送信息的媒体。</li>
<li><strong>单向通信</strong>（单工通信）——只能有一个方向的通信而没有反方向的交互。</li>
<li><strong>双向交替通信</strong>（半双工通信）——通信的双方都可以发送信息，但不能双方同时发送(当然也就不能同时接收)。</li>
<li><strong>双向同时通信</strong>（全双工通信）——通信的双方可以同时发送和接收信息。 </li>
<li><strong>基带信号（即基本频带信号）</strong>—— 来自信源的信号。像计算机输出的代表各种文字或图像文件的数据信号都属于基带信号。</li>
<li>基带信号往往包含有较多的低频成分，甚至有直流成分，而许多信道并不能传输这种低频分量或直流分量。因此必须对基带信号进行调制 (modulation)。</li>
</ol>
<ul>
<li><strong>调制</strong><ol>
<li><strong>基带调制</strong>：仅对基带信号的波形进行变换，使它能够与信道特性相适应。变换后的信号仍然是基带信号。把这种过程称为编码 (coding)。</li>
<li><strong>带通调制</strong>：使用载波 (carrier)进行调制，把基带信号的频率范围搬移到较高的频段，并转换为模拟信号，这样就能够更好地在模拟信道中传输（即仅在一段频率范围内能够通过信道） 。<strong>带通信号 ：</strong>经过载波调制后的信号。</li>
</ol>
</li>
</ul>
</blockquote>
<p><strong>常用编码方式</strong></p>
<blockquote>
<ol>
<li><strong>不归零制：</strong>正电平代表 1，负电平代表 0。</li>
<li><strong>归零制：</strong>正脉冲代表 1，负脉冲代表 0。</li>
<li><strong>曼彻斯特编码：</strong>位周期中心的向上跳变代表 0，位周期中心的向下跳变代表 1。但也可反过来定义。<strong>具有自同步能力</strong></li>
<li><strong>差分曼彻斯特编码：</strong>在每一位的中心处始终都有跳变。位开始边界有跳变代表 0，而位开始边界没有跳变代表 。<strong>具有自同步能力</strong></li>
</ol>
</blockquote>
<p><strong>基本的带通调制方法</strong></p>
<ul>
<li>最基本的二元制调制方法<ol>
<li>调幅(AM)：载波的振幅随基带数字信号而变化。 </li>
<li>调频(FM)：载波的频率随基带数字信号而变化。</li>
<li>调相(PM) ：载波的初始相位随基带数字信号而变化。</li>
</ol>
</li>
</ul>
<h3 id="信道的极限容量"><a href="#信道的极限容量" class="headerlink" title="信道的极限容量"></a>信道的极限容量</h3><p>​	码元传输的速率越高，或信号传输的距离越远，或传输媒体质量越差，在信道的输出端的波形的失真就越严重。 </p>
<ul>
<li><p><strong>限制码元在信道上的传输速率的因素有以下两个：</strong></p>
<ol>
<li><p>信道能够通过的频率范围</p>
<ol>
<li><p><strong>奈氏准则</strong></p>
<p> <img src="/../images/computerNetwork/4.png" alt="formula"></p>
<p> 理想低通信道”即指理想的能让部分低频率信号通过的信道。W是理想低通信道的带宽,单位为赫(Hz);Baud是波特,是码元传输速率的单位,1波特为每秒传送1个码元.</p>
</li>
</ol>
</li>
<li><p>信噪比</p>
<ol>
<li>信噪比就是信号的平均功率和噪声的平均功率之比。</li>
<li><img src="/../images/computerNetwork/5.png" alt="formula"></li>
<li><strong>香农公式</strong>  带宽受限且有高斯白噪声干扰的信道的极限、无差错的信息传输速率</li>
<li><img src="/../images/computerNetwork/6.png" alt="formula"><ol>
<li>信噪比越大，则信息的极限传输速率就越高。 	</li>
<li>只要信息传输速率低于信道的极限信息传输速率，就一定可以找到某种办法来实现无差错的传输。</li>
</ol>
</li>
</ol>
</li>
</ol>
</li>
</ul>
<h2 id="物理层下面的传输媒体"><a href="#物理层下面的传输媒体" class="headerlink" title="物理层下面的传输媒体"></a>物理层下面的传输媒体</h2><p>​	传输媒体也称为传输介质或传输媒介，它就是数据传输系统中在发送器和接收器之间的物理通路。</p>
<h3 id="导引型传输媒体"><a href="#导引型传输媒体" class="headerlink" title="导引型传输媒体"></a>导引型传输媒体</h3><p>​	电磁波被导引沿着固体媒体（铜线或光纤）传播。</p>
<p><strong>案例</strong></p>
<ol>
<li>双绞线<ol>
<li>模拟传输和数字传输</li>
<li>通信距离一般为几到十几公里</li>
<li>分为屏蔽双绞线 STP (Shielded Twisted Pair)和非屏蔽双绞线 UTP (Unshielded Twisted Pair)</li>
</ol>
</li>
<li>同轴电缆<ol>
<li>抗干扰特性，传输较高速率的数据。</li>
</ol>
</li>
<li>光缆<ol>
<li>多模光纤	可以存在多条不同角度入射的光线在一条光纤中传输。这种光纤就称为多模光纤。</li>
<li>单模光纤    若光纤的直径减小到只有一个光的波长，则光纤就像一根波导那样，它可使光线一直向前传播，而不会产生多次反射。这样的光纤称为单模光纤。</li>
<li>通信容量非常大。</li>
<li>传输损耗小，中继距离长。</li>
<li>抗雷电和电磁干扰性能好。</li>
<li>无串音干扰，保密性好。</li>
<li>体积小，重量轻。</li>
</ol>
</li>
</ol>
<h3 id="非导引型传输媒体"><a href="#非导引型传输媒体" class="headerlink" title="非导引型传输媒体"></a>非导引型传输媒体</h3><p>​	电磁波的传输常称为无线传输，自由空间称为“非导引型传输媒体”。</p>
<h2 id="信道复用技术"><a href="#信道复用技术" class="headerlink" title="信道复用技术"></a>信道复用技术</h2><p>​	复用 (multiplexing) 是通信技术中的基本概念。它允许用户使用一个共享信道进行通信，降低成本，提高利用率。</p>
<h3 id="频分复用、时分复用和统计时分复用"><a href="#频分复用、时分复用和统计时分复用" class="headerlink" title="频分复用、时分复用和统计时分复用"></a>频分复用、时分复用和统计时分复用</h3><h4 id="频分复用-FDM"><a href="#频分复用-FDM" class="headerlink" title="频分复用  FDM"></a>频分复用  FDM</h4><pre><code>1. 将整个带宽分为多份，用户在分配到一定的频带后，在通信过程中自始至终都占用这个频带。
1. 频分复用的所有用户在同样的时间占用不同的带宽资源（请注意，这里的“带宽”是频率带宽而不是数据的发送速率）
</code></pre>
<h4 id="时分复用-TDM"><a href="#时分复用-TDM" class="headerlink" title="时分复用  TDM"></a>时分复用  TDM</h4><pre><code>1. 时分复用则是将时间划分为一段段等长的时分复用帧（TDM 帧）。每一个时分复用的用户在每一个 TDM 帧中占用固定序号的时隙。
1. 每一个用户所占用的时隙是周期性地出现（其周期就是 TDM  帧的长度）
1. 时分复用的所有用户是在不同的时间占用同样的频带宽度。 
</code></pre>
<ul>
<li>使用时分复用系统传送计算机数据时，由于计算机数据的突发性质，用户对分配到的子信道的利用率一般是不高的。</li>
</ul>
<h4 id="统计时分复用-STDM"><a href="#统计时分复用-STDM" class="headerlink" title="统计时分复用  STDM"></a>统计时分复用  STDM</h4><p>STDM 帧不是固定分配时隙，而是按需动态地分配时隙。因此统计时分复用可以提高线路的利用率。</p>
<h3 id="波分复用-WDM"><a href="#波分复用-WDM" class="headerlink" title="波分复用  WDM"></a>波分复用  WDM</h3><pre><code> 波分复用就是光的频分复用。使用一根光纤来同时传输多个光载波信号。
</code></pre>
<h3 id="码分复用-CDM"><a href="#码分复用-CDM" class="headerlink" title="码分复用  CDM"></a>码分复用  CDM</h3><p>​	常用的名词是码分多址 CDMA     (Code Division Multiple Access)。</p>
<p>​	各用户使用经过特殊挑选的不同码型，因此彼此不会造成干扰。</p>
<p>​	这种系统发送的信号有很强的抗干扰能力，其频谱类似于白噪声，不易被敌人发现。 </p>
<p>​	<strong>码片序列</strong></p>
<ul>
<li>每一个比特时间划分为 m 个短的间隔，称为码片 (chip)。</li>
<li>码片序列实现了扩频</li>
</ul>
<h2 id="数字传输系统"><a href="#数字传输系统" class="headerlink" title="数字传输系统"></a>数字传输系统</h2><p>​	与模拟通信相比，数字通信在抗干扰性，保密性方面有明显的优势。</p>
<ul>
<li><strong>脉冲编码调制PCM</strong></li>
</ul>
<p>终端用户（如电话的语音信号）的模拟数据转换成数字数据，以适合主干线的传输。</p>
<h2 id="宽带接入技术"><a href="#宽带接入技术" class="headerlink" title="宽带接入技术"></a>宽带接入技术</h2><h3 id="ADSL技术"><a href="#ADSL技术" class="headerlink" title="ADSL技术"></a>ADSL技术</h3><ul>
<li><p><strong>非对称数字用户线 ADSL (Asymmetric Digital Subscriber Line)</strong> </p>
</li>
<li><p>ADSL 技术就把 0~4 kHz 低端频谱留给传统电话使用，而把原来没有被利用的高端频谱留给用户上网使用。</p>
</li>
<li><p>DSL 的传输距离取决于数据率和用户线的线径（用户线越细，信号传输时的衰减就越大）。</p>
</li>
<li><p><strong>特点</strong></p>
<ul>
<li>上行和下行带宽做成不对称的。</li>
<li>ADSL 在用户线（铜线）的两端各安装一个 ADSL 调制解调器。</li>
</ul>
</li>
</ul>
<h1 id="数据链路层"><a href="#数据链路层" class="headerlink" title="数据链路层"></a>数据链路层</h1><p>数据链路层使用的信道主要有以下两种类型：</p>
<ol>
<li><strong>点对点信道。</strong>这种信道使用一对一的点对点通信方式。</li>
<li><strong>广播信道。</strong>这种信道使用一对多的广播通信方式，因此过程比较复杂。广播信道上连接的主机很多，因此必须使用专用的共享信道协议来协调这些主机的数据发送。</li>
</ol>
<h2 id="使用点对点信道的数据链路层"><a href="#使用点对点信道的数据链路层" class="headerlink" title="使用点对点信道的数据链路层"></a>使用点对点信道的数据链路层</h2><h3 id="数据链路和帧"><a href="#数据链路和帧" class="headerlink" title="数据链路和帧"></a>数据链路和帧</h3><ul>
<li><p><strong>链路 (link)</strong> 是一条无源的点到点的物理线路段，中间没有任何其他的交换结点。</p>
</li>
<li><p><strong>数据链路 (data link)</strong> 除了物理线路外，还必须有通信协议来控制这些数据的传输。若把实现这些协议的硬件和软件加到链路上，就构成了数据链路。</p>
</li>
</ul>
<h3 id="三个基本问题"><a href="#三个基本问题" class="headerlink" title="三个基本问题"></a>三个基本问题</h3><h4 id="封装成帧"><a href="#封装成帧" class="headerlink" title="封装成帧"></a>封装成帧</h4><p>​	在一段数据的前后分别添加首部和尾部，然后就构成了一个帧。</p>
<p>​	首部和尾部的一个重要作用就是进行<strong>帧定界。</strong></p>
<h4 id="透明传输"><a href="#透明传输" class="headerlink" title="透明传输"></a>透明传输</h4><p>​	如果数据中的某个字节的二进制代码恰好和 SOH 或 EOT 一样，数据链路层就会错误地“找到帧的边界”。</p>
<ul>
<li><strong>解决透明传输问题</strong><ul>
<li><strong>字节填充</strong> (byte stuffing) 或<strong>字符填充</strong> (character stuffing)。</li>
<li></li>
</ul>
</li>
</ul>
<h4 id="差错控制"><a href="#差错控制" class="headerlink" title="差错控制"></a>差错控制</h4><p>​	在传输过程中可能会产生比特差错：1 可能会变成 0 而 0 也可能变成 1。</p>
<ul>
<li><p><strong>误码率 BER (Bit Error Rate)。</strong> 在一段时间内，传输错误的比特占所传输比特总数的比率</p>
</li>
<li><p><strong>循环冗余检验</strong></p>
<ul>
<li>原理<ul>
<li>在发送端，先把数据划分为组。假定每组 k 个比特。 </li>
<li>设待传送的一组数据 M &#x3D; 101001（现在 k &#x3D; 6）。我们在 M 的后面再添加供差错检测用的 n 位冗余码一起发送。</li>
<li>用二进制的模 2 运算进行 2n 乘 M 的运算，这相当于在 M 后面添加 n 个 0。</li>
<li>得到的 (k + n) 位的数除以事先选定好的长度为 (n + 1) 位的除数 P，得出商是 Q 而余数是 R，余数 R 比除数 P 少 1 位，即 R 是 n 位。 </li>
<li>将余数 R 作为冗余码拼接在数据 M 后面发送出去。</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="点对点协议-PPP"><a href="#点对点协议-PPP" class="headerlink" title="点对点协议 PPP"></a>点对点协议 PPP</h2><h3 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h3><ol>
<li>简单</li>
<li>封装成帧</li>
<li>透明性</li>
<li>多种网络层协议</li>
<li>多种类型链路 </li>
<li>差错检测</li>
</ol>
<h3 id="帧格式"><a href="#帧格式" class="headerlink" title="帧格式"></a>帧格式</h3><p><img src="/../images/computerNetwork/7.png" alt="格式"></p>
<h3 id="字符填充"><a href="#字符填充" class="headerlink" title="字符填充"></a>字符填充</h3><ol>
<li>将信息字段中出现的每一个 0x7E 字节转变成为 2 字节序列 (0x7D, 0x5E)。 </li>
<li>若信息字段中出现一个 0x7D 的字节, 则将其转变成为 2 字节序列 (0x7D, 0x5D)。</li>
<li>若信息字段中出现 ASCII 码的控制字符（即数值小于 0x20 的字符），则在该字符前面要加入一个 0x7D 字节，同时将该字符的编码加以改变。</li>
</ol>
<h3 id="工作状态"><a href="#工作状态" class="headerlink" title="工作状态"></a>工作状态</h3><ul>
<li>当用户拨号接入 ISP 时，路由器的调制解调器对拨号做出确认，并建立一条物理连接。</li>
<li>PC 机向路由器发送一系列的 LCP 分组（封装成多个 PPP 帧）。</li>
<li>这些分组及其响应选择一些 PPP 参数，并进行网络层配置，NCP 给新接入的 PC 机分配一个临时的 IP 地址，使 PC 机成为因特网上的一个主机。</li>
<li>通信完毕时，NCP 释放网络层连接，收回原来分配出去的 IP 地址。接着，LCP 释放数据链路层连接。最后释放的是物理层的连接。</li>
<li>可见，PPP 协议已不是纯粹的数据链路层的协议，它还包含了物理层和网络层的内容。</li>
</ul>
<h2 id="使用广播信道的数据链路层"><a href="#使用广播信道的数据链路层" class="headerlink" title="使用广播信道的数据链路层"></a>使用广播信道的数据链路层</h2><h3 id="局域网的数据链路层"><a href="#局域网的数据链路层" class="headerlink" title="局域网的数据链路层"></a>局域网的数据链路层</h3><h4 id="局域网的特点"><a href="#局域网的特点" class="headerlink" title="局域网的特点"></a>局域网的特点</h4><ul>
<li>网络为一个单位所拥有；</li>
<li>地理范围和站点数目均有限。</li>
</ul>
<h4 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h4><ol>
<li>有广播功能，从一个站点可很方便地访问全网。局域网上的主机可共享连接在局域网上的各种硬件和软件资源。 </li>
<li>便于系统的扩展和逐渐地演变，各设备的位置可灵活调整和改变。</li>
<li>提高了系统的可靠性、可用性和残存性。</li>
</ol>
<p><strong>局域网的数据链路层的两个子层</strong></p>
<ol>
<li>逻辑链路控制 LLC (Logical Link Control)子层；</li>
<li>媒体接入控制 MAC (Medium Access Control)子层。</li>
</ol>
<p>不管采用何种协议的局域网，对 LLC 子层来说都是透明的。</p>
<p>网络接口板又称为<strong>通信适配器</strong> (adapter) 或网络接口卡 NIC (Network Interface Card)，或“网卡”。 </p>
<p><strong>适配器的重要功能</strong>：</p>
<ol>
<li>进行串行&#x2F;并行转换。对数据进行缓存。</li>
<li>在计算机的操作系统安装设备驱动程序。</li>
<li>实现以太网协议。</li>
</ol>
<h3 id="CSMA-CD-协议"><a href="#CSMA-CD-协议" class="headerlink" title="CSMA&#x2F;CD 协议"></a>CSMA&#x2F;CD 协议</h3><p>CSMA&#x2F;CD 含义：载波监听多点接入 &#x2F; 碰撞检测  (Carrier Sense Multiple Access with Collision Detection) 。</p>
<p>载波监听”是指每一个站在发送数据之前先要检测一下总线上是否有其他计算机在发送数据，如果有，则暂时不要发送数据，以免发生碰撞。 </p>
<h4 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h4><ol>
<li>使用 CSMA&#x2F;CD 协议的以太网不能进行全双工通信而只能进行双向交替通信（半双工通信）。</li>
<li>每个站在发送数据之后的一小段时间内，存在着遭遇碰撞的可能性。 </li>
<li>这种发送的不确定性使整个以太网的平均通信量远小于以太网的最高数据率。</li>
</ol>
<h4 id="要点"><a href="#要点" class="headerlink" title="要点"></a><strong>要点</strong></h4><p>(1) 准备发送。但在发送之前，必须先检测信道。</p>
<p>(2) 检测信道。若检测到信道忙，则应不停地检测，一直等待信道转为空闲。若检测到信道空闲，并在 96 比特时间内信道保持空闲（保证了帧间最小间隔），就发送这个帧。</p>
<p>(3) 检查碰撞。在发送过程中仍不停地检测信道，即网络适配器要边发送边监听。这里只有两种可能性：</p>
<p>​	①发送成功：在争用期内一直未检测到碰撞。这个帧肯定能够发送成功。发送完毕后，其他什么也不做。然后回到 (1)。</p>
<p>​	②发送失败：在争用期内检测到碰撞。这时立即停止发送数据，并按规定发送人为干扰信号。适配器接着就执行指数退避算法，等待 r 倍 512 比特时间后，返回到步骤 (2)，继续检测信道。但若重传达 16 次仍不能成功，则停止重传而向上报错。</p>
<h3 id="使用集线器的星形拓扑"><a href="#使用集线器的星形拓扑" class="headerlink" title="使用集线器的星形拓扑"></a>使用集线器的星形拓扑</h3><p><strong>10BASE-T</strong></p>
<ol>
<li>10 Mbit&#x2F;s </li>
<li>距离不超过 100 m。</li>
</ol>
<p><strong>集线器的特点</strong></p>
<ol>
<li>集线器是使用电子器件来模拟实际电缆线的工作，因此整个系统仍然像一个传统的以太网那样运行。</li>
<li>使用集线器的以太网在逻辑上仍是一个总线网，各工作站使用的还是 CSMA&#x2F;CD 协议，并共享逻辑上的总线。 </li>
<li>集线器很像一个多接口的转发器，工作在物理层。</li>
<li>集线器采用了专门的芯片，进行自适应串音回波抵消，减少了近端串音。</li>
</ol>
<h3 id="以太网的信道利用率"><a href="#以太网的信道利用率" class="headerlink" title="以太网的信道利用率"></a>以太网的信道利用率</h3><ul>
<li><p><strong>参数 α</strong></p>
<p>  <img src="/../images/computerNetwork/8.png" alt="格式"></p>
</li>
<li><p>对于参数a</p>
<ul>
<li>当数据率一定时，以太网的连线的长度受到限制，否则  的数值会太大。</li>
<li>以太网的帧长不能太短，否则 T0 的值会太小，使 α 值太大。</li>
</ul>
</li>
</ul>
<p>​	</p>
<h3 id="以太网的-MAC-层"><a href="#以太网的-MAC-层" class="headerlink" title="以太网的 MAC 层"></a>以太网的 MAC 层</h3><h4 id="MAC-层的硬件地址"><a href="#MAC-层的硬件地址" class="headerlink" title="MAC 层的硬件地址"></a>MAC 层的硬件地址</h4><ul>
<li><p>硬件地址又称为物理地址，或 MAC 地址</p>
</li>
<li><p>IEEE 802 标准规定 MAC 地址字段可采用 6 字节 ( 48位) 或 2 字节 ( 16 位) 这两种中的一种。</p>
</li>
<li><p>地址字段 6 个字节中的后三个字节 (即低位 24 位) 由厂家自行指派，称为扩展唯一标识符，必须保证生产出的适配器没有重复地址。</p>
</li>
<li><p>地址字段的第一字节的最低位为 I&#x2F;G 位。</p>
<ul>
<li>当 I&#x2F;G位 &#x3D; 0 时，地址字段表示一个单站地址。一个地址块可生成 223 个单个站地址</li>
<li>当 I&#x2F;G位 &#x3D; 1 时，表示组地址，用来进行多播（以前曾译为组播）。此时，IEEE 只分配地址字段前三个字节中的 23 位。一个地址块可生成 223 个组地址。</li>
<li>所有 48 位都为 1 时，为广播地址。只能作为目的地址使用。</li>
</ul>
</li>
<li><p>地址字段第一字节的最低第 2 位规定为 G&#x2F;L 位，表示 Global &#x2F; Local。</p>
<ul>
<li>当 G&#x2F;L位 &#x3D; 0 时，是全球管理（保证在全球没有相同的地址），厂商向IEEE购买的 OUI 都属于全球管理。</li>
<li>当 G&#x2F;L位 &#x3D; 1 时， 是本地管理，这时用户可任意分配网络上的地址。</li>
</ul>
</li>
<li><p><strong>适配器检查 MAC 地址</strong></p>
<ul>
<li>适配器从网络上每收到一个 MAC 帧就首先用硬件检查 MAC 帧中的 MAC 地址。<ul>
<li>如果是发往本站的帧则收下，然后再进行其他的处理。</li>
<li>否则就将此帧丢弃，不再进行其他的处理。</li>
</ul>
</li>
<li>发往本站的帧”包括以下三种帧： <ol>
<li>单播 (unicast) 帧（一对一）</li>
<li>广播 (broadcast) 帧（一对全体）</li>
<li>多播 (multicast) 帧（一对多）</li>
</ol>
</li>
<li>所有的适配器都至少能够识别前两种帧，即能够识别<strong>单播地址</strong>和<strong>广播地址</strong></li>
</ul>
</li>
</ul>
<h4 id="MAC-帧的格式"><a href="#MAC-帧的格式" class="headerlink" title="MAC 帧的格式"></a>MAC 帧的格式</h4><p><img src="/../images/computerNetwork/9.png" alt="png"></p>
<blockquote>
<p><strong>类型</strong>字段(2字节用来标志上一层使用的是什么协议，以便把收到的 MAC 帧的数据上交给上一层的这个协议。</p>
<p><strong>数据</strong>字段的正式名称是 MAC 客户数据字段。最小长度 64 字节  18 字节的首部和尾部  &#x3D;  数据字段的最小长度（46字节）  </p>
<p>传输媒体的误码率为 1<em>10^8 时，MAC 子层可使未检测到的差错小于 1</em>10^14。</p>
<p>当数据字段的长度小于 46 字节时，应在数据字段的后面加入整数字节的填充字段，以保证以太网的 MAC 帧长不小于 64 字节。</p>
<p>在帧的前面<strong>插入</strong>（硬件生成）的 8 字节中，第一个字段共 7 个字节，是前同步码，用来迅速实现 MAC 帧的比特同步。第二个字段 1 个字节是帧开始定界符，表示后面的信息就是 MAC 帧。 </p>
</blockquote>
<ul>
<li>无效的MAC帧<ul>
<li>数据字段的长度与长度字段的值不一致；</li>
<li>帧的长度不是整数个字节；</li>
<li>用收到的帧检验序列 FCS 查出有差错；</li>
<li>数据字段的长度不在 46 ~ 1500 字节之间。</li>
<li>有效的 MAC 帧长度为 64 ~ 1518 字节之间。</li>
</ul>
</li>
<li>帧间最小间隔 <ul>
<li>帧间最小间隔为 9.6 us，相当于 96 bit 的发送时间。一个站在检测到总线开始空闲后，还要等待 9.6 us 才能再次发送数据。这样做是为了使刚刚收到数据帧的站的接收缓存来得及清理，做好接收下一帧的准备。</li>
</ul>
</li>
</ul>
<h2 id="扩展的以太网"><a href="#扩展的以太网" class="headerlink" title="扩展的以太网"></a>扩展的以太网</h2><h4 id="在物理层扩展以太网"><a href="#在物理层扩展以太网" class="headerlink" title="在物理层扩展以太网"></a>在物理层扩展以太网</h4><ol>
<li><p>使用光纤扩展</p>
</li>
<li><p>使用集线器扩展</p>
<ul>
<li><p>优点</p>
<ol>
<li>使原来属于不同碰撞域的以太网上的计算机能够进行跨碰撞域的通信。</li>
<li>扩大了以太网覆盖的地理范围。</li>
</ol>
</li>
<li><p>缺点</p>
<ol>
<li>碰撞域增大了，但总的吞吐量并未提高。</li>
<li>如果不同的碰撞域使用不同的数据率，那么就不能用集线器将它们互连起来。</li>
</ol>
</li>
</ul>
</li>
</ol>
<h4 id="在数据链路层扩展以太网"><a href="#在数据链路层扩展以太网" class="headerlink" title="在数据链路层扩展以太网"></a>在数据链路层扩展以太网</h4><h5 id="以太网交换机"><a href="#以太网交换机" class="headerlink" title="以太网交换机"></a><strong>以太网交换机</strong></h5><ul>
<li><p><strong>特点</strong></p>
</li>
<li><p>以太网交换机具有并行性。能同时连通多对接口，使多对主机能同时通信。</p>
</li>
<li><p>相互通信的主机都是独占传输媒体，无碰撞地传输数据。</p>
</li>
<li><p>交换方式</p>
<ul>
<li>存储转发方式</li>
<li>直通 (cut-through) 方式<ul>
<li>接收数据帧的同时就立即按数据帧的目的 MAC 地址决定该帧的转发接口，因而<strong>提高了帧的转发速度</strong>。缺点是它不<strong>检查差错</strong>就直接将帧转发出去，因此有可能也将一些无效帧转发给其他的站。</li>
</ul>
</li>
</ul>
</li>
</ul>
<h4 id="虚拟局域网"><a href="#虚拟局域网" class="headerlink" title="虚拟局域网"></a>虚拟局域网</h4><p><strong>VLAN 标记</strong></p>
<ul>
<li>4字节的标识符：用来指明发送该帧的计算机属于哪一个虚拟局域网。</li>
</ul>
<h3 id="虚拟互联网络"><a href="#虚拟互联网络" class="headerlink" title="虚拟互联网络"></a>虚拟互联网络</h3><ul>
<li>即逻辑互连网络<ul>
<li>互连起来的各种物理网络的异构性本来是客观存在的，但是我们利用 IP 协议就可以使这些性能各异的网络从用户看起来好像是一个统一的网络。</li>
</ul>
</li>
<li>使用 IP 协议的虚拟互连网络可简称为 IP 网。</li>
<li>互联网 (Internet)：覆盖全球的 IP 网的上层使用 TCP 协议</li>
</ul>
<h1 id="网络层"><a href="#网络层" class="headerlink" title="网络层"></a>网络层</h1><h2 id="网络层提供的两种服务"><a href="#网络层提供的两种服务" class="headerlink" title="网络层提供的两种服务"></a>网络层提供的两种服务</h2><ol>
<li><strong>虚电路服务</strong></li>
<li><strong>数据报服务</strong></li>
</ol>
<table>
<thead>
<tr>
<th><strong>对比的方面</strong></th>
<th><strong>虚电路服务</strong></th>
<th><strong>数据报服务</strong></th>
</tr>
</thead>
<tbody><tr>
<td><strong>思路</strong></td>
<td><strong>可靠通信应当由网络来保证</strong></td>
<td><strong>可靠通信应当由用户主机来保证</strong></td>
</tr>
<tr>
<td><strong>连接的建立</strong></td>
<td><strong>必须有</strong></td>
<td><strong>不需要</strong></td>
</tr>
<tr>
<td><strong>终点地址</strong></td>
<td><strong>仅在连接建立阶段使用，每个分组使用短的虚电路号</strong></td>
<td><strong>每个分组都有终点的完整地址</strong></td>
</tr>
<tr>
<td><strong>分组的转发</strong></td>
<td><strong>属于同一条虚电路的分组均按照同一路由进行转发</strong></td>
<td><strong>每个分组独立选择路由进行转发</strong></td>
</tr>
<tr>
<td><strong>当结点出故障时</strong></td>
<td><strong>所有通过出故障的结点的虚电路均不能工作</strong></td>
<td><strong>出故障的结点可能会丢失分组，一些路由可能会发生变化</strong></td>
</tr>
<tr>
<td><strong>分组的顺序</strong></td>
<td><strong>总是按发送顺序到达终点</strong></td>
<td><strong>到达终点时不一定按发送顺序</strong></td>
</tr>
<tr>
<td><strong>端到端的差错处理和流量控制</strong></td>
<td><strong>可以由网络负责，也可以由用户主机负责</strong></td>
<td><strong>由用户主机负责</strong></td>
</tr>
</tbody></table>
<h2 id="网际协议-IP"><a href="#网际协议-IP" class="headerlink" title="* 网际协议 IP"></a>* 网际协议 IP</h2><p>网际协议 IP 是 TCP&#x2F;IP 体系中两个最主要的协议之一。</p>
<ul>
<li>与 IP 协议配套使用的还有三个协议：<ol>
<li>地址解析协议 ARP    (Address Resolution Protocol)</li>
<li>网际控制报文协议 ICMP   (Internet Control Message Protocol)</li>
<li>网际组管理协议 IGMP   (Internet Group Management Protocol)</li>
</ol>
</li>
</ul>
<p><img src="/../images/computerNetwork/10.png" alt="png"></p>
<h3 id="IP-地址及其表示方法"><a href="#IP-地址及其表示方法" class="headerlink" title="* IP 地址及其表示方法"></a>* IP 地址及其表示方法</h3><blockquote>
<p>IP 地址就是给每个连接在互联网上的主机（或路由器）分配一个在全世界范围是唯一的 32 位的标识符。由互联网名字和数字分配机构ICANN (Internet Corporation for Assigned Names and Numbers)进行分配</p>
</blockquote>
<ul>
<li><p><strong>IP 地址的编址方法</strong></p>
<ol>
<li>分类的 IP 地址。这是最基本的编址方法，在 1981 年就通过了相应的标准协议。</li>
<li>子网的划分。这是对最基本的编址方法的改进，其标准[RFC 950] 在 1985 年通过。</li>
<li>构成超网。这是比较新的无分类编址方法。1993 年提出后很快就得到推广应用。</li>
</ol>
</li>
<li><p><strong>分类IP地址</strong></p>
<blockquote>
<p>将IP地址划分为若干个固定类。</p>
<p>每一类地址都由两个固定长度的字段组成，其中一个字段是网络号 net-id，它标志主机（或路由器）所连接到的网络，而另一个字段则是主机号 host-id，它标志该主机（或路由器）。</p>
<p>主机号在它前面的网络号所指明的网络范围内必须是唯一的。</p>
</blockquote>
</li>
</ul>
<p><img src="/../images/computerNetwork/11.png" alt="png"></p>
<ul>
<li>点分十进制记法</li>
</ul>
<p> 	</p>
<h2 id="常用的三种类别的-IP-地址"><a href="#常用的三种类别的-IP-地址" class="headerlink" title="常用的三种类别的 IP 地址"></a>常用的三种类别的 IP 地址</h2><table>
<thead>
<tr>
<th>网络类别</th>
<th>最大可指派的网络数</th>
<th>第一个可指派的网络号</th>
<th>最后一个可指派的网络号</th>
<th>每个网络中最大主机数</th>
</tr>
</thead>
<tbody><tr>
<td>A</td>
<td>126 (27 – 2)</td>
<td>1</td>
<td>126</td>
<td>16777214</td>
</tr>
<tr>
<td>B</td>
<td>16383 (214 – 1)</td>
<td>128.1</td>
<td>191.255</td>
<td>65534</td>
</tr>
<tr>
<td>C</td>
<td>2097151 (221 – 1)</td>
<td>192.0.1</td>
<td>223.255.255</td>
<td>254</td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th><strong>网络号</strong></th>
<th><strong>主机号</strong></th>
<th>源地址使用</th>
<th><strong>目的地址</strong>使用</th>
<th><strong>代表的意思</strong></th>
</tr>
</thead>
<tbody><tr>
<td><strong>0</strong></td>
<td><strong>0</strong></td>
<td><strong>可以</strong></td>
<td><strong>不可</strong></td>
<td>在本网络上的本主机</td>
</tr>
<tr>
<td><strong>0</strong></td>
<td><strong>host-id</strong></td>
<td><strong>可以</strong></td>
<td><strong>不可</strong></td>
<td><strong>在本网络上的某台主机</strong>host-id</td>
</tr>
<tr>
<td>全1</td>
<td>全1</td>
<td><strong>不可</strong></td>
<td><strong>可以</strong></td>
<td><strong>只在本网络上进行广播（各路由器均不转发）</strong></td>
</tr>
<tr>
<td><strong>net-id</strong></td>
<td>全1</td>
<td><strong>不可</strong></td>
<td><strong>可以</strong></td>
<td><strong>对</strong>net-id上的所有主机进行广播</td>
</tr>
<tr>
<td><strong>127</strong></td>
<td>非全0或全1的任何数</td>
<td><strong>可以</strong></td>
<td><strong>可以</strong></td>
<td><strong>用作本地软件环回测试之用</strong></td>
</tr>
</tbody></table>
<blockquote>
<ul>
<li>源地址：表示数据包的发送方IP地址，即哪个设备发出了该数据包。</li>
<li>目的地址：表示数据包的接收方IP地址，即该数据包需要被送达的目标设备地址。</li>
</ul>
</blockquote>
<ul>
<li><p>IP地址的重要特点</p>
<ol>
<li>IP 地址是一种分等级的地址结构。	<ol>
<li>第一，IP 地址管理机构在分配 IP 地址时只分配网络号，而剩下的主机号则由得到该网络号的单位自行分配。这样就方便了 IP 地址的管理</li>
<li>第二，路由器仅根据目的主机所连接的网络号来转发分组（而不考虑目的主机号），这样就可以使路由表中的项目数大幅度减少，从而减小了路由表所占的存储空间。</li>
</ol>
</li>
<li>实际上 IP 地址是标志一个主机（或路由器）和一条链路的接口。<ol>
<li>当一个主机同时连接到两个网络上时，该主机就必须同时具有两个相应的 IP 地址，其网络号 net-id 必须是不同的。这种主机称为多归属主机 (multihomed host)。</li>
<li>当一个主机同时连接到两个网络上时，该主机就必须同时具有两个相应的 IP 地址，其网络号 net-id 必须是不同的。这种主机称为多归属主机 (multihomed host)。</li>
</ol>
</li>
<li>用转发器或网桥连接起来的若干个局域网仍为一个网络，因此这些局域网都具有同样的网络号 net-id。</li>
<li>所有分配到网络号 net-id 的网络，无论是范围很小的局域网，还是可能覆盖很大地理范围的广域网，都是平等的。</li>
</ol>
</li>
<li><p>地址解析协议 ARP</p>
<ul>
<li>从网络层使用的 IP 地址，解析出在数据链路层使用的硬件地址。</li>
<li>每一个主机都设有一个 ARP 高速缓存 (ARP cache)，里面有所在的局域网上的各主机和路由器的 IP 地址到硬件地址的映射表。<ul>
<li>高速缓存的作用：存放最近获得的 IP 地址到 MAC 地址的绑定，以减少 ARP 广播的数量。</li>
</ul>
</li>
</ul>
</li>
<li><p>IP数据报的格式</p>
<ul>
<li><p>首部和数据</p>
<ul>
<li>首部：首部的前一部分是固定长度，共 20 字节，是所有 IP 数据报必须具有的。后面是一些可选字段，其长度是可变的。</li>
</ul>
<p>  <img src="/../images/computerNetwork/12.png" alt="png"></p>
</li>
</ul>
</li>
<li><p>IP数据报的可变部分</p>
<ul>
<li>目的：支持排错、测量以及安全等措施</li>
<li>实际上这些选项很少被使用。</li>
</ul>
</li>
</ul>
<h2 id="划分子网和构造超网"><a href="#划分子网和构造超网" class="headerlink" title="划分子网和构造超网"></a>划分子网和构造超网</h2><ul>
<li><p>划分子网纯属一个单位内部的事情，对内部网络透明，对外仍然表现为没有划分子网的一个网络。</p>
</li>
<li><p>优点</p>
<ol>
<li>减少了 IP 地址的浪费</li>
<li>使网络的组织更加灵活</li>
<li>更便于维护和管理</li>
</ol>
</li>
<li><p><strong>子网掩码</strong></p>
<ul>
<li>减少了 IP 地址的浪费使网络的组织更加灵活更便于维护和管理</li>
</ul>
</li>
<li><p>子网掩码是一个网络或一个子网的重要属性。</p>
</li>
<li><p>划分子网增加了灵活性，但却减少了能够连接在网络上的主机总数。</p>
</li>
<li><p>(IP 地址) <strong>AND</strong> (子网掩码) **&#x3D;**网络地址</p>
</li>
<li><p><strong>无分类地址CIDR</strong></p>
<ul>
<li><p>主要特点</p>
<ol>
<li>使用各种长度的“网络前缀”(network-prefix)来代替分类地址中的网络号和子网号。</li>
<li>从三级编址（使用子网掩码）又回到了两级编址。</li>
</ol>
</li>
<li><p>斜线记法</p>
<blockquote>
<p>CIDR 使用“斜线记法”(slash notation)，它又称为 CIDR 记法，即在 IP 地址面加上一个斜线“&#x2F;”，然后写上网络前缀所占的位数（这个数值对应于三级编址中子网掩码中 1 的个数）。例如： 220.78.168.0&#x2F;24</p>
</blockquote>
</li>
<li><p>路由聚合 也称为构成超网 (supernetting)。</p>
<ul>
<li>使得路由表中的一个项目可以表示很多个（例如上千个）原来传统分类地址的路由。</li>
<li>有利于减少路由器之间的路由选择信息的交换，从而提高了整个互联网的性能。</li>
</ul>
</li>
<li><p>最长前缀匹配（最长匹配或最佳匹配）</p>
<blockquote>
<p>使用 CIDR 时，路由表中的每个项目由“网络前缀”和“下一跳地址”组成。在查找路由表时可能会得到不止一个匹配结果。 应当从匹配结果中选择具有最长网络前缀的路由：最长前缀匹配 (longest-prefix matching)。网络前缀越长，其地址块就越小，因而路由就越具体 (more specific) 。</p>
</blockquote>
</li>
</ul>
</li>
</ul>
<p><img src="/../images/computerNetwork/1.png" alt="png"></p>
<h2 id="网际控制报文协议-ICMP"><a href="#网际控制报文协议-ICMP" class="headerlink" title="网际控制报文协议 ICMP"></a>网际控制报文协议 ICMP</h2><blockquote>
<p>ICMP 是互联网的标准协议。</p>
<p>ICMP <strong>允许主机或路由器报告差错情况和提供有关异常情况的报告。</strong></p>
<p>ICMP 不是高层协议，而是 IP 层的协议。</p>
</blockquote>
<ul>
<li><strong>ICMP 报文的格式</strong></li>
</ul>
<p><img src="/../images/computerNetwork/13.png" alt="png"></p>
<h2 id="互联网的路由选择协议"><a href="#互联网的路由选择协议" class="headerlink" title="互联网的路由选择协议"></a>互联网的路由选择协议</h2><ul>
<li><p>理想的路由算法</p>
<ul>
<li>正确、完整；计算简单；自适应性；稳定性；公平性；最佳</li>
</ul>
</li>
<li><p>路由算法的分类</p>
<ol>
<li>静态路由选择策略——即非自适应路由选择<ul>
<li>简单和开销较小，但不能及时适应网络状态的变化。</li>
</ul>
</li>
<li>动态路由选择策略——即自适应路由选择<ul>
<li>能较好地适应网络状态的变化，但实现起来较为复杂，开销也比较大。</li>
</ul>
</li>
<li>全局式路由选择算法<ul>
<li>用完整的、全局性的网络知识计算出从源到目的地之间的最低费用路径。</li>
<li>具有全局状态信息的算法常被称为链路状态（Link State，LS）算法</li>
</ul>
</li>
<li>分散式路由选择算法<ul>
<li>以迭代、分布式的方式计算出最低费用路径。</li>
</ul>
</li>
<li>负载敏感算法<ul>
<li>链路费用会动态地变化以反映出底层链路的当前拥塞水平。</li>
</ul>
</li>
<li>负载迟钝算法<ul>
<li>某条链路的费用不明显地反映其当前（或最近）的拥塞水平。</li>
</ul>
</li>
</ol>
</li>
<li><p>分层次的路由选择协议</p>
<ul>
<li><p><strong>互联网采用自适应、分布式的路由选择协议。</strong></p>
</li>
<li><p>自治系统 AS</p>
<blockquote>
<p>在单一的技术管理下的一组路由器，而这些路由器使用一种 AS 内部的路由选择协议和共同的度量以确定分组在该 AS 内的路由，同时还使用一种 AS 之间的路由选择协议用以确定分组在 AS之间的路由。</p>
</blockquote>
</li>
</ul>
</li>
<li><p>互联网路由选择协议</p>
<ol>
<li><p>内部网关协议 IGP (Interior Gateway Protocol)</p>
<blockquote>
<p>在一个自治系统内部使用的路由选择协议。目前这类路由选择协议使用得最多，如 RIP 和 OSPF 协议。</p>
</blockquote>
<ul>
<li><p>路由信息协议 RIP (Routing Information Protocol) </p>
<ul>
<li><p>内部网关协议 IGP 中最先得到广泛使用的协议</p>
<blockquote>
<p>RIP 是一种分布式的、基于距离向量的路由选择协议。RIP 协议要求网络中的每一个路由器都要维护从它自己到其他每一个目的网络的距离记录。</p>
<p>RIP 协议中的“距离”也称为“跳数”(hop count)</p>
<p>RIP 允许一条路径最多只能包含 15 个路由器。</p>
<p>RIP 不能在两个网络之间同时使用多条路由</p>
<p>RIP 选择一个具有最少路由器的路由（即最短路由），哪怕还存在另一条高速(低时延)但路由器较多的路由。   </p>
</blockquote>
</li>
<li><p>三个特点</p>
<ol>
<li>仅和相邻路由器交换信息。 </li>
<li>交换的信息是当前本路由器所知道的全部信息，即自己的路由表。</li>
</ol>
<p>  按固定的时间间隔交换路由信息，例如，每隔 30 秒。当网络拓扑发生变化时，路由器也及时向相邻路由器通告拓扑变化后的路由信息。</p>
</li>
<li><p>距离向量算法</p>
<blockquote>
<p>设X是结点 A 到 B 的最短路径上的一个结点。若把路径 A→B 拆成两段路径 A→X 和 X→B，则每一段路径 A→X 和 X→B 也都分别是结点 A 到 X 和结点 X 到 B 的最短路径。</p>
</blockquote>
</li>
</ul>
</li>
</ul>
</li>
<li><p>外部网关协议 EGP (External Gateway Protocol) </p>
<blockquote>
<p>若源站和目的站处在不同的自治系统中，当数据报传到一个自治系统的边界时，就需要使用一种协议将路由选择信息传递到另一个自治系统中。这样的协议就是外部网关协议 EGP。在外部网关协议中目前使用最多的是 BGP-4。</p>
</blockquote>
</li>
</ol>
</li>
</ul>
<h2 id="IPv64-7-IP-多播"><a href="#IPv64-7-IP-多播" class="headerlink" title="IPv64.7  IP 多播"></a>IPv64.7  IP 多播</h2><h2 id="虚拟专用网-VPN-和网络地址转换-NAT"><a href="#虚拟专用网-VPN-和网络地址转换-NAT" class="headerlink" title="虚拟专用网 VPN 和网络地址转换 NAT"></a>虚拟专用网 VPN 和网络地址转换 NAT</h2><h2 id="多协议标记交换-MPLS"><a href="#多协议标记交换-MPLS" class="headerlink" title="多协议标记交换 MPLS"></a>多协议标记交换 MPLS</h2><h1 id="运输层"><a href="#运输层" class="headerlink" title="运输层"></a>运输层</h1><h1 id="应用层"><a href="#应用层" class="headerlink" title="应用层"></a>应用层</h1>]]></content>
      <categories>
        <category>软硬件技术</category>
      </categories>
      <tags>
        <tag>笔记</tag>
        <tag>计算机网络</tag>
      </tags>
  </entry>
  <entry>
    <title>软件工程导论</title>
    <url>/2025/01/01/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%AF%BC%E8%AE%BA/</url>
    <content><![CDATA[<h1 id="绪论"><a href="#绪论" class="headerlink" title="绪论"></a>绪论</h1><ul>
<li><p><strong>软件工程定义</strong></p>
<blockquote>
<p>是把软件当作一种工业产品，要求 “采用工程化的 原理与方法对软件进行计划、开发和维护 ”。</p>
<p>1983年IEEE：软件工程是开发、运行、维护和修复软件的系统方法。</p>
<p>Fairly：软件工程学是为了在成本限额以内完成开发和修改软件产品所需要的系统生产和维护技术及管理学科。</p>
<p>Fritz Bauer：软件工程是为了经济地获得可靠的且能在实际机器上有效地运行的软件，而建立和使用的完善的工程化原则。</p>
<p>1993年IEEE：①软件工程是把系统化的、规范的、可度量的途径应用于软件开发、运行和维护的过程，也就是把工程化应用于软件中；②研究①中的提到的途径。</p>
</blockquote>
</li>
<li><p>软件工程学包含的主要内容</p>
<ul>
<li>软件开发技术<ol>
<li>软件开发方法学</li>
<li>软件工具</li>
<li>软件工程环境</li>
</ol>
</li>
<li>软件工程管理<ol>
<li>软件管理学</li>
<li>软件经济学</li>
<li>软件度量学</li>
</ol>
</li>
</ul>
</li>
<li><p><strong>软件工程环境</strong></p>
<ul>
<li>定义<ul>
<li>方法与工具相结合，再加上配套的软、硬件支持就形成软件工程环境。</li>
</ul>
</li>
</ul>
</li>
<li><p><strong>三种编程范型</strong></p>
<ol>
<li>过程式编程范型<ol>
<li>程序&#x3D;数据结构+算法</li>
</ol>
</li>
<li>面向对象编程范型<ol>
<li>程序&#x3D;对象+消息</li>
<li>有效地降低软件的复杂性，简化程序的开发；使因修改程序而引发软件故障的机会大大减少，令大型软件的维护更快、更简单。</li>
</ol>
</li>
<li>基于构件编程范型<ol>
<li>程序&#x3D;构件+架构</li>
<li>构件是通用的、可复用的标准化对象类</li>
</ol>
</li>
</ol>
</li>
</ul>
<h1 id="软件生存周期与软件过程"><a href="#软件生存周期与软件过程" class="headerlink" title="软件生存周期与软件过程"></a>软件生存周期与软件过程</h1><ul>
<li><p>软件生存周期（Software Life Cycle）：一个软件项目从问题提出开始，直到软件产品最终退役（废弃不用）为止。应该可以说是最早的软件工程概念。</p>
</li>
<li><p>分为三个时期：计划、开发和维护</p>
</li>
<li><p><strong>软件生存周期</strong></p>
<ul>
<li>一个软件项目从问题提出开始，直到软件产品最终退役（废弃不用）为止。</li>
<li>分为三个时期：计划、开发和维护</li>
</ul>
</li>
<li><p><strong>软件过程</strong></p>
<ul>
<li>围绕软件开发所进行的一系列活动	</li>
<li>软件生存周期中的阶段和软件过程中的活动是基本一致的。</li>
</ul>
</li>
<li><p><strong>瀑布模型waterfall model</strong></p>
<ul>
<li><p>基于软件生存周期的线性开发模型</p>
<blockquote>
<h3 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h3><p>阶段的顺序性和依赖性推迟实现的观点（编码开始早，开发时间长）质量保证的观点（文档，审查）</p>
<h3 id="存在问题"><a href="#存在问题" class="headerlink" title="存在问题"></a>存在问题</h3><p>不适合需求模糊的系统开发初始阶段很难彻底弄清软件需求(F.Brook)</p>
</blockquote>
</li>
</ul>
</li>
<li><p><strong>快速原型模型rapid prototype model</strong></p>
<p>  基于原型的迭代化开发模型</p>
<blockquote>
<h3 id="特点-1"><a href="#特点-1" class="headerlink" title="特点"></a>特点</h3><ol>
<li>“逼真”的原型可以使用户迅速作出反馈</li>
<li>循环回溯和迭代：非线性模型</li>
<li>使用快速开发工具</li>
</ol>
<h3 id="硬件相比原型的不同之处及相应措施"><a href="#硬件相比原型的不同之处及相应措施" class="headerlink" title="硬件相比原型的不同之处及相应措施"></a>硬件相比原型的不同之处及相应措施</h3><p>单件产品</p>
<h3 id="种类"><a href="#种类" class="headerlink" title="种类"></a>种类</h3><p>渐进型：对原型补充和修改获得最终系统</p>
<p>抛弃型：原型废弃不用应防止的偏向舍不得抛弃，从而影响软件质量（用户与开发者）</p>
<h3 id="启示"><a href="#启示" class="headerlink" title="启示"></a>启示</h3><p>软件生存周期不等于过程模型</p>
</blockquote>
</li>
<li><p><strong>敏捷过程</strong></p>
<ul>
<li><p>敏捷开发的价值观</p>
<ul>
<li>个人和交互胜过过程和工具 </li>
<li>可以运行的软件胜过面面俱到的文档 </li>
<li>客户合作胜过合同谈判 </li>
<li>响应变化胜过遵循计划</li>
</ul>
</li>
<li><p>12条原则</p>
<blockquote>
<p>允许改变需求，利用变化来为客户创造优势尽快、不断地提交可运行的软件在业务人员和开发人员必须天天都在一起工作以积极向上的员工为中心建立项目组，提供环境和支持，并信任他们的工作在团队内部重视面对面的交流依据可运行软件来评估项目的进展提倡可持续的开发时刻关注技术上的精益求精和好的设计，以增强敏捷能力简单是最根本的最好的构架、需求和设计出于自组织团队每隔一定时间，要反省如何才能更有效地工作，然后作相应调整 </p>
</blockquote>
</li>
<li><p>极限编程</p>
<ul>
<li>一种轻量级的、敏捷的软件开发方法</li>
<li>交流、简单、反馈、勇气</li>
<li>加强交流、从简单做起、寻求反馈、勇于实事就是</li>
</ul>
</li>
</ul>
</li>
</ul>
<h1 id="软件生存周期的主要活动"><a href="#软件生存周期的主要活动" class="headerlink" title="软件生存周期的主要活动"></a>软件生存周期的主要活动</h1><ol>
<li><strong>需求分析</strong><ul>
<li>明确需要解决的问题（从用户的视角）</li>
<li>建立需求模型：功能、性能、约束、外部接口等</li>
</ul>
</li>
<li><strong>软件分析</strong><ul>
<li>从开发人员的视角对软件进行分析</li>
<li>建立分析模型：软件的逻辑模型</li>
</ul>
</li>
<li><strong>软件设计</strong><ul>
<li>确定软件的总体结构和各部件的数据结构和操作（总体、概要、详细）</li>
<li>建立软件设计模型：考虑实现技术和平台</li>
</ul>
</li>
<li><strong>编码（含单元测试 ）</strong><ul>
<li>用程序设计语言将设计文档翻译成源程序</li>
<li>建立软件实现模型：包含现有软件构件包</li>
</ul>
</li>
<li><strong>软件测试</strong><ul>
<li>发现程序中的错误、提高软件质量</li>
<li>集成测试、确认测试(α , ß )、系统测试</li>
</ul>
</li>
<li><strong>运行维护</strong><ul>
<li>延长使用寿命</li>
</ul>
</li>
</ol>
<h1 id="结构化分析与设计"><a href="#结构化分析与设计" class="headerlink" title="结构化分析与设计"></a>结构化分析与设计</h1><ul>
<li>瀑布模型的各个阶段</li>
<li>SA和SD阶段的内容和使用的工具<ul>
<li>SA与SD是瀑布模型的首次实践 <ul>
<li>需求定义与分析→总体设计→详细设计→编码→测试→使用维护</li>
</ul>
</li>
<li>SA与SD的流程 <ol>
<li>结构化分析（工具：DFD、PSPEC、DD ）        分析模型+ SRS</li>
<li>结构化设计（工具：SC图）映射  初始设计模型（初始SC图）</li>
<li>初始设计模型（初始SC图） 优化   最终设计模型（最终SC图）</li>
</ol>
</li>
</ul>
</li>
<li>扇出和扇入<ul>
<li>保持高扇入&#x2F;低扇出的原则</li>
<li>扇入：被其他模块调用数</li>
<li>扇出：调用其他模块数</li>
</ul>
</li>
<li>瓮型结构</li>
<li>清晰第一与效率第二</li>
</ul>
<h1 id="面向对象与UML"><a href="#面向对象与UML" class="headerlink" title="面向对象与UML"></a>面向对象与UML</h1><ul>
<li><p><strong>面向对象的基本特征</strong></p>
<ul>
<li>对象：代表客观世界中实际或抽象的事物 ，它由状态（属性）和行为（方法）组成。 <ol>
<li>抽象<ul>
<li>在某个重要的或想关注的方面来表示某个物体或概念 忽略主题中与当前目标无关的方面</li>
</ul>
</li>
<li>封装<ul>
<li>把操作和数据包围起来，对数据的访问只通过已定义的接口来完成</li>
</ul>
</li>
<li>继承<ul>
<li>类层次，定义一个新类，可以从现有的类中派生出来 子类可以从父类继承方法和属性 \</li>
</ul>
</li>
<li>多态  <ul>
<li>不同类的对象可以对同一消息作出响应，执行不同的处理 </li>
<li>多态性：同一消息发送至不同类或对象可导致不同的操作结果，使软件开发设计更便利，编码更灵活。</li>
</ul>
</li>
</ol>
</li>
</ul>
</li>
<li><p><strong>ＵＭＬ</strong></p>
<ul>
<li>组成<ol>
<li>UML的模型元素</li>
<li>UML的元模型结构</li>
<li>图与视图<ol>
<li>每个视图由一组图构成，图中包含了强调系统中某一方面的信息，显示了这个系统中一个特定的方面。</li>
</ol>
</li>
</ol>
</li>
<li>特点<ol>
<li>统一标准</li>
<li>面向对象</li>
<li>可视化、表示能力强</li>
</ol>
</li>
<li>应用</li>
</ul>
</li>
<li><p><strong>ＵＭＬ的模型元素</strong></p>
<ol>
<li><p>表示模型中的某个概念</p>
<ul>
<li>类、对象、构件、用例、结点（node）、接口（interface）、包（package）和注释（note）</li>
</ul>
</li>
<li><p>表示模型元素之间的关系</p>
<ul>
<li><p>关联，泛化，依赖，实现，聚集和组合</p>
<blockquote>
<h3 id="1、关联"><a href="#1、关联" class="headerlink" title="1、关联"></a>1、关联</h3><p>关联关系是一种结构关系，它指明一个事物的对象与另一个事物的对象之间存在固定的对应关系时，这两个事物之间为关联关系。</p>
<h3 id="2、聚合"><a href="#2、聚合" class="headerlink" title="2、聚合"></a>2、聚合</h3><p>表示“整体”与“部分”关系，“部分” 元素是 “整体”元素的一部分。</p>
<h3 id="3、组合"><a href="#3、组合" class="headerlink" title="3、组合"></a>3、组合</h3><p>表示强烈的”整体“与”部分“关系，”部分“不能独立于”整体“存在。</p>
<h3 id="4、泛化"><a href="#4、泛化" class="headerlink" title="4、泛化"></a>4、泛化</h3><p>泛化关系也称为继承关系，这种关系意味着一个元素是另一个元素的特例。泛化用一条空心三角箭头的实线表示，它从表示特殊性事物的模型元素指向表示一般性事物的模型元素。</p>
<h3 id="5、实现"><a href="#5、实现" class="headerlink" title="5、实现"></a>5、实现</h3><p>实现关系描述一个元素实现另一个元素。实现关系用一条空心三角箭头的虚线表示，箭头从源模型指向目标模型，表示源模型元素实现目标元素模型。</p>
<h3 id="6、-依赖"><a href="#6、-依赖" class="headerlink" title="6、 依赖"></a>6、 依赖</h3><p>表示一个元素以某种方式依赖于另一个元素，用一条虚线加箭头来箭头从源事物指向目标事物，表示源事物依赖于目标事物。</p>
</blockquote>
</li>
</ul>
</li>
</ol>
</li>
</ul>
<blockquote>
<ul>
<li>关联关系<ul>
<li><strong>例子</strong>：在学校管理系统里，“学生” 和 “课程” 之间存在关联关系。一个学生可以选修多门课程，一门课程也会有多个学生来选修，这种多对多的对应联系，就是关联。在代码层面，可能会在 “学生” 类里有一个列表属性来存放所选 “课程” 对象的引用，反之亦然 ，以此来确立二者固定的选课对应关系。</li>
</ul>
</li>
<li>聚合关系<ul>
<li><strong>例子</strong>：汽车和轮胎。轮胎是汽车的一部分，汽车作为 “整体”，轮胎作为 “部分”，它们是聚合关系。从生命周期来讲，轮胎可以独立生产制造，在被安装到汽车上之前，轮胎有自己的独立存在状态，即便后期从车上拆卸下来，也不影响轮胎本身的存在。在代码里，“汽车” 类可能有一个属性，用来存储一组 “轮胎” 类的对象。</li>
</ul>
</li>
<li>组合关系<ul>
<li><strong>例子</strong>：鸟和它的翅膀。翅膀是鸟身体构造不可或缺的部分，离开鸟这个 “整体”，翅膀就失去了作为有生物功能的 “翅膀” 的意义，没办法单独存活、发挥作用。在代码实现时，“鸟” 类内部定义 “翅膀” 类的实例变量，当 “鸟” 的对象被销毁时，其内部 “翅膀” 对象也会随之被销毁。</li>
</ul>
</li>
<li>泛化关系<ul>
<li><strong>例子</strong>：在图形绘制程序里，“圆形”“三角形”“矩形” 和 “图形” 之间的关系。“圆形”“三角形”“矩形” 都是 “图形” 的特例，它们继承了 “图形” 的一些通用属性，比如颜色、位置等，同时又各自有独特的属性，像圆形有半径，三角形有三条边长。用代码表示，“圆形”“三角形”“矩形” 类会继承自抽象的 “图形” 类 。</li>
</ul>
</li>
<li>实现关系<ul>
<li><strong>例子</strong>：在 Java 里，接口和实现类的关系。例如，定义一个 “可飞行” 接口，其中声明了 “起飞”“飞行”“降落” 等抽象方法。然后 “飞机” 类实现这个 “可飞行” 接口，意味着飞机类要去具体实现接口里的抽象方法，满足接口定义的飞行行为契约，这里就用到了实现关系。</li>
</ul>
</li>
<li>依赖关系<ul>
<li><strong>例子</strong>：在一个电商订单处理系统中，“订单” 类和 “用户地址验证” 类存在依赖关系。当创建一个订单时，需要调用 “用户地址验证” 类的方法，来确保收货地址的准确性，“订单” 类依赖 “用户地址验证” 类完成部分关键业务流程，如果 “用户地址验证” 类发生变更，很可能影响 “订单” 类的功能。</li>
</ul>
</li>
</ul>
</blockquote>
<ul>
<li><p><strong>动态图</strong></p>
<ul>
<li>状态图、时序图、协作图和活动图</li>
</ul>
</li>
<li><p><strong>静态图</strong></p>
<ul>
<li>用例图、类图、对象图、构件图和部署图</li>
</ul>
</li>
<li><p><strong>包</strong></p>
<ul>
<li>内容<ul>
<li>可以是类的列表,也可以是另一个包图,还可以是一个类图。</li>
<li>包可以有接口，接口与包之间用实线相连，接口通常由包的一个或多个类实现。</li>
</ul>
</li>
</ul>
</li>
<li><p><strong>用例图</strong>：</p>
<ul>
<li>描述系统功能</li>
<li>用例是对系统提供的功能(即系统的具体用法)的描述。用例图从用户的角度描述系统功能，并指出各个功能的操作者。用例图定义了系统的功能需求。</li>
</ul>
</li>
<li><p><strong>类图</strong> ：</p>
<ul>
<li>描述系统的静态结构；</li>
<li>不仅定义系统中的类，表示类与类之间的关系(例如，关联、依赖、泛化等关系)，也表示类的内部结构(类的属性和操作)。</li>
<li>类图描述的是一种静态关系，在系统的整个生命期内都是有效的。</li>
</ul>
</li>
<li><p><strong>状态图</strong> </p>
<ul>
<li>描述系统元素的状态条件和响应；</li>
<li>描述类的对象可能具有的所有状态，以及引起状态变化的事件，状态变化称作状态转换</li>
<li>状态图是对类图的补充。</li>
</ul>
</li>
<li><p><strong>时序图</strong></p>
<ul>
<li>按时间顺序描述系统元素间的交互；</li>
<li>显示若干个对象间的动态协作关系，它强调对象之间发送消息的先后次序，描述对象之间的交互过程。</li>
</ul>
</li>
<li><p><strong>协作图</strong></p>
</li>
<li><p>按照时间和空间的顺序描述系统元素间的交互和关系；</p>
</li>
<li><p>描述对象间的动态协作关系。除了显示对象间发送的消息之外，协作图还显示对象及它们之间的关系(称为上下文相关)。相互协作的对象间的交互与链接。</p>
</li>
</ul>
<p>两者的区别和联系画法</p>
<blockquote>
<p>由于二者都描述对象间的交互关系，所以建模者可以选择其中一种表示对象间的协作关系：</p>
<p>如果需要强调时间和顺序，最好选用时序图；</p>
<p>如果需要强调上下文相关，最好选择协作图。</p>
</blockquote>
<ul>
<li><strong>活动图</strong></li>
<li>描述系统元素的活动</li>
</ul>
<p>用例图、时序图（或者协作图）、<strong>类图（重点掌握）</strong>类图中的六种联系（重点掌握）</p>
<h1 id="需求工程与需求分析"><a href="#需求工程与需求分析" class="headerlink" title="需求工程与需求分析"></a>需求工程与需求分析</h1><ul>
<li><p><strong>软件需求的层次关系（业务、用户和功能）</strong></p>
<ul>
<li><p>业务需求</p>
<blockquote>
<p>反映了组织机构或客户对系统、产品高层次的目标要求，通常在项目定义与范围文档中予以说明 。</p>
<p>业务需求的确定对之后的用户需求和功能需求起了限定作用，任何需求不得与之相违背。</p>
</blockquote>
</li>
<li><p>用户需求</p>
<blockquote>
<p>用户需求(user requirement) 从用户使用角度来描述软件产品必须完成的任务。通常在用例模型中描述，同时引出软件的质量属性。</p>
<p>用户需求的重心是如何收集用户的需求，即确定软件系统的功能以及软件与环境的交互。</p>
</blockquote>
</li>
<li><p>功能需求</p>
<blockquote>
<p>功能需求(functional requirement)定义了开发人员必须实现的软件功能，以及为了有效实现这些功能而必须达到的非功能要求、约束条件等，使得用户能完成他们的任务，从而满足了业务需求</p>
<p>功能需求依赖于用户需求，是用户需求在系统上的一个映射（Mapping）。</p>
</blockquote>
</li>
</ul>
</li>
<li><p>面向对象的需求建模过程</p>
<ol>
<li>画用例图<ol>
<li>存在于系统外部、与系统交互的人、硬件、其他系统</li>
</ol>
</li>
<li>写用例规约<ol>
<li>考察每个参与者与系统的交互和需要系统提供的服务</li>
</ol>
</li>
<li>描述补充规约</li>
<li>编写术语表</li>
</ol>
</li>
<li><p>需求模型的组成</p>
<ul>
<li>结构化需求模型</li>
<li>面向对象需求模型</li>
</ul>
</li>
</ul>
<h1 id="面向对象分析"><a href="#面向对象分析" class="headerlink" title="面向对象分析"></a>面向对象分析</h1><ul>
<li><p>OOA模型的组成结构</p>
<ul>
<li>&#x2F;需求模型: 以用例模型为主体。</li>
<li>类&#x2F;对象模型：通过属性、操作和协作者</li>
<li>对象-关系模型：静态关系，消息路径</li>
<li>对象-行为模型：动态关系，对象间协作与响应消息</li>
</ul>
</li>
<li><p>OOA过程</p>
<ul>
<li>识别与确定分析类</li>
<li>查找分析类</li>
</ul>
</li>
<li><p>边界类、控制类和实体类</p>
<ul>
<li><p>边界类&lt;<boundary>&gt; :负责系统与外界的通讯与交通</p>
<ul>
<li>①用户界面类   ②系统接口类   ③设备接口类</li>
</ul>
</li>
<li><p>控制类&lt;&lt; control&gt;&gt;:负责协调、调度、处理事务并控制系统内部其它对象的行为、</p>
</li>
<li><p>实体类&lt;<entity>&gt;：负责承担系统中需要持久化的信息及其关联的行为</p>
</li>
</ul>
</li>
</ul>
<h1 id="面向对象设计"><a href="#面向对象设计" class="headerlink" title="面向对象设计"></a>面向对象设计</h1><p>QS模块独立性、内聚和耦合、</p>
<ul>
<li><p><strong>系统架构设计的主要内容（重点掌握）</strong></p>
<ol>
<li>系统高层结构设计<ul>
<li>套用软件架构模式来设计高层组织结构<ul>
<li>模型-视图-控制架构（Model-View-Control）</li>
<li>层次架构（Layers）</li>
<li>管道与过滤器架构（Pipes and Filters）</li>
<li>黑板架构（Blackboard）<ul>
<li>专家系统架构模式。黑板模型主要由“黑板”、知识源（Knowledge Source）和控制机构三大部分组成。</li>
<li>黑板”是一个分层的全局工作区，它被分为若干层，每一层用于描述领域问题的某一类信息。</li>
<li>知识源是一个知识模块。它的先决条件一旦与黑板状态匹配，该知识源便被激活，其执行结果将导致黑板状态的变化。</li>
<li>控制机构是求解问题的推理机构，由监督程序和调度程序组成。监督程序时刻注视着黑板状态，根据黑板状态采用某种策略选择合适的知识源。若知识源的条件部分与黑板状态匹配成功，则将其动作部分放入调度队列。</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li>确定设计元素<ul>
<li>识别和确定设计类和子系统，将设计类组织到相应的包中，为子系统设计接口，确定复用机会。<ul>
<li>映射分析类到设计元素 </li>
<li>确定子系统 表示具有与类似的特征的包的特定用法。</li>
</ul>
</li>
</ul>
</li>
<li>确定任务管理策略<ul>
<li>多任务、并发执行等可能引起的冲突或运行性能等<ul>
<li>并行需求三种解决方案：<ol>
<li>多处理器方案–将并发子系统分配到不同的处理器</li>
<li>操作系统方案–将并发子系统分配到相同的处理器并由操作系统提供同步控制</li>
<li>应用程序方案–应用软件负责在适当的时间从一个代码分支切换到另一个代码分支</li>
</ol>
</li>
<li>两种实现技术<ol>
<li>引进任务管理部件 </li>
<li>基于进程和线程的控制</li>
</ol>
</li>
</ul>
</li>
</ul>
</li>
<li>实现分布式机制<ul>
<li>选择支持远程通信的构件，给出实现构件通信的统一方案<ol>
<li>确定网络拓扑配置</li>
<li>将设计元素分配到网络节点</li>
<li>设计分布处理机制</li>
</ol>
</li>
</ul>
</li>
<li>设计数据存储方案<ul>
<li>选择数据库访问的支持构件，设计类&#x2F;对象数据的存储、读取、删除或修改等操作的方法<ul>
<li>基于JDBC的数据存储机制</li>
</ul>
</li>
</ul>
</li>
<li>人机界面设计<ul>
<li>确定统一要求和规范，确定实现的技术基础和工具<ol>
<li>分类分析用户特点，设计不同界面 </li>
<li>增加用户界面专用的类与对象 </li>
<li>利用快速原型演示，改进界面设计</li>
</ol>
</li>
</ul>
</li>
</ol>
</li>
<li><p><strong>系统元素设计</strong></p>
<ul>
<li>包括类、子系统与接口、包等。系统元素设计包括三方面的内容: <ol>
<li>类&#x2F;对象设计<ul>
<li>在分析类的基础上对每个设计类的属性及其类型、操作及其算法、接收及发送的消息等进行详细设计。</li>
</ul>
</li>
<li>子系统设计<ul>
<li>设计与确定每个子系统内部组织、子系统对应接口、子系统之间的关联等。</li>
</ul>
</li>
<li>包设计 <ul>
<li>将逻辑上相关的设计元素组织在一起。</li>
</ul>
</li>
</ol>
</li>
</ul>
</li>
<li><p><strong>模式</strong></p>
<ul>
<li>模式是解决某一类问题的方法论，也是对通用问题的通用解决方案。是把解决某类问题的方法总结、归纳到理论高度，供其他人员在解决类似问题时参考或直接套用。</li>
<li>利用已取得成功的设计结果和经验，既可以减少工作量，又可以提高设计结果的质量。</li>
</ul>
</li>
</ul>
<h1 id="编码与测试"><a href="#编码与测试" class="headerlink" title="编码与测试"></a>编码与测试</h1><ul>
<li><p><strong>编码风格：</strong></p>
<ul>
<li>清晰与效率标准</li>
<li>控制结构</li>
<li>源程序的文档化</li>
<li>用户友好的输入输出风格</li>
</ul>
</li>
<li><p><strong>测试的特性</strong></p>
<ul>
<li>挑剔性：测试是证明程序有错，而不是证明程序无错；</li>
<li>复杂性：设计测试用例是一项需要细致和高度技巧的工作，不亚于程序的开发；</li>
<li>不彻底性：不可能让被测程序在一切可能的输入情况下全部执行一遍。</li>
</ul>
</li>
<li><p><strong>静态分析和动态测试</strong></p>
<ul>
<li>静态分析(程序不执行)<ul>
<li>静态分析器分析 (自动方式)</li>
<li>代码评审(人工方式)<ul>
<li>代码会审<ul>
<li>以小组会的形式进行</li>
</ul>
</li>
<li>代码走查<ul>
<li>以小组会的方式进行</li>
</ul>
</li>
<li>办公桌检查<ul>
<li>程序作者在程序通过编译之后，进行单元测试之前，对源代码进行分析、检验，并补充有关文档，以发现程序中的错误。</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li>动态分析(程序执行)<ul>
<li><strong>黑盒测试</strong>(测试程序功能) <strong>重点掌握</strong><ul>
<li>把测试对象看做一个黑盒子，测试人员完全不考虑程序内部的逻辑结构和内部特性，只依据程序的需求规格说明书，检查程序的功能是否符合它的功能说明。</li>
<li>又叫做功能测试或数据驱动测试。<ul>
<li>等价分类法</li>
<li>边界值分析法</li>
<li>错误猜测法</li>
</ul>
</li>
</ul>
</li>
<li>白盒测试(测试程序结构)<ul>
<li>此方法把测试对象看做一个透明的盒子，它允许测试人员利用程序内部的逻辑结构及有关信息，设计或选择测试用例，对程序所有逻辑路径进行测试。</li>
<li>又称为结构测试或逻辑驱动测试。<ul>
<li>逻辑覆盖测试:对所有的逻辑判定，取“真”与取“假”的两种情况都至少测试一次.</li>
<li>路径测试:对程序模块的所有独立的执行路径至少测试一次。</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li><p>单元测试</p>
<ul>
<li>针对软件设计的最小单位 ─ 程序模块，进行正确性检验的测试工作。目的在于发现各模块内部可能存在的各种差错。</li>
</ul>
</li>
<li><p>集成测试、</p>
<ul>
<li>在单元测试的基础上，将所有模块按照设计要求组装成为系统。</li>
</ul>
</li>
<li><p>确认测试、</p>
<ul>
<li>任务是验证软件的功能和性能及其它特性是否与用户的要求一致。</li>
</ul>
</li>
<li><p>系统测试、</p>
<ul>
<li>将通过确认测试的软件，作为整个基于计算机系统的一个元素，与计算机硬件、外设、某些支持软件、数据和人员等其它系统元素结合在一起，在实际运行环境下，对计算机系统进行一系列的组装测试和确认测试。</li>
</ul>
</li>
<li><p>阿尔法测试、</p>
<ul>
<li>软件开发公司组织内部人员模拟各类用户对即将面市软件产品进行测试，试图发现错误并修正。</li>
</ul>
</li>
<li><p>贝塔测试</p>
<ul>
<li>在阿尔法测试之后，由部分实际用户在实际使用环境中对软件进行测试，以进一步发现问题并收集反馈。</li>
</ul>
</li>
</ul>
<h1 id="软件维护"><a href="#软件维护" class="headerlink" title="软件维护"></a>软件维护</h1><ul>
<li><strong>软件维护</strong> <ul>
<li>指软件系统交付使用以后，为了改正软件运行错误，或者因满足新的需求而加入新功能的修改软件的过程。</li>
</ul>
</li>
</ul>
]]></content>
      <tags>
        <tag>笔记</tag>
        <tag>软件工程</tag>
        <tag>考试</tag>
      </tags>
  </entry>
  <entry>
    <title>计算机网络基础</title>
    <url>/2024/10/03/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%9F%BA%E7%A1%80/</url>
    <content><![CDATA[<p>本部分计算机网络笔记用于学习和应用。</p>
<h1 id="计算机网络基础"><a href="#计算机网络基础" class="headerlink" title="计算机网络基础"></a>计算机网络基础</h1><h2 id="TCP和UDP的区别"><a href="#TCP和UDP的区别" class="headerlink" title="TCP和UDP的区别"></a>TCP和UDP的区别</h2><table>
<thead>
<tr>
<th>特性</th>
<th>TCP (传输控制协议)</th>
<th>UDP (用户数据报协议)</th>
</tr>
</thead>
<tbody><tr>
<td>连接方式</td>
<td>面向连接</td>
<td>无连接</td>
</tr>
<tr>
<td>可靠性</td>
<td>提供可靠的数据传输，保证数据完整性</td>
<td>不保证数据的可靠性</td>
</tr>
<tr>
<td>流量控制</td>
<td>支持流量控制和拥塞控制</td>
<td>不支持流量控制</td>
</tr>
<tr>
<td>数据顺序</td>
<td>保证数据的顺序</td>
<td>不保证数据的顺序</td>
</tr>
<tr>
<td>速度</td>
<td>较慢，由于需要建立连接和确认</td>
<td>较快，没有建立连接的延迟</td>
</tr>
<tr>
<td>适用场景</td>
<td>适合需要可靠传输的应用，如网页、文件传输</td>
<td>适合实时应用，如视频会议、在线游戏</td>
</tr>
</tbody></table>
<ul>
<li><p><strong>TCP数据包的结构</strong></p>
<ul>
<li><p><strong>头部</strong>：通常为20字节，包含以下字段：</p>
<ul>
<li><strong>源端口</strong>（16位）：发送端的端口号。</li>
<li><strong>目的端口</strong>（16位）：接收端的端口号。</li>
<li><strong>序列号</strong>（32位）：用于数据重组和控制。</li>
<li><strong>确认号</strong>（32位）：期望收到的下一个字节的序列号。</li>
<li><strong>数据偏移</strong>（4位）：头部长度。</li>
<li><strong>保留位</strong>（6位）：保留用于未来使用。</li>
<li><strong>控制位</strong>（6位）：包括URG、ACK、PSH、RST、SYN、FIN等，用于控制连接。</li>
<li><strong>窗口大小</strong>（16位）：流量控制中的窗口大小。</li>
<li><strong>校验和</strong>（16位）：用于检测传输中的错误。</li>
<li><strong>紧急指针</strong>（16位）：指示紧急数据的偏移量（如果URG标志设置）。</li>
<li><strong>选项</strong>：可选字段，长度可变。</li>
</ul>
<p>  <strong>数据部分</strong>：包含实际传输的数据。</p>
</li>
</ul>
</li>
<li><p><strong>UDP数据包结构</strong></p>
<ul>
<li><strong>头部</strong>: 固定为8字节，包含以下字段：<ul>
<li><strong>源端口</strong>（16位）：发送端的端口号。</li>
<li><strong>目的端口</strong>（16位）：接收端的端口号。</li>
<li><strong>长度</strong>（16位）：UDP头部和数据部分的总长度。</li>
<li><strong>校验和</strong>（16位）：用于检测传输中的错误。</li>
</ul>
</li>
<li><strong>数据部分</strong>：包含实际传输的数据。</li>
</ul>
</li>
</ul>
<h2 id="TCP的三次握手和四次挥手机制"><a href="#TCP的三次握手和四次挥手机制" class="headerlink" title="TCP的三次握手和四次挥手机制"></a>TCP的三次握手和四次挥手机制</h2><h4 id="一、TCP-三次握手（连接建立）"><a href="#一、TCP-三次握手（连接建立）" class="headerlink" title="一、TCP 三次握手（连接建立）"></a>一、TCP 三次握手（连接建立）</h4><p>三次握手的目的是为了保证客户端和服务器双方都确认对方收到了自己的请求，成功建立可靠的连接。过程如下：</p>
<ol>
<li><p>第一次握手</p>
<p> ：</p>
<ul>
<li>客户端向服务器发送一个 <strong>SYN</strong>（同步）报文，表示要建立连接。此时客户端进入 <strong>SYN_SENT</strong> 状态。</li>
</ul>
</li>
<li><p>第二次握手</p>
<p> ：</p>
<ul>
<li>服务器收到客户端的 SYN 报文后，确认收到，回复一个 <strong>SYN-ACK</strong> 报文，表示同意建立连接并确认 SYN。此时服务器进入 <strong>SYN_RCVD</strong> 状态。</li>
</ul>
</li>
<li><p>第三次握手</p>
<p> ：</p>
<ul>
<li>客户端收到服务器的 SYN-ACK 报文后，发送一个 <strong>ACK</strong>（确认）报文，确认服务器的响应。此时，客户端进入 <strong>ESTABLISHED</strong>（连接已建立）状态，服务器收到 ACK 后也进入 <strong>ESTABLISHED</strong> 状态。</li>
</ul>
</li>
</ol>
<p>这三次握手的主要目的是确认双方的发送、接收能力和初始化序列号的同步。</p>
<h4 id="二、TCP-四次挥手（连接关闭）"><a href="#二、TCP-四次挥手（连接关闭）" class="headerlink" title="二、TCP 四次挥手（连接关闭）"></a>二、TCP 四次挥手（连接关闭）</h4><p>四次挥手的目的是保证双方都确认连接已经正常关闭。其步骤如下：</p>
<ol>
<li><p>第一次挥手</p>
<p> ：</p>
<ul>
<li>当客户端想要关闭连接时，发送一个 <strong>FIN</strong>（结束）报文，表示不再发送数据。此时客户端进入 <strong>FIN_WAIT_1</strong> 状态。</li>
</ul>
</li>
<li><p>第二次挥手</p>
<p> ：</p>
<ul>
<li>服务器收到 FIN 报文后，确认收到，回复一个 <strong>ACK</strong> 报文。此时服务器进入 <strong>CLOSE_WAIT</strong> 状态，客户端收到 ACK 后进入 <strong>FIN_WAIT_2</strong> 状态。</li>
</ul>
</li>
<li><p>第三次挥手</p>
<p> ：</p>
<ul>
<li>服务器在确认客户端不再发送数据后，也发送一个 <strong>FIN</strong> 报文，表示自己也不再发送数据。此时服务器进入 <strong>LAST_ACK</strong> 状态。</li>
</ul>
</li>
<li><p>第四次挥手</p>
<p> ：</p>
<ul>
<li>客户端收到服务器的 FIN 报文后，发送 <strong>ACK</strong> 报文确认。此时客户端进入 <strong>TIME_WAIT</strong> 状态，等待一段时间（通常为 2 倍的报文最大生存时间，即 2MSL）以确保服务器接收到了 ACK，之后客户端进入 <strong>CLOSED</strong> 状态，连接关闭。</li>
</ul>
</li>
</ol>
<p>服务器收到 ACK 后，也进入 <strong>CLOSED</strong> 状态，至此连接完全关闭。</p>
<h2 id="使用TCP-IP协议进行通信（基于python）"><a href="#使用TCP-IP协议进行通信（基于python）" class="headerlink" title="使用TCP&#x2F;IP协议进行通信（基于python）"></a>使用TCP&#x2F;IP协议进行通信（基于python）</h2><h4 id="服务器"><a href="#服务器" class="headerlink" title="服务器"></a>服务器</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建TCP服务器的socket对象</span></span><br><span class="line">server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 绑定IP地址和端口号</span></span><br><span class="line">server_socket.bind((<span class="string">&#x27;localhost&#x27;</span>, <span class="number">12345</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 开始监听</span></span><br><span class="line">server_socket.listen(<span class="number">5</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;TCP服务器启动，等待客户端连接...&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 等待客户端连接</span></span><br><span class="line">client_socket, addr = server_socket.accept()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;连接建立，客户端地址: <span class="subst">&#123;addr&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 接收数据</span></span><br><span class="line">data = client_socket.recv(<span class="number">1024</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;收到的数据: <span class="subst">&#123;data.decode()&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 发送响应</span></span><br><span class="line">client_socket.send(<span class="string">&quot;你好，客户端！&quot;</span>.encode())</span><br><span class="line"></span><br><span class="line"><span class="comment"># 关闭连接</span></span><br><span class="line">client_socket.close()</span><br><span class="line">server_socket.close()</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="TCP客户端："><a href="#TCP客户端：" class="headerlink" title="TCP客户端："></a>TCP客户端：</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建TCP客户端的socket对象</span></span><br><span class="line">client_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 连接服务器</span></span><br><span class="line">client_socket.connect((<span class="string">&#x27;localhost&#x27;</span>, <span class="number">12345</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 发送数据</span></span><br><span class="line">client_socket.send(<span class="string">&quot;你好，服务器！&quot;</span>.encode())</span><br><span class="line"></span><br><span class="line"><span class="comment"># 接收服务器的响应</span></span><br><span class="line">data = client_socket.recv(<span class="number">1024</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;从服务器收到的响应: <span class="subst">&#123;data.decode()&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 关闭连接</span></span><br><span class="line">client_socket.close()</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h2 id="使用TCP-IP协议进行网络聊天（基于python）"><a href="#使用TCP-IP协议进行网络聊天（基于python）" class="headerlink" title="使用TCP&#x2F;IP协议进行网络聊天（基于python）"></a>使用TCP&#x2F;IP协议进行网络聊天（基于python）</h2><h4 id="服务器-1"><a href="#服务器-1" class="headerlink" title="服务器"></a>服务器</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"></span><br><span class="line">clients = []</span><br><span class="line">usernames = []</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">handle_client</span>(<span class="params">client_socket</span>):</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="comment"># 接收客户端发送的数据</span></span><br><span class="line">            message = client_socket.recv(<span class="number">1024</span>)</span><br><span class="line">            <span class="keyword">if</span> message:</span><br><span class="line">                broadcast(message, client_socket)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                remove_client(client_socket)</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">broadcast</span>(<span class="params">message, client_socket</span>):</span><br><span class="line">    <span class="keyword">for</span> client <span class="keyword">in</span> clients:</span><br><span class="line">        <span class="keyword">if</span> client != client_socket:</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                client.send(message)</span><br><span class="line">            <span class="keyword">except</span>:</span><br><span class="line">                remove_client(client)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">remove_client</span>(<span class="params">client_socket</span>):</span><br><span class="line">    index = clients.index(client_socket)</span><br><span class="line">    clients.remove(client_socket)</span><br><span class="line">    username = usernames[index]</span><br><span class="line">    usernames.remove(username)</span><br><span class="line">    broadcast(<span class="string">f&quot;<span class="subst">&#123;username&#125;</span> 退出了聊天！&quot;</span>.encode(), client_socket)  <span class="comment"># 传递 client_socket</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">start_server</span>():</span><br><span class="line">    server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line">    server_socket.bind((<span class="string">&#x27;localhost&#x27;</span>, <span class="number">12345</span>))</span><br><span class="line">    server_socket.listen(<span class="number">5</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;聊天服务器启动，等待连接...&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        client_socket, addr = server_socket.accept()</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;客户端 <span class="subst">&#123;addr&#125;</span> 连接。&quot;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 让客户端输入用户名</span></span><br><span class="line">        client_socket.send(<span class="string">&quot;请输入用户名：&quot;</span>.encode())</span><br><span class="line">        username = client_socket.recv(<span class="number">1024</span>).decode()</span><br><span class="line">        usernames.append(username)</span><br><span class="line">        clients.append(client_socket)</span><br><span class="line">        broadcast(<span class="string">f&quot;<span class="subst">&#123;username&#125;</span> 加入了聊天！&quot;</span>.encode(), client_socket)  <span class="comment"># 传递 client_socket</span></span><br><span class="line"></span><br><span class="line">        thread = threading.Thread(target=handle_client, args=(client_socket,))</span><br><span class="line">        thread.start()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    start_server()</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="TCP客户端：-1"><a href="#TCP客户端：-1" class="headerlink" title="TCP客户端："></a>TCP客户端：</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">receive_messages</span>(<span class="params">client_socket</span>):</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            message = client_socket.recv(<span class="number">1024</span>)</span><br><span class="line">            <span class="keyword">if</span> message:</span><br><span class="line">                <span class="built_in">print</span>(message.decode())</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;连接到服务器失败。&quot;</span>)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">start_client</span>():</span><br><span class="line">    client_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line">    client_socket.connect((<span class="string">&#x27;localhost&#x27;</span>, <span class="number">12345</span>))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 输入用户名</span></span><br><span class="line">    username = <span class="built_in">input</span>(<span class="string">&quot;请输入用户名：&quot;</span>)</span><br><span class="line">    client_socket.send(username.encode())</span><br><span class="line"></span><br><span class="line">    thread = threading.Thread(target=receive_messages, args=(client_socket,))</span><br><span class="line">    thread.start()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        message = <span class="built_in">input</span>()</span><br><span class="line">        <span class="keyword">if</span> message.lower() == <span class="string">&#x27;exit&#x27;</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        client_socket.send(<span class="string">f&quot;<span class="subst">&#123;username&#125;</span>: <span class="subst">&#123;message&#125;</span>&quot;</span>.encode())</span><br><span class="line"></span><br><span class="line">    client_socket.close()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    start_client()</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h2 id="Vlan"><a href="#Vlan" class="headerlink" title="Vlan"></a>Vlan</h2><h3 id="1-什么是-VLAN？"><a href="#1-什么是-VLAN？" class="headerlink" title="1. 什么是 VLAN？"></a>1. 什么是 VLAN？</h3><ul>
<li>VLAN（虚拟局域网）是通过交换机对物理网络进行逻辑划分的技术。</li>
<li>它将一个物理局域网分割成多个广播域，实现不同部门或业务之间的隔离。</li>
<li>目的：减少广播风暴、增强安全性和简化管理。</li>
</ul>
<hr>
<h3 id="2-什么是-VXLAN？"><a href="#2-什么是-VXLAN？" class="headerlink" title="2. 什么是 VXLAN？"></a>2. 什么是 VXLAN？</h3><ul>
<li>VXLAN（虚拟扩展局域网）是一种覆盖网络技术，用于跨数据中心或大规模云环境扩展 VLAN。</li>
<li>通过在 UDP 封装中传输二层帧，实现不同物理网络间的二层连接。</li>
<li>解决传统 VLAN 数量限制（4096）的问题，支持更大规模虚拟网络。</li>
</ul>
<hr>
<h3 id="3-学-VLAN-前需要了解的基本概念"><a href="#3-学-VLAN-前需要了解的基本概念" class="headerlink" title="3. 学 VLAN 前需要了解的基本概念"></a>3. 学 VLAN 前需要了解的基本概念</h3><ul>
<li>交换机工作在 OSI 模型的第二层（数据链路层），通过 MAC 地址转发数据。</li>
<li>VLAN 是通过交换机划分逻辑网络，基于端口或标签（802.1Q）区分。</li>
<li>了解广播域、MAC 表、三层设备和路由概念。</li>
</ul>
<hr>
<h3 id="4-Ping-用的是-ICMP-协议吗？"><a href="#4-Ping-用的是-ICMP-协议吗？" class="headerlink" title="4. Ping 用的是 ICMP 协议吗？"></a>4. Ping 用的是 ICMP 协议吗？</h3><ul>
<li>是的，ping 使用的是 ICMP 协议，用于网络连通性测试。</li>
</ul>
<hr>
<h3 id="5-是否可以通过修改自己的-VLAN-ID-访问其他-VLAN？"><a href="#5-是否可以通过修改自己的-VLAN-ID-访问其他-VLAN？" class="headerlink" title="5. 是否可以通过修改自己的 VLAN ID 访问其他 VLAN？"></a>5. 是否可以通过修改自己的 VLAN ID 访问其他 VLAN？</h3><ul>
<li>不能随意修改 VLAN ID 来访问其他 VLAN。</li>
<li>不同 VLAN 之间通信需要三层设备（路由器或三层交换机）进行路由转发。</li>
</ul>
<hr>
<h3 id="6-为什么不同-VLAN-之间通信需要三层设备？"><a href="#6-为什么不同-VLAN-之间通信需要三层设备？" class="headerlink" title="6. 为什么不同 VLAN 之间通信需要三层设备？"></a>6. 为什么不同 VLAN 之间通信需要三层设备？</h3><ul>
<li>VLAN 在二层（数据链路层）形成隔离的广播域，数据包无法跨 VLAN 直接传递。</li>
<li>三层设备（路由器或三层交换机）根据 IP 层地址做路由，转发不同 VLAN 之间的数据。</li>
</ul>
<hr>
<h3 id="7-数据链路层和其它层的复习"><a href="#7-数据链路层和其它层的复习" class="headerlink" title="7. 数据链路层和其它层的复习"></a>7. 数据链路层和其它层的复习</h3><ul>
<li>OSI 模型包括七层：物理层、数据链路层、网络层、传输层、会话层、表示层、应用层。</li>
<li>交换机工作在数据链路层，通过 MAC 地址转发。</li>
<li>路由器工作在网络层，通过 IP 地址转发。</li>
<li>VLAN 隔离广播域属于数据链路层行为。</li>
</ul>
<hr>
<h3 id="8-VLAN-发包和收包的示例"><a href="#8-VLAN-发包和收包的示例" class="headerlink" title="8. VLAN 发包和收包的示例"></a>8. VLAN 发包和收包的示例</h3><ul>
<li>主机 A 在 VLAN 10 发送数据包给同 VLAN 的主机 B，数据包直接通过交换机转发。</li>
<li>主机 A 在 VLAN 10 发送数据包给 VLAN 20 的主机 C，必须经过三层设备路由转发。</li>
</ul>
<hr>
<h3 id="9-三层交换机的概念和其他层3"><a href="#9-三层交换机的概念和其他层3" class="headerlink" title="9. 三层交换机的概念和其他层3"></a>9. 三层交换机的概念和其他层3</h3><ul>
<li>三层交换机结合了交换机（二层）和路由器（三层）的功能。</li>
<li>支持在交换机上做 VLAN 间路由，提高转发效率。</li>
<li>OSI 层中还有物理层、传输层等，但三层交换机主要关注二层和三层。</li>
</ul>
<hr>
<h3 id="10-三层交换机的出现是否为了解决-VLAN-互访？"><a href="#10-三层交换机的出现是否为了解决-VLAN-互访？" class="headerlink" title="10. 三层交换机的出现是否为了解决 VLAN 互访？"></a>10. 三层交换机的出现是否为了解决 VLAN 互访？</h3><ul>
<li>是的，三层交换机让 VLAN 之间能够高效通信，解决了 VLAN 隔离带来的互访问题。</li>
</ul>
<hr>
<h3 id="11-为什么还要划分-VLAN，而不是把所有设备放一块？"><a href="#11-为什么还要划分-VLAN，而不是把所有设备放一块？" class="headerlink" title="11. 为什么还要划分 VLAN，而不是把所有设备放一块？"></a>11. 为什么还要划分 VLAN，而不是把所有设备放一块？</h3><ul>
<li>VLAN 划分基于实际业务和管理需求：<ul>
<li>减少广播域大小，提高性能；</li>
<li>提高网络安全，防止未经授权访问；</li>
<li>简化网络管理和故障定位；</li>
<li>满足合规要求和数据隔离需求。</li>
</ul>
</li>
</ul>
<hr>
<h3 id="12-三层交换机是否有权限划分？研发部访问财务部怎么办？"><a href="#12-三层交换机是否有权限划分？研发部访问财务部怎么办？" class="headerlink" title="12. 三层交换机是否有权限划分？研发部访问财务部怎么办？"></a>12. 三层交换机是否有权限划分？研发部访问财务部怎么办？</h3><ul>
<li>三层交换机支持通过 ACL（访问控制列表）实现细粒度访问控制。</li>
<li>可以配置允许研发 VLAN 访问财务 VLAN 的特定资源，限制其他访问。</li>
<li>三层交换机同时保证 VLAN 隔离和灵活访问。</li>
</ul>
<hr>
<p>关于 VMware 的 NAT 网络实现，以及它是否基于 VLAN，给你做个简洁的解释：</p>
<hr>
<h3 id="13-VMware-NAT-网络是如何实现的？"><a href="#13-VMware-NAT-网络是如何实现的？" class="headerlink" title="13. VMware NAT 网络是如何实现的？"></a>13. VMware NAT 网络是如何实现的？</h3><ul>
<li><strong>VMware NAT（网络地址转换）网络</strong>，是指虚拟机通过 VMware 提供的 NAT 服务，使用主机（宿主机）的 IP 地址对外通信。</li>
<li>VMware 在宿主机上创建一个虚拟的 <strong>NAT 网关</strong>（通常是虚拟的网络适配器 + NAT 服务进程），充当虚拟机和外部网络（如互联网）之间的路由器和地址转换器。</li>
<li>虚拟机配置在一个私有子网中（通常是 192.168.x.x），它们的流量先发给这个 NAT 网关，网关用宿主机的 IP 和端口进行地址转换，实现虚拟机访问外网。</li>
</ul>
<h4 id="VMware-NAT-网络和-VLAN-关系？"><a href="#VMware-NAT-网络和-VLAN-关系？" class="headerlink" title="VMware NAT 网络和 VLAN 关系？"></a>VMware NAT 网络和 VLAN 关系？</h4><ul>
<li>VMware 的 NAT 网络本质是 <strong>基于虚拟子网和虚拟路由的实现</strong>，而不是直接基于 VLAN 技术。</li>
<li>虚拟机之间通过 VMware 虚拟交换机（VMware Virtual Switch）连接，这些虚拟交换机有不同模式：桥接（Bridged）、NAT、仅主机（Host-only）。</li>
<li>NAT 模式下虚拟机都在同一个虚拟私有网络中，虚拟交换机本身不会使用 VLAN 标签来隔离流量。</li>
<li><strong>如果需要划分 VLAN，可以在虚拟交换机或物理交换机层面进行 VLAN 配置，但 VMware NAT 模式默认不涉及 VLAN 标签。</strong></li>
</ul>
<hr>
<h4 id="简单总结"><a href="#简单总结" class="headerlink" title="简单总结"></a>简单总结</h4><table>
<thead>
<tr>
<th>项目</th>
<th>VMware NAT 网络</th>
<th>VLAN</th>
</tr>
</thead>
<tbody><tr>
<td>实现方式</td>
<td>私有虚拟子网 + NAT 网关</td>
<td>二层网络虚拟化，基于交换机端口或标签隔离</td>
</tr>
<tr>
<td>作用</td>
<td>让虚拟机共享宿主机公网 IP 访问外网</td>
<td>网络隔离，安全和广播域划分</td>
</tr>
<tr>
<td>是否必须使用 VLAN</td>
<td>否</td>
<td>是</td>
</tr>
</tbody></table>
<hr>
<h4 id="如果你想用-VLAN-在-VMware-环境里做更细粒度的网络隔离："><a href="#如果你想用-VLAN-在-VMware-环境里做更细粒度的网络隔离：" class="headerlink" title="如果你想用 VLAN 在 VMware 环境里做更细粒度的网络隔离："></a>如果你想用 VLAN 在 VMware 环境里做更细粒度的网络隔离：</h4><ul>
<li>可以在 <strong>虚拟交换机（vSwitch）上配置 VLAN ID</strong>，然后给虚拟机的网卡指定 VLAN 标签。</li>
<li>物理交换机要支持并配置相应 VLAN。</li>
<li>这样虚拟机之间流量就可以基于 VLAN 隔离，和物理网络 VLAN 互通或隔离。</li>
</ul>
]]></content>
      <categories>
        <category>软硬件技术</category>
      </categories>
      <tags>
        <tag>笔记</tag>
        <tag>计算机网络</tag>
      </tags>
  </entry>
  <entry>
    <title>高德API的使用</title>
    <url>/2024/09/13/%E9%AB%98%E5%BE%B7API%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h1 id="1-获取当地天气等数据（基于web-api）"><a href="#1-获取当地天气等数据（基于web-api）" class="headerlink" title="1. 获取当地天气等数据（基于web api）"></a>1. 获取当地天气等数据（基于web api）</h1><ul>
<li><p><strong>实现方法</strong></p>
<p>  ​	尝试使用现有的api，例如高德。</p>
</li>
</ul>
<h4 id="高德web-api的使用"><a href="#高德web-api的使用" class="headerlink" title="高德web api的使用"></a>高德web api的使用</h4><blockquote>
<ol>
<li>打开并注册<a href="https://lbs.amap.com/">高德开放平台</a></li>
<li>进入<a href="https://console.amap.com/dev/key/app">高德开发平台的控制台</a></li>
<li>创建<strong>web服务</strong>应用并获取 API Key</li>
</ol>
</blockquote>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line">https://restapi.amap.com/v3/weather/weatherInfo?city=110101&amp;key=&lt;用户key&gt;</span><br></pre></td></tr></table></figure>

<ol>
<li><p>参数的选择</p>
<table>
<thead>
<tr>
<th><strong>参数名</strong></th>
<th><strong>含义</strong></th>
<th><strong>规则说明</strong></th>
<th><strong>是否必须</strong></th>
<th><strong>缺省值</strong></th>
</tr>
</thead>
<tbody><tr>
<td>key</td>
<td>请求服务权限标识</td>
<td>用户在高德地图官网 <a href="https://lbs.amap.com/dev/">申请 web 服务 API 类型 KEY</a></td>
<td>必填</td>
<td>无</td>
</tr>
<tr>
<td>city</td>
<td>城市编码</td>
<td>输入城市的 adcode，adcode 信息可参考 <a href="https://lbs.amap.com/api/webservice/download">城市编码表</a></td>
<td>必填</td>
<td>无</td>
</tr>
<tr>
<td>extensions</td>
<td>气象类型</td>
<td>可选值：base&#x2F;allbase:返回实况天气all:返回预报天气</td>
<td>可选</td>
<td>无</td>
</tr>
<tr>
<td>output</td>
<td>返回格式</td>
<td>可选值：JSON,XML</td>
<td>可选</td>
<td>JSON</td>
</tr>
</tbody></table>
</li>
<li><p>返回案例结果，浦东新区为案例</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;status&quot;</span><span class="punctuation">:</span> <span class="string">&quot;1&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;count&quot;</span><span class="punctuation">:</span> <span class="string">&quot;1&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;info&quot;</span><span class="punctuation">:</span> <span class="string">&quot;OK&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;infocode&quot;</span><span class="punctuation">:</span> <span class="string">&quot;10000&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;lives&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;province&quot;</span><span class="punctuation">:</span> <span class="string">&quot;上海&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;city&quot;</span><span class="punctuation">:</span> <span class="string">&quot;浦东新区&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;adcode&quot;</span><span class="punctuation">:</span> <span class="string">&quot;310115&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;weather&quot;</span><span class="punctuation">:</span> <span class="string">&quot;阴&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;temperature&quot;</span><span class="punctuation">:</span> <span class="string">&quot;19&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;winddirection&quot;</span><span class="punctuation">:</span> <span class="string">&quot;西北&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;windpower&quot;</span><span class="punctuation">:</span> <span class="string">&quot;≤3&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;humidity&quot;</span><span class="punctuation">:</span> <span class="string">&quot;77&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;reporttime&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2024-10-20 15:33:12&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;temperature_float&quot;</span><span class="punctuation">:</span> <span class="string">&quot;19.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;humidity_float&quot;</span><span class="punctuation">:</span> <span class="string">&quot;77.0&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></li>
</ol>
<h4 id="前端展示"><a href="#前端展示" class="headerlink" title="前端展示"></a>前端展示</h4><p><img src="/../images/iotWaterPump/v2/2.png" alt="v2 show GD api"></p>
<p><strong>代码</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    </span><br><span class="line">    &lt;div class=&quot;background&quot; &gt;</span><br><span class="line">        &lt;el-message v-if=&quot;message&quot; :type=&quot;messageType&quot; class=&quot;single-line-message&quot; &gt;&#123;&#123; message &#125;&#125;&lt;/el-message&gt;</span><br><span class="line">      &lt;div class=&quot;card-container&quot;&gt;</span><br><span class="line">        &lt;div class=&quot;card&quot; v-if=&quot;weatherData&quot;&gt;</span><br><span class="line">          &lt;el-card&gt;</span><br><span class="line">            &lt;h3&gt;Weather Information&lt;/h3&gt;</span><br><span class="line">            &lt;el-divider&gt;&lt;/el-divider&gt;</span><br><span class="line">            &lt;table&gt;</span><br><span class="line">              &lt;tr&gt;</span><br><span class="line">                &lt;td&gt;&lt;strong&gt;City:&lt;/strong&gt;&lt;/td&gt;</span><br><span class="line">                &lt;td&gt;&#123;&#123; weatherData.city &#125;&#125;&lt;/td&gt;</span><br><span class="line">              &lt;/tr&gt;</span><br><span class="line">              &lt;tr&gt;</span><br><span class="line">                &lt;td&gt;&lt;strong&gt;Weather:&lt;/strong&gt;&lt;/td&gt;</span><br><span class="line">                &lt;td&gt;&#123;&#123; weatherData.weather &#125;&#125;&lt;/td&gt;</span><br><span class="line">              &lt;/tr&gt;</span><br><span class="line">              &lt;tr&gt;</span><br><span class="line">                &lt;td&gt;&lt;strong&gt;Temperature:&lt;/strong&gt;&lt;/td&gt;</span><br><span class="line">                &lt;td :style=&quot;&#123; color: weatherData.temperature &gt; 25 ? &#x27;red&#x27; : &#x27;blue&#x27; &#125;&quot;&gt;</span><br><span class="line">                  &#123;&#123; weatherData.temperature &#125;&#125;°C</span><br><span class="line">                &lt;/td&gt;</span><br><span class="line">              &lt;/tr&gt;</span><br><span class="line">              &lt;tr&gt;</span><br><span class="line">                &lt;td&gt;&lt;strong&gt;Wind Direction:&lt;/strong&gt;&lt;/td&gt;</span><br><span class="line">                &lt;td&gt;&#123;&#123; weatherData.winddirection &#125;&#125;&lt;/td&gt;</span><br><span class="line">              &lt;/tr&gt;</span><br><span class="line">              &lt;tr&gt;</span><br><span class="line">                &lt;td&gt;&lt;strong&gt;Wind Power:&lt;/strong&gt;&lt;/td&gt;</span><br><span class="line">                &lt;td&gt;&#123;&#123; weatherData.windpower &#125;&#125;&lt;/td&gt;</span><br><span class="line">              &lt;/tr&gt;</span><br><span class="line">              &lt;tr&gt;</span><br><span class="line">                &lt;td&gt;&lt;strong&gt;Humidity:&lt;/strong&gt;&lt;/td&gt;</span><br><span class="line">                &lt;td&gt;&#123;&#123; weatherData.humidity &#125;&#125;%&lt;/td&gt;</span><br><span class="line">              &lt;/tr&gt;</span><br><span class="line">              &lt;tr&gt;</span><br><span class="line">                &lt;td&gt;&lt;strong&gt;Report Time:&lt;/strong&gt;&lt;/td&gt;</span><br><span class="line">                &lt;td&gt;&#123;&#123; weatherData.reporttime &#125;&#125;&lt;/td&gt;</span><br><span class="line">              &lt;/tr&gt;</span><br><span class="line">              &lt;tr&gt;</span><br><span class="line">                &lt;td&gt;&lt;strong&gt;Report Time:&lt;/strong&gt;&lt;/td&gt;</span><br><span class="line">                &lt;td&gt;&#123;&#123; weatherData.forcast &#125;&#125;&lt;/td&gt;</span><br><span class="line">              &lt;/tr&gt;</span><br><span class="line">            &lt;/table&gt;</span><br><span class="line">          &lt;/el-card&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &lt;/template&gt;</span><br><span class="line">  </span><br><span class="line">  &lt;script&gt;</span><br><span class="line">  import axios from &#x27;axios&#x27;;</span><br><span class="line">  import &#123; ref, onMounted &#125; from &#x27;vue&#x27;;</span><br><span class="line">  </span><br><span class="line">  export default &#123;</span><br><span class="line">    setup() &#123;</span><br><span class="line">      const message = ref(&#x27;&#x27;);</span><br><span class="line">      const messageType = ref(&#x27;success&#x27;);</span><br><span class="line">      const weatherData = ref(null);</span><br><span class="line">  </span><br><span class="line">      const getData = async () =&gt; &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">          const response = await axios.get(&#x27;https://restapi.amap.com/v3/weather/weatherInfo&#x27;, &#123;</span><br><span class="line">            params: &#123;</span><br><span class="line">              city: &#x27;310115&#x27;,</span><br><span class="line">              key: &#x27;regenissb rengenCanDoTHis&#x27; //替换</span><br><span class="line">            &#125;,</span><br><span class="line">          &#125;);</span><br><span class="line">  </span><br><span class="line">          if (response.data.status === &#x27;1&#x27; &amp;&amp; response.data.lives.length &gt; 0) &#123;</span><br><span class="line">            weatherData.value = response.data.lives[0];</span><br><span class="line">            message.value = &#x27;Data fetched successfully!&#x27;;</span><br><span class="line">            messageType.value = &#x27;success&#x27;;</span><br><span class="line">          &#125; else &#123;</span><br><span class="line">            message.value = &#x27;Failed to fetch data.&#x27;;</span><br><span class="line">            messageType.value = &#x27;error&#x27;;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125; catch (error) &#123;</span><br><span class="line">          console.error(&#x27;Error fetching data:&#x27;, error);</span><br><span class="line">          message.value = &#x27;Operation failed, please try again!&#x27;;</span><br><span class="line">          messageType.value = &#x27;error&#x27;;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;;</span><br><span class="line">  </span><br><span class="line">      onMounted(() =&gt; &#123;</span><br><span class="line">        getData();</span><br><span class="line">      &#125;);</span><br><span class="line">  </span><br><span class="line">      return &#123;</span><br><span class="line">        getData,</span><br><span class="line">        message,</span><br><span class="line">        messageType,</span><br><span class="line">        weatherData</span><br><span class="line">      &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">  &lt;/script&gt;</span><br><span class="line">  </span><br><span class="line">  &lt;style scoped&gt;</span><br><span class="line">.background &#123;</span><br><span class="line">  width: 100%;</span><br><span class="line">  height: 100%;</span><br><span class="line">&#125;</span><br><span class="line">.card-container &#123;</span><br><span class="line">  display: flex;</span><br><span class="line">  flex-wrap: wrap;</span><br><span class="line">  padding: 10px;</span><br><span class="line">  gap: 10px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.card &#123;</span><br><span class="line">  width: 100%;</span><br><span class="line">  max-width: 1000px;</span><br><span class="line">  margin: 20px;</span><br><span class="line">  border-radius: 10px;</span><br><span class="line">  background-color: rgba(255, 255, 255, 0.8);</span><br><span class="line">  display: flex;</span><br><span class="line">  flex-direction: column;</span><br><span class="line">  justify-content: center;</span><br><span class="line">  align-items: center;</span><br><span class="line">  padding: 20px;</span><br><span class="line">  gap: 20px;</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line">  table &#123;</span><br><span class="line">    width: 100%;</span><br><span class="line">    border-collapse: collapse;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  td &#123;</span><br><span class="line">    padding: 10px;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  h3 &#123;</span><br><span class="line">    margin-bottom: 10px;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  .single-line-message &#123;</span><br><span class="line">    color: aqua;</span><br><span class="line">    white-space: nowrap;</span><br><span class="line">  &#125;</span><br><span class="line">  &lt;/style&gt;</span><br><span class="line">  </span><br></pre></td></tr></table></figure>

<ol>
<li><h1 id="获取当地天气等数据（基于js-api）"><a href="#获取当地天气等数据（基于js-api）" class="headerlink" title="获取当地天气等数据（基于js api）"></a>获取当地天气等数据（基于js api）</h1></li>
</ol>
<p><img src="/../images/iotWaterPump/11.png" alt="v2 show GD api"></p>
<p>基于VUE3的代码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;container&quot;&gt;</span><br><span class="line">    &lt;!-- 地图部分 --&gt;</span><br><span class="line">    &lt;div id=&quot;map-container&quot;&gt;&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- 天气数据卡片 --&gt;</span><br><span class="line">    &lt;div class=&quot;cards&quot;&gt;</span><br><span class="line">      &lt;!-- 当前天气 --&gt;</span><br><span class="line">      &lt;div class=&quot;card&quot;&gt;</span><br><span class="line">        &lt;h3&gt;当前天气&lt;/h3&gt;</span><br><span class="line">        &lt;p class=&quot;city&quot;&gt;&#123;&#123; state.city &#125;&#125;&lt;/p&gt;</span><br><span class="line">        &lt;p class=&quot;weather&quot;&gt;&#123;&#123; state.weather &#125;&#125;&lt;/p&gt;</span><br><span class="line">        &lt;h2 class=&quot;temp&quot;&gt;</span><br><span class="line">          &lt;em&gt;&#123;&#123; state.temperature &#125;&#125;℃&lt;/em&gt;</span><br><span class="line">        &lt;/h2&gt;</span><br><span class="line">        &lt;div class=&quot;detail&quot;&gt;</span><br><span class="line">          &lt;span&gt;风力：&#123;&#123; state.windPower &#125;&#125;&lt;/span&gt; |</span><br><span class="line">          &lt;span&gt;风向：&#123;&#123; state.windDir &#125;&#125;&lt;/span&gt; |</span><br><span class="line">          &lt;span&gt;空气湿度：&#123;&#123; state.humidity &#125;&#125;%&lt;/span&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">      &lt;!-- 天气预报 --&gt;</span><br><span class="line">      &lt;div class=&quot;card&quot; v-if=&quot;forecasts.length&quot;&gt;</span><br><span class="line">        &lt;h3&gt;天气预报&lt;/h3&gt;</span><br><span class="line">        &lt;div</span><br><span class="line">          class=&quot;group&quot;</span><br><span class="line">          v-for=&quot;(forecast, index) in forecasts.slice(0, forecasts.length - 1)&quot; </span><br><span class="line">          :key=&quot;index&quot;</span><br><span class="line">        &gt;</span><br><span class="line">          &lt;div&gt;&#123;&#123; index === 0 ? &quot;今天&quot; : index === 1 ? &quot;明天&quot; : &quot;后天&quot; &#125;&#125;：&lt;/div&gt;</span><br><span class="line">          &lt;span class=&quot;tm&quot;&gt;</span><br><span class="line">            白天：&#123;&#123; forecast.dayTemp &#125;&#125;℃ &#123;&#123; forecast.dayWeather &#125;&#125;</span><br><span class="line">            &#123;&#123; forecast.dayWindDir &#125;&#125; &#123;&#123; forecast.dayWindPower &#125;&#125;</span><br><span class="line">          &lt;/span&gt;</span><br><span class="line">          &lt;span class=&quot;tm&quot;&gt;</span><br><span class="line">            夜间：&#123;&#123; forecast.nightTemp &#125;&#125;℃ &#123;&#123; forecast.nightWeather &#125;&#125;</span><br><span class="line">            &#123;&#123; forecast.nightWindDir &#125;&#125; &#123;&#123; forecast.nightWindPower &#125;&#125;</span><br><span class="line">          &lt;/span&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import &#123; ref, onMounted, onUnmounted &#125; from &quot;vue&quot;;</span><br><span class="line">import AMapLoader from &quot;@amap/amap-jsapi-loader&quot;;</span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      now: new Date().toLocaleString(),</span><br><span class="line">      state: &#123;</span><br><span class="line">        city: &quot;上海市&quot;,</span><br><span class="line">        weather: &quot;&quot;,</span><br><span class="line">        temperature: &quot;&quot;,</span><br><span class="line">        windPower: &quot;&quot;,</span><br><span class="line">        windDir: &quot;&quot;,</span><br><span class="line">        humidity: &quot;&quot;,</span><br><span class="line">      &#125;,</span><br><span class="line">      forecasts: [],</span><br><span class="line">      map: null,</span><br><span class="line">      AMap: null,</span><br><span class="line">      cityList: [&quot;杭州市&quot;, &quot;北京市&quot;, &quot;上海市&quot;, &quot;广州市&quot;], // 城市列表</span><br><span class="line">      currentCityIndex: 0, // 当前选择的城市索引</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    // 初始化地图</span><br><span class="line">    initMap() &#123;</span><br><span class="line">      AMapLoader.load(&#123;</span><br><span class="line">        key: &quot;&quot;, // 替换为你的高德地图 API Key</span><br><span class="line">        version: &quot;2.0&quot;,</span><br><span class="line">        plugins: [&quot;AMap.Scale&quot;, &quot;AMap.Weather&quot;, &quot;AMap.Geocoder&quot;], // 加载必要插件</span><br><span class="line">      &#125;)</span><br><span class="line">        .then((AMap) =&gt; &#123;</span><br><span class="line">          this.AMap = AMap;</span><br><span class="line">          this.map = new AMap.Map(&quot;map-container&quot;, &#123;</span><br><span class="line">            mapStyle: &quot;amap://styles/fresh&quot;,</span><br><span class="line">            zoom: 11,</span><br><span class="line">            center: [121.896964, 30.882957], // 初始中心点</span><br><span class="line">          &#125;);</span><br><span class="line">          this.map.addControl(new AMap.Scale()); // 添加比例尺组件</span><br><span class="line"></span><br><span class="line">          // 地图点击事件</span><br><span class="line">          this.map.on(&quot;click&quot;, (e) =&gt; &#123;</span><br><span class="line">            const lnglat = e.lnglat; // 获取点击经纬度</span><br><span class="line">            this.getCityName(lnglat)</span><br><span class="line">              .then((city) =&gt; &#123;</span><br><span class="line">                this.state.city = city;</span><br><span class="line">                this.getLiveWeather(city);</span><br><span class="line">                this.getForecastWeather(city);</span><br><span class="line">              &#125;)</span><br><span class="line">              .catch((err) =&gt; console.error(&quot;获取城市名称失败&quot;, err));</span><br><span class="line">          &#125;);</span><br><span class="line"></span><br><span class="line">          // 初始天气查询</span><br><span class="line">          this.getLiveWeather(this.state.city);</span><br><span class="line">          this.getForecastWeather(this.state.city);</span><br><span class="line">        &#125;)</span><br><span class="line">        .catch((error) =&gt; &#123;</span><br><span class="line">          console.error(&quot;地图加载失败:&quot;, error);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    // 获取实时天气</span><br><span class="line">    getLiveWeather(city) &#123;</span><br><span class="line">      const weather = new this.AMap.Weather();</span><br><span class="line">      weather.getLive(city, (err, data) =&gt; &#123;</span><br><span class="line">        if (!err) &#123;</span><br><span class="line">          this.state.weather = data.weather;</span><br><span class="line">          this.state.temperature = data.temperature;</span><br><span class="line">          this.state.windPower = data.windPower;</span><br><span class="line">          this.state.windDir = data.windDirection;</span><br><span class="line">          this.state.humidity = data.humidity;</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">          console.error(&quot;实时天气获取失败:&quot;, err);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    // 获取天气预报</span><br><span class="line">    getForecastWeather(city) &#123;</span><br><span class="line">      const weather = new this.AMap.Weather();</span><br><span class="line">      weather.getForecast(city, (err, data) =&gt; &#123;</span><br><span class="line">        if (!err) &#123;</span><br><span class="line">          this.forecasts = data.forecasts;</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">          console.error(&quot;天气预报获取失败:&quot;, err);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    // 获取城市名称</span><br><span class="line">    getCityName(lnglat) &#123;</span><br><span class="line">      return new Promise((resolve, reject) =&gt; &#123;</span><br><span class="line">        const geocoder = new this.AMap.Geocoder();</span><br><span class="line">        geocoder.getAddress(lnglat, (status, result) =&gt; &#123;</span><br><span class="line">          if (status === &quot;complete&quot; &amp;&amp; result.regeocode) &#123;</span><br><span class="line">            const city = result.regeocode.addressComponent.city || result.regeocode.addressComponent.province;</span><br><span class="line">            resolve(city);</span><br><span class="line">          &#125; else &#123;</span><br><span class="line">            reject(&quot;无法获取地址&quot;);</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    // 切换城市</span><br><span class="line">    toggleCity() &#123;</span><br><span class="line">      this.currentCityIndex = (this.currentCityIndex + 1) % this.cityList.length;</span><br><span class="line">      this.state.city = this.cityList[this.currentCityIndex];</span><br><span class="line">      this.getLiveWeather(this.state.city);</span><br><span class="line">      this.getForecastWeather(this.state.city);</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  mounted() &#123;</span><br><span class="line">    window._AMapSecurityConfig = &#123;</span><br><span class="line">      securityJsCode: &quot;&quot;, // 替换为你的高德开发者平台的安全密钥</span><br><span class="line">    &#125;;</span><br><span class="line">    this.initMap();</span><br><span class="line">    // 更新时间</span><br><span class="line">    setInterval(() =&gt; &#123;</span><br><span class="line">      this.now = new Date().toLocaleString();</span><br><span class="line">    &#125;, 1000);</span><br><span class="line">  &#125;,</span><br><span class="line">  beforeUnmount() &#123;</span><br><span class="line">    this.map?.destroy();</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">.container &#123;</span><br><span class="line">  font-family: Arial, sans-serif;</span><br><span class="line">  display: flex;</span><br><span class="line">  flex-direction: column; /* 垂直排列，确保地图和卡片在独立行 */</span><br><span class="line">  gap: 20px;</span><br><span class="line">  padding: 20px;</span><br><span class="line">  background-color: #f5f8fa; /* 背景浅灰蓝，柔和 */</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#map-container &#123;</span><br><span class="line">  width: 100%;</span><br><span class="line">  height: 400px;</span><br><span class="line">  border: 1px solid #ccc;</span><br><span class="line">  border-radius: 8px;</span><br><span class="line">  box-shadow: 0 4px 10px rgba(0, 0, 0, 0.15);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.cards &#123;</span><br><span class="line">  display: flex;</span><br><span class="line">  flex-wrap: wrap; /* 当宽度不足时换行 */</span><br><span class="line">  gap: 20px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.card &#123;</span><br><span class="line">  flex: 1;</span><br><span class="line">  min-width: 300px;</span><br><span class="line">  padding: 20px;</span><br><span class="line">  border: 1px solid #0078d4; /* 边框采用主题色 */</span><br><span class="line">  border-radius: 8px;</span><br><span class="line">  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);</span><br><span class="line">  background-color: rgba(0, 120, 212, 0.1); /* 半透明蓝色背景 */</span><br><span class="line">  color: #333; /* 主要文字颜色 */</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.card h3 &#123;</span><br><span class="line">  margin-bottom: 10px;</span><br><span class="line">  font-size: 1.6rem;</span><br><span class="line">  color: #0078d4; /* 标题采用主题色 */</span><br><span class="line">  text-align: center;</span><br><span class="line">  font-weight: bold;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.city &#123;</span><br><span class="line">  font-size: 1.3rem;</span><br><span class="line">  font-weight: bold;</span><br><span class="line">  margin-bottom: 15px;</span><br><span class="line">  text-align: center;</span><br><span class="line">  color: #005ea6; /* 城市名称颜色 */</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.temp em &#123;</span><br><span class="line">  font-size: 3rem;</span><br><span class="line">  color: #ff5722; /* 温度醒目，橙色 */</span><br><span class="line">  font-weight: bold;</span><br><span class="line">  display: block;</span><br><span class="line">  text-align: center;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.weather &#123;</span><br><span class="line">  text-align: center;</span><br><span class="line">  font-size: 1.4rem;</span><br><span class="line">  font-weight: bold;</span><br><span class="line">  color: #333;</span><br><span class="line">  margin-bottom: 10px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.detail &#123;</span><br><span class="line">  font-size: 1rem;</span><br><span class="line">  margin-top: 15px;</span><br><span class="line">  color: #005ea6; /* 细节文字主题色 */</span><br><span class="line">  text-align: center;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.detail span &#123;</span><br><span class="line">  display: inline-block;</span><br><span class="line">  margin: 0 10px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.tm &#123;</span><br><span class="line">  display: block;</span><br><span class="line">  margin-top: 10px;</span><br><span class="line">  font-size: 1.1rem;</span><br><span class="line">  color: #0078d4; /* 时间段天气颜色主题一致 */</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.group &#123;</span><br><span class="line">  margin-top: 10px;</span><br><span class="line">  color: #0078d4;</span><br><span class="line">  padding: 10px;</span><br><span class="line">  border-top: 1px solid rgba(0, 120, 212, 0.3);</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>软件技术</category>
      </categories>
      <tags>
        <tag>笔记</tag>
        <tag>javascript</tag>
        <tag>html</tag>
        <tag>Flask</tag>
        <tag>vue</tag>
        <tag>前端</tag>
      </tags>
  </entry>
  <entry>
    <title>随手记</title>
    <url>/2023/10/09/%E9%9A%8F%E6%89%8B%E8%AE%B0/</url>
    <content><![CDATA[<h1 id="困饿累睡不着"><a href="#困饿累睡不着" class="headerlink" title="困饿累睡不着"></a>困饿累睡不着</h1><p><img src="/../images/myPoems/1.jpg" alt="myPoems_1.jpg"></p>
<p>​	上课的时候随便乱写的&lt;3,没想到我还是这么中二</p>
<p>续集</p>
<p><img src="/../images/myPoems/2.jpg" alt="myPoems_1.jpg"></p>
]]></content>
      <categories>
        <category>生活</category>
      </categories>
      <tags>
        <tag>随手记</tag>
      </tags>
  </entry>
  <entry>
    <title>高级程序设计复习</title>
    <url>/2025/05/31/%E9%AB%98%E7%BA%A7%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E5%A4%8D%E4%B9%A0/</url>
    <content><![CDATA[<h1 id="第一章-Windows编程基础知识"><a href="#第一章-Windows编程基础知识" class="headerlink" title="第一章 Windows编程基础知识"></a>第一章 Windows编程基础知识</h1><ul>
<li><p>可视化开发系统集成了一系列系统可用资源和开发工具</p>
<ol>
<li>程序调试工具：包括源程序语法检查、可执行程序修改和运行监视等</li>
<li>资源管理器：包括图形化窗口及组成元素的多种对象的编辑器</li>
<li>系统函数库和系统函数开发工具</li>
<li>源程序编辑器和编译器</li>
<li>应用程序Help和Setup开发工具包</li>
<li>可选择并构成具体语句或源程序结构的例程库及Help</li>
</ol>
</li>
<li><p>Windows的程序设计语言</p>
<ul>
<li>都是“面向对象”的程序设计语言</li>
</ul>
<ol>
<li>VC</li>
<li>VB</li>
<li>VJ</li>
</ol>
<ul>
<li><p>对象是Windows的规范部件</p>
<ol>
<li>窗口</li>
<li>菜单</li>
<li>按钮</li>
<li>对话框</li>
<li>程序模块</li>
</ol>
</li>
<li><p>对象特征：具有规范形态和操作模式</p>
</li>
<li><p>编程方法</p>
<ol>
<li><p>传统编写法–&gt;API</p>
</li>
<li><p>交互式方法–&gt;MFC</p>
<blockquote>
<p>采用交互式方法时，可视化开发平台给出了许多选用的对象，程序员可选择所需对象并确定其属性，由此搭建起应用程序的“大框架”，并可根据需要进一步编写必要的细节代码段，最后构成完整的应用程序</p>
</blockquote>
</li>
</ol>
<ul>
<li><strong>API</strong><ul>
<li>为应用程序提供Windows系统特殊函数及数据结构</li>
<li>Win应用程序可以利用标准大量API函数调用系统功能</li>
<li>是Win系统与Win应用程序间的标准程序接口</li>
</ul>
</li>
<li><strong>API函数的功能</strong><ul>
<li>窗口管理函数实现窗口的创建、移动和修改功能</li>
<li>系统服务函数：实现与操作系统有关的多种功能</li>
<li>图形设备(GDI)函数：实现与设备无关的图形操作功能</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<p><strong>利用Windows API函数编写Windows应用程序必须首先了解以下内容：</strong></p>
<p>(1)窗口的概念</p>
<p>(2)事件驱动的概念</p>
<p>(3)句柄</p>
<p>(4)消息</p>
<h4 id="窗口"><a href="#窗口" class="headerlink" title="窗口"></a>窗口</h4><p>​	系统管理应用程序的基本单位，应用程序与用户之间交互的接口环境，Win应用程序基本的操作单元</p>
<p>​	一个应用程序的窗口一般包含下列成分：</p>
<ol>
<li>控制菜单框</li>
<li>下拉菜单</li>
<li>标题栏</li>
<li>工作区</li>
<li>窗口边界</li>
<li>最大化按钮</li>
<li>最小化按钮</li>
<li>垂直滚动条</li>
<li>水平滚动条</li>
</ol>
<p>​	编写一个Windows应用程序首先应创建一个或多个窗口，随后应用程序的运行过程即是窗口内部、窗口与窗口之间、窗口与系统之间进行数据处理与数据交换的过程。</p>
<h4 id="事件驱动"><a href="#事件驱动" class="headerlink" title="事件驱动"></a>事件驱动</h4><p>​	Windows程序设计是针对事件或消息的处理进行（消息是描述事件发生的信息(如按下鼠标或键盘)。Windows程序的执行顺序取决于事件发生的顺序，程序的执行顺序是由顺序产生的消息驱动的，但是消息的产生往往并不要求有次序之分。</p>
<p>​	事件驱动编程方法对于编写交互式程序很有用处，它避免了死板的操作模式</p>
<h4 id="句柄"><a href="#句柄" class="headerlink" title="句柄"></a>句柄</h4><p>​	句柄是PVOID型的数据一个4字节长的数值，用于标识应用程序中不同的对象和同类对象中不同的实例，应用程序通过句柄访问相应的对象信息。</p>
<blockquote>
<p>HWND			窗口句柄		<br>HDC		 	   设备环境句柄<br>HBITMAP	  	   位图句柄		<br>HCURSOR		     光标句柄<br>HICON			图标句柄		<br>HFONT			字体句柄<br>HMENU			菜单句柄		<br>HPEN			画笔句柄<br>HFILE			文件句柄		<br>HBRUSH   		画刷句柄		<br>HINSTANCE		当前实例句柄</p>
</blockquote>
<h4 id="消息"><a href="#消息" class="headerlink" title="消息"></a>消息</h4><p>​	Windows应用程序利用Windows消息(Message)与应用程序及系统进行信息交换。</p>
<p>消息：</p>
<ol>
<li>消息号：由事先定义好的消息名标识、</li>
<li>字参数(wParam) ：用于提供消息的附加信息</li>
<li>长字参数(lParam) ：用于提供消息的附加信息</li>
</ol>
<p>VC中存在几种系统定义的消息分类，不同的前缀符号经常用于消息宏识别消息附属的分类，系统定义的消息宏前缀如下：</p>
<blockquote>
<p>BM	表示按钮控制消息<br>CB	表示组合框控制消息<br>DM	表示默认下压式按钮控制消息<br>EM	表示编辑控制消息<br>LB	表示列表框控制消息<br>SBM	表示滚动条控制消息<br>WM	表示窗口消息</p>
</blockquote>
<p><strong>常用消息类型</strong></p>
<ul>
<li><strong>鼠标消息</strong>：<code>WM_LBUTTONDOWN</code>、<code>WM_RBUTTONDBLCLK</code>等。</li>
<li><strong>键盘消息</strong>：<code>WM_KEYDOWN</code>（虚拟键码）、<code>WM_CHAR</code>（ASCII码）。</li>
<li><strong>窗口生命周期消息</strong>：<code>WM_CREATE</code>（创建）、<code>WM_CLOSE</code>（关闭）、<code>WM_DESTROY</code>（销毁）、<code>WM_QUIT</code>（退出）。</li>
<li><strong>绘图消息</strong>：<code>WM_PAINT</code>（窗口需重绘时触发）</li>
</ul>
<h4 id="事件驱动程序设计"><a href="#事件驱动程序设计" class="headerlink" title="事件驱动程序设计"></a>事件驱动程序设计</h4><ul>
<li>与传统过程驱动的区别：<ul>
<li><strong>过程驱动</strong>：严格按代码顺序执行（如输入成绩→计算平均分）。</li>
<li><strong>事件驱动</strong>：由用户交互触发消息（如点击按钮后计算平均分）。</li>
</ul>
</li>
<li><strong>优势</strong>：灵活响应用户操作，适合交互式程序。</li>
</ul>
<h4 id="Windows应用程序结构"><a href="#Windows应用程序结构" class="headerlink" title="Windows应用程序结构"></a><strong>Windows应用程序结构</strong></h4><ol>
<li><p><strong>文件组成</strong></p>
<ul>
<li>C源文件、头文件、模块定义文件、资源描述文件、项目文件。</li>
</ul>
</li>
<li><p><strong>程序框架</strong></p>
<ul>
<li><p><strong>入口函数</strong>：<code>WinMain</code>（初始化、消息循环）。</p>
</li>
<li><p><strong>窗口函数</strong>：<code>WndProc</code>（处理消息的分支逻辑）。</p>
</li>
<li><p>  核心流程</p>
<p>  ：</p>
<ul>
<li><strong>初始化</strong>：注册窗口类（<code>RegisterClass</code>）、创建窗口（<code>CreateWindow</code>）、显示窗口（<code>ShowWindow</code>）。</li>
<li><strong>消息循环</strong>：<code>GetMessage</code>获取消息→<code>TranslateMessage</code>转换→<code>DispatchMessage</code>分发。</li>
<li><strong>退出</strong>：<code>WM_DESTROY</code>调用<code>PostQuitMessage(0)</code>结束循环。</li>
</ul>
</li>
</ul>
</li>
<li><p><strong>关键数据结构</strong></p>
<ul>
<li><code>WNDCLASSEX</code>：窗口类属性（图标、光标、背景等）。</li>
<li><code>POINT</code>&#x2F;<code>RECT</code>：坐标与矩形区域定义。</li>
</ul>
</li>
</ol>
<h1 id="第二章-Windows的图形设备接口及windows绘图"><a href="#第二章-Windows的图形设备接口及windows绘图" class="headerlink" title="第二章 Windows的图形设备接口及windows绘图"></a>第二章 Windows的图形设备接口及windows绘图</h1><h4 id="一、-GDI基础概念与设备环境-DC"><a href="#一、-GDI基础概念与设备环境-DC" class="headerlink" title="一、 GDI基础概念与设备环境(DC)"></a>一、 GDI基础概念与设备环境(DC)</h4><ol>
<li><p>GDI定义与目的：<br>◦   Windows GDI (Graphics Device Interface) 是为实现设备无关性图形设计的系统组件。</p>
<p>◦   设备无关性： 操作系统屏蔽硬件差异，开发者编程时无需关心具体硬件配置。</p>
</li>
<li><p>GDI作用：<br>◦   负责系统、用户&#x2F;绘图程序之间的信息交换。</p>
<p>◦   控制输出设备（显示器、打印机等）上的图形和文字显示。</p>
<p>◦   是Windows系统的核心组成部分。</p>
</li>
<li><p>设备环境(DC - Device Context)：<br>◦   本质： 设备描述表是设备环境属性的集合。</p>
<p>◦   角色： 是应用程序与物理输出设备之间的桥梁。</p>
<p>◦   功能： 为实现图形输出的设备无关性，GDI提供统一的DC。应用程序通过DC与设备连接，利用GDI函数和设备驱动程序进行绘图。</p>
<p>◦   关键点： 应用程序不能直接访问外设，必须通过DC。</p>
</li>
</ol>
<h4 id="二、-图形刷新"><a href="#二、-图形刷新" class="headerlink" title="二、 图形刷新"></a>二、 图形刷新</h4><ol>
<li><p>必要性： 绘图过程中必须处理窗口内容被覆盖或改变后的恢复问题。</p>
</li>
<li><p>刷新请求来源：<br>◦   窗口移动、大小调整。</p>
<p>◦   被其他窗口（如下拉菜单、对话框）覆盖后恢复。</p>
<p>◦   程序滚动窗口。</p>
<p>◦   光标&#x2F;图标穿越用户区（系统自动处理）。</p>
<p>◦   应用程序需要恢复被覆盖部分（如颜色选择框覆盖图形后）。</p>
</li>
<li><p>系统响应：<br>◦   当用户区需要刷新时，系统向应用程序消息队列发送 <code>WM_PAINT</code> 消息。</p>
<p>◦   被覆盖的区域称为无效区域(Invalid Region)。</p>
</li>
<li><p>刷新数据结构：<br>◦   Windows为每个窗口维护一个 <code>PAINTSTRUCT</code> 结构。</p>
<p>◦   关键成员：</p>
<pre><code>▪   `hdc`: 刷新用的设备环境句柄。

▪   `fErase`: 指示是否擦除无效矩形背景（通常为`TRUE`）。

▪   `rcPaint`: 一个 `RECT` 结构，定义了包围无效区域的最小矩形（无效矩形），包含左上角(`left`, `top`)和右下角(`right`, `bottom`)坐标。
</code></pre>
</li>
<li><p>有效刷新方法：<br>◦   记录事件： 刷新时重新执行导致绘图的事件。</p>
<p>◦   保存副本： 刷新时将保存的窗口内容副本拷贝回相应区域。</p>
<p>◦   重新绘制： 最常用。将图形绘制代码放在响应 <code>WM_PAINT</code> 消息的模块中，刷新时调用这些代码重绘图形。应用程序根据 <code>rcPaint</code> 标识的无效矩形进行优化绘制。</p>
</li>
</ol>
<h4 id="三、-获取设备环境-DC"><a href="#三、-获取设备环境-DC" class="headerlink" title="三、 获取设备环境(DC)"></a>三、 获取设备环境(DC)</h4><ol>
<li><p>响应 <code>WM_PAINT</code> 刷新：<br>◦   使用 <code>BeginPaint</code> 函数获取DC。</p>
<p>◦   函数原型：<code>hdc = BeginPaint(hwnd, &amp;ps);</code> (<code>ps</code> 是 <code>PAINTSTRUCT</code> 类型变量)。</p>
<p>◦   作用： 获取DC的同时，系统填充 <code>ps</code> 结构（特别是 <code>rcPaint</code>）标识无效区域。</p>
<p>◦   释放： 必须使用 <code>EndPaint(hwnd, &amp;ps)</code> 释放获取的DC。</p>
</li>
<li><p>非 <code>WM_PAINT</code> 驱动绘图：<br>◦   使用 <code>GetDC</code> 函数获取DC。</p>
<p>◦   函数原型：<code>hdc = GetDC(hwnd);</code></p>
<p>◦   释放： 必须使用 <code>ReleaseDC(hwnd, hdc)</code> 释放获取的DC。</p>
</li>
</ol>
<h4 id="四、-绘图工具与颜色"><a href="#四、-绘图工具与颜色" class="headerlink" title="四、 绘图工具与颜色"></a>四、 绘图工具与颜色</h4><ol>
<li><p>画笔(Pen)： 用于绘制线条和形状边框。<br>◦   创建：</p>
<pre><code>▪   定义句柄：`HPEN hP;`

▪   获取库存画笔：`hP = GetStockObject(STOCK_PEN_TYPE);` (如 `BLACK_PEN`, `WHITE_PEN`, `DC_PEN`, `NULL_PEN`)。

▪   创建新画笔：`hP = CreatePen(nPenStyle, nWidth, rgbColor);`

    ▪   `nPenStyle`: 线型 (`PS_SOLID`, `PS_DASH`, `PS_DOT`, `PS_DASHDOT`, `PS_DASHDOTDOT`, `PS_INSIDEFRAME`, `PS_NULL`)。

    ▪   `nWidth`: 线宽（逻辑单位）。

    ▪   `rgbColor`: 颜色 (`COLORREF`)。
</code></pre>
<p>◦   选入DC： <code>SelectObject(hdc, hP);</code></p>
<p>◦   删除： <code>DeleteObject(hP);</code> (不再使用时释放资源)。</p>
</li>
<li><p>画刷(Brush)： 用于填充形状内部。<br>◦   创建：</p>
<pre><code>▪   定义句柄：`HBRUSH hBr;`

▪   获取库存画刷：`hBr = (HBRUSH)GetStockObject(STOCK_BRUSH_TYPE);` (如 `BLACK_BRUSH`, `DKGRAY_BRUSH`, `GRAY_BRUSH`, `LTGRAY_BRUSH`, `HOLLOW_BRUSH`, `NULL_BRUSH`, `WHITE_BRUSH`)。

▪   创建单色画刷：`hBr = CreateSolidBrush(rgbColor);`

▪   创建阴影画刷：`hBr = CreateHatchBrush(nHatchStyle, rgbColor);`

    ▪   `nHatchStyle`: 阴影模式 (`HS_HORIZONTAL`, `HS_VERTICAL`, `HS_FDIAGONAL`, `HS_BDIAGONAL`, `HS_CROSS`, `HS_DIAGCROSS`)。
</code></pre>
<p>◦   选入DC： <code>SelectObject(hdc, hBr);</code></p>
<p>◦   删除： <code>DeleteObject(hBr);</code> (不再使用时释放资源)。</p>
</li>
<li><p>颜色：<br>◦   使用 <code>RGB</code> 宏定义颜色：<code>RGB(nRed, nGreen, nBlue)</code> (每个分量0-255)。</p>
<p>◦   示例：<code>RGB(255,0,0)</code> (红), <code>RGB(0,255,0)</code> (绿), <code>RGB(0,0,255)</code> (蓝)。</p>
<p>◦   也可用十六进制表示：<code>0x00bbggrr</code> (文档中 <code>0x00rrggbb</code> 似有笔误，标准为 <code>0x00bbggrr</code>)。</p>
</li>
</ol>
<h4 id="五、-常用绘图函数"><a href="#五、-常用绘图函数" class="headerlink" title="五、 常用绘图函数"></a>五、 常用绘图函数</h4><p>•   <code>MoveToEx(hdc, X, Y, lpPoint)</code>: 设置当前画笔位置到(<code>X</code>,<code>Y</code>)，<code>lpPoint</code>可返回原位置。</p>
<p>•   <code>LineTo(hdc, X, Y)</code>: 从当前位置画直线到(<code>X</code>,<code>Y</code>)，更新当前位置。</p>
<p>•   <code>Polyline(hdc, lpPoints, nCount)</code>: 从当前位置开始，依次连接<code>lpPoints</code>(指向<code>POINT</code>数组)中的<code>nCount</code>个点画折线。</p>
<p>•   <code>Arc(hdc, X1, Y1, X2, Y2, X3, Y3, X4, Y4)</code>: 绘制椭圆弧。(<code>X1</code>,<code>Y1</code>)-(<code>X2</code>,<code>Y2</code>)定义边框矩形，(X3,Y3)指定弧起点径向线交点，(X4,Y4)指定弧终点径向线交点。弧按逆时针方向从起点到终点绘制。</p>
<p>•   <code>Pie(hdc, X1, Y1, X2, Y2, X3, Y3, X4, Y4)</code>: 绘制饼图（填充扇形）。参数含义同<code>Arc</code>，但会填充起点、终点与椭圆中心点连线形成的扇形区域。</p>
<p>•   <code>Rectangle(hdc, X1, Y1, X2, Y2)</code>: 绘制（并填充）矩形。(<code>X1</code>,<code>Y1</code>)左上角，(<code>X2</code>,<code>Y2</code>)右下角。</p>
<p>•   <code>RoundRect(hdc, X1, Y1, X2, Y2, nWidth, nHeight)</code>: 绘制（并填充）圆角矩形。<code>nWidth</code>, <code>nHeight</code> 定义圆角椭圆的宽和高。</p>
<p>•   <code>Ellipse(hdc, X1, Y1, X2, Y2)</code>: 绘制（并填充）椭圆。(<code>X1</code>,<code>Y1</code>)-(<code>X2</code>,<code>Y2</code>)定义边框矩形。</p>
<p>•   <code>Polygon(hdc, lpPoints, nCount)</code>: 绘制（并填充）多边形。连接<code>lpPoints</code>(指向<code>POINT</code>数组)中的<code>nCount</code>个点，并自动闭合图形。</p>
<h4 id="六、-映像模式-Mapping-Mode"><a href="#六、-映像模式-Mapping-Mode" class="headerlink" title="六、 映像模式 (Mapping Mode)"></a>六、 映像模式 (Mapping Mode)</h4><ol>
<li><p>目的： 定义逻辑单位如何转换为设备单位（像素、毫米等）以及设备X、Y轴的方向。实现逻辑坐标系与物理设备坐标系的映射，使程序员能在统一逻辑坐标系中工作。</p>
</li>
<li><p>关键概念：<br>◦   窗口(Window)： 程序员在逻辑坐标系中定义的区域。</p>
<p>◦   视口(Viewport)： 程序员在物理输出设备上定义的区域。</p>
<p>◦   映射： 将窗口中的点映射到视口中的点。映射比例由窗口范围和视口范围决定。</p>
<p>◦   目标： 保持图形比例（等比例映射）或允许独立缩放（非等比例映射）。</p>
</li>
<li><p>设置与获取：<br>◦   设置映像模式： <code>SetMapMode(hdc, nMapMode);</code></p>
<p>◦   获取当前映像模式： <code>nMapMode = GetMapMode(hdc);</code></p>
</li>
<li><p>设置窗口与视口范围 (仅对 <code>MM_ISOTROPIC</code> 和 <code>MM_ANISOTROPIC</code> 有效)：<br>◦   设置窗口范围： <code>SetWindowExtEx(hdc, nWidth, nHeight, lpSize);</code> (逻辑单位)</p>
<p>◦   设置视口范围： <code>SetViewportExtEx(hdc, nWidth, nHeight, lpSize);</code> (设备单位)</p>
<p>◦   作用： 定义窗口(逻辑)区域大小和视口(物理)区域大小，确定缩放比例。</p>
<pre><code>▪   `MM_ISOTROPIC`: 强制X、Y方向缩放比例相同（保持纵横比）。

▪   `MM_ANISOTROPIC`: 允许X、Y方向独立缩放。
</code></pre>
</li>
<li><p>设置窗口与视口原点：<br>◦   设置窗口原点： <code>SetWindowOrgEx(hdc, X, Y, lpPoint);</code> (逻辑坐标)</p>
<p>◦   设置视口原点： <code>SetViewportOrgEx(hdc, X, Y, lpPoint);</code> (设备坐标)</p>
<p>◦   作用： 定义逻辑坐标系原点(<code>SetWindowOrgEx</code>)映射到设备坐标系的位置(<code>SetViewportOrgEx</code>)。</p>
</li>
<li><p>缺省模式： <code>MM_TEXT</code> (1逻辑单位&#x3D;1像素，X向右，Y向下)。</p>
</li>
<li><p>获取窗口尺寸 (辅助绘图适应)：<br>◦   获取窗口矩形(含边框、标题栏等)： <code>GetWindowRect(hWnd, &amp;rect);</code></p>
<p>◦   获取客户区矩形(仅绘图区域)： <code>GetClientRect(hWnd, &amp;rect);</code></p>
</li>
</ol>
<h4 id="七、-应用实例-核心要点"><a href="#七、-应用实例-核心要点" class="headerlink" title="七、 应用实例 (核心要点)"></a>七、 应用实例 (核心要点)</h4><ol>
<li><p>例4-1：填充图形与映像模式切换<br>◦   功能： 绘制圆角矩形(深灰填充)、椭圆(亮灰填充)、饼图(虚画刷填充，效果不可见)。</p>
<p>◦   交互： 鼠标左键点击切换6种映像模式演示：</p>
<pre><code>▪   `MM_TEXT` (默认)

▪   `MM_ISOTROPIC` (窗口20x20 -&gt; 视口10x10，图形缩小)

▪   `MM_ISOTROPIC` (窗口10x10 -&gt; 视口20x20，图形放大)

▪   `MM_ANISOTROPIC` (窗口10x10 -&gt; 视口20x10，横向拉伸)

▪   `MM_ANISOTROPIC` (窗口10x10 -&gt; 视口20x5，横向拉伸纵向压缩)

▪   `MM_ISOTROPIC` (窗口10x10 -&gt; 视口20x5，系统自动调整比例保持纵横比)
</code></pre>
<p>◦   实现： 在<code>WM_PAINT</code>中根据<code>dispMode</code>变量设置<code>SetMapMode</code>, <code>SetWindowExtEx</code>, <code>SetViewportExtEx</code>，然后绘制图形。</p>
</li>
<li><p>例4-2：销售数据图表 (柱形图 &amp; 饼图)<br>◦   功能： 根据季度销售数据(75,50,60,90)，在窗口左侧绘制柱形图，右侧绘制饼图展示比例。</p>
<p>◦   关键点：</p>
<pre><code>▪   计算数据总和(`s`)和最大值(`maxValue`)。
▪   获取客户区尺寸(`GetClientRect`)。
▪   检查客户区尺寸是否足够绘图
▪   柱形图：
    ▪   计算坐标原点(`xOrg`, `yOrg`)。
    ▪   计算坐标轴范围(`xEnd`, `yEnd`)。
    ▪   计算单位数据对应的像素(`deltaX` 水平间隔, `deltaY` 垂直高度)。
    ▪   使用不同阴影模式的画刷(`CreateHatchBrush`)绘制柱体(`Rectangle`)。
▪   饼图：

    ▪   计算饼图中心(`xOrg`, `yOrg`)和半径(`deltaX`, `deltaY`取最小值)。
    ▪   计算每个扇形的角度(`sita = sita - 2*π*a[i]/s`)。
    ▪   使用不同颜色的单色画刷(`CreateSolidBrush`)绘制扇形(`Pie`)。
</code></pre>
<p>◦   目标： 图形随窗口尺寸自动调整比例。</p>
</li>
<li><p>例4-3：模拟时钟<br>◦   功能： 绘制带刻度的粉色表盘，并模拟秒针、分针、时针的实时运动。</p>
<p>◦   关键点：</p>
<pre><code>▪   数据结构： `TimeStructure &#123; hour, min, sec &#125;` 存储时间。
▪   定时器： 在`WM_CREATE`中设置定时器(`SetTimer`)，间隔1000ms (1秒)。
▪   时间更新： 在`WM_TIMER`消息中增加秒数，调用`AdjustTime`函数处理进位(秒-&gt;分-&gt;时)，并触发刷新(`InvalidateRect`)。
▪   绘制(`WM_PAINT`):
    ▪   更新时间(`x.sec++`, `AdjustTime(&amp;x)`)。
    ▪  获取客户区中心(`xOrg`, `yOrg`)。
    ▪   计算表盘半径(`rClock`)和各指针长度(`rSec`, `rMin`, `rHour`)。
    ▪   绘制粉色表盘(`Ellipse`)。
    ▪   绘制刻度：
        ▪   循环60次(每分钟/秒)。
        ▪   区分整点刻度(粗长)和非整点刻度(细短)。
        ▪   使用三角函数(`sin`, `cos`)计算刻度起点和终点坐标。
    ▪   绘制指针：
        ▪   秒针： 细红线(`PS_SOLID, 2`)，计算角度(`sita=2π*x.sec/60`)，计算端点坐标，画线(`MoveToEx`, `LineTo`)。
        ▪   分针： 粗黑线(`PS_SOLID, 5`)，计算角度(`sita=2π*x.min/60`)，同上。
        ▪   时针： 更粗黑线(`PS_SOLID, 10`)，计算角度(`sita=2π*x.hour/12`)，同上。
▪   窗口调整： 响应`WM_SIZE`消息刷新窗口(`InvalidateRect`)。
</code></pre>
</li>
</ol>
<h1 id="第三章-文本的输出方法和字体的设计"><a href="#第三章-文本的输出方法和字体的设计" class="headerlink" title="第三章  文本的输出方法和字体的设计"></a>第三章  文本的输出方法和字体的设计</h1><h3 id="第3章-文本输出与字体设计"><a href="#第3章-文本输出与字体设计" class="headerlink" title="第3章 文本输出与字体设计"></a><strong>第3章 文本输出与字体设计</strong></h3><h4 id="核心概念"><a href="#核心概念" class="headerlink" title="核心概念"></a><strong>核心概念</strong></h4><p>1. </p>
<pre><code>GDI文本输出原理

- 图形与文本无明确界限，均视为图形实体
- 使用设备无关的**逻辑字体**实现&quot;所见即所得&quot;
- 流程：获取文本句柄 → 设置属性 → 选入设备环境
</code></pre>
<h4 id="5-1-设置文本设备环境"><a href="#5-1-设置文本设备环境" class="headerlink" title="5.1 设置文本设备环境"></a><strong>5.1 设置文本设备环境</strong></h4><ol>
<li><p><strong>系统字体获取</strong></p>
<ul>
<li><p>步骤：</p>
  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">HFONT hF;  // 定义字体句柄</span><br><span class="line">hF = GetStockObject(字体类型);  // 获取系统字体</span><br><span class="line">SelectObject(hdc, hF);          // 选入设备环境</span><br></pre></td></tr></table></figure>
</li>
<li><p>常用系统字体类型：</p>
<table>
<thead>
<tr>
<th>字体常量</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td><code>ANSI_FIXED</code></td>
<td>ANSI标准固定宽度（默认字体）</td>
</tr>
<tr>
<td><code>ANSI_VAR</code></td>
<td>ANSI可变宽度</td>
</tr>
<tr>
<td><code>DEFAULT_GUI</code></td>
<td>当前GUI默认字体</td>
</tr>
<tr>
<td><code>OEM_FIXED</code></td>
<td>设备制造商提供字体</td>
</tr>
<tr>
<td><code>SYSTEM_FIXED</code></td>
<td>Windows固定宽度字体</td>
</tr>
</tbody></table>
</li>
</ul>
</li>
<li><p><strong>创建自定义字体</strong></p>
<ul>
<li><p><strong>函数</strong>：<code>HFONT CreateFont(14个参数)</code></p>
</li>
<li><p>关键参数解析：</p>
  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">int nHeight,         // 字体高度（0=系统默认）</span><br><span class="line">int nEscapement,     // 文本行倾斜角（0.1度单位）</span><br><span class="line">DWORD nWeight,       // 字体粗细（0-1000，如FW_BOLD=700）</span><br><span class="line">DWORD dwItalic,      // 斜体（非0启用）</span><br><span class="line">DWORD dwUnderline,   // 下划线（非0启用）</span><br><span class="line">DWORD dwCharset      // 字符集（如GB2312_CHARSET）</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p><strong>颜色设置</strong></p>
<ul>
<li>文本色：<code>SetTextColor(hdc, RGB(r,g,b))</code></li>
<li>背景色：<code>SetBkColor(hdc, RGB(r,g,b))</code></li>
</ul>
</li>
</ol>
<hr>
<h4 id="5-2-文本输出流程"><a href="#5-2-文本输出流程" class="headerlink" title="5.2 文本输出流程"></a><strong>5.2 文本输出流程</strong></h4><ol>
<li><p><strong>获取字体信息</strong></p>
<ul>
<li><p><strong>函数</strong>：<code>GetTextMetrics(hdc, &amp;tm)</code></p>
</li>
<li><p>关键结构体：</p>
  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">TEXTMETRIC tm</span><br></pre></td></tr></table></figure>

  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">tm.tmHeight;           // 总高度</span><br><span class="line">tm.tmAscent;           // 基线以上高度</span><br><span class="line">tm.tmExternalLeading;  // 行间距</span><br><span class="line">tm.tmAveCharWidth;     // 平均字符宽度</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p><strong>坐标计算</strong></p>
<ul>
<li><p>后续文本坐标：</p>
  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SIZE size;</span><br><span class="line">GetTextExtentPoint32(hdc, text, len, &amp;size);  // 获取字符串尺寸</span><br><span class="line">x_next = x_current + size.cx;                 // 计算下一文本起点</span><br></pre></td></tr></table></figure>
</li>
<li><p>换行坐标：</p>
  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">y_next = y_current + tm.tmHeight + tm.tmExternalLeading;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p><strong>文本输出函数</strong></p>
<ul>
<li><p>基础输出：</p>
  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">TextOut(hdc, x, y, text, len);  // 指定坐标输出</span><br></pre></td></tr></table></figure>
</li>
<li><p>格式化输出：</p>
  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">DrawText(hdc, text, len, &amp;rect, DT_LEFT);  // 在矩形区域内左对齐输出</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ol>
<hr>
<h4 id="5-3-实例分析"><a href="#5-3-实例分析" class="headerlink" title="5.3 实例分析"></a><strong>5.3 实例分析</strong></h4><h5 id="例5-1：扇形诗词输出"><a href="#例5-1：扇形诗词输出" class="headerlink" title="例5-1：扇形诗词输出"></a><strong>例5-1：扇形诗词输出</strong></h5><ul>
<li><p>核心逻辑：</p>
<ol>
<li><p>计算扇形极坐标：<code>x = org.x + r*cos(θ)</code>, <code>y = org.y - r*sin(θ)</code></p>
</li>
<li><p>动态创建字体：</p>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CreateFont(高度, 0, 倾斜角, 0, FW_HEAVY, ... , &quot;楷体_GB2312&quot;);</span><br></pre></td></tr></table></figure>
</li>
<li><p>逐字输出：</p>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">TextOut(hdc, x, y, &amp;诗句[i], 1);  // 单字符输出</span><br></pre></td></tr></table></figure></li>
</ol>
</li>
<li><p>特效：</p>
<ul>
<li>文字颜色渐变（RGB动态计算）</li>
<li>文字沿扇形径向排列</li>
</ul>
</li>
</ul>
<h5 id="例5-2：多格式文本输出"><a href="#例5-2：多格式文本输出" class="headerlink" title="例5-2：多格式文本输出"></a><strong>例5-2：多格式文本输出</strong></h5><ul>
<li><p>技术要点：</p>
<p>  1. </p>
<pre><code>  多行格式控制

  ：

  - 通过`tm.tmHeight + tm.tmExternalLeading`计算行间距

  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">y += tm.tmHeight + 5*tm.tmExternalLeading;  // 增加5倍行距</span><br></pre></td></tr></table></figure>
</code></pre>
<ol start="2">
<li><p>混合字体效果：</p>
<ul>
<li>红色系统字体、绿色自定义粗体、蓝色粗体、灰色斜体下划线</li>
</ul>
</li>
<li><p>卡拉OK效果：</p>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">rect.right += 2;  // 矩形右边界扩展</span><br><span class="line">DrawText(hdc, text, len, &amp;rect, DT_LEFT);  // 动态绘制区域</span><br></pre></td></tr></table></figure>
</li>
<li><p>同行输出多字符串：</p>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">TextOut(hdc, x, y, text1, len1);    // 输出第一部分</span><br><span class="line">GetTextExtentPoint32(...);          // 计算宽度</span><br><span class="line">TextOut(hdc, x+size.cx+5, y, text2, len2); // 紧接输出</span><br></pre></td></tr></table></figure></li>
</ol>
</li>
</ul>
<hr>
<h3 id="关键总结"><a href="#关键总结" class="headerlink" title="关键总结"></a><strong>关键总结</strong></h3><table>
<thead>
<tr>
<th><strong>技术点</strong></th>
<th><strong>实现方式</strong></th>
</tr>
</thead>
<tbody><tr>
<td><strong>字体管理</strong></td>
<td><code>GetStockObject()</code>获取系统字体，<code>CreateFont()</code>自定义</td>
</tr>
<tr>
<td><strong>坐标计算</strong></td>
<td><code>GetTextMetrics()</code> + <code>GetTextExtentPoint32()</code></td>
</tr>
<tr>
<td><strong>基础输出</strong></td>
<td><code>TextOut()</code> 直接坐标定位</td>
</tr>
<tr>
<td><strong>高级排版</strong></td>
<td><code>DrawText()</code> 矩形区域格式化输出</td>
</tr>
<tr>
<td><strong>动态效果</strong></td>
<td>定时器刷新 + 矩形区域扩展</td>
</tr>
</tbody></table>
<h1 id="第四章-Windows应用程序对键盘与鼠标的响应"><a href="#第四章-Windows应用程序对键盘与鼠标的响应" class="headerlink" title="第四章  Windows应用程序对键盘与鼠标的响应"></a>第四章  Windows应用程序对键盘与鼠标的响应</h1><p>以下是对PPT文档《第四章 Windows应用程序对键盘与鼠标的响应》的细致总结，严格依据原始内容整理：</p>
<hr>
<h3 id="一、键盘处理机制"><a href="#一、键盘处理机制" class="headerlink" title="一、键盘处理机制"></a><strong>一、键盘处理机制</strong></h3><ol>
<li><p><strong>输入流程</strong></p>
<ul>
<li>物理按键 → 扫描码（设备相关）→ 设备驱动程序 → 虚拟码（设备无关）→ 系统消息队列 → 线程消息队列 → 窗口过程处理。</li>
<li>虚拟码值存储在 <code>wParam</code> 中（如 <code>VK_BACK</code>、<code>VK_RETURN</code>）。</li>
</ul>
</li>
<li><p><strong>消息类型</strong></p>
<p> - </p>
<pre><code> 按键消息

 ：按下/释放键时触发

 - 系统按键：`WM_SYSKEYDOWN`/`WM_SYSKEYUP`（Alt组合键，通常由系统处理）。
 - 非系统按键：`WM_KEYDOWN`/`WM_KEYUP`（应用程序处理）。
</code></pre>
<ul>
<li><strong>字符消息</strong>：<code>WM_CHAR</code>（TranslateMessage转换后生成，对应可显示字符）。</li>
</ul>
</li>
<li><p><strong>按键消息参数解析</strong></p>
<ul>
<li><p><code>wParam</code>：虚拟键码（标识具体按键）。</p>
</li>
<li><pre><code>  lParam
  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">        （32位）：</span><br><span class="line"></span><br><span class="line">        - 重复计数（0-15位）、OEM扫描码（16-23位）、扩展键标志（24位）、关联码（29位）、键先前状态（30位）、转换状态（31位）。</span><br><span class="line"></span><br><span class="line">4. **特殊键处理**</span><br><span class="line"></span><br><span class="line">    - **回车键**：换行并调整字符缓冲区。</span><br><span class="line">    - **退格键**：删除字符并移动光标，行首时提示“已至文件头”。</span><br><span class="line">    - **Delete键**：行末时提示“已至文件尾”。</span><br><span class="line">    - **方向键**：移动光标位置（边界检查）。</span><br><span class="line">    - **Home/End键**：光标跳至行首/行末。</span><br><span class="line"></span><br><span class="line">------</span><br><span class="line"></span><br><span class="line">### **二、插字符（Caret）管理**</span><br><span class="line"></span><br><span class="line">1. **特性**</span><br><span class="line"></span><br><span class="line">    - 指示文本输入位置，仅拥有输入焦点的窗口可持有。</span><br><span class="line"></span><br><span class="line">    - 桌面唯一，通过函数控制：</span><br><span class="line"></span><br></pre></td></tr></table></figure>
  CreateCaret()  // 创建位图插字符
  ShowCaret()    // 显示
  SetCaretPos()  // 设置位置
  GetCaretPos()  // 获取位置
  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">2. **应用示例**</span><br><span class="line"></span><br><span class="line">    - 在 `WM_PAINT` 中计算文本尺寸 → `SetCaretPos()` 更新光标位置。</span><br><span class="line">    - 行编辑时动态调整坐标（如换行后光标移至新行首）。</span><br><span class="line"></span><br><span class="line">------</span><br><span class="line"></span><br><span class="line">### **三、鼠标处理机制**</span><br><span class="line"></span><br><span class="line">1. **消息类型**</span><br><span class="line">    - 基础消息：`WM_LBUTTONDOWN`、`WM_LBUTTONUP`、`WM_MOUSEMOVE`。</span><br><span class="line">    - 双击消息：`WM_LBUTTONDBLCLK`（需窗口类含 `CS_DBLCLKS` 样式）。</span><br><span class="line">2. **参数解析**</span><br><span class="line">    - `lParam`：低16位为X坐标，高16位为Y坐标（窗口客户区坐标系）。</span><br><span class="line">    - `wParam`：指示辅助键状态（如 `MK_CONTROL`、`MK_SHIFT`）。</span><br><span class="line">3. **光标控制**</span><br><span class="line">    - **预定义光标**：通过 `LoadCursor(NULL, IDC_常量)` 加载（如 `IDC_WAIT`沙漏）。</span><br><span class="line">    - **自定义光标**：资源文件定义 → `LoadCursor(hInst, 资源名)` 加载。</span><br><span class="line">    - 动态切换：在 `WM_MOUSEMOVE` 中根据坐标区域设置不同光标（例：十字/箭头/I型）。</span><br><span class="line"></span><br><span class="line">------</span><br><span class="line"></span><br><span class="line">### **四、核心代码逻辑示例**</span><br><span class="line"></span><br><span class="line">#### **1. 键盘输入程序（例6-1）**</span><br><span class="line"></span><br><span class="line">- </span><br><span class="line"></span><br><span class="line">    数据结构</span><br><span class="line"></span><br><span class="line">    ：</span><br><span class="line"></span><br></pre></td></tr></table></figure>
 static TCHAR cCharInfo[MAXLINE][MAXNUMCHAR]; // 字符缓冲区
 static int nX, nY; // 光标行列位置
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">- </span><br><span class="line"></span><br><span class="line">    消息处理</span><br><span class="line"></span><br><span class="line">    ：</span><br><span class="line"></span><br><span class="line">    - `WM_CHAR`：处理字符插入、退格、换行及边界提示。</span><br><span class="line">    - `WM_KEYDOWN`：处理方向键、Home/End/Del键的光标移动与删除。</span><br><span class="line">    - `WM_PAINT`：绘制文本并更新插字符位置。</span><br><span class="line"></span><br><span class="line">#### **2. 组合键检测（例6-2）**</span><br><span class="line"></span><br><span class="line">- `WM_KEYDOWN`：检测 `VK_CONTROL`。</span><br><span class="line">- `WM_CHAR`：检测 `&#x27;K&#x27;`（独立按）或 `&#x27;K&#x27;-64`（Ctrl+K组合）。</span><br><span class="line">- 输出对应提示信息（如&quot;CTRL+K键被压下&quot;）。</span><br><span class="line"></span><br><span class="line">#### **3. 鼠标动态效果（例6-3）**</span><br><span class="line"></span><br><span class="line">- </span><br><span class="line"></span><br><span class="line">    字符串跟随光标</span><br><span class="line"></span><br><span class="line">    ：</span><br><span class="line"></span><br><span class="line">    - `WM_TIMER` 定时刷新 → `WM_PAINT` 中获取光标位置 → 重绘渐变颜色字符串。</span><br><span class="line"></span><br><span class="line">- **颜色渐变**：每个字符颜色值按 `RGB(255-color[i], color[i], 255)` 变化。</span><br><span class="line"></span><br><span class="line">#### **4. 光标区域响应（例6-2扩展）**</span><br><span class="line"></span><br><span class="line">- 在 </span><br><span class="line"></span><br></pre></td></tr></table></figure>
 WM_MOUSEMOVE
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">中：</span><br><span class="line"></span><br></pre></td></tr></table></figure>
 if (x∈[50,150] &amp;&amp; y∈[50,150]) 
  SetCursor(LoadCursor(NULL, IDC_CROSS)); // 十字光标
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">------</span><br><span class="line"></span><br><span class="line">### **五、关键细节**</span><br><span class="line"></span><br><span class="line">1. **设备无关性**：虚拟码屏蔽硬件差异，确保跨设备兼容。</span><br><span class="line">2. **双击检测**：窗口类必须包含 `CS_DBLCLKS` 样式，否则视为两次单击。</span><br><span class="line">3. **坐标转换**：`ScreenToClient()` 将屏幕坐标转为窗口客户区坐标。</span><br><span class="line">4. **资源释放**：删除创建的GDI对象（如 `DeleteObject(hF)`）</span><br><span class="line"></span><br><span class="line"># 第五章  资源在windows编程中的应用</span><br><span class="line"></span><br><span class="line">### **5.1 菜单和加速键资源**</span><br><span class="line"></span><br><span class="line">#### **5.1.1 菜单的创建过程**</span><br><span class="line"></span><br><span class="line">1. **定义菜单（资源描述文件）**</span><br><span class="line"></span><br><span class="line">    - **语法**：`menuID MENU [载入特性] &#123; 菜单项列表 &#125;`</span><br><span class="line"></span><br><span class="line">    - 载入特性：</span><br><span class="line"></span><br><span class="line">        - `DISCARDABLE`（可丢弃）</span><br><span class="line">        - `FIXED`（固定内存位置）</span><br><span class="line">        - `MOVEABLE`（内存可移动）</span><br><span class="line">        - `LOADONCALL`（需时加载）</span><br><span class="line">        - `PRELOAD`（立即加载）</span><br><span class="line"></span><br><span class="line">    - 菜单项类型：</span><br><span class="line"></span><br><span class="line">        - `POPUP &quot;菜单项名&quot; [选项]`：定义弹出菜单，选项包括 `MENUBARBREAK`（纵向分隔）、`CHECKED`（选中标志）、`INACTIVE`（禁用）、`GRAYED`（禁用且变灰）。</span><br><span class="line">        - `MENUITEM &quot;文本&quot; ID [选项]`：定义普通菜单项，`&amp;`定义热键（如`&quot;文件(&amp;F)&quot;`）。</span><br><span class="line">        - `MENUITEM SEPARATOR`：创建水平分隔线。</span><br><span class="line"></span><br><span class="line">    - 示例</span><br><span class="line"></span><br></pre></td></tr></table></figure>
  My_menu MENU MOVEABLE &#123;
      POPUP &quot;文件(&amp;F)&quot; &#123;
          MENUITEM &quot;新建(&amp;N)&quot;, IDM_NEW
          MENUITEM &quot;打开(&amp;O)&quot;, IDM_OPEN
          MENUITEM SEPARATOR
          MENUITEM &quot;退出(&amp;X)&quot;, IDM_EXIT
      &#125;
  &#125;
  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">2. **加载菜单资源**</span><br><span class="line"></span><br><span class="line">    - 窗口类中加载：</span><br><span class="line"></span><br></pre></td></tr></table></figure>
  wndclass.lpszMenuName = lpszMenuName;
  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">- 创建窗口时加载：</span><br><span class="line"></span><br></pre></td></tr></table></figure>
  hmenu = LoadMenu(hInstance, &quot;My_menu&quot;);
  CreateWindow(..., hmenu, ...);
  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">- 动态加载：</span><br><span class="line"></span><br></pre></td></tr></table></figure>
  SetMenu(hwnd, LoadMenu(hInstance, &quot;Menu2&quot;));
  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">#### **5.1.2 操作菜单项**</span><br><span class="line"></span><br><span class="line">1. **启用/禁用菜单项**</span><br><span class="line"></span><br></pre></td></tr></table></figure>
 EnableMenuItem(hmenu, ID, MF_BYCOMMAND | MF_GRAYED);
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">    - **选项**：`MF_BYCOMMAND`（按ID标识）、`MF_BYPOSITION`（按位置标识）、`MF_ENABLED`（启用）、`MF_GRAYED`（禁用变灰）。</span><br><span class="line"></span><br><span class="line">2. **设置选中标志**</span><br><span class="line"></span><br></pre></td></tr></table></figure>
 CheckMenuItem(hmenu, ID, MF_BYCOMMAND | MF_CHECKED);
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">3. **增删改菜单项**</span><br><span class="line"></span><br><span class="line">    - **末尾添加**：`AppendMenu(hmenu, MF_ENABLED, IDM_NEW, &quot;新建(&amp;N)&quot;);`</span><br><span class="line">    - **插入**：`InsertMenu(hmenu, IDM_EXIT, MF_BYCOMMAND, IDM_PRINT, &quot;打印(&amp;P)&quot;);`</span><br><span class="line">    - **删除**：`DeleteMenu(hmenu, IDM_SAVEAS, MF_BYCOMMAND);`</span><br><span class="line">    - **修改**：`ModifyMenu(hmenu, IDM_OPEN, MF_BYCOMMAND, IDM_LOAD, &quot;加载(&amp;L)&quot;);`</span><br><span class="line"></span><br><span class="line">4. **刷新菜单**：`DrawMenuBar(hwnd);`</span><br><span class="line"></span><br><span class="line">#### **5.1.3 动态创建菜单**</span><br><span class="line"></span><br><span class="line">1. 创建空菜单：`CreateMenu()`</span><br><span class="line"></span><br><span class="line">2. 添加菜单项：</span><br><span class="line"></span><br></pre></td></tr></table></figure>
 AppendMenu()
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">或 </span><br><span class="line"></span><br></pre></td></tr></table></figure>
 InsertMenu()
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>
 haddmenu = CreateMenu();
 AppendMenu(haddmenu, MF_ENABLED, IDM_qiuhe, &quot;求和&quot;);
 InsertMenu(hmenu, 2, MF_POPUP, (UINT)haddmenu, &quot;统计计算(&amp;C)&quot;);
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">#### **5.1.4 加速键资源**</span><br><span class="line"></span><br><span class="line">1. **定义加速键（资源文件）**</span><br><span class="line"></span><br></pre></td></tr></table></figure>
 加速键名 ACCELERATORS &#123;
&quot;^S&quot;, IDM_SAVE          // Ctrl+S
VK_F1, IDM_HELP, VIRTKEY // F1键
 &#125;
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">    - **选项**：`NOINVERT`（不高亮菜单项）、`ALT/SHIFT/CONTROL`（组合键）。</span><br><span class="line"></span><br><span class="line">2. **加载与翻译**</span><br><span class="line"></span><br></pre></td></tr></table></figure>
 HACCEL hAccel = LoadAccelerators(hInstance, &quot;MYMENUACCEL&quot;);
 while (GetMessage(&amp;msg, NULL, 0, 0)) &#123;
  if (!TranslateAccelerator(hwnd, hAccel, &amp;msg)) &#123;
      TranslateMessage(&amp;msg);
      DispatchMessage(&amp;msg);
  &#125;
 &#125;
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">------</span><br><span class="line"></span><br><span class="line">### **5.2 位图资源**</span><br><span class="line"></span><br><span class="line">#### **操作流程**</span><br><span class="line"></span><br><span class="line">1. 加载位图：</span><br><span class="line"></span><br></pre></td></tr></table></figure>
 HBITMAP hBm = LoadBitmap(hInstance, &quot;pic7&quot;); // 从资源加载
 // 或创建兼容位图：CreateCompatibleBitmap(hdc, width, height);
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">2. 获取位图信息：</span><br><span class="line"></span><br></pre></td></tr></table></figure>
 BITMAP bm;
 GetObject(hBm, sizeof(BITMAP), &amp;bm);
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">3. 选入内存设备环境：</span><br><span class="line"></span><br></pre></td></tr></table></figure>
 HDC hdcmem = CreateCompatibleDC(hdc);
 SelectObject(hdcmem, hBm);
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">4. 输出位图：</span><br><span class="line"></span><br></pre></td></tr></table></figure>
 BitBlt(hdc, x, y, bm.bmWidth, bm.bmHeight, hdcmem, 0, 0, SRCCOPY);
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">    - **光栅操作码**：`SRCCOPY`（直接复制）、`SRCAND`（与操作）、`WHITENESS`（全白输出）等。</span><br><span class="line"></span><br><span class="line">------</span><br><span class="line"></span><br><span class="line">### **5.3 对话框资源**</span><br><span class="line"></span><br><span class="line">#### **5.3.1 模式对话框**</span><br><span class="line"></span><br><span class="line">1. 定义对话框（资源文件）：</span><br><span class="line"></span><br></pre></td></tr></table></figure>
 IDD_DIALOG1 DIALOGEX x, y, width, height
 STYLE DS_SETFONT | WS_POPUP | WS_CAPTION
 BEGIN
DEFPUSHBUTTON &quot;确定&quot;, IDOK, x, y, width, height
EDITTEXT IDC_EDIT1, x, y, width, height
 END
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">2. 显示对话框</span><br><span class="line"></span><br></pre></td></tr></table></figure>
 DialogBox(hInst, &quot;IDD_DIALOG1&quot;, hwnd, (DLGPROC)DlgProc);
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">3. 处理消息：</span><br><span class="line"></span><br><span class="line">    - `WM_INITDIALOG`：初始化控件（如 `SetDlgItemText()`）。</span><br><span class="line">    - `WM_COMMAND`：响应按钮事件（如 `IDOK` 保存数据，`IDCANCEL` 关闭）。</span><br><span class="line">    - **关闭**：`EndDialog(hdlg, 0);`</span><br><span class="line"></span><br><span class="line">#### **5.3.2 非模式对话框**</span><br><span class="line"></span><br><span class="line">1. **样式要求**：必须包含 `WS_VISIBLE`。</span><br><span class="line"></span><br><span class="line">2. 创建对话框：</span><br><span class="line"></span><br></pre></td></tr></table></figure>
 HWND hdlg = CreateDialog(hInst, &quot;IDD_DIALOG1&quot;, hwnd, (DLGPROC)DlgProc);
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">3. 消息循环处理：</span><br><span class="line"></span><br></pre></td></tr></table></figure>
 while (GetMessage(&amp;msg, NULL, 0, 0)) &#123;
  if (!IsDialogMessage(hdlg, &amp;msg)) &#123;
      TranslateMessage(&amp;msg);
      DispatchMessage(&amp;msg);
  &#125;
 &#125;
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">4. **关闭**：`DestroyWindow(hdlg);`</span><br><span class="line"></span><br><span class="line">#### **消息框（特殊模式对话框）**</span><br><span class="line"></span><br></pre></td></tr></table></figure>
</code></pre>
</li>
</ul>
</li>
</ol>
<p>MessageBox(hwnd, “内容”, “标题”, MB_OKCANCEL | MB_ICONQUESTION);</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">------</span><br><span class="line"></span><br><span class="line">### **5.4 图标资源**</span><br><span class="line"></span><br><span class="line">1. 定义图标（资源文件）：</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<pre><code>TREE ICON tree.ico   // 自定义图标
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">2. 加载图标：</span><br><span class="line"></span><br></pre></td></tr></table></figure>
// 自定义图标
wndclass.hIcon = LoadIcon(hInstance, &quot;TREE&quot;);
// 系统图标（如 IDI_APPLICATION）
wndclass.hIcon = LoadIcon(NULL, IDI_APPLICATION);
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">------</span><br><span class="line"></span><br><span class="line">### **关键总结**</span><br><span class="line"></span><br><span class="line">- **菜单**：通过资源定义，支持动态增删改，加速键需配合消息循环翻译。</span><br><span class="line">- **位图**：需内存设备环境操作，使用 `BitBlt` 输出。</span><br><span class="line">- 对话框：</span><br><span class="line">    - 模式：阻塞父窗口，需 `EndDialog` 关闭。</span><br><span class="line">    - 非模式：需特殊消息循环和 `DestroyWindow` 关闭。</span><br><span class="line">- **图标**：在窗口类中加载，区分自定义与系统图标。</span><br><span class="line">- **资源文件**：统一定义各类资源（菜单、加速键、位图、对话框、图标）。</span><br><span class="line"></span><br><span class="line"># 第六章  MFC概述</span><br><span class="line"></span><br><span class="line">### **第6章 MFC基础知识**</span><br><span class="line"></span><br><span class="line">#### **6.1 MFC概述**</span><br><span class="line"></span><br><span class="line">1. **MFC定义**</span><br><span class="line"></span><br><span class="line">    - 用于编写Windows应用程序的**C++类库**，以层次结构组织。</span><br><span class="line">    - 封装大部分Windows API函数和控件，覆盖整个Windows操作系统功能。</span><br><span class="line"></span><br><span class="line">2. **核心功能**</span><br><span class="line"></span><br><span class="line">    - 提供Windows图形应用程序框架及创建组件。</span><br><span class="line">    - 提供大量可扩展的基类，支持自定义和扩展类。</span><br><span class="line">    - 保持向下兼容性和跨平台移植性。</span><br><span class="line"></span><br><span class="line">3. **发展历程**</span><br><span class="line"></span><br><span class="line">    | 版本     | 关键特性                                        | 配套环境     |</span><br><span class="line">    | -------- | ----------------------------------------------- | ------------ |</span><br><span class="line">    | MFC 1.0  | 基础GUI类                                       | MS C/C++ 7.0 |</span><br><span class="line">    | MFC 2.0  | 增强应用程序功能                                | VC++ 1.0/1.5 |</span><br><span class="line">    | MFC 3.0  | 支持32位应用、Win95新控件、DAO、MAPI            | VC++ 2.0     |</span><br><span class="line">    | MFC 4.0  | 强化数据库支持（DAO类）                         | -            |</span><br><span class="line">    | MFC 4.21 | 增强Internet支持                                | -            |</span><br><span class="line">    | MFC 5.0  | 支持ODBC/DAO数据库、Win32 Internet API、ActiveX | -            |</span><br><span class="line">    | MFC 6.0  | 活动文档容器、动态HTML（CHtmlView）、新控件     | -            |</span><br><span class="line">    | MFC 9.0  | 支持AJax、强化数据库、工作流编程模型            | VC++ 2008    |</span><br><span class="line"></span><br><span class="line">------</span><br><span class="line"></span><br><span class="line">#### **6.2 MFC类的组织结构**</span><br><span class="line"></span><br><span class="line">1. **类层次划分（10大类）**</span><br><span class="line">    - 根类：`CObject`</span><br><span class="line">    - 应用程序体系结构类</span><br><span class="line">    - 窗口、对话框和控件类</span><br><span class="line">    - 绘图和打印类</span><br><span class="line">    - 简单数据类型类</span><br><span class="line">    - 数组、列表和映射类</span><br><span class="line">    - 文件和数据库类</span><br><span class="line">    - Internet和网络类</span><br><span class="line">    - OLE类</span><br><span class="line">    - 调试和异常类</span><br><span class="line">2. **关键类详解**</span><br><span class="line">    - **根类 `CObject`**</span><br><span class="line">        - 所有MFC类的基类，提供公共操作：</span><br><span class="line">            - 对象创建/删除、运行时类型信息、串行化支持、诊断输出。</span><br><span class="line">    - **应用程序体系结构类**</span><br><span class="line">        - `CCmdTarget`：消息映射基类（如菜单命令处理）。</span><br><span class="line">        - `CWinThread`：线程基类，`CWinApp`（应用程序主对象）的父类。</span><br><span class="line">        - 文档/视类</span><br><span class="line">            - 文档类管理数据，视类（`CView`）显示数据并处理用户交互。</span><br><span class="line">    - **可视对象类**</span><br><span class="line">        - `CWnd`：所有窗口的基类，封装窗口操作。</span><br><span class="line">        - `CView`：框架窗口客户区显示，派生类包括滚动视图（`CScrollView`）、编辑视图（`CEditView`）。</span><br><span class="line">        - 控件类：按钮、列表框等UI组件。</span><br><span class="line">        - `CDC`：设备上下文类，支持绘图操作。</span><br><span class="line">        - `CGdiObject`：绘图工具基类（画笔、画刷等）。</span><br><span class="line">    - **通用类**</span><br><span class="line">        - 文件类：`CFile`（文件I/O）、`CArchive`（序列化）。</span><br><span class="line">        - 异常类：`CException`及其子类（如内存异常`CMemoryException`、文件异常`CFileException`）。</span><br><span class="line">        - 模板收集类：管理数组、列表、映射等数据结构。</span><br><span class="line">    - **OLE类**</span><br><span class="line">        - 支持OLE技术，包含9个核心类（如`COleDocument`、`COleServer`）。</span><br><span class="line">    - **ODBC数据库类**</span><br><span class="line">        - `CDatabase`：连接数据源。</span><br><span class="line">        - `CRecordset`：操作记录集。</span><br><span class="line">        - `CRecordView`：表单视图显示记录。</span><br><span class="line"></span><br><span class="line">------</span><br><span class="line"></span><br><span class="line">#### **6.3 全局函数与变量**</span><br><span class="line"></span><br><span class="line">- **命名规则**：以 `Afx` 为前缀（数据库类函数除外）。</span><br><span class="line">- 常用全局函数：</span><br><span class="line">    - `AfxMessageBox()`：弹出消息框。</span><br><span class="line">    - `AfxGetApp()`：获取当前应用程序对象指针。</span><br><span class="line">    - `AfxBeginThread()`：创建新线程。</span><br><span class="line">    - `AfxRegisterWndClass()`：注册窗口类。</span><br><span class="line"></span><br><span class="line">------</span><br><span class="line"></span><br><span class="line">#### **6.4 应用程序向导**</span><br><span class="line"></span><br><span class="line">- 用于生成**单文档应用（SDI）** 框架，提供项目配置选项卡。</span><br><span class="line"></span><br><span class="line">------</span><br><span class="line"></span><br><span class="line">### **关键要点总结**</span><br><span class="line"></span><br><span class="line">1. **MFC定位**：封装Windows API的C++类库，提供应用程序框架和组件。</span><br><span class="line">2. **类层次结构**：以`CObject`为根，10大类覆盖从UI到数据库的全功能支持。</span><br><span class="line">3. 核心类：</span><br><span class="line">    - `CWinApp`管理应用生命周期，`CWinThread`支持多线程。</span><br><span class="line">    - 文档/视结构分离数据管理与显示逻辑。</span><br><span class="line">    - `CWnd`和`CDC`实现窗口与绘图功能。</span><br><span class="line">4. 扩展能力：</span><br><span class="line">    - 数据库（ODBC/DAO）、Internet（Win32 Internet API）、OLE技术深度集成。</span><br><span class="line">5. 开发支持</span><br><span class="line">    - 全局函数简化常用操作（如`AfxMessageBox`）。</span><br><span class="line">    - 应用程序向导快速生成项目框架。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 第7章 Windows 标准控件在可视化编程中的应用</span><br><span class="line"></span><br><span class="line">#### **7.1 概述**</span><br><span class="line">• 控件的作用：Windows GUI的核心组件，用户通过控件与应用程序交互，体现面向对象特性。</span><br><span class="line"></span><br><span class="line">• 控件添加方法：</span><br><span class="line"></span><br><span class="line">  1. 代码创建：</span><br><span class="line"></span><br><span class="line">    ◦ 步骤：定义控件对象（如 `CButton mybtn`）→ 调用 `Create()` 初始化（指定样式、位置、父窗口、ID）→ 显示控件（`ShowWindow()`）→ 管理控件（`MoveWindow()`, `SetWindowText()`等）。</span><br><span class="line">    </span><br><span class="line">    ◦ 备注：需预定义窗口类。</span><br><span class="line"></span><br><span class="line">  2. 可视化工具：在对话框编辑器中拖放控件。</span><br><span class="line"></span><br><span class="line">• 消息映射机制：</span><br><span class="line"></span><br><span class="line">  • 目的：绑定控件事件与处理函数。</span><br><span class="line"></span><br><span class="line">  • 流程：</span><br><span class="line"></span><br><span class="line">    ◦ 声明消息处理函数（如 `afx_msg void OnBnClickedButton1();`）。</span><br><span class="line">    </span><br><span class="line">    ◦ 添加消息映射宏（如 `ON_BN_CLICKED(IDC_BUTTON1, OnBnClickedButton1)`）。</span><br><span class="line">    </span><br><span class="line">    ◦ 实现处理函数（如 `void CMyDlg::OnBnClickedExit() &#123; OnOK(); &#125;`）。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">• 控件使用技巧：</span><br><span class="line"></span><br><span class="line">  1. 获取控件指针：`GetDlgItem(IDC_EDIT1)` 返回 `CWnd*`。</span><br><span class="line">  2. 控件变量绑定：</span><br><span class="line"></span><br><span class="line">    ◦ Control型：访问控件成员（如 `CEdit* pEdit`）。</span><br><span class="line">    </span><br><span class="line">    ◦ Value型（如 `CString`）：通过 `UpdateData(TRUE/FALSE)` 刷新数据，依赖 `DoDataExchange()` 中的 `DDX_Text` 等函数。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">• 自定义控件类：</span><br><span class="line"></span><br><span class="line">  • 步骤：继承MFC控件类（如 `CButton`）→ 添加新功能成员 → 在变量类型中使用自定义类。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">---</span><br><span class="line"></span><br><span class="line">#### **7.2 按钮控件（CButton）**</span><br><span class="line">• 类型：普通按钮、单选按钮、复选框、组框、自绘按钮。</span><br><span class="line"></span><br><span class="line">• 创建方法：</span><br><span class="line"></span><br><span class="line">  ```cpp</span><br><span class="line">  BOOL Create(LPCTSTR lpszCaption, DWORD dwStyle, const RECT&amp; rect, CWnd* pParentWnd, UINT nID);</span><br></pre></td></tr></table></figure>
</code></pre>
<p>• 常用消息：</p>
<p>  • <code>ON_BN_CLICKED</code>：单击事件。</p>
<p>  • <code>ON_BN_DBLCLICKED</code>：双击事件。</p>
<p>• 状态管理函数：</p>
<p>  • <code>GetCheck()</code>&#x2F;<code>SetCheck()</code>：获取&#x2F;设置选中状态。</p>
<p>  • <code>SetBitmap()</code>&#x2F;<code>SetIcon()</code>：设置位图&#x2F;图标。</p>
<p>• 特殊按钮类：</p>
<p>  • <code>CBitmapButton</code>：支持4种状态位图（正常、按下、聚焦、禁用），通过 <code>LoadBitmaps()</code> 加载。</p>
<hr>
<h4 id="7-3-滚动条控件（CScrollBar）"><a href="#7-3-滚动条控件（CScrollBar）" class="headerlink" title="7.3 滚动条控件（CScrollBar）"></a><strong>7.3 滚动条控件（CScrollBar）</strong></h4><p>• 与窗口滚动条的区别：独立创建、由用户管理。</p>
<p>• 关键消息码：</p>
<p>  • <code>SB_LINEUP/DOWN</code>：单步滚动。</p>
<p>  • <code>SB_PAGEUP/DOWN</code>：翻页滚动。</p>
<p>  • <code>SB_THUMBTRACK</code>：拖动滑块。</p>
<p>• 初始化步骤：</p>
<ol>
<li>创建对象：<code>CScrollBar* pMyScroll = new CScrollBar</code>。</li>
<li>初始化：<code>pMyScroll-&gt;Create(...)</code>。</li>
<li>设置范围：<code>pMyScroll-&gt;SetScrollRange(min, max)</code>。</li>
<li>设置位置：<code>pMyScroll-&gt;SetScrollPos(value)</code>。</li>
</ol>
<hr>
<h4 id="7-4-静态控件（CStatic）"><a href="#7-4-静态控件（CStatic）" class="headerlink" title="7.4 静态控件（CStatic）"></a><strong>7.4 静态控件（CStatic）</strong></h4><p>• 特点：默认不发送消息，需添加 <code>SS_NOTIFY</code> 样式才能响应事件（如单击）。</p>
<p>• 应用示例：</p>
<p>  • 显示位图：<code>m_bmp.ModifyStyle(0, SS_BITMAP)</code> + <code>SetBitmap()</code>。</p>
<p>  • 响应单击：处理 <code>BN_CLICKED</code> 消息，获取位图尺寸并显示。</p>
<hr>
<h4 id="7-5-列表框控件（CListBox）"><a href="#7-5-列表框控件（CListBox）" class="headerlink" title="7.5 列表框控件（CListBox）"></a><strong>7.5 列表框控件（CListBox）</strong></h4><p>• 功能：从列表中选择单项或多项。</p>
<p>• 关键方法：</p>
<p>  • 通用：<code>AddString()</code>, <code>DeleteString()</code>, <code>ResetContent()</code>。</p>
<p>  • 单项选择：<code>GetCurSel()</code>, <code>SetCurSel()</code>。</p>
<p>  • 多项选择：<code>GetSelItems()</code>, <code>SetSel()</code>。</p>
<p>• 消息传递：</p>
<p>  • 用户操作 → 发送 <code>WM_COMMAND</code>（含 <code>LBN_DBLCLK</code> 等通知码）。</p>
<p>  • 程序操作：通过 <code>SendMessage</code> 发送消息（如 <code>LB_DIR</code> 加载文件列表）。</p>
<hr>
<h4 id="7-6-编辑框控件（CEdit）"><a href="#7-6-编辑框控件（CEdit）" class="headerlink" title="7.6 编辑框控件（CEdit）"></a><strong>7.6 编辑框控件（CEdit）</strong></h4><p>• 类型：单行&#x2F;多行（支持滚动条）。</p>
<p>• 数据交互：</p>
<p>  • 获取&#x2F;设置文本：<code>GetWindowText()</code>&#x2F;<code>SetWindowText()</code>。</p>
<p>  • 剪贴板操作：<code>Copy()</code>, <code>Paste()</code>。</p>
<p>  • 撤销操作：<code>Undo()</code>。</p>
<p>• 实时计算示例：编辑框内容变化时触发 <code>OnEnChangeNum1()</code> 更新结果。</p>
<hr>
<h4 id="7-7-组合框控件（CComboBox）"><a href="#7-7-组合框控件（CComboBox）" class="headerlink" title="7.7 组合框控件（CComboBox）"></a><strong>7.7 组合框控件（CComboBox）</strong></h4><p>• 特点：编辑框 + 列表框的组合。</p>
<p>• 常用方法：</p>
<p>  • <code>AddString()</code>：添加选项。</p>
<p>  • <code>GetCurSel()</code>&#x2F;<code>GetLBText()</code>：获取选中项。</p>
<p>• 消息响应：<code>CBN_SELCHANGE</code> 选项改变时触发。</p>
<hr>
<h4 id="7-8-对话框通用控件"><a href="#7-8-对话框通用控件" class="headerlink" title="7.8 对话框通用控件"></a><strong>7.8 对话框通用控件</strong></h4><ol>
<li><p>Picture控件：<br>• 分隔线：设置 <code>Type=Frame</code>, <code>Color=Etched</code>。</p>
<p>• 显示图片：<code>Type=Bitmap/Icon</code>, 绑定资源ID。</p>
</li>
<li><p>Spin控件：<br>• 与伙伴控件（如编辑框）联动：设置 <code>Auto Buddy</code> 和 <code>SetBuddy()</code>。</p>
<p>• 范围设置：<code>SetRange(0, 100)</code>。</p>
</li>
<li><p>Progress控件：<br>• 初始化：<code>SetRange(0,100)</code>, <code>SetPos(0)</code>。</p>
<p>• 模拟进度：定时器调用 <code>SetPos(i++)</code>。</p>
</li>
<li><p>Slider控件：<br>• 响应滑动：处理 <code>WM_HSCROLL</code> 消息，用 <code>GetPos()</code> 更新显示。</p>
</li>
<li><p>DateTimePicker控件：<br>• 格式化日期：<code>SetFormat(&quot;&#39;Today: &#39;yy&#39;/&#39;MM&#39;/&#39;dd&quot;)</code>。</p>
<p>• 获取时间：<code>GetTime(t)</code> → <code>t.Format()</code>。</p>
</li>
<li><p>List Control控件：<br>• 视图模式：图标&#x2F;列表&#x2F;报表。</p>
<p>• 关键操作：<code>InsertItem()</code>, 响应 <code>LVN_ENDLABELEDIT</code> 编辑标签。</p>
</li>
<li><p>Tree Control控件：<br>• 构建层级：<code>InsertItem()</code> 填充 <code>TV_INSERTSTRUCT</code> 结构。</p>
<p>• 消息响应：<code>TVN_SELCHANGED</code> 获取选中项，<code>TVN_ENDLABELEDIT</code> 编辑节点。</p>
</li>
</ol>
<hr>
<h3 id="核心知识点总结"><a href="#核心知识点总结" class="headerlink" title="核心知识点总结"></a><strong>核心知识点总结</strong></h3><p>• 控件共性：通过 <code>Create()</code> 动态创建或资源编辑器添加，依赖消息映射处理事件。</p>
<p>• 数据绑定：<code>DDX</code> 机制实现控件与变量同步（<code>UpdateData()</code>）。</p>
<p>• 高级控件：如 <code>CListCtrl</code> 和 <code>CTreeCtrl</code> 需配合图像列表（<code>CImageList</code>）管理图标。</p>
<p>• 交互设计：滚动条&#x2F;滑块的范围控制、Spin的伙伴控件、Progress的定时更新等需精细处理。</p>
<p>此总结完全基于原始文档内容，未增删技术细节，保留了所有关键API、消息机制和示例逻辑。</p>
<h1 id="第8章-在MFC中创建应用程序的资源"><a href="#第8章-在MFC中创建应用程序的资源" class="headerlink" title="第8章 在MFC中创建应用程序的资源"></a>第8章 在MFC中创建应用程序的资源</h1><h4 id="8-0-资源基础"><a href="#8-0-资源基础" class="headerlink" title="8.0 资源基础"></a><strong>8.0 资源基础</strong></h4><ul>
<li>资源特性<ul>
<li>独立于代码，由Resource Compiler编译后嵌入可执行文件。</li>
<li>支持复用：通过导入&#x2F;导出功能实现。</li>
<li>国际化：通过资源替换实现多语言支持。</li>
</ul>
</li>
<li>资源查看示例<ul>
<li>路径：<code>c:\Windows\cards.dll</code> 或 <code>c:\WINNT\System32</code>（查看图片资源）。</li>
</ul>
</li>
</ul>
<hr>
<h4 id="8-2-资源应用"><a href="#8-2-资源应用" class="headerlink" title="8.2 资源应用"></a><strong>8.2 资源应用</strong></h4><h5 id="8-2-1-菜单资源"><a href="#8-2-1-菜单资源" class="headerlink" title="8.2.1 菜单资源"></a><strong>8.2.1 菜单资源</strong></h5><ul>
<li><p><strong>示例功能</strong><br>   单文档程序显示字符串”Hello World!”，通过菜单控制显示状态和颜色（红&#x2F;绿&#x2F;蓝）。</p>
</li>
<li><p><strong>关键步骤</strong></p>
<p>  1. </p>
<pre><code>  成员变量声明

  （

  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CMy_ResView.h</span><br></pre></td></tr></table></figure>

  ）:

  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">COLORREF m_nColors[3];  // 颜色数组</span><br><span class="line">DWORD m_nColorIndex;    // 当前颜色索引</span><br><span class="line">CString m_strShow;      // 显示内容</span><br><span class="line">BOOL m_bShow;           // 显示状态</span><br></pre></td></tr></table></figure>
</code></pre>
<ol start="2">
<li><p>初始化</p>
<p> （构造函数）:</p>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">m_nColors[0] = RGB(255,0,0);  // 红</span><br><span class="line">m_nColors[1] = RGB(0,255,0);  // 绿</span><br><span class="line">m_nColors[2] = RGB(0,0,255);  // 蓝</span><br><span class="line">m_nColorIndex = 0;</span><br><span class="line">m_strShow = L&quot;Hello World!&quot;;</span><br><span class="line">m_bShow = TRUE;</span><br></pre></td></tr></table></figure>
</li>
<li><p>绘制字符串</p>
<p> （</p>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">OnDraw</span><br></pre></td></tr></table></figure>

<p> ）:</p>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">if(m_bShow) &#123;</span><br><span class="line">    pDC-&gt;SetTextColor(m_nColors[m_nColorIndex]);</span><br><span class="line">    pDC-&gt;TextOut(100, 100, m_strShow);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
</li>
<li><p><strong>消息处理机制</strong></p>
<ul>
<li><p>COMMAND消息</p>
<p>  （菜单点击响应）:</p>
<ul>
<li>函数：<code>OnOperShow()</code>，切换<code>m_bShow</code>并刷新视图。</li>
<li>映射：<code>ON_COMMAND(ID_OPER_SHOW, OnOperShow)</code>。</li>
</ul>
</li>
<li><p>UPDATE_COMMAND_UI消息</p>
<p>  （菜单状态更新）:</p>
<ul>
<li>函数：<code>OnUpdateOperShow(CCmdUI* pCmdUI)</code>，设置勾选状态。</li>
<li>方法：<code>pCmdUI-&gt;SetCheck(m_bShow)</code>。</li>
</ul>
</li>
<li><p>批量处理连续ID</p>
<p>  （颜色菜单）:</p>
<ul>
<li>宏：<code>ON_COMMAND_RANGE(ID_OPER_RED, ID_OPER_BLUE, OnOperColorChange)</code>。</li>
<li>函数：<code>OnOperColorChange(WORD nID)</code>，计算颜色索引。</li>
<li>更新宏：<code>ON_UPDATE_COMMAND_UI_RANGE</code>，设置单选状态。</li>
</ul>
</li>
</ul>
</li>
</ul>
<hr>
<h5 id="8-2-2-快捷菜单"><a href="#8-2-2-快捷菜单" class="headerlink" title="8.2.2 快捷菜单"></a><strong>8.2.2 快捷菜单</strong></h5><ul>
<li><p>创建步骤</p>
<ol>
<li><p>新增菜单资源 <code>IDR_MENU_POP</code>。</p>
</li>
<li><p>声明变量：<code>CMenu m_PopMenu</code>, <code>CMenu* m_pPop</code>。</p>
</li>
<li><p>加载资源（构造函数）：<code>m_PopMenu.LoadMenu(IDR_MENU_VIEW)</code>。</p>
</li>
<li><p>右键响应：</p>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">OnRButtonDown()</span><br></pre></td></tr></table></figure>

<p> 中显示菜单：</p>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">m_pPop = m_PopMenu.GetSubMenu(0);</span><br><span class="line">m_pPop-&gt;TrackPopupMenu(TPM_LEFTALIGN, point.x, point.y, this);</span><br></pre></td></tr></table></figure></li>
</ol>
</li>
</ul>
<hr>
<h5 id="8-2-3-加速键"><a href="#8-2-3-加速键" class="headerlink" title="8.2.3 加速键"></a><strong>8.2.3 加速键</strong></h5><ul>
<li>添加方法<ol>
<li>在加速键资源表（<code>IDR_MAINFRAME</code>）新增条目。</li>
<li>绑定菜单项ID（如 <code>ID_OPER_SHOW</code>）。</li>
<li>设置快捷键：按 <code>Ctrl+W</code> 自动填充属性。</li>
</ol>
</li>
</ul>
<hr>
<h5 id="8-2-4-工具条"><a href="#8-2-4-工具条" class="headerlink" title="8.2.4 工具条"></a><strong>8.2.4 工具条</strong></h5><ul>
<li><p><strong>关键类</strong>：<code>CToolBar</code>（派生自 <code>CWnd</code>）。</p>
<p>  创建流程</p>
<ol>
<li><p>添加工具条资源 <code>IDR_TOOLBAR_NEW</code>。</p>
</li>
<li><p>在 <code>CMainFrame</code> 声明变量：<code>CToolBar m_wndToolBarNew</code>。</p>
</li>
<li><pre><code> OnCreate()
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">中创建并加载：</span><br><span class="line"></span><br></pre></td></tr></table></figure>
 m_wndToolBarNew.CreateEx(...);
 m_wndToolBarNew.LoadToolBar(IDR_TOOLBAR_NEW);
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">4. </span><br><span class="line"></span><br><span class="line">    停靠设置</span><br><span class="line"></span><br><span class="line">    ：</span><br><span class="line"></span><br></pre></td></tr></table></figure>
 m_wndToolBarNew.EnableDocking(CBRS_ALIGN_ANY);
 DockControlBar(&amp;m_wndToolBarNew);
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">- **样式控制**：</span><br><span class="line">     `SetBarStyle()` 设置提示文本（`CBRS_TOOLTIPS`）和动态尺寸（`CBRS_SIZE_DYNAMIC`）。</span><br><span class="line"></span><br><span class="line">------</span><br><span class="line"></span><br><span class="line">##### **8.2.5 图标资源**</span><br><span class="line"></span><br><span class="line">- **用途**：程序窗口/任务栏/资源管理器图标。</span><br><span class="line">- 修改方法</span><br><span class="line">    1. 编辑资源 `IDR_MAINFRAME`。</span><br><span class="line">    2. 支持多尺寸：16×16（任务栏）、32×32（对话框）、48×48（缩略图）。</span><br><span class="line">    3. 通过 **New Device Image** 添加新尺寸。</span><br><span class="line"></span><br><span class="line">------</span><br><span class="line"></span><br><span class="line">##### **8.2.6 字符串资源**</span><br><span class="line"></span><br><span class="line">- 多语言支持</span><br><span class="line">    1. 在字符串表新增条目（如 `IDS_STRING_HELLO`）。</span><br><span class="line">    2. 代码加载：`m_strShow.LoadString(IDS_STRING_HELLO)`。</span><br><span class="line">- **优势**：集中管理字符串，便于维护和国际化。</span><br><span class="line"></span><br><span class="line">------</span><br><span class="line"></span><br><span class="line">##### **8.2.7 对话框资源**</span><br><span class="line"></span><br><span class="line">- 创建步骤</span><br><span class="line"></span><br><span class="line">    1. 添加对话框资源 `IDD_DIALOG_NEW`。</span><br><span class="line"></span><br><span class="line">    2. 绑定类 `CInputDlg`，关联控件变量 `m_strInput`（`DDX_Text` 映射）。</span><br><span class="line"></span><br><span class="line">    3. 使用对话框：</span><br><span class="line"></span><br></pre></td></tr></table></figure>
 CInputDlg dlgInput;
 if (dlgInput.DoModal() == IDOK) &#123;
     m_strShow = dlgInput.m_strInput;
     Invalidate();
 &#125;
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">------</span><br><span class="line"></span><br><span class="line">##### **8.2.8 位图资源**</span><br><span class="line"></span><br><span class="line">- 显示流程</span><br><span class="line"></span><br><span class="line">    1. 加载位图资源：`bmp.LoadBitmap(IDB_BITMAP_256)`。</span><br><span class="line"></span><br><span class="line">    2. 获取尺寸：`bmp.GetBitmap(&amp;bmpInfo)`。</span><br><span class="line"></span><br><span class="line">    3. 内存DC缓冲：</span><br><span class="line"></span><br></pre></td></tr></table></figure>
 CDC dcMemory;
 dcMemory.CreateCompatibleDC(pDC);
 dcMemory.SelectObject(&amp;bmp);
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">    4. 绘制到屏幕：`pDC-&gt;BitBlt(...)`。</span><br><span class="line"></span><br><span class="line">- **注意事项**：VC6 仅支持 ≤256 色位图编辑。</span><br><span class="line"></span><br><span class="line">------</span><br><span class="line"></span><br><span class="line">### **关键总结**</span><br><span class="line"></span><br><span class="line">- **资源复用**：通过导入/导出实现跨项目共享。</span><br><span class="line">- 消息机制：</span><br><span class="line">    - `COMMAND` 响应操作，`UPDATE_COMMAND_UI` 更新状态。</span><br><span class="line">    - `ON_COMMAND_RANGE` 批量处理连续ID。</span><br><span class="line">- **资源类型关联**：菜单、加速键、工具条需绑定同一ID实现功能统一。</span><br><span class="line">- **内存管理**：手动释放资源（如 `m_PopMenu.DestroyMenu()`）。</span><br><span class="line"></span><br><span class="line"># 第9章 单文档与多文档 </span><br><span class="line"></span><br><span class="line">### </span><br><span class="line">#### **9.1 概述**</span><br><span class="line">1. 9.1.1 单文档界面（SDI）与多文档界面（MDI）</span><br><span class="line">   • SDI特点：</span><br><span class="line"></span><br><span class="line">     ◦ 仅一个主窗口（`CMainFrame`基类为`CFrameWnd`）。</span><br><span class="line"></span><br><span class="line">     ◦ 每次操作一个文档（如记事本）。</span><br><span class="line"></span><br><span class="line">   • MDI特点：</span><br><span class="line"></span><br><span class="line">     ◦ 多个子窗口（`CMainFrame`基类为`CMDIFrameWnd`）。</span><br><span class="line"></span><br><span class="line">     ◦ 同时操作多个文档（如Visual Studio）。</span><br><span class="line"></span><br><span class="line">   • 创建流程：</span><br><span class="line"></span><br><span class="line">     ◦ 使用AppWizard创建SDI/MDI过程相似。</span><br><span class="line"></span><br><span class="line">     ◦ MDI通过`CDocument::OnNewDocument`创建子窗口。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">2. 9.1.2 文档/视图结构</span><br><span class="line">   • 核心分工：</span><br><span class="line"></span><br><span class="line">     ◦ 文档类（CDocument）：</span><br><span class="line"></span><br><span class="line">       ◦ 管理数据（成员变量存储）。</span><br><span class="line">       </span><br><span class="line">       ◦ 串行化（`Serialize`）保存/加载数据。</span><br><span class="line">       </span><br><span class="line">       ◦ 仅处理`WM_COMMAND`消息（菜单/工具栏）。</span><br><span class="line"></span><br><span class="line">     ◦ 视图类（CView）：</span><br><span class="line"></span><br><span class="line">       ◦ 显示数据（通过`GetDocument`访问文档）。</span><br><span class="line">       </span><br><span class="line">       ◦ 接收用户输入并更新文档。</span><br><span class="line">       </span><br><span class="line">       ◦ 可处理所有Windows消息。</span><br><span class="line"></span><br><span class="line">   • 工作机制：</span><br><span class="line"></span><br><span class="line">     ◦ 视图通过`GetDocument`获取文档指针。</span><br><span class="line"></span><br><span class="line">     ◦ 用户通过视图修改数据 → 视图通知文档更新 → 文档保存数据。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">3. 9.1.3 SDI对象创建流程</span><br><span class="line">   • 在`InitInstance()`中通过文档模板创建：</span><br><span class="line"></span><br><span class="line">     ```cpp</span><br><span class="line">     CSingleDocTemplate* pDocTemplate = new CSingleDocTemplate(</span><br><span class="line">         IDR_MAINFRAME,</span><br><span class="line">         RUNTIME_CLASS(CMyDoc),    // 文档类</span><br><span class="line">         RUNTIME_CLASS(CMainFrame), // 框架类</span><br><span class="line">         RUNTIME_CLASS(CMyView)     // 视图类</span><br><span class="line">     );</span><br><span class="line">     AddDocTemplate(pDocTemplate);</span><br></pre></td></tr></table></figure>
</code></pre>
</li>
</ol>
</li>
</ul>
<ol start="4">
<li><p>9.1.4 SDI消息传递<br>• <code>WM_COMMAND</code>消息传递路径：  </p>
<p>  视图 → 文档 → 文档模板 → 框架窗口 → 应用程序。</p>
</li>
</ol>
<hr>
<h4 id="9-2-Doc-View框架核心类"><a href="#9-2-Doc-View框架核心类" class="headerlink" title="9.2 Doc&#x2F;View框架核心类"></a><strong>9.2 Doc&#x2F;View框架核心类</strong></h4><table>
<thead>
<tr>
<th>类</th>
<th>核心职责</th>
<th>关键成员&#x2F;方法</th>
</tr>
</thead>
<tbody><tr>
<td>CWinApp</td>
<td>管理进程生命周期、消息循环、资源</td>
<td><code>m_pMainWnd</code>（主窗口指针）<br><code>LoadCursor()</code>（加载资源）</td>
</tr>
<tr>
<td>CDocument</td>
<td>数据管理、串行化、维护视图列表</td>
<td><code>SetModifiedFlag()</code>（标记修改）<br><code>UpdateAllViews()</code>（刷新视图）<br><code>Serialize()</code></td>
</tr>
<tr>
<td>CView</td>
<td>数据显示、用户交互</td>
<td><code>OnDraw()</code>（绘制数据）<br><code>GetDocument()</code>（获取文档指针）</td>
</tr>
<tr>
<td>CDocTemplate</td>
<td>关联文档&#x2F;视图&#x2F;框架对象</td>
<td>构造函数绑定运行时类（文档、框架、视图）</td>
</tr>
<tr>
<td>CFrameWnd</td>
<td>管理框架窗口（菜单&#x2F;工具栏&#x2F;状态栏）</td>
<td>维护视图布局和消息路由</td>
</tr>
</tbody></table>
<hr>
<h4 id="9-3-关键技术概念"><a href="#9-3-关键技术概念" class="headerlink" title="9.3 关键技术概念"></a><strong>9.3 关键技术概念</strong></h4><ol>
<li><p>9.3.1 串行化（Serialization）<br>• 流程：通过<code>CArchive</code>对象读写数据。</p>
  <figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">CMyDoc::Serialize</span><span class="params">(CArchive&amp; ar)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (ar.<span class="built_in">IsStoring</span>()) ar &lt;&lt; m_data; <span class="comment">// 保存</span></span><br><span class="line">    <span class="keyword">else</span> ar &gt;&gt; m_data;               <span class="comment">// 加载</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>• 文件操作路径：  </p>
<p>  <code>CWinApp::OnFileOpen</code> → <code>CDocument::OnOpenDocument</code> → <code>Serialize()</code>。</p>
</li>
<li><p>9.3.2 消息映射（Message Map）<br>• 机制：消息处理函数绑定（通过宏实现）：</p>
  <figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="built_in">BEGIN_MESSAGE_MAP</span>(CMyView, CView)</span><br><span class="line">    <span class="built_in">ON_COMMAND</span>(ID_EDIT_CUT, OnEditCut)   <span class="comment">// 菜单命令</span></span><br><span class="line">    <span class="built_in">ON_WM_MOUSEMOVE</span>()                    <span class="comment">// Windows消息</span></span><br><span class="line"><span class="built_in">END_MESSAGE_MAP</span>()</span><br></pre></td></tr></table></figure>
</li>
<li><p>9.3.3 消息传递顺序<br>视图 → 文档 → 文档模板 → 子框架（MDI）→ 主框架 → 应用程序。</p>
</li>
</ol>
<hr>
<h4 id="9-4-SDI实例：动态文本显示"><a href="#9-4-SDI实例：动态文本显示" class="headerlink" title="9.4 SDI实例：动态文本显示"></a><strong>9.4 SDI实例：动态文本显示</strong></h4><p>• 功能：窗口中央显示文本，通过对话框修改内容。</p>
<p>• 关键实现：</p>
<ol>
<li>文档类：<br>定义<code>CString m_str</code>存储文本，在<code>OnNewDocument()</code>中初始化。</li>
<li>菜单命令：<br>调用对话框修改<code>m_str</code>，触发<code>UpdateAllViews(NULL)</code>刷新视图。</li>
<li>视图类：<br><code>OnDraw()</code>中调用<code>pDC-&gt;TextOut()</code>居中显示文本。</li>
<li>串行化：<br><code>Serialize()</code>中保存&#x2F;加载<code>m_str</code>。</li>
</ol>
<hr>
<h4 id="9-5-MDI实例：多类型文档支持"><a href="#9-5-MDI实例：多类型文档支持" class="headerlink" title="9.5 MDI实例：多类型文档支持"></a><strong>9.5 MDI实例：多类型文档支持</strong></h4><p>• 功能：支持文本文档（默认）和绘图文档。</p>
<p>• 关键实现：</p>
<ol>
<li><p>多文档模板注册：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 在InitInstance()中添加第二类文档模板</span></span><br><span class="line">CMultiDocTemplate* pDocTemplate2 = <span class="keyword">new</span> <span class="built_in">CMultiDocTemplate</span>(</span><br><span class="line">    IDR_MYMDITYPE2,              <span class="comment">// 资源ID</span></span><br><span class="line">    <span class="built_in">RUNTIME_CLASS</span>(CMyMdiDoc2),    <span class="comment">// 自定义文档类</span></span><br><span class="line">    <span class="built_in">RUNTIME_CLASS</span>(CChildFrame),   <span class="comment">// 子框架</span></span><br><span class="line">    <span class="built_in">RUNTIME_CLASS</span>(CMyMdiView2)    <span class="comment">// 自定义视图类</span></span><br><span class="line">);</span><br><span class="line"><span class="built_in">AddDocTemplate</span>(pDocTemplate2);</span><br></pre></td></tr></table></figure></li>
<li><p>绘图文档：<br>◦ 文档类：用<code>CPtrArray m_data</code>存储图形数据（<code>DrawData</code>对象）。</p>
<p>◦ 视图类：处理鼠标事件（<code>OnLButtonDown/Up</code>），在<code>OnDraw()</code>中绘制图形。</p>
</li>
<li><p>资源定制：<br>◦ 为第二类文档定义独立菜单（ID范围：<code>ID_LINE</code>至<code>ID_RECTANGLE</code>）。</p>
</li>
</ol>
<hr>
<h3 id="附录：关键技术速查表"><a href="#附录：关键技术速查表" class="headerlink" title="附录：关键技术速查表"></a><strong>附录：关键技术速查表</strong></h3><table>
<thead>
<tr>
<th>操作</th>
<th>方法</th>
</tr>
</thead>
<tbody><tr>
<td>获取文档关联的视图</td>
<td><code>GetFirstViewPosition()</code> + <code>GetNextView()</code></td>
</tr>
<tr>
<td>视图获取文档指针</td>
<td><code>GetDocument()</code></td>
</tr>
<tr>
<td>视图获取框架窗口</td>
<td><code>GetParentFrame()</code></td>
</tr>
<tr>
<td>全局获取应用程序对象</td>
<td><code>AfxGetApp()</code></td>
</tr>
<tr>
<td>强制刷新视图</td>
<td><code>Invalidate()</code> + <code>UpdateWindow()</code></td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>软件技术</category>
      </categories>
      <tags>
        <tag>笔记</tag>
        <tag>复习</tag>
        <tag>高级程序设计</tag>
      </tags>
  </entry>
  <entry>
    <title>How-To-Ask-Questions-The-Smart-Way</title>
    <url>/2025/08/09/How-To-Ask-Questions-The-Smart-Way/</url>
    <content><![CDATA[<blockquote>
<p>来自<a href="http://www.catb.org/~esr/faqs/smart-questions.html">How To Ask Questions The Smart Way</a></p>
<p>github：<a href="https://github.com/ryanhanwu/How-To-Ask-Questions-The-Smart-Way/blob/main/README-zh_CN.md">How-To-Ask-Questions-The-Smart-Way&#x2F;README-zh_CN.md at main · ryanhanwu&#x2F;How-To-Ask-Questions-The-Smart-Way</a></p>
</blockquote>
<p>​	自然语言AI技术的让喜欢问题的人得到了很大的满足，但是如何问问题，如何准确的问题是提高学习以及工作效率的关键。这个项目就介绍了如何问问题的方法以及做法。记录笔记一边学习复习。文章写得还挺有意思还挺幽默。</p>
<h3 id="Be-precise-and-informative-about-your-problem"><a href="#Be-precise-and-informative-about-your-problem" class="headerlink" title="Be precise and informative about your problem"></a>Be precise and informative about your problem</h3><ul>
<li>Describe the symptoms of your problem or bug carefully and clearly.</li>
<li>Describe the environment in which it occurs (machine, OS, application, whatever). Provide your vendor’s distribution and release level (e.g.: “Fedora Core 7”, “Slackware 9.1”, etc.).</li>
<li>Describe the research you did to try and understand the problem before you asked the question.</li>
<li>Describe the diagnostic steps you took to try and pin down the problem yourself before you asked the question.</li>
<li>Describe any possibly relevant recent changes in your computer or software configuration.</li>
<li>If at all possible, provide a way to <em>reproduce the problem in a controlled environment</em>.</li>
</ul>
<p>Do the best you can to anticipate the questions a hacker will ask, and answer them in advance in your request for help.</p>
<p>Giving hackers the ability to reproduce the problem in a controlled environment is especially important if you are reporting something you think is a bug in code. When you do this, your odds of getting a useful answer and the speed with which you are likely to get that answer both improve tremendously.</p>
<p>Simon Tatham has written an excellent essay entitled <a href="http://www.chiark.greenend.org.uk/~sgtatham/bugs.html">How to Report Bugs Effectively</a>. I strongly recommend that you read it.</p>
<h3 id="Describe-your-problem’s-symptoms-in-chronological-order"><a href="#Describe-your-problem’s-symptoms-in-chronological-order" class="headerlink" title="Describe your problem’s symptoms in chronological order"></a>Describe your problem’s symptoms in chronological order</h3><p>The clues most useful in figuring out something that went wrong often lie in the events immediately prior. So, your account should describe precisely what you did, and what the machine and software did, leading up to the blowup. In the case of command-line processes, having a session log (e.g., using the script utility) and quoting the relevant twenty or so lines is very useful.</p>
<p>If the program that blew up on you has diagnostic options (such as -v for verbose), try to select options that will add useful debugging information to the transcript. Remember that more is not necessarily better; try to choose a debug level that will inform rather than drowning the reader in junk.</p>
<p>If your account ends up being long (more than about four paragraphs), it might be useful to succinctly state the problem up top, then follow with the chronological tale. That way, hackers will know what to watch for in reading your account.</p>
<h3 id="Describe-the-goal-not-the-step"><a href="#Describe-the-goal-not-the-step" class="headerlink" title="Describe the goal, not the step"></a>Describe the goal, not the step</h3><p>If you are trying to find out how to do something (as opposed to reporting a bug), begin by describing the goal. Only then describe the particular step towards it that you are blocked on.</p>
<p>Often, people who need technical help have a high-level goal in mind and get stuck on what they think is one particular path towards the goal. They come for help with the step, but don’t realize that the path is wrong. It can take substantial effort to get past this.</p>
<ul>
<li><p><strong>Stupid:</strong></p>
<p>  How do I get the color-picker on the FooDraw program to take a hexadecimal RGB value?</p>
</li>
<li><p><strong>Smart:</strong></p>
<p>  I’m trying to replace the color table on an image with values of my choosing. Right now the only way I can see to do this is by editing each table slot, but I can’t get FooDraw’s color picker to take a hexadecimal RGB value.</p>
</li>
</ul>
<p>The second version of the question is smart. It allows an answer that suggests a tool better suited to the task.</p>
<hr>
<p>以上是这个项目我觉得有价值的部分片段。以下是一些其他的方法。(AI生成~)</p>
<p>学会提出高质量的问题是一项可以通过训练提升的关键能力，它能显著提高学习效率和问题解决能力。以下从认知科学和教育学角度提供系统建议，并附学术支撑：</p>
<h3 id="一、问题提出的认知机制（理论支撑）"><a href="#一、问题提出的认知机制（理论支撑）" class="headerlink" title="一、问题提出的认知机制（理论支撑）"></a>一、问题提出的认知机制（理论支撑）</h3><ol>
<li><strong>元认知理论</strong>（Flavell, 1979）表明，优秀提问者具备：</li>
</ol>
<ul>
<li>对自身知识局限的清晰认知</li>
<li>对信息缺口的敏感度</li>
<li>问题分类能力（《学会提问》尼尔·布朗，2021）</li>
</ul>
<ol start="2">
<li><strong>问题空间理论</strong>（Newell &amp; Simon, 1972）指出：<br>有效问题应明确初始状态与目标状态的差距<br>建议使用”现状-目标-障碍”框架：<br>“我现在知道__，需要达到__，但不确定__”</li>
</ol>
<h3 id="二、技术问题提问法则（实证研究）"><a href="#二、技术问题提问法则（实证研究）" class="headerlink" title="二、技术问题提问法则（实证研究）"></a>二、技术问题提问法则（实证研究）</h3><ol>
<li><strong>SMART提问模型</strong>（基于IEEE Transactions on Education研究）：</li>
</ol>
<ul>
<li>Specific：避免”我的代码不工作”这类表述</li>
<li>Measurable：包含可量化的错误信息</li>
<li>Actionable：说明已尝试的解决步骤</li>
<li>Relevant：关联具体技术栈版本</li>
<li>Time-bound：注明问题持续时间</li>
</ul>
<ol start="2">
<li><strong>调试提问模板</strong>（参考《有效软件调试》第3章）：<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">环境：Python 3.8 + TensorFlow 2.4</span><br><span class="line">现象：训练时出现NaN loss（第5epoch后）</span><br><span class="line">已尝试：1. 检查输入数据无NaN 2. 降低学习率至0.001</span><br><span class="line">疑问：梯度裁剪是否可能引起此问题？</span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="三、生活问题提问技术（心理学应用）"><a href="#三、生活问题提问技术（心理学应用）" class="headerlink" title="三、生活问题提问技术（心理学应用）"></a>三、生活问题提问技术（心理学应用）</h3><ol>
<li><strong>GROW模型</strong>（Whitmore, 1992教练技术）：</li>
</ol>
<ul>
<li>Goal：你想通过提问获得什么？</li>
<li>Reality：当前具体情况如何？</li>
<li>Options：已考虑哪些可能性？</li>
<li>Will：你准备采取什么行动？</li>
</ul>
<ol start="2">
<li><strong>批判性质问清单</strong>（改编自《批判性思维工具》Paul &amp; Elder）：<br>□ 这个问题涉及哪些利益相关方？<br>□ 我的预设前提是否可能错误？<br>□ 相反立场可能如何提问？</li>
</ol>
<h3 id="四、提问训练方法（教育学研究）"><a href="#四、提问训练方法（教育学研究）" class="headerlink" title="四、提问训练方法（教育学研究）"></a>四、提问训练方法（教育学研究）</h3><ol>
<li><p><strong>问题风暴法</strong>（基于MIT媒体实验室技术）：<br>针对同一主题连续提出20个问题<br>研究发现前5个问题通常表面化，后15个会触及本质（《Make Just Asking》2018）</p>
</li>
<li><p><strong>问题日志工具</strong>（参考《认知写作学》建议）：<br>记录每日关键问题，标注：</p>
</li>
</ol>
<ul>
<li>问题类型（事实性&#x2F;解释性&#x2F;评价性）</li>
<li>提问动机</li>
<li>获得的回答质量</li>
</ul>
<h3 id="五、高阶技巧"><a href="#五、高阶技巧" class="headerlink" title="五、高阶技巧"></a>五、高阶技巧</h3><ol>
<li><p><strong>苏格拉底诘问法</strong>（Paul, 1990）：<br>连续5层”为什么”追问本质原因<br>例：技术问题→设计决策→需求分析→业务目标→价值观</p>
</li>
<li><p><strong>反事实提问</strong>（Kahneman, 2011）：<br>“如果__条件改变，这个问题会如何变化？”<br>“假如这是最后一次提问机会，我会问什么？”</p>
</li>
</ol>
<p><strong>实践建议</strong>：从明天起建立”问题价值评估表”，从信息增量（0-5分）和解决潜力（0-5分）两个维度评估每个问题，持续两周可显著改善提问质量（基于Harvard Business Review 2020年实验数据）</p>
<p>需要针对某类具体问题（技术调试&#x2F;人际沟通&#x2F;决策分析）进一步展开时，可以随时提出细化需求。</p>
]]></content>
      <tags>
        <tag>笔记</tag>
        <tag>github</tag>
        <tag>projects</tag>
      </tags>
  </entry>
  <entry>
    <title>Jenkins部署与学习</title>
    <url>/2025/08/08/Jenkins%E9%83%A8%E7%BD%B2%E4%B8%8E%E5%AD%A6%E4%B9%A0/</url>
    <content><![CDATA[<blockquote>
<p>Jenkins:</p>
<p>开源的自动化构建和持续集成&#x2F;持续交付（CI&#x2F;CD）平台，广泛用于 DevOps 实践中。开发者将代码提交到 GitHub、GitLab 等代码仓库后，Jenkins 可以自动拉取代码，执行编译、测试、构建镜像、部署到测试环境等流程。例如，在一个微服务项目中，Jenkins 可监控每个服务的代码库变化，一旦发现提交，就触发自动化流水线，构建 Docker 镜像并推送到 Harbor，再通过 Ansible 或 Kubernetes 实现自动部署。Jenkins 拥有上千个插件，可集成 Maven、Gradle、Docker、Kubernetes、Slack 等工具，适用于从小型项目到企业级的 CI&#x2F;CD 自动化需求。</p>
<p>资源：</p>
<p>Jenkins源：</p>
<p>以下是一些常用的国内 Jenkins 插件更新源地址：<a href="https://www.cnblogs.com/guangdelw/p/18763336">jenkins配置国内源 - 厚礼蝎 - 博客园</a></p>
<ul>
<li>清华大学：<a href="https://mirrors.tuna.tsinghua.edu.cn/jenkins/updates/update-center.json">https://mirrors.tuna.tsinghua.edu.cn/jenkins/updates/update-center.json</a></li>
<li>华为开源镜像站：<a href="https://mirrors.huaweicloud.com/jenkins/updates/update-center.json">https://mirrors.huaweicloud.com/jenkins/updates/update-center.json</a></li>
<li>腾讯云：<a href="https://mirrors.cloud.tencent.com/jenkins/updates/update-center.json">https://mirrors.cloud.tencent.com/jenkins/updates/update-center.json</a></li>
<li>中国科学技术大学：<a href="https://mirrors.ustc.edu.cn/jenkins/updates/update-center.json">https://mirrors.ustc.edu.cn/jenkins/updates/update-center.json</a></li>
<li>北京理工大学：<a href="https://mirror.bit.edu.cn/jenkins/updates/update-center.json">https://mirror.bit.edu.cn/jenkins/updates/update-center.json</a></li>
</ul>
<p>插件下载：<a href="https://plugins.jenkins.io/">Jenkins Plugins</a></p>
</blockquote>
<h1 id="Jenkins部署与学习"><a href="#Jenkins部署与学习" class="headerlink" title="Jenkins部署与学习"></a>Jenkins部署与学习</h1><h2 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h2><h3 id="Docker安装本体"><a href="#Docker安装本体" class="headerlink" title="Docker安装本体"></a>Docker安装本体</h3><p>使用docker进行部署使用。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker pull jenkins/jenkins:lts</span><br><span class="line"><span class="comment"># 宿主机运行 Jenkins 时挂载 Docker socket</span></span><br><span class="line">docker run -d   --name jenkins   -p 8080:8080 -p 50000:50000   -v /data/soft/jenkins/home:/var/jenkins_home   jenkins/jenkins:lts</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>记录一下初始密码：<code>docker logs jenkins</code>或者<code>docker exec -it jenkins cat /var/jenkins_home/secrets/initialAdminPassword</code>或者在持久化目录看<code>cat /data/soft/jenkins/home/secrets/initialAdminPassword</code></p>
<h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><h4 id="换源"><a href="#换源" class="headerlink" title="换源"></a>换源</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim /data/soft/jenkins/home/hudson.model.UpdateCenter.xml</span><br></pre></td></tr></table></figure>

<p>替换源即可。</p>
<h4 id="配置插件"><a href="#配置插件" class="headerlink" title="配置插件"></a>配置插件</h4><p>离线下载git等插件到<code>/data/soft/jenkins/home/plugins</code></p>
<p>然后<code>docker restart jenkins</code>即可。</p>
<h2 id="学习"><a href="#学习" class="headerlink" title="学习"></a>学习</h2>]]></content>
      <categories>
        <category>软件技术</category>
      </categories>
      <tags>
        <tag>笔记</tag>
        <tag>linux</tag>
        <tag>运维</tag>
        <tag>docker</tag>
        <tag>Jenkins</tag>
        <tag>CI/CD</tag>
      </tags>
  </entry>
  <entry>
    <title>zabbix进阶学习</title>
    <url>/2025/08/10/zabbix%E8%BF%9B%E9%98%B6%E5%AD%A6%E4%B9%A0/</url>
    <content><![CDATA[<h1 id="zabbix进阶学习"><a href="#zabbix进阶学习" class="headerlink" title="zabbix进阶学习"></a>zabbix进阶学习</h1><h2 id="配置邮件"><a href="#配置邮件" class="headerlink" title="配置邮件"></a>配置邮件</h2><p>尝试过qq和163的smtp，qq的配置好了会出现login denied报错，最后使用了163。</p>
<p><img src="/../images/Linux/%E8%BF%90%E7%BB%B4/zabbix/image-20250810155035294.png" alt="image-20250810155035294"></p>
<p><img src="/../images/Linux/%E8%BF%90%E7%BB%B4/zabbix/image-20250810155247864.png" alt="image-20250810155247864"></p>
<h2 id="监控"><a href="#监控" class="headerlink" title="监控"></a>监控</h2><h3 id="监控基础数据"><a href="#监控基础数据" class="headerlink" title="监控基础数据"></a>监控基础数据</h3><h4 id="CPU、memory、DIsk"><a href="#CPU、memory、DIsk" class="headerlink" title="CPU、memory、DIsk"></a>CPU、memory、DIsk</h4><p>可以通过创建新的仪表板，选择监控项后展示即可。还是很方便的。</p>
<table>
<thead>
<tr>
<th align="left"><strong>监控对象</strong></th>
<th align="left"><strong>关键 Key</strong></th>
<th align="left"><strong>模板</strong></th>
</tr>
</thead>
<tbody><tr>
<td align="left">CPU</td>
<td align="left"><code>system.cpu.util[,all]</code></td>
<td align="left"><code>Template OS Linux</code></td>
</tr>
<tr>
<td align="left">内存</td>
<td align="left"><code>vm.memory.size[available]</code></td>
<td align="left"><code>Template OS Linux</code></td>
</tr>
<tr>
<td align="left">磁盘</td>
<td align="left">&#96;vfs.fs.size[</td>
<td align="left"></td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>软件技术</category>
      </categories>
      <tags>
        <tag>笔记</tag>
        <tag>linux</tag>
        <tag>运维</tag>
        <tag>docker</tag>
        <tag>zabbix</tag>
        <tag>硬件检测</tag>
      </tags>
  </entry>
</search>
