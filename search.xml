<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Regen&#39;s first page</title>
    <url>/2023/09/12/Regen-s-first-page/</url>
    <content><![CDATA[<h1 id="HOLA"><a href="#HOLA" class="headerlink" title="HOLA!!!!"></a>HOLA!!!!</h1><h1 id="INTRODUCTION-TOTHISBLOG"><a href="#INTRODUCTION-TOTHISBLOG" class="headerlink" title="INTRODUCTION 	TO	THIS	BLOG !!!!!!"></a>INTRODUCTION 	TO	THIS	BLOG !!!!!!</h1><p>​	<strong>这个博客目前是由国内代码平台 Gitee 托管。Gitee（码云）相当于中国国内的github,所以在这里托管可以不用挂代理。访问速度也是比较快的</strong>。</p>
<p>​	<strong>这个博客是基于开源框架HEXO,全站都是静态的，也许后续会更换框架试试WordPress等开源框架，不过需要购买云服务器了，这都是后话。</strong></p>
<p>​		查看链接：<a href="(https://github.com/hexojs/hexo)">HEXO</a></p>
<p>​	<strong>同时这个博客的主题也是开源的。名字是ayer。可以在github上面搜到。</strong></p>
<p>​		查看链接：<a href="(https://github.com/Shen-Yu/hexo-theme-ayer)">AYER</a></p>
<p>​	<strong>本网站所有的笔记（MarkDowm格式）都同步更新到了github</strong></p>
<p>​		查看链接：<a href="https://github.com/regenm/Notes">regenm&#x2F;Notes</a></p>
<p>​	感谢开源大佬们的贡献，让我这样的小白也可以有自己的博客，同时也希望自己在不久的将来也能在开源社区做出一点贡献。</p>
]]></content>
      <tags>
        <tag>about</tag>
        <tag>笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>MD语法尝试插入图片到博客</title>
    <url>/2023/09/16/MD%E8%AF%AD%E6%B3%95%E5%B0%9D%E8%AF%95%E6%8F%92%E5%85%A5%E5%9B%BE%E7%89%87%E5%88%B0%E5%8D%9A%E5%AE%A2/</url>
    <content><![CDATA[<h1 id="1-COVER1"><a href="#1-COVER1" class="headerlink" title="1.COVER1"></a>1.COVER1</h1><h1 id=""><a href="#" class="headerlink" title=""></a><img src="/images/cover1.jpg"></h1><h1 id="2-COVER2"><a href="#2-COVER2" class="headerlink" title="2.COVER2"></a>2.COVER2</h1><p><img src="/images/cover2.jpg"></p>
<h1 id="3-COVER3"><a href="#3-COVER3" class="headerlink" title="3.COVER3"></a>3.COVER3</h1><p><img src="/images/cover1.jpg">	</p>
]]></content>
      <tags>
        <tag>笔记</tag>
        <tag>md</tag>
      </tags>
  </entry>
  <entry>
    <title>MD语法学习笔记</title>
    <url>/2023/09/16/MD%E8%AF%AD%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h1 id="MD语法学习笔记"><a href="#MD语法学习笔记" class="headerlink" title="MD语法学习笔记"></a>MD语法学习笔记</h1><h2 id="1-基本符号："><a href="#1-基本符号：" class="headerlink" title="1.基本符号："></a>1.基本符号：</h2><p>​	md文档中基本标记都是基于 * - +. &gt; 这几个符号的组合操作</p>
<h2 id="2-标题。"><a href="#2-标题。" class="headerlink" title="2.标题。"></a>2.标题。</h2><p>​	MD总共有六级标题</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section"># 标题1 # </span></span><br><span class="line"><span class="section">## 标题2 ##</span></span><br><span class="line"><span class="section">### 标题3 ###</span></span><br><span class="line"><span class="section">#### 标题4 ####</span></span><br><span class="line"><span class="section">##### 标题5 #####</span></span><br><span class="line"><span class="section">###### 标题6 #######</span></span><br></pre></td></tr></table></figure>

<h1 id="标题1"><a href="#标题1" class="headerlink" title="标题1"></a>标题1</h1><h2 id="标题2"><a href="#标题2" class="headerlink" title="标题2"></a>标题2</h2><h3 id="标题3"><a href="#标题3" class="headerlink" title="标题3"></a>标题3</h3><h4 id="标题4"><a href="#标题4" class="headerlink" title="标题4"></a>标题4</h4><h5 id="标题5"><a href="#标题5" class="headerlink" title="标题5"></a>标题5</h5><h6 id="标题6"><a href="#标题6" class="headerlink" title="标题6"></a>标题6</h6><h2 id="3-列表。"><a href="#3-列表。" class="headerlink" title="3.列表。"></a>3.列表。</h2><ul>
<li>无序列表</li>
</ul>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="bullet">+</span> a</span><br><span class="line"><span class="bullet">+</span> b</span><br><span class="line"><span class="bullet">+</span> c</span><br><span class="line"> </span><br><span class="line"><span class="bullet">-</span> d</span><br><span class="line"><span class="bullet">-</span> e</span><br><span class="line"><span class="bullet">-</span> f</span><br><span class="line"> </span><br><span class="line"><span class="bullet">*</span> g</span><br><span class="line"><span class="bullet">*</span> h</span><br><span class="line"><span class="bullet">*</span> i</span><br></pre></td></tr></table></figure>

<ul>
<li>a</li>
<li>b</li>
<li>c</li>
</ul>
<ul>
<li>d</li>
<li>e</li>
<li>f</li>
</ul>
<ul>
<li>g</li>
<li>h</li>
<li>i</li>
</ul>
<ul>
<li>有序列表</li>
</ul>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">有序列表</span><br><span class="line"><span class="bullet">1.</span> abc</span><br><span class="line"><span class="bullet">2.</span> abc</span><br><span class="line"><span class="bullet">3.</span> dada</span><br><span class="line"> </span><br><span class="line">错序列表</span><br><span class="line"><span class="bullet">2.</span> awfa</span><br><span class="line"><span class="bullet">5.</span> awef</span><br><span class="line"><span class="bullet">25.</span> dfaf</span><br></pre></td></tr></table></figure>



<p>有序列表</p>
<ol>
<li>abc</li>
<li>abc</li>
<li>dada</li>
</ol>
<p>错序列表<br>2. awfa<br>5. awef<br>25. dfaf</p>
<ul>
<li>嵌套列表</li>
</ul>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">无序</span><br><span class="line"><span class="bullet">+</span> a</span><br><span class="line"><span class="bullet">  +</span> a1</span><br><span class="line"><span class="bullet">  +</span> a2</span><br><span class="line"><span class="bullet">+</span> ba</span><br><span class="line"><span class="bullet">+</span> c</span><br><span class="line"> </span><br><span class="line">有序</span><br><span class="line"><span class="bullet">1.</span> a</span><br><span class="line"><span class="bullet">   1.</span> adac</span><br><span class="line"><span class="bullet">      1.</span> adaw</span><br><span class="line"><span class="bullet">   2.</span> adfsda</span><br><span class="line"><span class="bullet">2.</span> ad</span><br><span class="line"><span class="bullet">3.</span> sad</span><br></pre></td></tr></table></figure>

<p>无序</p>
<ul>
<li>a<ul>
<li>a1</li>
<li>a2</li>
</ul>
</li>
<li>ba</li>
<li>c</li>
</ul>
<p>有序</p>
<ol>
<li>a<ol>
<li>adac<ol>
<li>adaw</li>
</ol>
</li>
<li>adfsda</li>
</ol>
</li>
<li>ad</li>
<li>sad</li>
</ol>
<h2 id="4-引用块。"><a href="#4-引用块。" class="headerlink" title="4.引用块。"></a>4.引用块。</h2><ul>
<li>引用</li>
</ul>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">引用</span><br><span class="line"><span class="quote">&gt; 引用1</span></span><br><span class="line">引用1 引用1</span><br><span class="line"> </span><br></pre></td></tr></table></figure>

<p>引用</p>
<blockquote>
<p>引用1<br>引用1 引用1</p>
</blockquote>
<ul>
<li>嵌套引用</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"> 嵌套引用</span><br><span class="line">&gt; 嵌套引用1 </span><br><span class="line">&gt;&gt; 嵌套引用1 </span><br></pre></td></tr></table></figure>

<p> 嵌套引用</p>
<blockquote>
<p>嵌套引用1 </p>
<blockquote>
<p>嵌套引用1 </p>
</blockquote>
</blockquote>
<h2 id="5-代码块。"><a href="#5-代码块。" class="headerlink" title="5.代码块。"></a>5.代码块。</h2><ul>
<li>单行</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">代码块</span><br><span class="line">`</span><br><span class="line">adaawf</span><br><span class="line">`</span><br></pre></td></tr></table></figure>

<p>代码块<br><code>adaawf</code></p>
<ul>
<li>多行代码块</li>
</ul>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="code">```</span></span><br><span class="line"><span class="code">adaawfwrfwr</span></span><br><span class="line"><span class="code">```</span></span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">adaawfwrfwr</span><br></pre></td></tr></table></figure>

<h2 id="6-链接。"><a href="#6-链接。" class="headerlink" title="6.链接。"></a>6.链接。</h2><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">[<span class="string">BAIDU</span>](<span class="link">www.baidu.com</span>)</span><br></pre></td></tr></table></figure>

<p><a href="www.baidu.com">BAIDU</a></p>
<h2 id="7-图片。"><a href="#7-图片。" class="headerlink" title="7.图片。"></a>7.图片。</h2><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">![<span class="string">图片</span>](<span class="link">https://note.youdao.com/favicon.ico</span>)</span><br></pre></td></tr></table></figure>

<p><img src="https://note.youdao.com/favicon.ico" alt="图片"></p>
<h2 id="8-分割线。"><a href="#8-分割线。" class="headerlink" title="8.	分割线。"></a>8.	分割线。</h2><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section">分割线</span></span><br><span class="line"><span class="section">---</span></span><br><span class="line"><span class="section">- - -</span></span><br><span class="line"><span class="section">-------</span></span><br><span class="line"><span class="strong">****</span>*</span><br><span class="line"><span class="bullet">*</span> * *</span><br><span class="line"><span class="strong">____</span></span><br></pre></td></tr></table></figure>

<hr>
<hr>
<hr>
<hr>
<hr>
<h2 id="9-表格。"><a href="#9-表格。" class="headerlink" title="9.表格。"></a>9.表格。</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">表格</span><br><span class="line">|123|234|345|</span><br><span class="line">|:-|:-:|-:|</span><br><span class="line">|abc|bcd|cde|</span><br><span class="line">|abc|bcd|cde|</span><br><span class="line">|abc|bcd|cde|</span><br><span class="line">|abc|bcd|cde|</span><br><span class="line">|abc|bcd|cde|</span><br><span class="line">//例子二</span><br><span class="line">|123|234|345|</span><br><span class="line">|:---|:---:|---:|</span><br><span class="line">|abc|bcd|cde|</span><br><span class="line">|abc|bcd|cde|</span><br><span class="line">|abc|bcd|cde|</span><br><span class="line">//例子三</span><br><span class="line">123|234|345</span><br><span class="line">:-|:-:|-:</span><br><span class="line">abc|bcd|cde</span><br><span class="line">abc|bcd|cde</span><br><span class="line">abc|bcd|cde</span><br></pre></td></tr></table></figure>

<p>表格</p>
<table>
<thead>
<tr>
<th align="left">123</th>
<th align="center">234</th>
<th align="right">345</th>
</tr>
</thead>
<tbody><tr>
<td align="left">abc</td>
<td align="center">bcd</td>
<td align="right">cde</td>
</tr>
<tr>
<td align="left">abc</td>
<td align="center">bcd</td>
<td align="right">cde</td>
</tr>
<tr>
<td align="left">abc</td>
<td align="center">bcd</td>
<td align="right">cde</td>
</tr>
<tr>
<td align="left">abc</td>
<td align="center">bcd</td>
<td align="right">cde</td>
</tr>
<tr>
<td align="left">abc</td>
<td align="center">bcd</td>
<td align="right">cde</td>
</tr>
<tr>
<td align="left">&#x2F;&#x2F;例子二</td>
<td align="center"></td>
<td align="right"></td>
</tr>
<tr>
<td align="left">123</td>
<td align="center">234</td>
<td align="right">345</td>
</tr>
<tr>
<td align="left">:—</td>
<td align="center">:—:</td>
<td align="right">—:</td>
</tr>
<tr>
<td align="left">abc</td>
<td align="center">bcd</td>
<td align="right">cde</td>
</tr>
<tr>
<td align="left">abc</td>
<td align="center">bcd</td>
<td align="right">cde</td>
</tr>
<tr>
<td align="left">abc</td>
<td align="center">bcd</td>
<td align="right">cde</td>
</tr>
<tr>
<td align="left">&#x2F;&#x2F;例子三</td>
<td align="center"></td>
<td align="right"></td>
</tr>
<tr>
<td align="left">123</td>
<td align="center">234</td>
<td align="right">345</td>
</tr>
<tr>
<td align="left">:-</td>
<td align="center">:-:</td>
<td align="right">-:</td>
</tr>
<tr>
<td align="left">abc</td>
<td align="center">bcd</td>
<td align="right">cde</td>
</tr>
<tr>
<td align="left">abc</td>
<td align="center">bcd</td>
<td align="right">cde</td>
</tr>
<tr>
<td align="left">abc</td>
<td align="center">bcd</td>
<td align="right">cde</td>
</tr>
</tbody></table>
<h2 id="10-字体。"><a href="#10-字体。" class="headerlink" title="10.字体。"></a>10.字体。</h2><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">//斜体</span><br><span class="line"><span class="emphasis">*md*</span></span><br><span class="line"> </span><br><span class="line">//粗体</span><br><span class="line"><span class="strong">**md**</span></span><br><span class="line"> </span><br><span class="line">//斜体</span><br><span class="line"><span class="emphasis">_md_</span></span><br><span class="line"> </span><br><span class="line">//斜体</span><br><span class="line"><span class="strong">__md__</span></span><br><span class="line"> </span><br><span class="line">//转义</span><br><span class="line"> </span><br><span class="line">\+</span><br><span class="line"> </span><br><span class="line">//删除线</span><br><span class="line"> </span><br><span class="line">~~删除~~</span><br></pre></td></tr></table></figure>

<p>&#x2F;&#x2F;斜体<br><em>md</em></p>
<p>&#x2F;&#x2F;粗体<br><strong>md</strong></p>
<p>&#x2F;&#x2F;斜体<br><em>md</em></p>
<p>&#x2F;&#x2F;斜体<br><strong>md</strong></p>
<p>&#x2F;&#x2F;转义</p>
<p>+</p>
<p>&#x2F;&#x2F;删除线</p>
<p><del>删除</del></p>
<h2 id="11-表情！-smile"><a href="#11-表情！-smile" class="headerlink" title="11.表情！:smile:"></a>11.表情！:smile:</h2><p>:santa:</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">格式</span><br><span class="line">:内容描述:</span><br><span class="line">例如：</span><br><span class="line">:smile:</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>笔记</tag>
        <tag>md</tag>
      </tags>
  </entry>
  <entry>
    <title>vim 学习笔记</title>
    <url>/2023/09/16/vim-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h1 id="VIM普通模式"><a href="#VIM普通模式" class="headerlink" title="* VIM普通模式"></a>* VIM普通模式</h1><p>​	① 移动光标 ② 复制 粘贴 ③ 剪切 粘贴 删除 ④ 撤销与恢复</p>
<h2 id="移动光标"><a href="#移动光标" class="headerlink" title="移动光标"></a>移动光标</h2><p><strong>光标上下左右移动</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">h       #左移</span><br><span class="line">j      #下移</span><br><span class="line">k      #上移</span><br><span class="line">l      #右移</span><br></pre></td></tr></table></figure>

<p><strong>移动多行</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">4h       #左移4格</span><br><span class="line">4j      #上移4行</span><br><span class="line">4k      #下移4行</span><br><span class="line">4l      #右移4格</span><br></pre></td></tr></table></figure>

<p><strong>跳转到单词末尾或者开头(下一个空格前)</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">w      # word</span><br><span class="line">b      # begining</span><br></pre></td></tr></table></figure>

<p><strong>跳转到文档开始或末尾</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">gg        # 跳转到文档开头</span><br><span class="line">G  (shift + g)   # 跳转到文档末尾</span><br></pre></td></tr></table></figure>

<p><strong>上下翻页</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ctrl + u  #向上翻页</span><br><span class="line">ctrl + d  #向下翻页</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>快速到最近的某个字母</strong>（区分大小写）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">fu      #到最近1的u</span><br><span class="line">fc      #到最近的c</span><br><span class="line">fK      #到最近的K</span><br></pre></td></tr></table></figure>



<hr>
<h2 id="复制粘贴"><a href="#复制粘贴" class="headerlink" title="复制粘贴"></a>复制粘贴</h2><h3 id="复制"><a href="#复制" class="headerlink" title="复制"></a>复制</h3><p>​	<strong>y</strong></p>
<ul>
<li>复制单词</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yaw      # y(yank)  aw(a word)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>复制n行</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yy      # 复制本行</span><br><span class="line"></span><br><span class="line">nyy      # 复制n行 包括当前行</span><br><span class="line"></span><br><span class="line">y4j      # 向下复制5行 包括当前行</span><br><span class="line">y4k      # 向上复制5行 包括当前行</span><br><span class="line">y4h      # 向左复制4个字符 不包括光标在闪烁那个字符</span><br><span class="line">y4l      # 向右复制4个字符 包括光标在闪烁那个字符</span><br><span class="line"></span><br></pre></td></tr></table></figure>





<h3 id="粘贴"><a href="#粘贴" class="headerlink" title="粘贴"></a>粘贴</h3><p>​	<strong>p</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">p      # 小写p,复制到光标后的一行</span><br></pre></td></tr></table></figure>

<h2 id="剪切删除"><a href="#剪切删除" class="headerlink" title="剪切删除"></a>剪切删除</h2><ul>
<li><p><strong>d</strong>命令其实可以看成剪切，不复制出来就变成<strong>删除</strong>了。</p>
</li>
<li><p>删除行</p>
</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">dd      # 删除光标所在行</span><br><span class="line">ndd      # 删除n行 包括当前行</span><br><span class="line"></span><br><span class="line">d4j      # 向下删除5行 包括当前行</span><br><span class="line">d4k      # 向上删除5行 包括当前行</span><br><span class="line">d4h      # 向左删除4个字符 不包括光标在闪烁那个字符</span><br><span class="line">d4l      # 向右删除4个字符 包括光标在闪烁那个字符</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>删除到本行末尾</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">D</span><br></pre></td></tr></table></figure>

<h2 id="替换"><a href="#替换" class="headerlink" title="替换"></a>替换</h2><p>​	<strong>c</strong></p>
<ul>
<li>替换单词</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">caw     # change a word</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>替换行</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cc      # 删除行，并且进入编辑模式</span><br><span class="line">c4j      # 删除下4行+本行，并且进入编辑模式</span><br></pre></td></tr></table></figure>



<p>* </p>
<h2 id="撤销恢复"><a href="#撤销恢复" class="headerlink" title="撤销恢复"></a>撤销恢复</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">u       # (undo)</span><br></pre></td></tr></table></figure>

<h2 id="文件操作"><a href="#文件操作" class="headerlink" title="文件操作"></a>文件操作</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">:wq      # 保存并退出</span><br></pre></td></tr></table></figure>

<h1 id="VIM-可视化模式（VISUAL）"><a href="#VIM-可视化模式（VISUAL）" class="headerlink" title="* VIM 可视化模式（VISUAL）"></a>* VIM 可视化模式（VISUAL）</h1><p>​	<strong>v</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">v      # 进入可视化模式</span><br></pre></td></tr></table></figure>

<p>​	进入可视化模式后移动光标即可选中该部分内容进行操作，例如：</p>
<ul>
<li>d				# 删除</li>
<li>y		        # 复制 </li>
<li>c                # 替换</li>
</ul>
<h1 id="客制化"><a href="#客制化" class="headerlink" title="客制化"></a>客制化</h1><ul>
<li>NERDtree</li>
</ul>
<blockquote>
<p>文件夹，文件，管理（树形结构）</p>
</blockquote>
<p>​	</p>
<p><strong>vim学习网站</strong></p>
<p>​	<a href="https://vim-adventures.com/">VIM GAME</a></p>
]]></content>
      <tags>
        <tag>笔记</tag>
        <tag>vim</tag>
      </tags>
  </entry>
  <entry>
    <title>PHOTOGRAPHY!</title>
    <url>/2023/09/20/PHOTOGRAPHY/</url>
    <content><![CDATA[<h1 id="星空拍摄笔记"><a href="#星空拍摄笔记" class="headerlink" title="星空拍摄笔记"></a>星空拍摄笔记</h1><p><strong>一定要带快门线！</strong></p>
<h2 id="参数的选择"><a href="#参数的选择" class="headerlink" title="参数的选择"></a>参数的选择</h2><h3 id="一，焦段："><a href="#一，焦段：" class="headerlink" title="一，焦段："></a>一，焦段：</h3><p>​	一般常见焦段为12-40，使用广角&amp;超广角镜头最佳。</p>
<h3 id="二，光圈："><a href="#二，光圈：" class="headerlink" title="二，光圈："></a>二，光圈：</h3><p>​	直接拉到最大，不过有一些镜头西需要收一收获得更好的成像。</p>
<h3 id="三，对焦："><a href="#三，对焦：" class="headerlink" title="三，对焦："></a>三，对焦：</h3><p>​	手动直接拉到无穷远，但是可能不够准确，可以打开屏幕，放大一颗比较亮的星星进行微调。</p>
<h3 id="四，曝光："><a href="#四，曝光：" class="headerlink" title="四，曝光："></a>四，曝光：</h3><p>​	“500”法则：500除以镜头的焦段（全画幅焦段），得到的数字便是你可以使用的最长快门时间。</p>
<p>​	例如：</p>
<p>200mm（全画幅）：理想快门速度约为2.5秒（500除以200mm）</p>
<p>24mm（全画幅）：理想快门速度约为20秒（500除以24mm）</p>
<p>16mm（全画幅）：理想快门速度约为31秒（500除以16mm）</p>
<p>14mm（全画幅）：理想快门速度约为35秒（500除以14mm）</p>
<h3 id="五，感光度："><a href="#五，感光度：" class="headerlink" title="五，感光度："></a>五，感光度：</h3><p>​	常用2000-6400的感光度拍摄银河（偶尔1600）<br>​	如果是拍摄星轨的话建议直接100，拉长曝光时间。</p>
<h3 id="六，白平衡："><a href="#六，白平衡：" class="headerlink" title="六，白平衡："></a>六，白平衡：</h3><p>（相机内的色温值越低，拍摄的照片色调越冷，颜色越蓝；反之，色调越暖，颜色越黄）</p>
<h1 id="烟花拍摄笔记"><a href="#烟花拍摄笔记" class="headerlink" title="烟花拍摄笔记"></a>烟花拍摄笔记</h1><h2 id="1-准备"><a href="#1-准备" class="headerlink" title="1. 准备"></a>1. 准备</h2><ul>
<li>注意风向，别去下风处</li>
<li>采用长曝光，需要三脚架，快门线</li>
</ul>
<h2 id="2-参数的选择"><a href="#2-参数的选择" class="headerlink" title="2.参数的选择"></a>2.参数的选择</h2><ul>
<li>iso 最低</li>
<li>小光圈 f&#x2F;8 到 f&#x2F;16</li>
</ul>
<blockquote>
<p><em>光圈越大，烟火的线条越粗；光圈越小，烟火的线条越细</em></p>
<p><em>距离施放点越<strong>近</strong>、亮度越<strong>高</strong>→ 使用f&#x2F;13-18的小光圈，减少进光量、并可使烟火线条较细</em></p>
<p><em>距离施放点越<strong>远</strong>、亮度越<strong>低</strong>→ 使用f&#x2F;8-11的大光圈，增加进光量、并可使烟火线条较明显</em></p>
</blockquote>
<blockquote>
<p>快门速度需要根据<strong>拍摄远近</strong>和<strong>光圈大小</strong>来微调，但秒数至少要大于「烟火从升空到完整爆开」的时间，如此才能拍出一个完整的烟火形状；若时间太短，只会拍出部分绽放的烟火；时间太长则可能会过曝。</p>
</blockquote>
<h1 id="2023-8-28"><a href="#2023-8-28" class="headerlink" title="2023.8.28"></a>2023.8.28</h1><img src=" /images/2023828.jpg" width="400" height="400" alt="With Guitar In The Rain">

<p>​	小雨，很喜欢下雨的时候路灯下的氛围感。于是就拿起三脚架背上吉他就出发咯。要是有灯就好了qwq.hexo</p>
<h1 id="2023-10-2"><a href="#2023-10-2" class="headerlink" title="2023.10.2"></a>2023.10.2</h1><p><img src="/images/bookintheleaves.jpg" width="400" height="400" alt="bookInTheLeaves"/><br/></p>
<p>​	这本书的名字是《杀死一只知更鸟》，那天下午阳光正好，所以我就踩着脚踏车愉快地出门了。带着我的小单反，不过过几天我应该就能换新镜头了。希望那时可以拍出更好看的照片。不过同时，还得好好学摄影，毕竟打铁还需自身硬。</p>
<h1 id="2023-10-28"><a href="#2023-10-28" class="headerlink" title="2023.10.28"></a>2023.10.28</h1><p><img src="/images/202310281.jpg" alt="gentle sunlight cheers me up"></p>
<p><img src="/images/202310282.jpg" alt="one building&#39;s glow"></p>
<p>​	阳台外面就是一个小湖，每天都能看到日落。中午时光练练吉他，看看书，简单的快乐。</p>
<h1 id="2023-11-11"><a href="#2023-11-11" class="headerlink" title="2023.11.11"></a>2023.11.11</h1><img src=" /images/202311111.jpg" width="400" height="300" alt="NIKON GUYS">
]]></content>
      <tags>
        <tag>旅行</tag>
        <tag>摄影</tag>
      </tags>
  </entry>
  <entry>
    <title>About me</title>
    <url>/2023/09/20/about-me/</url>
    <content><![CDATA[<h1 id="Regen-m-smile"><a href="#Regen-m-smile" class="headerlink" title="Regen_m	:smile:"></a>Regen_m	:smile:</h1><p>​	这是我的cyber name。这一页就用来介绍介绍我自己吧！</p>
<h1 id="首先，"><a href="#首先，" class="headerlink" title="首先，"></a>首先，</h1><p>​		我是个热血到爆炸的中二傻呗同时也是乐观到极致的麻瓜。兴趣比较广泛，喜欢DIY设计 ,电子设计，手工制作，弹吉他，摄影等等。同时二次元纯度也非常之高。</p>
<h1 id="虽然，"><a href="#虽然，" class="headerlink" title="虽然，"></a>虽然，</h1><p>​		不知道有谁会看到这个网页，但我打算在接下来的大学生活中利用这个博客记录记录自己的学习，生活历程。这个博客既能记录我的学习笔记，还可以分享我的所见所闻，让我的分享欲有地方释放哈哈哈哈。</p>
<h1 id="总之，"><a href="#总之，" class="headerlink" title="总之，"></a>总之，</h1><p>​		自我介绍就到这里啦！晚安。</p>
]]></content>
      <tags>
        <tag>about</tag>
      </tags>
  </entry>
  <entry>
    <title>leetcode刷题笔记</title>
    <url>/2023/09/21/leetcode%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h1 id="1-两数之和。"><a href="#1-两数之和。" class="headerlink" title="1.两数之和。"></a>1.两数之和。</h1><p>获得技能：哈希表，c++容器MAP。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">twoSum</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> target)</span> </span>&#123;</span><br><span class="line">        map&lt;<span class="type">int</span>,<span class="type">int</span>&gt; a;<span class="comment">//提供一对一的hash</span></span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">b</span><span class="params">(<span class="number">2</span>,<span class="number">-1</span>)</span></span>;<span class="comment">//用来承载结果，初始化一个大小为2，值为-1的容器b</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;nums.<span class="built_in">size</span>();i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(a.<span class="built_in">count</span>(target-nums[i])&gt;<span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                b[<span class="number">0</span>]=a[target-nums[i]];</span><br><span class="line">                b[<span class="number">1</span>]=i;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            a[nums[i]]=i;<span class="comment">//反过来放入map中，用来获取结果下标</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> b;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>



<h1 id="2-链表逆转。（非-力扣-）"><a href="#2-链表逆转。（非-力扣-）" class="headerlink" title="2.链表逆转。（非 力扣 ）"></a>2.链表逆转。（非 力扣 ）</h1><h3 id="1-迭代法"><a href="#1-迭代法" class="headerlink" title="1.迭代法"></a>1.迭代法</h3><ul>
<li>需要保存：<ul>
<li>1.当前节点上一节点</li>
<li>2.当前节点下一节点</li>
</ul>
</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">List <span class="title function_">Reverse</span><span class="params">( List L )</span></span><br><span class="line">&#123;    </span><br><span class="line">    List first=<span class="literal">NULL</span>;</span><br><span class="line">    List tmp;</span><br><span class="line">    <span class="keyword">while</span>(L!=<span class="literal">NULL</span>)      <span class="comment">//	L为当前节点</span></span><br><span class="line">    &#123;</span><br><span class="line">        tmp=L-&gt;Next;    <span class="comment">//   tmp保存下一节点</span></span><br><span class="line">        L-&gt;Next=first;    <span class="comment">//   修改指向</span></span><br><span class="line">        first=L;      <span class="comment">//	保存当前节点</span></span><br><span class="line">        L=tmp;        <span class="comment">//	转到下一个节点</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> first;      <span class="comment">//  返回头结点（不是L,L循环结束后为空）</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="2-栈"><a href="#2-栈" class="headerlink" title="2.栈"></a>2.栈</h3><ul>
<li>两次循环即可</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">translateLinklist</span><span class="params">(Linklist&amp; L)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  stack&lt;<span class="type">int</span>&gt; stk;<span class="comment">//定义栈</span></span><br><span class="line">  </span><br><span class="line">  Linklist p = L-&gt;next;</span><br><span class="line">  <span class="keyword">while</span> (p)  <span class="comment">//依次读取栈的内容，也就是第一步</span></span><br><span class="line">  &#123;</span><br><span class="line">    stk.<span class="built_in">push</span>(p-&gt;data);</span><br><span class="line">    p = p-&gt;next;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  p = L-&gt;next;</span><br><span class="line">  <span class="keyword">while</span> (p)   <span class="comment">//依次出栈，更换链表中的数据，也就是第二步</span></span><br><span class="line">  &#123;</span><br><span class="line">    p-&gt;data = stk.<span class="built_in">top</span>();</span><br><span class="line">    stk.<span class="built_in">pop</span>();</span><br><span class="line">    p = p-&gt;next;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h1 id="3-无重复字符的最长子串。"><a href="#3-无重复字符的最长子串。" class="headerlink" title="3.无重复字符的最长子串。"></a>3.无重复字符的最长子串。</h1><p>获得技能：队列，滑动窗口</p>
<p>​	</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">lengthOfLongestSubstring</span><span class="params">(string s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(s.<span class="built_in">size</span>() == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        </span><br><span class="line">        unordered_set&lt;<span class="type">char</span>&gt; lookup; <span class="comment">//队列模板</span></span><br><span class="line">        </span><br><span class="line">        <span class="type">int</span> maxStr = <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> left = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; s.<span class="built_in">size</span>(); i++)&#123;</span><br><span class="line">            <span class="keyword">while</span> (lookup.<span class="built_in">find</span>(s[i]) != lookup.<span class="built_in">end</span>())&#123;</span><br><span class="line">                lookup.<span class="built_in">erase</span>(s[left]);</span><br><span class="line">                left ++;</span><br><span class="line">            &#125;</span><br><span class="line">            maxStr = <span class="built_in">max</span>(maxStr,i-left+<span class="number">1</span>);</span><br><span class="line">            lookup.<span class="built_in">insert</span>(s[i]);</span><br><span class="line">    &#125;</span><br><span class="line">        <span class="keyword">return</span> maxStr;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h1 id="4-寻找两个正序数组的中位数。"><a href="#4-寻找两个正序数组的中位数。" class="headerlink" title="4.寻找两个正序数组的中位数。"></a>4.寻找两个正序数组的中位数。</h1><p>​	获得技能：二分查找。</p>
<p>​	</p>
<p>​	由于数列是有序的，其实我们完全可以一半儿一半儿的排除。假设我们要找第 <code>k</code> 个数，我们可以每次循环排除掉 <code>k/2</code> 个数。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">double</span> <span class="title function_">findMedianSortedArrays</span><span class="params">(<span class="type">int</span>[] nums1, <span class="type">int</span>[] nums2)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> nums1.length;</span><br><span class="line">        <span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> nums2.length;</span><br><span class="line">        <span class="comment">//因为数组是从索引0开始的，因此我们在这里必须+1，即索引(k+1)的数，才是第k个数。</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> (n + m + <span class="number">1</span>) / <span class="number">2</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">right</span> <span class="operator">=</span> (n + m + <span class="number">2</span>) / <span class="number">2</span>;</span><br><span class="line">        <span class="comment">//将偶数和奇数的情况合并，如果是奇数，会求两次同样的 k</span></span><br><span class="line">        <span class="keyword">return</span> (getKth(nums1, <span class="number">0</span>, n - <span class="number">1</span>, nums2, <span class="number">0</span>, m - <span class="number">1</span>, left) + getKth(nums1, <span class="number">0</span>, n - <span class="number">1</span>, nums2, <span class="number">0</span>, m - <span class="number">1</span>, right)) * <span class="number">0.5</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="title function_">getKth</span><span class="params">(<span class="type">int</span>[] nums1, <span class="type">int</span> start1, <span class="type">int</span> end1, <span class="type">int</span>[] nums2, <span class="type">int</span> start2, <span class="type">int</span> end2, <span class="type">int</span> k)</span> &#123;</span><br><span class="line">        <span class="comment">//因为索引和算数不同6-0=6，但是是有7个数的，因为end初始就是数组长度-1构成的。</span></span><br><span class="line">        <span class="comment">//最后len代表当前数组(也可能是经过递归排除后的数组)，符合当前条件的元素的个数</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">len1</span> <span class="operator">=</span> end1 - start1 + <span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">len2</span> <span class="operator">=</span> end2 - start2 + <span class="number">1</span>;</span><br><span class="line">        <span class="comment">//让 len1 的长度小于 len2，这样就能保证如果有数组空了，一定是 len1</span></span><br><span class="line">        <span class="comment">//就是如果len1长度小于len2，把getKth()中参数互换位置，即原来的len2就变成了len1，即len1，永远比len2小</span></span><br><span class="line">        <span class="keyword">if</span> (len1 &gt; len2) <span class="keyword">return</span> getKth(nums2, start2, end2, nums1, start1, end1, k);</span><br><span class="line">        <span class="comment">//如果一个数组中没有了元素，那么即从剩余数组nums2的其实start2开始加k再-1.</span></span><br><span class="line">        <span class="comment">//因为k代表个数，而不是索引，那么从nums2后再找k个数，那个就是start2 + k-1索引处就行了。因为还包含nums2[start2]也是一个数。因为它在上次迭代时并没有被排除</span></span><br><span class="line">        <span class="keyword">if</span> (len1 == <span class="number">0</span>) <span class="keyword">return</span> nums2[start2 + k - <span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">        <span class="comment">//如果k=1，表明最接近中位数了，即两个数组中start索引处，谁的值小，中位数就是谁(start索引之前表示经过迭代已经被排出的不合格的元素，即数组没被抛弃的逻辑上的范围是nums[start]---&gt;nums[end])。</span></span><br><span class="line">        <span class="keyword">if</span> (k == <span class="number">1</span>) <span class="keyword">return</span> Math.min(nums1[start1], nums2[start2]);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//为了防止数组长度小于 k/2,每次比较都会从当前数组所生长度和k/2作比较，取其中的小的(如果取大的，数组就会越界)</span></span><br><span class="line">        <span class="comment">//然后素组如果len1小于k / 2，表示数组经过下一次遍历就会到末尾，然后后面就会在那个剩余的数组中寻找中位数</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> start1 + Math.min(len1, k / <span class="number">2</span>) - <span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> start2 + Math.min(len2, k / <span class="number">2</span>) - <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//如果nums1[i] &gt; nums2[j]，表示nums2数组中包含j索引，之前的元素，逻辑上全部淘汰，即下次从J+1开始。</span></span><br><span class="line">        <span class="comment">//而k则变为k - (j - start2 + 1)，即减去逻辑上排出的元素的个数(要加1，因为索引相减，相对于实际排除的时要少一个的)</span></span><br><span class="line">        <span class="keyword">if</span> (nums1[i] &gt; nums2[j]) &#123;</span><br><span class="line">            <span class="keyword">return</span> getKth(nums1, start1, end1, nums2, j + <span class="number">1</span>, end2, k - (j - start2 + <span class="number">1</span>));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> getKth(nums1, i + <span class="number">1</span>, end1, nums2, start2, end2, k - (i - start1 + <span class="number">1</span>));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>



<h1 id="5-最长回文子串"><a href="#5-最长回文子串" class="headerlink" title="5.最长回文子串"></a>5.最长回文子串</h1><p>​	给你一个字符串 <code>s</code>，找到 <code>s</code> 中最长的回文子串。如果字符串的反序与原始字符串相同，则该字符串称为回文字符串。</p>
<pre><code>* 中心扩展
</code></pre>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">string <span class="title">longestPalindrome</span><span class="params">(string s)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> len=s.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">if</span>(len==<span class="number">0</span>||len==<span class="number">1</span>)</span><br><span class="line">            <span class="keyword">return</span> s;</span><br><span class="line">        <span class="type">int</span> start=<span class="number">0</span>;<span class="comment">//记录回文子串起始位置</span></span><br><span class="line">        <span class="type">int</span> end=<span class="number">0</span>;<span class="comment">//记录回文子串终止位置</span></span><br><span class="line">        <span class="type">int</span> mlen=<span class="number">0</span>;<span class="comment">//记录最大回文子串的长度</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;len;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> len1=<span class="built_in">expendaroundcenter</span>(s,i,i);<span class="comment">//一个元素为中心</span></span><br><span class="line">            <span class="type">int</span> len2=<span class="built_in">expendaroundcenter</span>(s,i,i+<span class="number">1</span>);<span class="comment">//两个元素为中心</span></span><br><span class="line">            mlen=<span class="built_in">max</span>(<span class="built_in">max</span>(len1,len2),mlen);</span><br><span class="line">            <span class="keyword">if</span>(mlen&gt;end-start+<span class="number">1</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                start=i-(mlen<span class="number">-1</span>)/<span class="number">2</span>;</span><br><span class="line">                end=i+mlen/<span class="number">2</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> s.<span class="built_in">substr</span>(start,mlen);</span><br><span class="line">        <span class="comment">//该函数的意思是获取从start开始长度为mlen长度的字符串</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">expendaroundcenter</span><span class="params">(string s,<span class="type">int</span> left,<span class="type">int</span> right)</span></span></span><br><span class="line"><span class="function">    <span class="comment">//计算以left和right为中心的回文串长度</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="type">int</span> L=left;</span><br><span class="line">        <span class="type">int</span> R=right;</span><br><span class="line">        <span class="keyword">while</span>(L&gt;=<span class="number">0</span> &amp;&amp; R&lt;s.<span class="built_in">length</span>() &amp;&amp; s[R]==s[L])</span><br><span class="line">        &#123;</span><br><span class="line">            L--;</span><br><span class="line">            R++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> R-L<span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<pre><code>* 动态规划
</code></pre>
<p>​		</p>
<p>​			思想：如果S[ i , j ]是回文串，那么S[ i-1 , j -1]也是回文串 ， 假设</p>
<p><img src="/images/leecode4.PNG" alt="formula"></p>
<p>​			需要注意 : <strong>i&gt;j</strong>的情况</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> String <span class="title function_">longestPalindrome</span><span class="params">(String s)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">length</span> <span class="operator">=</span> s.length();</span><br><span class="line">    <span class="type">boolean</span>[][] P = <span class="keyword">new</span> <span class="title class_">boolean</span>[length][length];<span class="comment">//公式</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">maxLen</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="type">String</span> <span class="variable">maxPal</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> <span class="number">1</span>; len &lt;= length; len++) <span class="comment">//遍历所有的长度</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">start</span> <span class="operator">=</span> <span class="number">0</span>; start &lt; length; start++) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">end</span> <span class="operator">=</span> start + len - <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span> (end &gt;= length) <span class="comment">//下标已经越界，结束本次循环</span></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            P[start][end] = (len == <span class="number">1</span> || len == <span class="number">2</span> || P[start + <span class="number">1</span>][end - <span class="number">1</span>]) &amp;&amp; s.charAt(start) == s.charAt(end); <span class="comment">//长度为 1 和 2 的单独判断下</span></span><br><span class="line">            <span class="keyword">if</span> (P[start][end] &amp;&amp; len &gt; maxLen) &#123;</span><br><span class="line">                maxPal = s.substring(start, end + <span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">return</span> maxPal;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="6-约瑟夫环问题"><a href="#6-约瑟夫环问题" class="headerlink" title="6.约瑟夫环问题"></a>6.约瑟夫环问题</h1><ol>
<li>直接用数组实现</li>
</ol>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line">using namespace <span class="built_in">std</span>;</span><br><span class="line"><span class="comment">//用数组实现约瑟夫环问题</span></span><br><span class="line"><span class="type">int</span> a[<span class="number">110</span>]=&#123;<span class="number">0</span>&#125;;   <span class="comment">//元素值为0表示未出局 </span></span><br><span class="line"><span class="comment">//i既代表数组的下标，也代表每个人的编号</span></span><br><span class="line"><span class="comment">//k是用来计数的，一旦k的值达到m，代表此人需要出局，并且k需要重新计数，这样才能够找出所有需要出局的人</span></span><br><span class="line"><span class="comment">//数组的0代表未出局的人，数组非0代表出局的人，未出局的人需要报数，出局的人不需要报数 </span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> N,M;</span><br><span class="line">  <span class="type">int</span> cnt=<span class="number">0</span>,i=<span class="number">0</span>,k=<span class="number">0</span>;  <span class="comment">//cnt表示目前出局的人数 </span></span><br><span class="line">  <span class="built_in">cin</span>&gt;&gt;N&gt;&gt;M;  <span class="comment">//表示总共有n人，数到数字m时出局 </span></span><br><span class="line">  <span class="keyword">while</span>(cnt!=N) <span class="comment">//因为要求N个人的出局顺序，因此当cnt（用来统计已经出局的人）未达到n时，需要循环不断报数 </span></span><br><span class="line">  &#123;</span><br><span class="line">    i++;   <span class="comment">//i是每个人的编号 </span></span><br><span class="line">    <span class="keyword">if</span>(i&gt;N) i=<span class="number">1</span>;  <span class="comment">//这里需要特别注意：i的值是不断累加的，一旦发现i的值&gt;N，那么i需要重新从第1个人开始</span></span><br><span class="line">                  <span class="comment">//数组要从第一个元素重新开始一个一个往后判断 </span></span><br><span class="line">    <span class="keyword">if</span>(a[i]==<span class="number">0</span>)   <span class="comment">//只有元素值为0的人 才需要报数，元素值为非0的代表已经出局了，不用报数 </span></span><br><span class="line">    &#123;</span><br><span class="line">      k++;</span><br><span class="line">      <span class="keyword">if</span>(k==M)     <span class="comment">//代表已经某个人已经报了M这个数，需要出局 </span></span><br><span class="line">      &#123;</span><br><span class="line">        a[i]=<span class="number">1</span>;  <span class="comment">//编号为i的这个人出局 </span></span><br><span class="line">        cnt++;   <span class="comment">//出局的人数+1 </span></span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;i&lt;&lt;<span class="string">&quot; &quot;</span>;  <span class="comment">//输出出局的人的编号 </span></span><br><span class="line">        k=<span class="number">0</span>;   <span class="comment">//清空k，让下一个人重新从1开始报数   </span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>

<ol start="2">
<li>循环链表</li>
</ol>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line">using namespace <span class="built_in">std</span>;</span><br><span class="line"><span class="comment">//用链表实现约瑟夫环问题 （循环链表） </span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">node</span>  //<span class="title">typedef</span>用来重命名<span class="keyword">struct</span> <span class="title">node</span>这种数据类型，将其命名为<span class="title">Node</span> </span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  <span class="type">int</span> data;</span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">node</span>* <span class="title">next</span>;</span></span><br><span class="line">&#125;Node;</span><br><span class="line"> </span><br><span class="line"><span class="type">void</span> <span class="title function_">ysflb</span><span class="params">(<span class="type">int</span> N,<span class="type">int</span> M)</span>  <span class="comment">//总共有N个人，报到数字为M的人出局 </span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="comment">//初始化循环链表</span></span><br><span class="line">  Node *head = <span class="literal">NULL</span>,*p=<span class="literal">NULL</span>,*r=<span class="literal">NULL</span>;   <span class="comment">//head为头指针，指向链表的第一个结点，一开始赋值为NULL,代表不指向任何结点 </span></span><br><span class="line">  head = (Node*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Node));  <span class="comment">//让head指向一个实际的空间</span></span><br><span class="line">  <span class="keyword">if</span>(<span class="literal">NULL</span>==head)  <span class="comment">//内存空间可能会申请失败,大多数情况不会申请失败 </span></span><br><span class="line">  &#123;</span><br><span class="line">      <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;Memory Failed!&quot;</span>;</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">  &#125; </span><br><span class="line">  head-&gt;data=<span class="number">1</span>;       <span class="comment">//从1开始编号 </span></span><br><span class="line">  head-&gt;next=<span class="literal">NULL</span>;    <span class="comment">//一开始整个链表只有一个Node(结点)，这个Node有两个域，分别是data和next</span></span><br><span class="line">                      <span class="comment">//data从1开始，next指向NULL，总共需要N个结点，现在创建了一个，还需要N-1个 </span></span><br><span class="line">    p=head;             <span class="comment">//head要保持不能改变，才能够找到链表的起始位置，一开始p也指向第一个结点</span></span><br><span class="line">                      <span class="comment">//p等一下会被使用，用它可以便于创建剩下的N-1个结点 </span></span><br><span class="line">             </span><br><span class="line">  <span class="comment">//尾插法创建链表,已经有一个1号结点了，还需要创建剩下的n-1个结点 </span></span><br><span class="line">  <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">2</span>;i&lt;=N;i++)</span><br><span class="line">  &#123;</span><br><span class="line">    r=(Node*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Node)); </span><br><span class="line">    r-&gt;data=i;</span><br><span class="line">    r-&gt;next=<span class="literal">NULL</span>;</span><br><span class="line">    <span class="comment">//插入结点 </span></span><br><span class="line">    p-&gt;next=r;</span><br><span class="line">    p=r;</span><br><span class="line">    </span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//创建循环链表</span></span><br><span class="line">  p-&gt;next=head;   <span class="comment">//最后一个结点的next指向头结点</span></span><br><span class="line">  p=head;         <span class="comment">//为后续方便，将p指向头结点</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment">//约瑟夫环的模拟</span></span><br><span class="line">  <span class="keyword">while</span>(p-&gt;next!= p)  <span class="comment">//如果p的next=p，说明目前只有一个元素 </span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;M;i++)  <span class="comment">//报到数字为M的时候出局 </span></span><br><span class="line">    &#123;</span><br><span class="line">        r=p;   <span class="comment">//保留出局的前一个结点 </span></span><br><span class="line">        p=p-&gt;next; <span class="comment">//p指向的是要出局的这个结点，需要保留前一个结点</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 输出</span></span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;p-&gt;data&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">    r-&gt;next=p-&gt;next;    <span class="comment">//删除p的目的，此时p指向哪里？  ：  </span></span><br><span class="line">    p=p-&gt;next;  <span class="comment">//更新p重新进行报数 </span></span><br><span class="line">  &#125; </span><br><span class="line">  <span class="built_in">cout</span>&lt;&lt;p-&gt;data; </span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  ysflb(<span class="number">10</span>,<span class="number">3</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>

<h1 id="7-列车调度问题"><a href="#7-列车调度问题" class="headerlink" title="7.列车调度问题"></a>7.列车调度问题</h1><p>​	建立一个数组，当输入一个列车序号时开辟轨道，再输入一个列车序号，在所有轨道中<strong>查找比列车序号大的列车序号</strong>，替换它，如果没有比它大的，则另开辟一个轨道。用top记录开辟轨道的数量。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> a[<span class="number">1000000</span>];</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> n;</span><br><span class="line">  <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line">  <span class="type">int</span> i,m,j,top=<span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;m);</span><br><span class="line">    <span class="keyword">if</span>(top==<span class="number">0</span>||a[top<span class="number">-1</span>]&lt;m)&#123;  <span class="comment">//当top==0时，开辟轨道，当输入的列车序号比最上的轨道列车序号还大时，开辟轨道</span></span><br><span class="line">      a[top++]=m;</span><br><span class="line">    &#125;<span class="keyword">else</span>                   <span class="comment">//二分查找</span></span><br><span class="line">    &#123; </span><br><span class="line">      <span class="type">int</span> high=top<span class="number">-1</span>,low=<span class="number">0</span>,mid;</span><br><span class="line">      <span class="keyword">while</span>(low&lt;=high)</span><br><span class="line">      &#123;</span><br><span class="line">        mid=(low+high)/<span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span>(a[mid]&gt;m)</span><br><span class="line">        &#123;</span><br><span class="line">          high=mid<span class="number">-1</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">          low=mid+<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;<span class="comment">//a[mid]=m;</span></span><br><span class="line">      a[low]=m;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;<span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,top);            <span class="comment">//轨道数</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>





]]></content>
      <tags>
        <tag>笔记</tag>
        <tag>Data-Structure-and-Algorithm</tag>
      </tags>
  </entry>
  <entry>
    <title>C语言二级指针</title>
    <url>/2023/10/01/C%E8%AF%AD%E8%A8%80%E4%BA%8C%E7%BA%A7%E6%8C%87%E9%92%88/</url>
    <content><![CDATA[<h1 id="C语言的二级指针"><a href="#C语言的二级指针" class="headerlink" title="C语言的二级指针"></a>C语言的二级指针</h1><h2 id="1-起因。"><a href="#1-起因。" class="headerlink" title="1.起因。"></a>1.起因。</h2><p>​	想记录一下这个我难受的知识点。</p>
<p>​	事情的起因：在自己用C实现简单的数据结构 “ 栈 ”的时候，写了这样一段代码。在后面遍历的时候不论怎么修改都会出现<strong>segmentation fault。</strong> 后来通过debug才发现S的地址从来都没有发生变化。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">pushStack</span><span class="params">(<span class="type">int</span> dataToStore,myStack S)</span>&#123;</span><br><span class="line">    ptrToNode tmp=(myStack)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">struct</span> MyStack));</span><br><span class="line">    S-&gt;nextNode=tmp;</span><br><span class="line">    tmp-&gt;lastNode=S;</span><br><span class="line">    tmp-&gt;data=dataToStore;</span><br><span class="line">    tmp-&gt;nextNode=<span class="literal">NULL</span>;</span><br><span class="line">    S= tmp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>​	以上代码错误的原因是：<strong>S作为一个指针参数被传入函数</strong> 虽然函数的末尾覆盖了S的地址，<strong>但这只是在这个函数开辟的栈空间里，结束后S的地址并不会变化</strong></p>
<h2 id="2-解决。"><a href="#2-解决。" class="headerlink" title="2.解决。"></a>2.解决。</h2><h3 id="1-方法一："><a href="#1-方法一：" class="headerlink" title="1.方法一："></a>1.方法一：</h3><p>​			在主函数覆盖S的地址</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">myStack <span class="title function_">pushStack</span><span class="params">(<span class="type">int</span> dataToStore,myStack S)</span>&#123;</span><br><span class="line">    ptrToNode tmp=(myStack)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">struct</span> MyStack));</span><br><span class="line">    S-&gt;nextNode=tmp;</span><br><span class="line">    tmp-&gt;lastNode=S;</span><br><span class="line">    tmp-&gt;data=dataToStore;</span><br><span class="line">    tmp-&gt;nextNode=<span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">return</span> tmp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2-方法二："><a href="#2-方法二：" class="headerlink" title="2.方法二："></a>2.方法二：</h3><p>​			传入二级指针，即可修改二级指针的值（一级指针的地址）</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">pushStack</span><span class="params">(<span class="type">int</span> dataToStore,myStack *S)</span>&#123;</span><br><span class="line">    ptrToNode tmp=(myStack)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">struct</span> MyStack));</span><br><span class="line">    *S-&gt;nextNode=tmp;</span><br><span class="line">    tmp-&gt;lastNode=*S;</span><br><span class="line">    tmp-&gt;data=dataToStore;</span><br><span class="line">    tmp-&gt;nextNode=<span class="literal">NULL</span>;</span><br><span class="line">    *S= tmp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="3-收尾。"><a href="#3-收尾。" class="headerlink" title="3.收尾。"></a>3.收尾。</h2><p>​		简单的实现栈这个数据结构其实不一定需要用到二级指针，只是我把问题复杂化了。带来了意向不到的难题。不过至少让我将二级指针收入囊中。不得不感叹一下任重道远啊。</p>
]]></content>
      <tags>
        <tag>笔记</tag>
        <tag>c</tag>
      </tags>
  </entry>
  <entry>
    <title>python脚本制作</title>
    <url>/2023/10/04/python%E8%84%9A%E6%9C%AC%E5%88%B6%E4%BD%9C/</url>
    <content><![CDATA[<p>​	我突然打算不用知识点记录的方式记录我的学习笔记，打算以发现问题解决问题的方法记录学习过程。</p>
<h1 id="1-记录的第一个脚本。"><a href="#1-记录的第一个脚本。" class="headerlink" title="1.记录的第一个脚本。"></a>1.记录的第一个脚本。</h1><h2 id="1-问题导入"><a href="#1-问题导入" class="headerlink" title="1.问题导入"></a>1.问题导入</h2><p>​	过去我常常把我拍的照片导入桌面，p完图之后再粘贴到我的移动硬盘留底，过程虽然不长，但是我就是懒。</p>
<h2 id="2-分析"><a href="#2-分析" class="headerlink" title="2.分析"></a>2.分析</h2><p>​	我的桌面一般没有东西，所以我可以直接将整个桌面文件夹复制到我的目标目录，或者在匹配后缀位jpg或者png的文件转移到目标文件夹。</p>
<p><img src="/images/desktop.png" alt="desktop"></p>
<h2 id="3-实现过程"><a href="#3-实现过程" class="headerlink" title="3.实现过程"></a>3.实现过程</h2><pre><code>1. 转移工作目录到桌面
1. 在目标文件夹创建文件夹
1. 复制文件到该文件夹
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"><span class="keyword">import</span> shutil</span><br><span class="line"></span><br><span class="line">fileName=<span class="string">&quot;null&quot;</span></span><br><span class="line"></span><br><span class="line">os.chdir(<span class="string">&#x27;C:/Users/Regen/Desktop&#x27;</span>)<span class="comment">#转到desktop</span></span><br><span class="line"></span><br><span class="line">desktopPath=os.getcwd()<span class="comment">#记录桌面路径</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">fileName=datetime.datetime.now().strftime(<span class="string">&quot;%Y-%m-%d&quot;</span>)<span class="comment">#以当前时间为文件夹名字</span></span><br><span class="line"></span><br><span class="line">os.chdir(<span class="string">&#x27;E:/代存外部硬盘&#x27;</span>)</span><br><span class="line">os.mkdir(fileName)<span class="comment">#创建文件夹</span></span><br><span class="line"></span><br><span class="line">fileDir=os.getcwd()</span><br><span class="line">fileDir=fileDir+<span class="string">&quot;\\&quot;</span>+fileName</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">src = desktopPath</span><br><span class="line">des = fileDir</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> file <span class="keyword">in</span> os.listdir(src):</span><br><span class="line">    <span class="comment">#遍历原文件夹中的文件</span></span><br><span class="line">    full_file_name = os.path.join(src, file)<span class="comment">#把文件的完整路径得到</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;要被复制的全文件路径全名:&quot;</span>,full_file_name)</span><br><span class="line">    <span class="keyword">if</span> os.path.isfile(full_file_name):<span class="comment">#用于判断某一对象(需提供绝对路径)是否为文件</span></span><br><span class="line">        shutil.copy(full_file_name, des)<span class="comment">#shutil.copy函数放入原文件的路径文件全名  然后放入目标文件夹</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="4-遇到的问题"><a href="#4-遇到的问题" class="headerlink" title="4.遇到的问题"></a>4.遇到的问题</h2><pre><code>1. 一开始想要直接复制整个文件夹，但是会遇到权限问题，windows的权限问题没有Linux好解决，进而转向遍历文件夹
1. 发现其实可以用windows自带的脚本语言，CMD实现（相当于Linux的shell脚本）
</code></pre>
<h2 id="5-收尾"><a href="#5-收尾" class="headerlink" title="5.收尾"></a>5.收尾</h2><p>​	很简单的脚本还写了两个小时。不过过程中又学会了一点东西。可以，好玩！</p>
<p>​	<img src="/images/wenjianzhuanyi.PNG" alt="result"></p>
]]></content>
      <tags>
        <tag>笔记</tag>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>python画画</title>
    <url>/2023/10/06/python%E7%94%BB%E7%94%BB/</url>
    <content><![CDATA[<h1 id=""><a href="#" class="headerlink" title=""></a></h1><h2 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h2><p>​		学校在国庆节和中秋节中举办了一个编程比赛：内容是在一个小时内用编程语言画出节日符号；例如月饼和国旗之类的。假期闲来无事，于是就浅浅参加了一下。</p>
<h2 id="使用python的TURTLE库"><a href="#使用python的TURTLE库" class="headerlink" title="使用python的TURTLE库"></a>使用python的TURTLE库</h2><p>​		说要用编程画画，我立马就想到了用python ，毕竟人生苦短，我用python。其实主要还是不想用字符串来在终端输出，过于麻烦。</p>
<h2 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识<img src="https://files.realpython.com/media/Turtle_EDIT_Graph.790c213ce0ba.jpg" alt="Python Turtle Coordinates New"></h2><pre><code>        * 中心点在screen中心
        * (0,0) 即 Home
        * 默认初始化画笔向右
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>t.right(<span class="number">90</span>)   </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>t.forward(<span class="number">100</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>t.left(<span class="number">90</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>t.backward(<span class="number">100</span>)</span><br></pre></td></tr></table></figure>

<p><img src="https://files.realpython.com/media/Update_-_Moving_Turtle_VIDEO_GIF.61623cf40fed.gif" alt="Python Turtle Moving Updated"></p>
<h3 id="内置图形"><a href="#内置图形" class="headerlink" title="内置图形"></a>内置图形</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">t.circle(<span class="number">60</span>)</span><br><span class="line">t.dot(<span class="number">20</span>)</span><br></pre></td></tr></table></figure>

<h3 id="背景颜色"><a href="#背景颜色" class="headerlink" title="背景颜色"></a>背景颜色</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">turtle.bgcolor(<span class="string">&quot;blue&quot;</span>)</span><br></pre></td></tr></table></figure>

<h3 id="画笔的粗细"><a href="#画笔的粗细" class="headerlink" title="画笔的粗细"></a>画笔的粗细</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>t.pensize(<span class="number">5</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>t.forward(<span class="number">100</span>)</span><br></pre></td></tr></table></figure>

<h3 id="填充颜色"><a href="#填充颜色" class="headerlink" title="填充颜色"></a>填充颜色</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>t.begin_fill()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>t.fd(<span class="number">100</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>t.lt(<span class="number">120</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>t.fd(<span class="number">100</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>t.lt(<span class="number">120</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>t.fd(<span class="number">100</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>t.end_fill()</span><br></pre></td></tr></table></figure>

<p><img src="https://files.realpython.com/media/Turtle_Begin_End_Fill_GIF.849f73374a22.gif" alt="Python Turtle Begin Fill End Fill New"></p>
<h3 id="绘制速度"><a href="#绘制速度" class="headerlink" title="绘制速度"></a>绘制速度</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>t.speed(<span class="number">1</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>t.forward(<span class="number">100</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>t.speed(<span class="number">10</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>t.forward(<span class="number">100</span>)</span><br></pre></td></tr></table></figure>

<h3 id="撤回"><a href="#撤回" class="headerlink" title="撤回"></a>撤回</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; t.undo()</span><br></pre></td></tr></table></figure>

<h3 id="克隆"><a href="#克隆" class="headerlink" title="克隆"></a>克隆</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>c = t.clone()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>t.color(<span class="string">&quot;magenta&quot;</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>c.color(<span class="string">&quot;red&quot;</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>t.circle(<span class="number">100</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>c.circle(<span class="number">60</span>)</span><br></pre></td></tr></table></figure>

<h2 id="以上就是python-Turtle模组的基本语法"><a href="#以上就是python-Turtle模组的基本语法" class="headerlink" title="以上就是python Turtle模组的基本语法"></a>以上就是python Turtle模组的基本语法</h2><p>​	但是光会这些基本知识也不行，你还得有亿点点艺术细胞。毕竟它作为画画工具有一点简朴了。</p>
]]></content>
      <tags>
        <tag>笔记</tag>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>java学习笔记</title>
    <url>/2023/10/16/java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h1 id="JAVA学习笔记"><a href="#JAVA学习笔记" class="headerlink" title="JAVA学习笔记"></a>JAVA学习笔记</h1><h2 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h2><h3 id="1-String"><a href="#1-String" class="headerlink" title="1.String"></a>1.String</h3><ul>
<li>初始化</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">String str1=“Java”；// 字符串常量值</span><br><span class="line">String str3=“Java”;  //  字符串常量，并且与str1地址相同</span><br><span class="line">String str2=new String(“Java”);</span><br></pre></td></tr></table></figure>

<ul>
<li>返回长度</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">str1.length()   <span class="comment">//带括号,与数组不同！！！</span></span><br></pre></td></tr></table></figure>

<ul>
<li><strong>字符串查找</strong></li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">str1.charAt(0);  // J</span><br><span class="line">str1.charAt(1);  // a</span><br><span class="line">str1.charAt(2);  // v</span><br><span class="line">str1.charAt(4);  // a</span><br><span class="line">str1.charAt(5);  // 报错</span><br></pre></td></tr></table></figure>

<ul>
<li>返回字符出现的第一个位置下标，否则返回-1</li>
</ul>
<p>a. 从字符串的头开始</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">int index = str1.indexOf(&#x27;J&#x27;);</span><br><span class="line">System.out.println(index);//  0</span><br></pre></td></tr></table></figure>

<p>b. 从下表x开始</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">int index1 = str1.indexOf(&#x27;a&#x27;,2);</span><br><span class="line">System.out.println(index1);  //3</span><br></pre></td></tr></table></figure>

<ul>
<li>返回字符串出现的位置下标, 从index 开始向<strong>后</strong>找 , 否则返回-1</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">s2</span> <span class="operator">=</span> <span class="string">&quot;helloxawllxhxawllxh&quot;</span>;</span><br><span class="line"> </span><br><span class="line">    <span class="type">int</span> <span class="variable">index3</span> <span class="operator">=</span> s2.lastIndexOf(<span class="string">&#x27;a&#x27;</span>);</span><br><span class="line">    System.out.println(index3);<span class="comment">//13</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>返回字符串出现的位置下标, 从index 开始向<strong>前</strong>找 , 否则返回-1</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">    String s2 = &quot;helloxawllxhxawllxh&quot;;</span><br><span class="line"> </span><br><span class="line">    int index3 = s2.lastIndexOf(&#x27;xawl&#x27;);</span><br><span class="line">    System.out.println(index3);//12</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>字符串的截取</strong></li>
</ul>
<ol>
<li>截取后面的字符串内容</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">    String str = &quot;adsasdasdasdasd&quot;;</span><br><span class="line">    String ret = str.substring(4);// 保留第4个</span><br><span class="line">    System.out.println(ret);//sdasdasdasd</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>截取指定部分</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">    String str = &quot;adsasdasdasdasd&quot;;</span><br><span class="line">    String ret = str.substring(4,7);//截取[4,7)里面的字符</span><br><span class="line">    System.out.println(ret);//sda</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>字符串的替换</strong></li>
</ul>
<ol>
<li>使用replace或者replaceAll</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">str1</span> <span class="operator">=</span> <span class="string">&quot;xawlxawlxawlxawl&quot;</span>;</span><br><span class="line">    <span class="type">String</span> <span class="variable">ret</span> <span class="operator">=</span> str1.replace(<span class="string">&quot;xa&quot;</span>,<span class="string">&quot;B&quot;</span>);</span><br><span class="line">    <span class="type">String</span> <span class="variable">ret1</span> <span class="operator">=</span> str1.replaceAll(<span class="string">&quot;xa&quot;</span>,<span class="string">&quot;B&quot;</span>);</span><br><span class="line">    System.out.println(ret);<span class="comment">//BwlBwlBwlBwl</span></span><br><span class="line">    System.out.println(ret1);<span class="comment">//BwlBwlBwlBwl</span></span><br><span class="line">    System.out.println(str1);<span class="comment">//xawlxawlxawlxawl</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>字符串的拆分</strong></li>
</ul>
<p>​		使用split方法</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">    String str1 = &quot;Hello this is xawl rjgc professional&quot;;</span><br><span class="line">    String[] ret = str1.split(&quot; &quot;);      //以空格为分隔符，拆分整个字符串为多个字符串</span><br><span class="line">    for (String s : ret) &#123;</span><br><span class="line">        System.out.println(s);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">/******************************************************/</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">    String str1 = &quot;Hello this is xawl rjgc professional&quot;;</span><br><span class="line">    String[] ret = str1.split(&quot; &quot;,3);    //以空格为分隔符，拆分3个字符串</span><br><span class="line">    for (String s : ret) &#123;</span><br><span class="line">        System.out.println(s);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>注意</strong> 特殊字符(| + * . ,)作为分割符可能无法正确切分, 需要加上转义.</p>
<ul>
<li><p><strong>字符串的转化</strong></p>
<pre><code>  1. 将别的数据类型转为字符串**valueOf( elementType i)**
</code></pre>
</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">    String str = String.valueOf(1234);</span><br><span class="line">    String str1 = String.valueOf(12.34);</span><br><span class="line">    System.out.println(str);</span><br><span class="line">    System.out.println(str1);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>小写字母转大写字母或者相反 <strong>toUpperCase()</strong>&amp;<strong>toLowerCase()</strong></li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public static void main(String[] args) &#123;</span><br><span class="line"> </span><br><span class="line">    String str3 = &quot;abcdef阿凡达&quot;;</span><br><span class="line">    String ret = str3.toUpperCase();</span><br><span class="line">    System.out.println(ret);//ABCDEF阿凡达</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="2-数组"><a href="#2-数组" class="headerlink" title="2. 数组"></a>2. 数组</h3><ul>
<li><p>初始化</p>
<p>  int [] a;&#x2F;&#x2F;创建一个数组引用<br>  a&#x3D;new int[4];<br>  int [] b&#x3D;{1,2,3,4};</p>
</li>
<li><p>数组的接口</p>
</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//数组的长度</span><br><span class="line">int Alength=a.length;</span><br></pre></td></tr></table></figure>

<ul>
<li>Arrays数组工具类</li>
</ul>
<ol>
<li>&#x2F;&#x2F;转化为String</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//转化为String</span><br><span class="line">String str=Arrays.tString(array);</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ol start="2">
<li>数组拷贝和扩容</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">int[] tmp = Arrays.copyOf(array,2*array.length);</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>Arrays.binarySearch</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//查找成功的话会返回数据的位置</span><br><span class="line">int index = Arrays.binarySearch(arr, 55);</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ol start="4">
<li>Arrays.equals（比较两个数组是否相等）</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Arrays.equals(int[] a, int [] b);</span><br><span class="line">//当且仅当a.b非空，长度相同，元素相同时返回true</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ol start="5">
<li>Arrays.fill(填充；一般用于初始化)</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Arrays.fill(array,val);</span><br></pre></td></tr></table></figure>

<ol start="6">
<li>Arrays.sort(arr)</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Arrays.sort(arr);//默认升序</span><br></pre></td></tr></table></figure>



<h3 id="3-数据类型转换"><a href="#3-数据类型转换" class="headerlink" title="3.数据类型转换"></a>3.数据类型转换</h3><ul>
<li>数据类型的大小关系</li>
</ul>
<p>​																<strong>byte&lt;short&lt;char&lt;int&lt;long&lt;float&lt;double</strong></p>
<ul>
<li><p>强制数据类型的转换，一般来说，大的数据类型不能赋给小的数据类型。因而会有强制数据类型转换</p>
<p><strong>强制数据类型转换可能会导致数据的丢失</strong></p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> num_1=<span class="number">20</span>;</span><br><span class="line"><span class="type">byte</span> num_2=(<span class="type">byte</span>) a;</span><br><span class="line"><span class="type">int</span> num_3=<span class="number">300</span>;</span><br><span class="line"><span class="type">byte</span> num_4=(<span class="type">byte</span>)num_3;<span class="comment">//数据丢失 num_4值为44</span></span><br></pre></td></tr></table></figure>

<h3 id="4-Java-中super的用法"><a href="#4-Java-中super的用法" class="headerlink" title="4. Java 中super的用法"></a>4. Java 中super的用法</h3><p>​	<strong>当子类的构造方法内第一行没有出现“super()”时，系统会默认给它加上无参数的”super()”方法</strong>。</p>
<p>注意：</p>
<ol>
<li>当子类构造方法的第一行执行super()无参数方法，那么父类中一定要有无参数构造方法。</li>
<li>在一个类中写了有参数的构造方法时，无参数构造方法就会不存在，需要自己补上无参数的构造方法。</li>
</ol>
<ul>
<li>super使用案例</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">father</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> age;</span><br><span class="line">  <span class="keyword">public</span> <span class="title function_">father</span><span class="params">()</span>&#123;&#125;</span><br><span class="line">      <span class="keyword">public</span> <span class="title function_">father</span><span class="params">(<span class="type">int</span> a)</span>&#123;<span class="built_in">this</span>.age=age;&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">son</span> <span class="keyword">extends</span> <span class="title class_">father</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">son</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="built_in">super</span>(<span class="number">5</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="4">
<li><h3 id="Java-中-final-的用法"><a href="#Java-中-final-的用法" class="headerlink" title="Java 中   final  的用法"></a>Java 中   final  的用法</h3></li>
</ol>
<ul>
<li><p>解释：<strong>Java中，final 表示最终，也可以称为完结器，表示对象是最终形态的，不可改变的意思。</strong></p>
</li>
<li><p>使用时的注意事项</p>
</li>
</ul>
<blockquote>
<p>1）final 修饰变量，表示变量的值不可改变，此时该变量可被称为常量。</p>
<p>2）final 修饰方法，表示方法不能被子类重写；</p>
<blockquote>
<p>重写：子类中如果创建了一个与父类中相同名称、相同返回值类型、相同参数列表的方法，只是方法体中的实现不同，以实现不同于父类的功能，这种方式被称为方法重写，又称为方法覆盖。</p>
</blockquote>
<p>3）final 用在类的前面表示该类不能有子类，即该类不可以被继承。</p>
</blockquote>
<ul>
<li>使用</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//修饰变量</span></span><br><span class="line"><span class="comment">//final 变量经常和 static 关键字一起使用，作为常量</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">NAME</span> <span class="operator">=</span> <span class="string">&quot;regen&quot;</span>;</span><br><span class="line">NAME = <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;regen&quot;</span>); <span class="comment">//invalid compilation error</span></span><br><span class="line"><span class="comment">//修饰方法</span></span><br><span class="line"><span class="comment">//被修饰的方法禁止被重写</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">User</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> String <span class="title function_">getName</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;user：&quot;</span>张三<span class="string">&quot;;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">class Reader extends User&#123;</span></span><br><span class="line"><span class="string">    @Override</span></span><br><span class="line"><span class="string">    public final String getName()&#123;</span></span><br><span class="line"><span class="string">        return &quot;</span>李四<span class="string">&quot;; //compilation error: overridden method is final</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">//final修饰类</span></span><br><span class="line"><span class="string">//例如 java 中的String类</span></span><br><span class="line"><span class="string">//表示该类 具有完整的功能，不能被继承</span></span><br><span class="line"><span class="string">public final class String</span></span><br><span class="line"><span class="string">    implements java.io.Serializable, Comparable&lt;String&gt;, CharSequence &#123;</span></span><br><span class="line"><span class="string">    /** The value is used for character storage. */</span></span><br><span class="line"><span class="string">    private final char value[];</span></span><br><span class="line"><span class="string"> </span></span><br><span class="line"><span class="string">    ...</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>优点</li>
</ul>
<ol>
<li><p>final 关键字，提高了性能，JVM 和 Java 应用都会缓存 final 变量。</p>
</li>
<li><p>final 变量，可以安全的在多线程环境下进行共享，而不需要额外的同步开销。</p>
</li>
</ol>
<h2 id="Java面向对象"><a href="#Java面向对象" class="headerlink" title="Java面向对象"></a>Java面向对象</h2><blockquote>
<p>java bean</p>
<blockquote>
<ul>
<li>提供一个默认的无参构造函数。</li>
<li>需要被序列化并且实现了 Serializable 接口。</li>
<li>可能有一系列可读写属性，并且一般是 private 的。</li>
<li>可能有一系列的 getter 或 setter 方法。</li>
</ul>
</blockquote>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//example</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">People</span> &#123;</span><br><span class="line">    privete String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String newName)</span> &#123;</span><br><span class="line">        name = newName;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(<span class="type">int</span> neweAge)</span> &#123;</span><br><span class="line">        age = newAge;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>






<h3 id="1-JVM内存结构"><a href="#1-JVM内存结构" class="headerlink" title="1.JVM内存结构"></a>1.JVM内存结构</h3><pre><code>        * 对象的存储结构
                对象应该看作一个地址
                对象名指向堆中的首地址（swap 案例）
        基本数据类型比较的是数值，而引用数据类型比较的是内存地址
</code></pre>
<ul>
<li><strong>JVM运行时的数据区</strong></li>
</ul>
<p>​											<strong>堆、栈、方法区、程序计数器</strong></p>
<p><img src="/images/jvmRunZone.png" alt="jvmRunZone"></p>
<ul>
<li><strong>程序计数器</strong></li>
</ul>
<blockquote>
<p><strong>程序技计数器一个线程独享的数据区域，也就是说，每个线程之间的数据相互不干扰，是一个线程内存空间。</strong></p>
</blockquote>
<blockquote>
<p><strong>可以当成字节码的行号指示器</strong></p>
</blockquote>
<ul>
<li><strong>栈</strong></li>
</ul>
<p>​		JVM的栈包括<strong>Java虚拟机栈</strong>和本地方法栈</p>
<ol>
<li>Java虚拟机栈：执行Java方法服务。</li>
<li>本地方法栈： 执行JVM使用到的Native方法服务。</li>
</ol>
<blockquote>
<p>natine 方法是什么？</p>
<p>JDK 中有很多方法是使用 Native 修饰的。Native 方法不是以 Java 语言实现的，而是以本地语言实现的（比如 C 或 C++）</p>
</blockquote>
<ul>
<li><strong>JVM虚拟机栈</strong></li>
</ul>
<ol>
<li>栈是线程私有的，每个线程拥有独立的栈空间</li>
<li>栈的元素为栈帧</li>
</ol>
<ul>
<li><strong>Java堆</strong></li>
</ul>
<p>​			特点：</p>
<pre><code>                1. 是Java虚拟机管理内存中的最大一块区域。
                1. 被所有线程共享。
                1. 用来存放用 new 创建过的对象
</code></pre>
<p>​			堆内存的分类</p>
<p><img src="/images/javaHeap.png" alt="java heap"></p>
<ul>
<li><strong>方法区</strong></li>
</ul>
<p>​			特点：</p>
<ol>
<li>被所有线程共享</li>
<li>存储已被虚拟机加载的类信息、常量、静态变量、即时编译器编译后的代码。</li>
<li>包含了常量池</li>
</ol>
<blockquote>
<p>常量池：</p>
<ol>
<li>常量池避免了频繁的创建和销毁对象而影响系统性能，其实现了对象的共享。</li>
</ol>
</blockquote>
<h3 id="2-包"><a href="#2-包" class="headerlink" title="2. 包"></a>2. 包</h3><h4 id="1-命名规则"><a href="#1-命名规则" class="headerlink" title="1.命名规则"></a>1.命名规则</h4><ul>
<li>统一使用小写</li>
<li>单数形式</li>
<li>使用  <strong>.</strong> 分隔开</li>
<li>一般是网站的反写形式</li>
</ul>
<h4 id="包的权限"><a href="#包的权限" class="headerlink" title="包的权限"></a>包的权限</h4><pre><code>        * public 共有
        * protected 
</code></pre>
<h3 id="3-多态"><a href="#3-多态" class="headerlink" title="3. 多态"></a>3. 多态</h3><h4 id="1-多态的转型"><a href="#1-多态的转型" class="headerlink" title="1.多态的转型"></a>1.多态的转型</h4><ul>
<li>向上转型</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">父类类型 引用名 = new 子类类型();</span><br><span class="line">//右侧创建一个子类对象，把它当作父类看待使用</span><br></pre></td></tr></table></figure>

<ul>
<li>向下转型</li>
</ul>
<ol>
<li><strong>只能强制转换父类的引用，不能强制转换父类的对象</strong></li>
<li><strong>要求父类的引用必须指向的是当前目标类型的对象</strong></li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">子类类型 引用名 = (子类类型) 父类引用;</span><br><span class="line">//用强制类型转换的格式，将父类引用类型转为子类引用类型</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>转型异常</strong></li>
</ul>
<p>​				可以利用操作符<strong>instanceof</strong>判断是否类型一致或为子类型（返回boolean类型）</p>
<h4 id="2-动态绑定"><a href="#2-动态绑定" class="headerlink" title="2. 动态绑定"></a>2. 动态绑定</h4><ul>
<li>​		当调用<strong>对象方法</strong>的时候，该方法会和该对象的<strong>运行类型</strong>绑定</li>
<li>​        当调用<strong>对象属性</strong>时，<strong>没有动态绑定</strong>机制，即哪里声明，哪里使用。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> dynamic_;</span><br><span class="line"></span><br><span class="line"><span class="comment">//演示动态绑定</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DynamicBinding</span> &#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">Person</span> <span class="variable">p1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>();  </span><br><span class="line"></span><br><span class="line">    p1.mission();</span><br><span class="line">        <span class="comment">//结果 : 学生要好好学习！</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//父类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">mission</span><span class="params">()</span> &#123;	</span><br><span class="line">    System.out.println(<span class="string">&quot;人要好好活着！&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//子类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span> <span class="keyword">extends</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">mission</span><span class="params">()</span> &#123;	</span><br><span class="line">    System.out.println(<span class="string">&quot;学生要好好学习！&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="3-多态参数"><a href="#3-多态参数" class="headerlink" title="3. 多态参数"></a>3. 多态参数</h4><p><strong>多态参数</strong>：方法定义的<strong>形参类型</strong>为<strong>父类</strong>类型，<strong>实参类型</strong>允许为<strong>子类</strong>类型。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> polyparameter;</span><br><span class="line"></span><br><span class="line"><span class="comment">//演示多态参数</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PolyParameter</span> &#123; </span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">Student</span> <span class="variable">s1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;小蓝同学&quot;</span>);</span><br><span class="line">    <span class="type">Teacher</span> <span class="variable">t1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Teacher</span>(<span class="string">&quot;小绿老师&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//需先 new 一个当前类的实例化，才能调用 test 方法</span></span><br><span class="line">    <span class="type">PolyParameter</span> <span class="variable">polyParameter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PolyParameter</span>();</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//实参是子类</span></span><br><span class="line">    polyParameter.test(s1);<span class="comment">//输出 s1.study()</span></span><br><span class="line">        polyParameter.test(t1);  <span class="comment">//输出 t1.teach()</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//定义方法test，形参为 Person 类型(形参是父类)</span></span><br><span class="line">  <span class="comment">//功能：调用学生的study或教师的teach方法</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">(Person p)</span> &#123;				<span class="comment">// 参数为父类</span></span><br><span class="line">        <span class="keyword">if</span> (p <span class="keyword">instanceof</span> Student)&#123;</span><br><span class="line">            ((Student) p).study();   <span class="comment">//向下转型</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (p <span class="keyword">instanceof</span> Teacher)&#123;</span><br><span class="line">            ((Teacher) p).teach();  <span class="comment">//向下转型</span></span><br><span class="line">        &#125;  </span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">//父类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">  <span class="keyword">private</span> String name;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">//有参构造</span></span><br><span class="line">  <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">(String name)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.name = name;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// getter 和 setter</span></span><br><span class="line">  <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> name;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.name = name;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//子类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span> <span class="keyword">extends</span> <span class="title class_">Person</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="title function_">Student</span><span class="params">(String name)</span> &#123;</span><br><span class="line">    <span class="built_in">super</span>(name);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// study() 方法</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">study</span><span class="params">()</span> &#123;	</span><br><span class="line">    System.out.println(<span class="built_in">super</span>.getName() + <span class="string">&quot;\t&quot;</span> + <span class="string">&quot;正在好好学习&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Teacher</span> <span class="keyword">extends</span> <span class="title class_">Person</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="title function_">Teacher</span><span class="params">(String name)</span> &#123;</span><br><span class="line">    <span class="built_in">super</span>(name);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// teach() 方法</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">teach</span><span class="params">()</span> &#123;	</span><br><span class="line">    System.out.println(<span class="built_in">super</span>.getName() + <span class="string">&quot;\t&quot;</span> + <span class="string">&quot;正在好好教书&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h3 id=""><a href="#" class="headerlink" title=""></a></h3><h2 id="Java集成体系框架"><a href="#Java集成体系框架" class="headerlink" title="Java集成体系框架"></a>Java集成体系框架</h2><h3 id="整体框架："><a href="#整体框架：" class="headerlink" title="整体框架："></a>整体框架：</h3><p><img src="/images/JavaIntegrationFrame.png"></p>
<p>​			Java集合类主要由两个根接口Collection和Map派生出来。</p>
<h3 id="1-Collection"><a href="#1-Collection" class="headerlink" title="1. Collection"></a>1. Collection</h3><p><img src="/images/JavaIntegrationFrameCollection.png"></p>
<ul>
<li><strong>ArrayLIst</strong></li>
</ul>
<p>​		1.增删查改</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ArrayList&lt;Object&gt; arrl =new ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">//增</span><br><span class="line">arr1.add( E e );</span><br><span class="line">//删</span><br><span class="line">remove(Object o) //从该集合中删除指定元素的单个实例</span><br><span class="line">clear()     //从此集合中删除所有元素</span><br><span class="line">//查</span><br><span class="line">arr1.getI(int index);    //获取第 i 个数，从零开始</span><br><span class="line">//改</span><br><span class="line">set(int index, E element)  //用指定的元素替换此列表中指定位置的元素。</span><br></pre></td></tr></table></figure>

<pre><code>    2. 迭代器
</code></pre>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">arr1.iterator()     //返回一个集合的迭代器</span><br><span class="line">arr1.toArray()      //转数组</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>常见方法</li>
</ol>
<h3 id="2-Map"><a href="#2-Map" class="headerlink" title="2. Map"></a>2. Map</h3><p><img src="/images/JavaIntegrationFrameMap.png"></p>
<h2 id="抽象类和接口"><a href="#抽象类和接口" class="headerlink" title="抽象类和接口"></a>抽象类和接口</h2><h3 id="抽象类-abstract-class"><a href="#抽象类-abstract-class" class="headerlink" title="抽象类(abstract class )"></a>抽象类(abstract class )</h3><h3 id="接口。"><a href="#接口。" class="headerlink" title="接口。"></a>接口。</h3><pre><code>        Java不允许多重继承，但是接口可以实现多重继承，即一个类可以实现多个接口。
</code></pre>
<h2 id="JDBC"><a href="#JDBC" class="headerlink" title="JDBC"></a>JDBC</h2><ul>
<li>定义：JDBC（Java DataBase Connectivity：java数据库连接）是一种用于执行SQL语句的Java API，可以为多种关系型数据库提供统一访问，它是由一组用Java语言编写的类和接口组成的。</li>
</ul>
<h3 id="简单使用过程"><a href="#简单使用过程" class="headerlink" title="简单使用过程"></a>简单使用过程</h3><ol>
<li>导入jar包</li>
</ol>
<p>​		<strong>注意：使用与MySQL版本适配的jar包，使用与操作系统一致的jar包</strong></p>
<p>案例程序（链接云数据库）：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.DriverManager;</span><br><span class="line"><span class="keyword">import</span> java.sql.ResultSet;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"><span class="keyword">import</span> java.sql.Statement;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">main</span> &#123;<span class="comment">//按照自己class名设置</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// MySQL 8.0 以上版本 - JDBC 驱动名及数据库 URL</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">JDBC_DRIVER</span> <span class="operator">=</span> <span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">DB_URL</span> <span class="operator">=</span> <span class="string">&quot;jdbc:mysql://142.171.33.151:3306/mydata&quot;</span>;<span class="comment">//注意格式</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 数据库的用户名与密码，需要根据自己的设置</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">USER</span> <span class="operator">=</span> <span class="string">&quot;root&quot;</span>;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">PASS</span> <span class="operator">=</span> <span class="string">&quot;123456&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Connection</span> <span class="variable">conn</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">Statement</span> <span class="variable">stmt</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="comment">// 注册 JDBC 驱动</span></span><br><span class="line">            Class.forName(JDBC_DRIVER);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 打开链接</span></span><br><span class="line">            System.out.println(<span class="string">&quot;connecting&quot;</span>);</span><br><span class="line">            conn = DriverManager.getConnection(DB_URL,USER,PASS);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 执行查询</span></span><br><span class="line">            stmt = conn.createStatement();</span><br><span class="line">            String sql;</span><br><span class="line">            sql = <span class="string">&quot;SELECT * FROM emp&quot;</span>;</span><br><span class="line">            <span class="type">ResultSet</span> <span class="variable">rs</span> <span class="operator">=</span> stmt.executeQuery(sql);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 循环输出每一条数据</span></span><br><span class="line">            <span class="keyword">while</span>(rs.next())&#123;<span class="comment">//按照自己录入数据输出</span></span><br><span class="line">                System.out.println(</span><br><span class="line">                        rs.getInt(<span class="string">&quot;id&quot;</span>) +<span class="string">&quot;\t&quot;</span>+</span><br><span class="line">                                rs.getString(<span class="string">&quot;name&quot;</span>)+<span class="string">&quot;\t&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 完成后关闭</span></span><br><span class="line">            rs.close();</span><br><span class="line">            stmt.close();</span><br><span class="line">            conn.close();</span><br><span class="line">        &#125;<span class="keyword">catch</span>(SQLException se)&#123;</span><br><span class="line">            <span class="comment">// 处理 JDBC 错误</span></span><br><span class="line">            se.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">            <span class="comment">// 处理 Class.forName 错误</span></span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">            <span class="comment">// 关闭资源</span></span><br><span class="line">            <span class="keyword">try</span>&#123;</span><br><span class="line">                <span class="keyword">if</span>(stmt!=<span class="literal">null</span>) stmt.close();</span><br><span class="line">            &#125;<span class="keyword">catch</span>(SQLException se2)&#123;</span><br><span class="line">            &#125;<span class="comment">// 什么都不做</span></span><br><span class="line">            <span class="keyword">try</span>&#123;</span><br><span class="line">                <span class="keyword">if</span>(conn!=<span class="literal">null</span>) conn.close();</span><br><span class="line">            &#125;<span class="keyword">catch</span>(SQLException se)&#123;</span><br><span class="line">                se.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;Goodbye!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>笔记</tag>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>51单片机笔记</title>
    <url>/2023/10/26/51%E5%8D%95%E7%89%87%E6%9C%BA%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<ul>
<li><h1 id="Information-Data-sheet"><a href="#Information-Data-sheet" class="headerlink" title="Information	&amp;  	Data sheet"></a>Information	&amp;  	Data sheet</h1></li>
</ul>
<p>Based on –AT89C51.</p>
<blockquote>
<p>The <strong>Atmel AT89 series</strong> is an <a href="https://en.wikipedia.org/wiki/Intel_8051">Intel 8051</a>-compatible family of 8 bit <a href="https://en.wikipedia.org/wiki/Microcontroller">microcontrollers</a> (μCs) manufactured by the <a href="https://en.wikipedia.org/wiki/Atmel">Atmel Corporation</a>.</p>
<p>Based on the Intel 8051 core, the AT89 series remains very popular as general purpose microcontrollers, due to their industry standard instruction set, their low unit cost, and the availability of these chips in DIL (DIP) packages. This allows a great amount of legacy code to be reused without modification in new applications. While less powerful than the newer AT90 series of <a href="https://en.wikipedia.org/wiki/Atmel_AVR">AVR</a> <a href="https://en.wikipedia.org/wiki/RISC">RISC</a> microcontrollers, new product development has continued with the AT89 series for the aforementioned advantages.</p>
<p>More recently, the AT89 series has been augmented with 8051-cored special function microcontrollers, specifically in the areas of <a href="https://en.wikipedia.org/wiki/Universal_Serial_Bus">USB</a>, <a href="https://en.wikipedia.org/wiki/I%C2%B2C">I²C</a> (two wire interface), <a href="https://en.wikipedia.org/wiki/Serial_Peripheral_Interface">SPI</a> and <a href="https://en.wikipedia.org/wiki/Controller_Area_Network">CAN</a> bus controllers, <a href="https://en.wikipedia.org/wiki/MP3">MP3</a> decoders and hardware <a href="https://en.wikipedia.org/wiki/Pulse-width_modulation">PWM</a>.</p>
</blockquote>
<p>Data sheet url links : <a href="https://rocelec.widen.net/view/pdf/gywrtkuql9/ATMLS01727-1.pdf?t.download=true&u=5oefqw">Data Sheet PDF Downloads</a> </p>
<blockquote>
<p><img src="/images/featuresofat89c51.png" alt="features of AT89C51"></p>
</blockquote>
<p>​						<strong>The following I would not like to just write down the points. The post will be focused on application layer</strong></p>
<h1 id="Project-1-1：TIME-BOMB"><a href="#Project-1-1：TIME-BOMB" class="headerlink" title="Project_1_1：TIME BOMB"></a>Project_1_1：<strong>TIME BOMB</strong></h1><p>​	It’s actually very easy to make a TIME BOMB than you can imagine.You will just need some TNT and an at89c51 chip(&lt;3).</p>
<p>Now that we fixed the Bomb (got some TNT). What about the  timer ? Yep, we can use the <strong>AT89C51</strong> chip.</p>
<p><strong>Timer</strong> </p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">delayN10ms</span><span class="params">(<span class="type">unsigned</span> <span class="type">int</span> N)</span>&#123;</span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> i;</span><br><span class="line">  <span class="keyword">for</span>(N;N&gt;<span class="number">0</span>;N--)</span><br><span class="line">  <span class="keyword">for</span>(i=<span class="number">1275</span>;i&gt;<span class="number">0</span>;i--);         <span class="comment">//different types of chips have different delay functions</span></span><br><span class="line">                   <span class="comment">//and it&#x27;s also related to the crystal oscillator</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>what about the next to do after the timer is set? yep , light it.</p>
<p>We can use a switch or a relay to light it . When the switch (connected between vcc and gnd) is on , the heat will light the TNT. EZ game.</p>
 <figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">delayN10ms</span><span class="params">(<span class="type">unsigned</span> <span class="type">int</span> N)</span>&#123;</span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> i;</span><br><span class="line">  <span class="keyword">for</span>(N;N&gt;<span class="number">0</span>;N--)</span><br><span class="line">  <span class="keyword">for</span>(i=<span class="number">1275</span>;i&gt;<span class="number">0</span>;i--);         <span class="comment">//different types of chips have different delay functions</span></span><br><span class="line">                   <span class="comment">//and it&#x27;s also related to the crystal oscillator</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;   </span><br><span class="line">    delayN10ms(<span class="number">10000</span>);<span class="comment">//10s</span></span><br><span class="line">    P1=<span class="number">0x00</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="/images/timeBomb.png" alt=" schematic "></p>
<h1 id="project-1-2-CANCEL-the-TIME-BOMB"><a href="#project-1-2-CANCEL-the-TIME-BOMB" class="headerlink" title="project_1_2 : CANCEL the TIME BOMB"></a>project_1_2 : CANCEL the TIME BOMB</h1><p>​	Now that we create a time bomb , we are going to  use it to rob a bank . However your </p>
<p>incompetent teammates set the bomb  early! You guys are to be exposed to TNT in just 10s . What are you going to do ? </p>
<ul>
<li>Yes ,for sure you can reset the chip. </li>
<li>Also we can use a technique called <strong>INTERRUPTION</strong></li>
</ul>
<blockquote>
<p>Now we are  going to talk about <strong>INTERRUPTION</strong></p>
<p>The chip AT89C51 has six interrupt sources .</p>
<p><strong>What is an interrupt ?</strong></p>
<blockquote>
<p>An interrupt is an external or internal event to get the CPU’s attention. Once the controller detects the interrupt, it suspends the current job and executes a special service routine know as Interrupt Service Routine(ISR).</p>
<p>Upon activation of an interrupt, the microcontroller goes through the following steps</p>
<ol>
<li><p>First it finishes the instruction it is executing and saves the address of the next instruction (PC) on the stack.</p>
</li>
<li><p>It also saves the current status of all the interrupts internally.</p>
</li>
<li><p>It jumps to a fixed location in memory, called the interrupt vector table, that holds the address of the ISR. The microcontroller gets the address of the ISR from the interrupt vector table and jumps to it It starts to execute the interrupt service subroutine until it reaches the last instruction of the subroutine which is RETI (return from interrupt)</p>
</li>
<li><p>Upon executing the RETI instruction, the microcontroller returns to the place where it was interrupted.</p>
</li>
<li><p>First, it gets the program counter (PC) address from the stack by popping the top two bytes of the stack into the PC.</p>
</li>
<li><p>Then it starts to execute from that address.</p>
<p><a href="http://exploreembedded.com/wiki/6.8051_Interrupts">information from here</a></p>
</li>
</ol>
</blockquote>
<p><strong>8051 interrupt Structure</strong></p>
<blockquote>
<p>8051 Microcontroller has six interrupt sources as shown in the table below:</p>
<table>
<thead>
<tr>
<th>Interrupt</th>
<th>ROM Location(Hex)</th>
<th>Pin</th>
<th>Flag Clearing</th>
<th>Interrupt no. in C</th>
</tr>
</thead>
<tbody><tr>
<td>Reset</td>
<td>0000</td>
<td>9</td>
<td>Auto</td>
<td>–</td>
</tr>
<tr>
<td>External HW Interrupt 0 (INT0)</td>
<td>0003</td>
<td>P3.2(12)</td>
<td>Auto</td>
<td>0</td>
</tr>
<tr>
<td>Timer 0 Interrupt(TF0)</td>
<td>000B</td>
<td>-</td>
<td>Auto</td>
<td>1</td>
</tr>
<tr>
<td>External HW Interrupt 1 (INT1)</td>
<td>0013</td>
<td>P3.3(13)</td>
<td>Auto</td>
<td>2</td>
</tr>
<tr>
<td>Timer 1 Interrupt(TF1)</td>
<td>001B</td>
<td>-</td>
<td>Auto</td>
<td>3</td>
</tr>
<tr>
<td>Serial Com Interrupt(RI and TI)</td>
<td>0023</td>
<td>-</td>
<td>Program SW</td>
<td>4</td>
</tr>
</tbody></table>
<ul>
<li>the reset vector has just 3 bytes allocated to it, meaning it can hold a jump instruction to the location where the main program is stored.</li>
<li>The other interrupts have 8 bytes allocated to each of them, hence a small Interrupt service routine(ISR) can be placed here. However, if the ISR needs to larger in length, it has to placed else where and the allocated 8 bytes need to have the code that simple redirects the control to the ISR.</li>
<li><em>INT0</em> and <em>INT1</em> are external interrupts on P3.2 and P3.3 respectively. These can be configured to be low level triggered or edge triggered interrupt sources.</li>
<li><em>TF0</em> and <em>TF1</em> are timer overflow interrupts for timer 0 and 1 respectively</li>
<li>The <em>Serial COM Interrupt</em> can be configured to trigger upon transmit or receipt of a byte during serial communication.</li>
</ul>
</blockquote>
<p><strong>enable interruption</strong></p>
<blockquote>
<p><img src="/images/structureof51interruption.jpg" alt="structure of 51 interrupt "></p>
</blockquote>
</blockquote>
<p>**example code using external interrupt **</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">setUp</span><span class="params">()</span>&#123;</span><br><span class="line">    IP = <span class="number">0x04</span>; </span><br><span class="line">   EA=<span class="number">1</span>;</span><br><span class="line">   EX0=<span class="number">1</span>; <span class="comment">// allow external interrupt INT0</span></span><br><span class="line">   IT0 = <span class="number">1</span>; <span class="comment">// set edge triggerin</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span>&#123;</span><br><span class="line">  setUp();</span><br><span class="line">   delayNms(<span class="number">10000</span>);<span class="comment">//10s</span></span><br><span class="line">    P1=<span class="number">0x00</span>;        <span class="comment">//start BOMB</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">int0</span><span class="params">(<span class="type">void</span>)</span> interrupt 0&#123;</span><br><span class="line"></span><br><span class="line">     P1=<span class="number">0xff</span>;			<span class="comment">//cancel the timer</span></span><br><span class="line">    P2=<span class="number">0x00</span>;       <span class="comment">//to display</span></span><br><span class="line">    delayN10ms(<span class="number">1000</span>);   <span class="comment">// pause 10s for your survive</span></span><br><span class="line">    P2=<span class="number">0xff</span>;       <span class="comment">//to display</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p><img src="/images/gif.gif" alt="simple example"></p>
</blockquote>
<p>Now you can run away safely ;D.</p>
<p>**The above codes are just some rough examples . **</p>
<h1 id="Project-1-3-the-final-version-of-the-time-bomb"><a href="#Project-1-3-the-final-version-of-the-time-bomb" class="headerlink" title="Project_1_3 : the final version of the time bomb"></a>Project_1_3 : the final version of the time bomb</h1><h2 id="First-we-are-going-to-design-the-schematic-seriously"><a href="#First-we-are-going-to-design-the-schematic-seriously" class="headerlink" title="First , we are going to design the schematic seriously."></a>First , we are going to design the schematic seriously.</h2><p><img src="/images/finalbomb.png" alt="the final schematic"></p>
<h3 id="codes"><a href="#codes" class="headerlink" title="codes:"></a><strong>codes:</strong></h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;reg51.h&gt;</span></span></span><br><span class="line"></span><br><span class="line">sbit button_1=P2^<span class="number">4</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">delayNms</span><span class="params">(<span class="type">int</span> N)</span>    <span class="comment">//@11.0592MHz</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">unsigned</span> <span class="type">char</span> i;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span>(N)&#123;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">1275</span>;i&gt;<span class="number">0</span>;i--);</span><br><span class="line">  N--;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">bombStart</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">//setup</span></span><br><span class="line">   IP = <span class="number">0x04</span>; </span><br><span class="line">    EA=<span class="number">1</span>;</span><br><span class="line">    EX0=<span class="number">1</span>; <span class="comment">// allow external interrupt INT0</span></span><br><span class="line">    IT0 = <span class="number">1</span>; <span class="comment">// set edge triggering</span></span><br><span class="line">    P2 =<span class="number">0xff</span>;</span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line">      <span class="keyword">if</span>(button_1==<span class="number">0</span>)&#123;</span><br><span class="line">        bombStart();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">bombStart</span><span class="params">()</span>&#123;</span><br><span class="line">  delayNms(<span class="number">10000</span>);</span><br><span class="line">  P1=<span class="number">0x00</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">int0</span><span class="params">(<span class="type">void</span>)</span> interrupt 0&#123; </span><br><span class="line"></span><br><span class="line">   P1=<span class="number">0xff</span>;<span class="comment">//cancel the timer</span></span><br><span class="line">  delayNms(<span class="number">10000</span>); <span class="comment">// increase 10s for your survive</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>explanations:</strong></p>
<ol>
<li>Once the bomb is set up , you need to press the start button to start the bomb.</li>
<li>Once you start the bomb , you have 10 s to run away .</li>
<li>If you want to delay the bomb , press the button “PAUSE” .<ul>
<li><strong>ps</strong>: there is no way you can cancel the bomb unless you reset or cut off the power .</li>
</ul>
</li>
</ol>
<p><strong>other information</strong></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">IT1 = <span class="number">1</span>; <span class="comment">// Enable external interrupt 1 to trigger by a falling edge signal. </span></span><br><span class="line"></span><br><span class="line">IT1 = <span class="number">0</span>; <span class="comment">// Enable a low level signal on external interrupt 1 to generate an interrupt.</span></span><br><span class="line"></span><br><span class="line">IT0 = <span class="number">1</span>; <span class="comment">// Enable external interrupt 0 to trigger by a falling edge signal.</span></span><br><span class="line"></span><br><span class="line">IT0 = <span class="number">0</span>; <span class="comment">// Enable a low level signal on external interrupt 1 to generate an interrupt.</span></span><br></pre></td></tr></table></figure>

<h1 id="Project-1-4-Use-a-TIMER-interrupt-to-set-the-bomb"><a href="#Project-1-4-Use-a-TIMER-interrupt-to-set-the-bomb" class="headerlink" title="Project_1_4: Use a TIMER interrupt to  set the bomb"></a>Project_1_4: Use a TIMER interrupt to  set the bomb</h1><p>​	To control the timer and specify our needs&#x2F;logic we have to configure the timers first. For configuring and controlling the 89c51 microcontroller timers we have four registers. These registers are associated with timers of 89c51 micro controller. Each register plays an important role in controlling and configuring the timer. </p>
<blockquote>
<p>**Registers that are associated with timers.  **</p>
<p>- </p>
<ul>
<li>(Timer Control register)</li>
<li>TMOD   (Timer Mode register)</li>
<li>TH0&#x2F;TL0 (Timer 0, 16-bit register, High bits goes to TH0, Low bits goes to TL0)</li>
<li>TH1&#x2F;TL1 (Timer 1, 16-bit register, High bits goes to TH1, Low bits goes to TL1)</li>
</ul>
</blockquote>
<p><strong>Formula if TIMER INTERRUPT</strong></p>
<p>TH0&#x2F;TL0(Timer-0) &#x3D; TH1&#x2F;TL1(Timer-1)</p>
<p>These two registers TH and TL are timer high byte and timer low byte registers. 0 and 1 are the timers numbers. These are 16-bit registers. we Load our time delays&#x2F;counter value in these registers. Recall 8051 timer counter can count up to 65535 and 16 bits cover 65535 in binary. Since 8051(89c51,89c52) is an 8-bit microcontroller, so to load 65535 we need two registers one representing the high byte and other the low byte. we access these register in two bytes one byte for TH(timer high byte) and TL(timer low byte). TH and TL together makes 16-bits(TH 8-bit, TL8-bit).  TH0 and TL0 are byte addressable only.</p>
<ul>
<li>how to set them then ? There is an  example .</li>
</ul>
<blockquote>
<p><img src="https://b2600043.smushcdn.com/2600043/wp-content/uploads/2/2/1/5/22159166/1434719730.png?lossy=0&strip=1&webp=1" alt="Calculating Delay for 8051(89c51,89c52) microcontroller"></p>
</blockquote>
<h3 id="TCON-Timer-control-Register-of-8051-Microcontroller"><a href="#TCON-Timer-control-Register-of-8051-Microcontroller" class="headerlink" title="TCON(Timer control) Register of 8051 Microcontroller"></a>TCON(Timer control) Register of 8051 Microcontroller</h3><p>TCON(Timer Control) is an 8-bit register. It’s bits are used for generating interrupts on gpio pins internal or external. The most important bits of the timers TRx and TFx are also in it. TRx(timer run) and TFx(timer overflow) bits which we use in almost all our timer applications are in it. When we initialize TRx with 1, TRx&#x3D;1 it means start the timer, When the specified time is over the timer it self make TFx&#x3D;1 which means that the delay value is reached. Once TFx&#x3D;1 stop the timer by initializing TRx with 0 TRx&#x3D;0(Stop Timer). Now if we again want to run the timer make TRx&#x3D;1. In the diagram you can see the SFR for TCON register, the bit’s used for interrupt handling and the timer run and timer over flow bits. If you want to access the individual bits of the registers, you can access them by their names. You can also access whole register it self by its name. At the bottom of the page their is a small example explaining it. </p>
<h2 id="Now-we-are-going-to-upgrade-our-Bomb"><a href="#Now-we-are-going-to-upgrade-our-Bomb" class="headerlink" title="Now we are going to upgrade our Bomb!"></a>Now we are going to upgrade our Bomb!</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;REGX52.H&gt;</span></span></span><br><span class="line"> </span><br><span class="line">sbit led=P2^<span class="number">4</span>;</span><br><span class="line"> </span><br><span class="line"><span class="type">int</span> cnt=<span class="number">0</span>;</span><br><span class="line"> </span><br><span class="line"><span class="type">void</span> <span class="title function_">Time0Init</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="comment">//配置定时器0工作模式16位计时</span></span><br><span class="line">    <span class="comment">//set T0 working mode with 16 bits</span></span><br><span class="line">  TMOD&amp;=<span class="number">0xF0</span>;</span><br><span class="line">    TMOD|=<span class="number">0x01</span>;</span><br><span class="line">  <span class="comment">//给初值，定制10ms</span></span><br><span class="line">    <span class="comment">//set initial value , create 10 ms delay</span></span><br><span class="line">  TL0=<span class="number">0x00</span>;</span><br><span class="line">  TH0=<span class="number">0xDC</span>;</span><br><span class="line">  </span><br><span class="line">  TR0=<span class="number">1</span>;<span class="comment">//开始计时</span></span><br><span class="line">        <span class="comment">// turn on T0</span></span><br><span class="line">  TF0=<span class="number">0</span>;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">//打开定时器0中断</span></span><br><span class="line">    <span class="comment">//turn on T0 interrupt</span></span><br><span class="line">  ET0=<span class="number">1</span>;</span><br><span class="line">  <span class="comment">//打开总中断</span></span><br><span class="line">    <span class="comment">// turn on general interrupt</span></span><br><span class="line">  EA=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="type">void</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  </span><br><span class="line">  led=<span class="number">1</span>;</span><br><span class="line">  </span><br><span class="line">  Time0Init();</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">  &#123;</span><br><span class="line">    ;<span class="comment">//do noting</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="type">void</span> <span class="title function_">Time0Rountime</span><span class="params">()</span>  interrupt 1</span><br><span class="line">&#123;</span><br><span class="line">      cnt++;						<span class="comment">//cnt++用来记录第一次爆表，cnt是1次</span></span><br><span class="line">            						<span class="comment">// record the interrupt times</span></span><br><span class="line">                    <span class="comment">//重新给初值</span></span><br><span class="line">                        <span class="comment">//reset the initial value</span></span><br><span class="line">      TL0=<span class="number">0x00</span>;</span><br><span class="line">      TH0=<span class="number">0xDC</span>;</span><br><span class="line">      <span class="keyword">if</span>(cnt==<span class="number">1000</span>)				<span class="comment">//爆表100次，经过10s，led就亮</span></span><br><span class="line">                              <span class="comment">// after 100 times which the time passes 1s</span></span><br><span class="line">      &#123;</span><br><span class="line">        cnt=<span class="number">0</span>;					<span class="comment">//当1s时，让count从0开始，计算下一次的1s</span></span><br><span class="line">                            <span class="comment">// set the cnt again</span></span><br><span class="line">        P1=<span class="number">0x00</span>;				<span class="comment">//BOMb!!!</span></span><br><span class="line">      &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h2 id="1-What-if-we-get-many-BOMBs-which-they-are-set-at-different-palces"><a href="#1-What-if-we-get-many-BOMBs-which-they-are-set-at-different-palces" class="headerlink" title="1. What if we get many BOMBs which they are set at different palces ?"></a>1. What if we get many BOMBs which they are set at different palces ?</h2><ul>
<li><strong>Explode with a delay ( such as 1 s )</strong></li>
</ul>
<blockquote>
<p>Solution KEY : </p>
<p>​				Once the first BOMB is about to explode , it sends a signal to another BOMB.</p>
<p><strong>the signal :</strong></p>
<ol>
<li>Voltage （like 0 v  —&gt; 1 v  or reverse it ）</li>
<li>Waves of Voltage ( PULSE )</li>
<li>Serial text</li>
</ol>
</blockquote>
<h2 id="1-Voltage"><a href="#1-Voltage" class="headerlink" title="1. Voltage"></a>1. Voltage</h2><p>​	Once the first bomb is about to explode, it sends a Voltage signal to the second and so on.</p>
<p>​	We can use one of a pin to do this work .</p>
<ul>
<li>The first BOMB</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    </span><br><span class="line">    delayN10ms(<span class="number">10000</span>);   <span class="comment">//10s</span></span><br><span class="line">    P2<span class="number">.1</span>=<span class="number">0</span>;       <span class="comment">// send a signal ( 5v ) </span></span><br><span class="line">    P1=<span class="number">0x00</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>The second BOMB</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">   <span class="keyword">while</span>(<span class="number">1</span>)&#123;   </span><br><span class="line">      <span class="keyword">if</span>(P2<span class="number">.1</span>==<span class="number">0</span>)&#123;</span><br><span class="line">            delayN10ms(<span class="number">10000</span>);   <span class="comment">//10s</span></span><br><span class="line">            P2<span class="number">.2</span>=<span class="number">0</span>;       <span class="comment">// send a signal to the third BOMB (send to P2.1) ( 5v ) </span></span><br><span class="line">            P1=<span class="number">0x00</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="2-Through-Plain-Text（by-serial-）"><a href="#2-Through-Plain-Text（by-serial-）" class="headerlink" title="2. Through Plain Text（by serial ）"></a>2. Through Plain Text（by serial ）</h2><blockquote>
<p>The procedure :</p>
<ol>
<li>Set the first bomb</li>
<li>Connect to the the second Bomb and the third one so on</li>
<li>Start the first Bomb</li>
<li>the second before the first Bomb is about to explode ,it send a message “BOMB”</li>
</ol>
</blockquote>
<p><strong>The schematic</strong></p>
<p><img src="/images/theFinalBomb.png" alt="the final version"></p>
<p><strong>The first BOMB.</strong> 	</p>
<ul>
<li>Transmit  signal ( We only use the send module, so we just need one pin ( <strong>TX</strong> ))</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;reg51.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> seg[]=&#123;<span class="number">0xc0</span>,<span class="number">0xf9</span>,<span class="number">0xa4</span>,<span class="number">0xb0</span>,<span class="number">0x99</span>,<span class="number">0x92</span>,<span class="number">0x82</span>,<span class="number">0xf8</span>,<span class="number">0x80</span>,<span class="number">0x90</span>&#125;; <span class="comment">//数码管驱动</span></span><br><span class="line"></span><br><span class="line">sbit start = P1^<span class="number">7</span>;</span><br><span class="line">sbit bomb  = P1^<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> timeS=<span class="number">9</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">delayNms</span><span class="params">(<span class="type">int</span> N)</span>    <span class="comment">// @11.0592MHz   延时函数</span></span><br><span class="line">&#123;</span><br><span class="line">        <span class="type">unsigned</span> <span class="type">char</span> i;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span>(N)&#123;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">1275</span>;i&gt;<span class="number">0</span>;i--);</span><br><span class="line">                N--;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">serialInit</span><span class="params">()</span>&#123;</span><br><span class="line">        </span><br><span class="line">        TH1=<span class="number">0xFD</span>;   <span class="comment">//Set timer 1 for BAUD=9600</span></span><br><span class="line">        TMOD=<span class="number">0x20</span>;   <span class="comment">//Set Timer 1 in Mode 2 8-bit Auto reload          </span></span><br><span class="line">        SCON=<span class="number">0x50</span>;   <span class="comment">//Set serial reception enable and Mode 1 8-bit UART</span></span><br><span class="line">        TR1=<span class="number">1</span>;     <span class="comment">//Start Timer 1</span></span><br><span class="line">        </span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">interruptSetUp</span><span class="params">()</span>&#123;</span><br><span class="line">        IP  =  <span class="number">0x04</span>; </span><br><span class="line">     EA  =  <span class="number">1</span>;</span><br><span class="line">     EX0 =  <span class="number">1</span>; <span class="comment">// allow external interrupt INT0</span></span><br><span class="line">        EX1 =  <span class="number">1</span>;</span><br><span class="line">     IT0 =  <span class="number">1</span>; <span class="comment">// set edge triggerin</span></span><br><span class="line">        IT1 =  <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">sendSignal</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">unsigned</span> <span class="type">char</span> Message[<span class="number">15</span>]=&#123;<span class="string">&quot;BOMB&quot;</span>&#125;;</span><br><span class="line">        <span class="type">char</span> i;</span><br><span class="line">       delayNms(<span class="number">300</span>);</span><br><span class="line">        <span class="keyword">for</span> (i=<span class="number">0</span>;i&lt;<span class="number">7</span>;i++)</span><br><span class="line">        &#123;</span><br><span class="line">         SBUF = Message[i];  <span class="comment">//Send one by one each byte to serial</span></span><br><span class="line">         <span class="keyword">while</span>(TI==<span class="number">0</span>);      <span class="comment">//Wait for Transmition complition</span></span><br><span class="line">     TI=<span class="number">0</span>;     <span class="comment">//Clear Transmit Intterupt flag</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">        serialInit();<span class="comment">// initialize</span></span><br><span class="line">        interruptSetUp();</span><br><span class="line">        <span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line">                </span><br><span class="line">                <span class="keyword">if</span>(start==<span class="number">0</span>)&#123;</span><br><span class="line">                        timeS=<span class="number">9</span>;</span><br><span class="line">                        <span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line"></span><br><span class="line">                                P0=seg[timeS];</span><br><span class="line">                                delayNms(<span class="number">500</span>);</span><br><span class="line">                                timeS--;</span><br><span class="line">                                <span class="keyword">if</span>(timeS==<span class="number">-1</span>)&#123;</span><br><span class="line">                                        sendSignal();</span><br><span class="line">                                        delayNms(<span class="number">10</span>);</span><br><span class="line">                                        bomb=<span class="number">0</span>;</span><br><span class="line">                                        <span class="keyword">while</span>(<span class="number">1</span>);</span><br><span class="line">                                &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                </span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">int0</span><span class="params">(<span class="type">void</span>)</span> interrupt 0&#123;    <span class="comment">// stop all the BOMBs entirely </span></span><br><span class="line">        <span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line">                </span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">int1</span><span class="params">(<span class="type">void</span>)</span> interrupt 2&#123;</span><br><span class="line">        delayNms(<span class="number">5000</span>);        <span class="comment">//pause for 5 seconds</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>The second BOMB</p>
<ul>
<li>Receive the signal from the last BOMB</li>
<li>Transmit signal to the third</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;REGX52.H&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> seg[]=&#123;<span class="number">0xc0</span>,<span class="number">0xf9</span>,<span class="number">0xa4</span>,<span class="number">0xb0</span>,<span class="number">0x99</span>,<span class="number">0x92</span>,<span class="number">0x82</span>,<span class="number">0xf8</span>,<span class="number">0x80</span>,<span class="number">0x90</span>&#125;; <span class="comment">//数码管驱动</span></span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> Message[<span class="number">15</span>]=&#123;<span class="string">&quot;BOMB&quot;</span>&#125;;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> receivedMessage[<span class="number">15</span>];</span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span>  r=<span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> timeS=<span class="number">9</span>;</span><br><span class="line">sbit bomb  = P1^<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">delayNms</span><span class="params">(<span class="type">int</span> N)</span>    <span class="comment">//@11.0592MHz   延时函数</span></span><br><span class="line">&#123;</span><br><span class="line">        <span class="type">unsigned</span> <span class="type">char</span> i;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span>(N)&#123;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">1275</span>;i&gt;<span class="number">0</span>;i--);</span><br><span class="line">                N--;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">interruptSetUp</span><span class="params">()</span>&#123;</span><br><span class="line">        IP  =  <span class="number">0x04</span>; </span><br><span class="line">   EA  =  <span class="number">1</span>;</span><br><span class="line">   EX0 =  <span class="number">1</span>; <span class="comment">// allow external interrupt INT0</span></span><br><span class="line">        EX1 =  <span class="number">1</span>;</span><br><span class="line">   IT0 =  <span class="number">1</span>; <span class="comment">// set edge triggerin</span></span><br><span class="line">        IT1 =  <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">UartInit</span><span class="params">()</span>    <span class="comment">//9600bps@11.0592MHz</span></span><br><span class="line">&#123;</span><br><span class="line">  PCON &amp;= <span class="number">0x7F</span>;		<span class="comment">//波特率不倍速</span></span><br><span class="line">  SCON = <span class="number">0x50</span>;		<span class="comment">//8位数据,可变波特率</span></span><br><span class="line">  TMOD &amp;= <span class="number">0x0F</span>;		<span class="comment">//清除定时器1模式位</span></span><br><span class="line">  TMOD |= <span class="number">0x20</span>;		<span class="comment">//设定定时器1为8位自动重装方式</span></span><br><span class="line">  TL1 = <span class="number">0xFD</span>;			<span class="comment">//设定定时初值</span></span><br><span class="line">  TH1 = <span class="number">0xFD</span>;			<span class="comment">//设定定时器重装值		</span></span><br><span class="line">  TR1 = <span class="number">1</span>;			<span class="comment">//启动定时器1</span></span><br><span class="line">  ET1 = <span class="number">0</span>;        	<span class="comment">//禁止定时器1中断</span></span><br><span class="line">  EA=<span class="number">1</span>;				<span class="comment">//开放总中断 </span></span><br><span class="line">  ES=<span class="number">1</span>;				<span class="comment">//开放串口中断</span></span><br><span class="line">        </span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Uartsend</span><span class="params">(<span class="type">unsigned</span> <span class="type">char</span> byte)</span><span class="comment">//发送</span></span><br><span class="line">&#123;</span><br><span class="line">  receivedMessage[r]=byte;<span class="comment">//把数据写入发送缓冲区SBUF</span></span><br><span class="line">        r++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">sendSignal</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">char</span> i;</span><br><span class="line">       delayNms(<span class="number">300</span>);</span><br><span class="line">        <span class="keyword">for</span> (i=<span class="number">0</span>;i&lt;<span class="number">7</span>;i++)</span><br><span class="line">        &#123;</span><br><span class="line">         SBUF = Message[i];  <span class="comment">//Send one by one each byte to serial</span></span><br><span class="line">         <span class="keyword">while</span>(TI==<span class="number">0</span>);      <span class="comment">//Wait for Transmition complition</span></span><br><span class="line">     TI=<span class="number">0</span>;     <span class="comment">//Clear Transmit Intterupt flag</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">sendReceivedSignal</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">char</span> i;</span><br><span class="line">       delayNms(<span class="number">300</span>);</span><br><span class="line">        <span class="keyword">for</span> (i=<span class="number">0</span>;i&lt;r;i++)</span><br><span class="line">        &#123;</span><br><span class="line">         SBUF = receivedMessage[i];  <span class="comment">//Send one by one each byte to serial</span></span><br><span class="line">         <span class="keyword">while</span>(TI==<span class="number">0</span>);      <span class="comment">//Wait for Transmition complition</span></span><br><span class="line">     TI=<span class="number">0</span>;     <span class="comment">//Clear Transmit Intterupt flag</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">UART_ISR</span><span class="params">()</span> interrupt 4     <span class="comment">//串口中断函数</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">if</span>(RI==<span class="number">1</span>)<span class="comment">//接收中断</span></span><br><span class="line">  &#123;</span><br><span class="line">    Uartsend(SBUF);<span class="comment">//把接收的数据发送到计算机</span></span><br><span class="line">    RI=<span class="number">0</span>;<span class="comment">//软件清零</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">compareMessage</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(receivedMessage[<span class="number">0</span>]==<span class="string">&#x27;B&#x27;</span>&amp;&amp;receivedMessage[<span class="number">1</span>]==<span class="string">&#x27;O&#x27;</span>&amp;&amp;receivedMessage[<span class="number">2</span>]==<span class="string">&#x27;M&#x27;</span>&amp;&amp;receivedMessage[<span class="number">3</span>]==<span class="string">&#x27;B&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  UartInit();</span><br><span class="line">        interruptSetUp();</span><br><span class="line">       </span><br><span class="line">  <span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">  &#123;</span><br><span class="line">                </span><br><span class="line">    <span class="keyword">if</span>(compareMessage()==<span class="number">1</span>)&#123;</span><br><span class="line">                        <span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line"></span><br><span class="line">                                P0=seg[timeS];</span><br><span class="line">                                delayNms(<span class="number">500</span>);</span><br><span class="line">                                timeS--;</span><br><span class="line">                                <span class="keyword">if</span>(timeS==<span class="number">-1</span>)&#123;</span><br><span class="line">                                        sendSignal();</span><br><span class="line">                                        delayNms(<span class="number">10</span>);</span><br><span class="line">                                        bomb=<span class="number">0</span>;</span><br><span class="line">                                        <span class="keyword">while</span>(<span class="number">1</span>);</span><br><span class="line">                                &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                &#125;</span><br><span class="line">               </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">int0</span><span class="params">(<span class="type">void</span>)</span> interrupt 0&#123;</span><br><span class="line">        <span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line">                </span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">int1</span><span class="params">(<span class="type">void</span>)</span> interrupt 2&#123;</span><br><span class="line">        delayNms(<span class="number">5000</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>The THird BOMB.</strong></p>
<p>Actually it  does the same thing as the second one .</p>
<ul>
<li>Receive the signal from the last BOMB</li>
<li>Transmit signal to the third one</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;REGX52.H&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> seg[]=&#123;<span class="number">0xc0</span>,<span class="number">0xf9</span>,<span class="number">0xa4</span>,<span class="number">0xb0</span>,<span class="number">0x99</span>,<span class="number">0x92</span>,<span class="number">0x82</span>,<span class="number">0xf8</span>,<span class="number">0x80</span>,<span class="number">0x90</span>&#125;; <span class="comment">//数码管驱动</span></span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> Message[<span class="number">15</span>]=&#123;<span class="string">&quot;BOMB&quot;</span>&#125;;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> receivedMessage[<span class="number">15</span>];</span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span>  r=<span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> timeS=<span class="number">9</span>;</span><br><span class="line">sbit bomb  = P1^<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">delayNms</span><span class="params">(<span class="type">int</span> N)</span>    <span class="comment">//@11.0592MHz   延时函数</span></span><br><span class="line">&#123;</span><br><span class="line">        <span class="type">unsigned</span> <span class="type">char</span> i;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span>(N)&#123;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">1275</span>;i&gt;<span class="number">0</span>;i--);</span><br><span class="line">                N--;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">interruptSetUp</span><span class="params">()</span>&#123;</span><br><span class="line">        IP  =  <span class="number">0x04</span>; </span><br><span class="line">   EA  =  <span class="number">1</span>;</span><br><span class="line">   EX0 =  <span class="number">1</span>; <span class="comment">// allow external interrupt INT0</span></span><br><span class="line">        EX1 =  <span class="number">1</span>;</span><br><span class="line">   IT0 =  <span class="number">1</span>; <span class="comment">// set edge triggerin</span></span><br><span class="line">        IT1 =  <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">UartInit</span><span class="params">()</span>    <span class="comment">//9600bps@11.0592MHz</span></span><br><span class="line">&#123;</span><br><span class="line">  PCON &amp;= <span class="number">0x7F</span>;		<span class="comment">//波特率不倍速</span></span><br><span class="line">  SCON = <span class="number">0x50</span>;		<span class="comment">//8位数据,可变波特率</span></span><br><span class="line">  TMOD &amp;= <span class="number">0x0F</span>;		<span class="comment">//清除定时器1模式位</span></span><br><span class="line">  TMOD |= <span class="number">0x20</span>;		<span class="comment">//设定定时器1为8位自动重装方式</span></span><br><span class="line">  TL1 = <span class="number">0xFD</span>;			<span class="comment">//设定定时初值</span></span><br><span class="line">  TH1 = <span class="number">0xFD</span>;			<span class="comment">//设定定时器重装值		</span></span><br><span class="line">  TR1 = <span class="number">1</span>;			<span class="comment">//启动定时器1</span></span><br><span class="line">  ET1 = <span class="number">0</span>;        	<span class="comment">//禁止定时器1中断</span></span><br><span class="line">  EA=<span class="number">1</span>;				<span class="comment">//开放总中断 </span></span><br><span class="line">  ES=<span class="number">1</span>;				<span class="comment">//开放串口中断</span></span><br><span class="line">        </span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Uartsend</span><span class="params">(<span class="type">unsigned</span> <span class="type">char</span> byte)</span><span class="comment">//发送</span></span><br><span class="line">&#123;</span><br><span class="line">  receivedMessage[r]=byte;<span class="comment">//把数据写入发送缓冲区SBUF</span></span><br><span class="line">        r++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">sendSignal</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">char</span> i;</span><br><span class="line">       delayNms(<span class="number">300</span>);</span><br><span class="line">        <span class="keyword">for</span> (i=<span class="number">0</span>;i&lt;<span class="number">7</span>;i++)</span><br><span class="line">        &#123;</span><br><span class="line">         SBUF = Message[i];  <span class="comment">//Send one by one each byte to serial</span></span><br><span class="line">         <span class="keyword">while</span>(TI==<span class="number">0</span>);      <span class="comment">//Wait for Transmition complition</span></span><br><span class="line">     TI=<span class="number">0</span>;     <span class="comment">//Clear Transmit Intterupt flag</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">sendReceivedSignal</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">char</span> i;</span><br><span class="line">       delayNms(<span class="number">300</span>);</span><br><span class="line">        <span class="keyword">for</span> (i=<span class="number">0</span>;i&lt;r;i++)</span><br><span class="line">        &#123;</span><br><span class="line">         SBUF = receivedMessage[i];  <span class="comment">//Send one by one each byte to serial</span></span><br><span class="line">         <span class="keyword">while</span>(TI==<span class="number">0</span>);      <span class="comment">//Wait for Transmition complition</span></span><br><span class="line">     TI=<span class="number">0</span>;     <span class="comment">//Clear Transmit Intterupt flag</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">UART_ISR</span><span class="params">()</span> interrupt 4     <span class="comment">//串口中断函数</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">if</span>(RI==<span class="number">1</span>)<span class="comment">//接收中断</span></span><br><span class="line">  &#123;</span><br><span class="line">    Uartsend(SBUF);<span class="comment">//把接收的数据发送到计算机</span></span><br><span class="line">    RI=<span class="number">0</span>;<span class="comment">//软件清零</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">compareMessage</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(receivedMessage[<span class="number">0</span>]==<span class="string">&#x27;B&#x27;</span>&amp;&amp;receivedMessage[<span class="number">1</span>]==<span class="string">&#x27;O&#x27;</span>&amp;&amp;receivedMessage[<span class="number">2</span>]==<span class="string">&#x27;M&#x27;</span>&amp;&amp;receivedMessage[<span class="number">3</span>]==<span class="string">&#x27;B&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  UartInit();</span><br><span class="line">        interruptSetUp();</span><br><span class="line">       </span><br><span class="line">  <span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">  &#123;</span><br><span class="line">                </span><br><span class="line">    <span class="keyword">if</span>(compareMessage()==<span class="number">1</span>)&#123;</span><br><span class="line">                        <span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line"></span><br><span class="line">                                P0=seg[timeS];</span><br><span class="line">                                delayNms(<span class="number">500</span>);</span><br><span class="line">                                timeS--;</span><br><span class="line">                                <span class="keyword">if</span>(timeS==<span class="number">-1</span>)&#123;</span><br><span class="line">                                        sendSignal();</span><br><span class="line">                                        delayNms(<span class="number">10</span>);</span><br><span class="line">                                        bomb=<span class="number">0</span>;</span><br><span class="line">                                        <span class="keyword">while</span>(<span class="number">1</span>);</span><br><span class="line">                                &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                &#125;</span><br><span class="line">               </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">int0</span><span class="params">(<span class="type">void</span>)</span> interrupt 0&#123;</span><br><span class="line">        <span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line">                </span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">int1</span><span class="params">(<span class="type">void</span>)</span> interrupt 2&#123;</span><br><span class="line">        delayNms(<span class="number">5000</span>);</span><br><span class="line">&#125;<span class="meta">#<span class="keyword">include</span> <span class="string">&lt;REGX52.H&gt;</span></span></span><br><span class="line"><span class="type">void</span> <span class="title function_">UartInit</span><span class="params">()</span>    <span class="comment">//9600bps@11.0592MHz</span></span><br><span class="line">&#123;</span><br><span class="line">  PCON &amp;= <span class="number">0x7F</span>;		<span class="comment">//波特率不倍速</span></span><br><span class="line">  SCON = <span class="number">0x50</span>;		<span class="comment">//8位数据,可变波特率</span></span><br><span class="line">  TMOD &amp;= <span class="number">0x0F</span>;		<span class="comment">//清除定时器1模式位</span></span><br><span class="line">  TMOD |= <span class="number">0x20</span>;		<span class="comment">//设定定时器1为8位自动重装方式</span></span><br><span class="line">  TL1 = <span class="number">0xFD</span>;			<span class="comment">//设定定时初值</span></span><br><span class="line">  TH1 = <span class="number">0xFD</span>;			<span class="comment">//设定定时器重装值		</span></span><br><span class="line">  TR1 = <span class="number">1</span>;			<span class="comment">//启动定时器1</span></span><br><span class="line">  ET1 = <span class="number">0</span>;        	<span class="comment">//禁止定时器1中断</span></span><br><span class="line">  EA=<span class="number">1</span>;				<span class="comment">//开放总中断 </span></span><br><span class="line">  ES=<span class="number">1</span>;				<span class="comment">//开放串口中断</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Uartsend</span><span class="params">(<span class="type">unsigned</span> <span class="type">char</span> byte)</span><span class="comment">//发送</span></span><br><span class="line">&#123;</span><br><span class="line">  SBUF=byte;<span class="comment">//把数据写入发送缓冲区SBUF</span></span><br><span class="line">  <span class="comment">//数据发送完成的标志是TI=1；所以等待数据传送完</span></span><br><span class="line">  <span class="keyword">while</span>(TI==<span class="number">0</span>);</span><br><span class="line">  TI=<span class="number">0</span>;<span class="comment">//软件清零</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">UART_ISR</span><span class="params">()</span> interrupt 4<span class="comment">//串口中断函数</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">if</span>(RI==<span class="number">1</span>)<span class="comment">//接收中断</span></span><br><span class="line">  &#123;</span><br><span class="line">    Uartsend(SBUF);<span class="comment">//把接收的数据发送到下一个</span></span><br><span class="line">    RI=<span class="number">0</span>;<span class="comment">//软件清零</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  UartInit();</span><br><span class="line">  <span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">  &#123;</span><br><span class="line">    </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p><strong>This is the end of our BOMB</strong></p>
<p>Good luck .</p>
]]></content>
      <tags>
        <tag>笔记</tag>
        <tag>嵌入式</tag>
        <tag>c51</tag>
      </tags>
  </entry>
  <entry>
    <title>微机原理与接口技术笔记</title>
    <url>/2023/10/26/%E5%BE%AE%E6%9C%BA%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8E%A5%E5%8F%A3%E6%8A%80%E6%9C%AF%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h1 id="汇编语言（8086为例）"><a href="#汇编语言（8086为例）" class="headerlink" title="汇编语言（8086为例）"></a>汇编语言（8086为例）</h1><p>—-基于《汇编语言第三版》王爽</p>
<h2 id="1-基础知识"><a href="#1-基础知识" class="headerlink" title="1.基础知识"></a>1.基础知识</h2><ul>
<li>8086 CPU的简介</li>
</ul>
<blockquote>
<p>(1) 16位微处理器；</p>
<p>(2) 采用<strong>高速运算性能</strong>的 <code>HMOS</code> 工艺制造，芯片上集成了2.9万只晶体管；</p>
<p>(3) 使用单一的 <code>+5V</code> 电源，<code>40</code> 条引脚双列直插式封装；</p>
<p>(4) 时钟频率为 <code>5MHz~10MHz</code> ，基本指令执行时间为<code>0.3ms~0.6ms</code> ；</p>
<p>(5) 16根数据线和 20根地址线，可寻址的地址空间达 <code>1MB</code> (毕竟 16根地址线只可以寻址 64KB，太小了) ；</p>
</blockquote>
<ul>
<li>冯诺依曼架构</li>
</ul>
<blockquote>
<p><strong>冯·诺伊曼结构</strong>（英语：Von Neumann architecture），也称<strong>范·诺伊曼模型</strong>（Von Neumann model）或<strong>普林斯顿结构</strong>（Princeton architecture），是一种将程序指令存储器和数据存储器合并在一起的电脑设计概念结构。该结构包含：运算器、控制器、存储器、输入设备、输出设备。</p>
<blockquote>
<p>结构特点：</p>
<ol>
<li>以运算单元为中心</li>
<li>采用存储程序原理</li>
<li>存储器是按地址访问、线性编址的空间</li>
<li>控制流由指令流产生</li>
<li>指令由操作码和地址码组成</li>
<li>数据以二进制编码</li>
</ol>
</blockquote>
</blockquote>
<ul>
<li>存储单元</li>
</ul>
<blockquote>
<p>1 KB&#x3D;1024 B(字节)</p>
<p>1 字（word）&#x3D;2 字节</p>
<p>1 B&#x3D;8 bit</p>
</blockquote>
<ul>
<li>总线</li>
</ul>
<p>​	总线包含：<strong>数据总线，地址总线，控制总线</strong></p>
<p>​				<strong>地址总线</strong>：假设一个CPU有N根地址总线（即地址总线宽度为N），最多可以寻找2的N次方个内存单元。</p>
<p>​				<strong>数据总线</strong>：N根数据总线一次可以传输N位二进制数据。</p>
<p>​				8088 CPU数据总线宽度为8；8086 CPU数据总线宽度为16。</p>
<p>​				<strong>控制总线</strong>：N根代表N种控制。</p>
<h2 id="2-寄存器"><a href="#2-寄存器" class="headerlink" title="2.寄存器"></a>2.寄存器</h2><p>​		一个典型的CPU由：运算器，控制器，寄存器等器件构成。同时他们通过总线在内部相连接（地址，数据，控制）。对于汇编程序员来说，CPU的主要器件就是寄存器。</p>
<p>​		8086寄存器特征：16位  (数据最大为2^16-1)</p>
<p>​		8086 CPU的寄存器种类：</p>
<p><img src="/images/registerof8086.png" alt="register of Intel 8086"></p>
<blockquote>
<ul>
<li>AX</li>
<li>BX</li>
<li>CX</li>
<li>DX    &#x2F;&#x2F;    以上四个为通用寄存器，用于存放一般性数据</li>
<li>SI</li>
<li>DI</li>
<li>SP</li>
<li>BP</li>
<li>IP</li>
<li>CS</li>
<li>SS</li>
</ul>
</blockquote>
<ul>
<li><strong>通用寄存器</strong></li>
</ul>
<p>​		<em>AX,BX,CX,DX四个寄存器通常用来存放一般性数据，因此内成为通用寄存器</em>。</p>
<blockquote>
<p>8086的上一代CPU的寄存器是8位的，为了兼容性，这四个寄存器也可以当丞8个8位寄存器使用。</p>
<ul>
<li><p>AX—-AH,AL</p>
</li>
<li><p>BX—-BH,BL</p>
</li>
<li><p>CX—-DH,DL</p>
</li>
<li><p>DX—-DH,DL	    （L和H指的是low和high，即低位和高位）</p>
</li>
</ul>
</blockquote>
<ul>
<li>8086 CPU的物理地址给出方法</li>
</ul>
<p>​		<strong>物理地址&#x3D;段地址*16+偏移地址</strong>   （段地址*16  可以理解为段地址向左移四位）</p>
<blockquote>
<p>一个物理地址可以可以有不同的段地址和偏移地址</p>
<p>偏移地址为16位，寻址能力为2^16即 64 KB，所以一个段的长度不能超过 64 KB</p>
</blockquote>
<ul>
<li><strong>段寄存器</strong></li>
</ul>
<blockquote>
<p>8086 CPU 的段寄存器：</p>
<ul>
<li>CS</li>
<li>DS</li>
<li>SS</li>
<li>ES</li>
</ul>
</blockquote>
<ul>
<li>CS 和 IP</li>
</ul>
<p>​	对于8086 CPU来说，CS和IP一起指示了当前要读取指令的地址：CS :IP ，执行该位置的语句后IP会自动增加，从而可以进行下一指令的执行。</p>
<ul>
<li><p>CS 和 IP 寄存器的修改</p>
</li>
<li><p>* </p>
<ul>
<li>情况一：当你在写汇编脚本或者直接向内存中写入汇编指令时</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">使用 JMP 指令</span><br><span class="line">使用方法： JMP 段地址：偏移地址</span><br><span class="line">eg: JMP 2AE3:3   //CS=2AE3,IP= 0003（均为16进制）</span><br><span class="line">或者（不想改变段地址时）</span><br><span class="line">JMP ax,    # 修改IP为 AX的值</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<ul>
<li>情况二： 在debug.exe（MASM32）中想要修改当前程序运行位置时(后面将会介绍)</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">例如在 dosBox中：</span><br><span class="line">debug.exe #进入debug模式</span><br><span class="line">-r CS</span><br><span class="line">CS 073f</span><br><span class="line">:XXXX(输入你需要位置)  # IP寄存器同理，通用寄存器也同上</span><br></pre></td></tr></table></figure>


</li>
<li><p>代码段</p>
</li>
</ul>
<p>​		即定义一片区域用于输入需要执行的代码。</p>
<ul>
<li><strong>debug的使用</strong></li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-r              #显示CPU各个寄存器的值</span><br><span class="line">-r 寄存器名字    	 	 #修改寄存器的值</span><br><span class="line"></span><br><span class="line">-d              #查看当前地址的内容</span><br><span class="line">-d 段地址：偏移地址       #查看该段的地址</span><br><span class="line"></span><br><span class="line">-a              #从当前位置开始写入汇编指令</span><br><span class="line">-a 段地址：偏移地址        #从该位置开始写入汇编指令</span><br><span class="line"></span><br><span class="line">-e                        #从当前位置开始写入机器码</span><br><span class="line">-e 段地址：偏移地址        #从该位置开始写入机器码</span><br></pre></td></tr></table></figure>



<h2 id="3-寄存器（内存访问）"><a href="#3-寄存器（内存访问）" class="headerlink" title="3.寄存器（内存访问）"></a>3.寄存器（内存访问）</h2><ul>
<li><strong>字型数据</strong></li>
</ul>
<blockquote>
<p>​	CPU用16位寄存器存在出一个字。高八位存放高位字节，低八位存放低位字节。</p>
</blockquote>
<ul>
<li><strong>DS和[address]</strong></li>
</ul>
<p>​		<strong>物理地址&#x3D;段地址*16+偏移地址</strong>   （段地址<em>16  可以理解为段地址向左移四位），因此如果想要读写某个地址，首先应该知道其段地址和偏移地址，8086 CPU通过寄存器<strong>DS</strong>来获取段地址，[N]来表示偏移地址，*</em>[ … ]用来表示一个内存单元（）**。</p>
<p><strong>注意：8086CPU 不支持将数据直接送入段寄存器。</strong></p>
<ul>
<li>字型数据的传送</li>
</ul>
<p>​	eg:</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">mov bx,<span class="number">1000</span>H</span><br><span class="line">mov ds,bx</span><br><span class="line">mov ax,[<span class="number">0</span>]</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>栈</strong></li>
</ul>
<p>​	使用8086 CPU编程时，可以将一段内存当做栈来使用。提供入栈和出栈指令，即<strong>PUSH 和 POP</strong></p>
<blockquote>
<p><strong>任意时刻，SS:SP 指向栈顶元素</strong> </p>
<p>同时，可以通过设置 SS,SP 寄存器的数据来修改栈的容量，地址。</p>
</blockquote>
<p>​	push pop指令</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">push [0]         ;将 DS :0 处的字压入栈</span><br><span class="line">pop [2]          ;出栈，将数据送入 DS:0处</span><br></pre></td></tr></table></figure>









<h2 id="4-第一个程序"><a href="#4-第一个程序" class="headerlink" title="4.第一个程序"></a>4.第一个程序</h2><ul>
<li><strong>源程序（后缀 .asm）的编写</strong></li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">;1.asm</span><br><span class="line">assume cs:codesg ;将用作代码段的段codesg和段寄存器cs联系起来。</span><br><span class="line"></span><br><span class="line">codesg segment ;定义一个段，段的名称为“codesg”，这个段从此开始</span><br><span class="line">         ;codesg是一个标号，作为一个段的名称，最终被编译连接成一个段的段地址</span><br><span class="line"></span><br><span class="line">  mov ax, 0123H</span><br><span class="line">  mov bx, 0456H </span><br><span class="line">  add ax, bx</span><br><span class="line">  add ax, ax </span><br><span class="line">  </span><br><span class="line">  mov ax, 4c00H </span><br><span class="line">  int 21H ;这两条指令实现程序的返回 ,相当于	return 0</span><br><span class="line">  </span><br><span class="line">codesg ends ;名称为“codesg”的段到此结束</span><br><span class="line"></span><br><span class="line">end ;编译器在编译汇编程序的过程中，碰到了伪指令end，结束对源程序的编译</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h2 id="5-bx-和loop指令"><a href="#5-bx-和loop指令" class="headerlink" title="5.[bx]和loop指令"></a>5.[bx]和loop指令</h2><blockquote>
<p><strong>bx</strong></p>
<p>​	[bx]也表示一个内存单元，它的偏移地址在bx中</p>
<p><strong>loop</strong></p>
<p>​	通用寄存器CX存储循环次数，循环一次：（cx）&#x3D; （cx）- 1；</p>
</blockquote>
<p>案例程序：</p>
<ol>
<li>实现2^12</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">assume cs:code </span><br><span class="line"></span><br><span class="line">code segment </span><br><span class="line">  mov ax, 2</span><br><span class="line">  </span><br><span class="line">  mov cx, 11 ;循环次数</span><br><span class="line">s:  add ax, ax </span><br><span class="line">  loop s     ;在汇编语言中，标号代表一个地址，标号s实际上标识了一个地址，</span><br><span class="line">               ;这个地址处有一条指令：add ax，ax。</span><br><span class="line">               ;执行loop s时，首先要将（cx）减1，然后若（cx）不为0，则向前</span><br><span class="line">               ;转至s处执行add ax，ax。所以，可以利用cx来控制add ax，ax的执行次数。</span><br><span class="line">  </span><br><span class="line">  mov ax,4c00h </span><br><span class="line">  int 21h </span><br><span class="line">code ends </span><br><span class="line">end</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ol start="2">
<li>实现将内存<code>ffff:0 ~ ffff:b</code>单元中的数据复制到<code>0:200 ~ 0:20b</code>单元中。</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">assume cs:code </span><br><span class="line"></span><br><span class="line">code segment </span><br><span class="line">  mov ax, 0ffffh </span><br><span class="line">  mov ds, ax  	 ;（ds）= 0ffffh </span><br><span class="line">  mov ax, 0020h</span><br><span class="line">    mov es, ax     ;（es）= 0020h     0:200 等效于 0020:0</span><br><span class="line">    mov bx, 0       ;（bx）= 0，此时ds:bx指向ffff:0，es:bx指向0020:0</span><br><span class="line">    </span><br><span class="line">  mov cx，12  	    ;（cx）=12，循环12次</span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">s:  mov dl，[bx]   ;（d1）=（（ds）* 16+（bx）），将ffff:bx中的字节数据送入dl </span><br><span class="line">  mov es:[bx]，dl 	;（（es）*16+（bx））=（d1），将dl中的数据送入0020:bx </span><br><span class="line">  inc bx  		;（bx）=（bx）+1</span><br><span class="line">  loop s </span><br><span class="line">  </span><br><span class="line">  mov ax，4c00h </span><br><span class="line">  int 21h </span><br><span class="line">code ends </span><br><span class="line">end</span><br><span class="line"></span><br></pre></td></tr></table></figure>





<h2 id="6-包含多个段的程序"><a href="#6-包含多个段的程序" class="headerlink" title="6.包含多个段的程序"></a>6.包含多个段的程序</h2><ul>
<li><ol>
<li>在代码中使用数据</li>
</ol>
</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">;计算 8 个数据的和存到 ax 寄存器</span><br><span class="line">assume cs:code </span><br><span class="line"></span><br><span class="line">code segment </span><br><span class="line"></span><br><span class="line">  dw 0123h,0456h,0789h,0abch,0defh,0fedh,0cbah,0987h ;define word 定义8个字形数据</span><br><span class="line"></span><br><span class="line">  start:	mov bx, 0  ;标号start</span><br><span class="line">      mov ax, 0  </span><br><span class="line">      </span><br><span class="line">      mov cx, 8</span><br><span class="line">  s:		add ax, cs:[bx]</span><br><span class="line">      add bx, 2</span><br><span class="line">      loop s </span><br><span class="line">      </span><br><span class="line">      mov ax, 4c00h </span><br><span class="line">      int 21h </span><br><span class="line">code ends</span><br><span class="line">end start    ;end除了通知编译器程序结束外，还可以通知编译器程序的入口在什么地方</span><br><span class="line">       	 ;用end指令指明了程序的入口在标号start处，也就是说，“mov bx，0”是程序的第一条指令。</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ol start="2">
<li>在代码中使用栈</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">;利用栈，将程序中定义的数据逆序存放。</span><br><span class="line">assume cs:codesg </span><br><span class="line"></span><br><span class="line">codesg segment </span><br><span class="line">  dw 0123h，0456h，0789h，0abch，0defh，0fedh，0cbah，0987h ; 0-15单元</span><br><span class="line">  dw 0，0，0，0，0，0，0，0，0，0，0，0，0，0，0，0 ; 16-47单元作为栈使用</span><br><span class="line">      </span><br><span class="line">  start:	mov ax, cs </span><br><span class="line">      mov ss, ax </span><br><span class="line">      mov sp, 30h ;将设置栈顶ss:sp指向栈底cs:30。   30h = 48d</span><br><span class="line">      mov bx, 0</span><br><span class="line">      </span><br><span class="line">      mov cx, 8</span><br><span class="line">  s:		push cs:[bx]</span><br><span class="line">      add bx, 2</span><br><span class="line">      loop s    ;以上将代码段0~15单元中的8个字型数据依次入栈</span><br><span class="line">      </span><br><span class="line">      mov bx, 0</span><br><span class="line">      </span><br><span class="line">      mov cx, 8</span><br><span class="line">  s0:		pop cs:[bx]		</span><br><span class="line">      add bx，2</span><br><span class="line">      loop s0   ;以上依次出栈8个字型数据到代码段0~15单元中</span><br><span class="line">      </span><br><span class="line">      mov ax，4c00h </span><br><span class="line">      int 21h </span><br><span class="line">codesg ends </span><br><span class="line">end start  ;指明程序的入口在start处</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ol start="3">
<li>将数据、代码、栈放入不同的段</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">assume cs:code,ds:data,ss:stack </span><br><span class="line"></span><br><span class="line">data segment </span><br><span class="line">  dw 0123h,0456h,0789h,0abch,0defh,0fedh,0cbah,0987h ;0-15单元</span><br><span class="line">data ends </span><br><span class="line"></span><br><span class="line">stack segment </span><br><span class="line">  dw 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ;0-31单元</span><br><span class="line">stack ends </span><br><span class="line"></span><br><span class="line">code segment </span><br><span class="line">  start:	mov ax, stack;将名称为“stack”的段的段地址送入ax</span><br><span class="line">      mov ss, ax</span><br><span class="line">      mov sp, 20h  ;设置栈顶ss:sp指向stack:20。 20h = 32d</span><br><span class="line">      </span><br><span class="line">      mov ax, data ;将名称为“data”的段的段地址送入ax</span><br><span class="line">      mov ds, ax   ;ds指向data段</span><br><span class="line">      </span><br><span class="line">      mov bx, 0    ;ds:bx指向data段中的第一个单元</span><br><span class="line">      </span><br><span class="line">      mov cx, 8</span><br><span class="line">  s:	    push [bx]</span><br><span class="line">      add bx, 2</span><br><span class="line">      loop s       ;以上将data段中的0~15单元中的8个字型数据依次入栈</span><br><span class="line">      </span><br><span class="line">      mov bx, 0</span><br><span class="line">      </span><br><span class="line">      mov cx, 8</span><br><span class="line">  s0:		pop [bx]</span><br><span class="line">      add bx, 2</span><br><span class="line">      loop s0      ;以上依次出栈8个字型数据到data段的0~15单元中</span><br><span class="line">      </span><br><span class="line">      mov ax, 4c00h </span><br><span class="line">      int 21h </span><br><span class="line">code ends</span><br><span class="line">end start</span><br><span class="line">;“end start”说明了程序的入口，这个入口将被写入可执行文件的描述信息，</span><br><span class="line">;可执行文件中的程序被加载入内存后，CPU的CS:IP被设置指向这个入口，从而开始执行程序中的第一条指令</span><br><span class="line"></span><br></pre></td></tr></table></figure>







<h2 id="7-更灵活灵活的定位内存地址的方法"><a href="#7-更灵活灵活的定位内存地址的方法" class="headerlink" title="7.更灵活灵活的定位内存地址的方法"></a>7.更灵活灵活的定位内存地址的方法</h2><pre><code>* **and 和 or 指令**
</code></pre>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mov al , 01100011B</span><br><span class="line">and al , 00111011B    ;按位与，执行后：al=00100011B</span><br><span class="line"></span><br><span class="line">mov al, 01100011B</span><br><span class="line">or al, 00111011B    ;按位或，执行后：al=01111011B</span><br></pre></td></tr></table></figure>



<ul>
<li><strong>ASCII</strong></li>
</ul>
<ol>
<li>以字符的形式给出数据</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">assume cs:code,ds:data </span><br><span class="line"></span><br><span class="line">data segment </span><br><span class="line">  db &#x27;unIx&#x27;   ;相当于“db 75H，6EH，49H，58H”</span><br><span class="line">  db &#x27;foRK&#x27;</span><br><span class="line">data ends </span><br><span class="line"></span><br><span class="line">code segment</span><br><span class="line">start:  mov al, &#x27;a&#x27;  ;相当于“mov al, 61H”，“a”的ASCI码为61H；</span><br><span class="line">    mov b1, &#x27;b&#x27;</span><br><span class="line">    </span><br><span class="line">    mov ax, 4c00h </span><br><span class="line">    int 21h </span><br><span class="line">code ends</span><br><span class="line">end start</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>大小写转换</li>
</ol>
<p>​		<strong>小写字母的ASCII码值比大写字母的ASCII码值大20H</strong></p>
<p>​		<strong>大写字母ASCII码的第5位为0，小写字母的第5位为1(其他一致)</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">assume cs:codesg,ds:datasg </span><br><span class="line"></span><br><span class="line">datasg segment </span><br><span class="line">  db &#x27;BaSiC&#x27;</span><br><span class="line">  db &#x27;iNfOrMaTion&#x27;</span><br><span class="line">datasg end</span><br><span class="line"></span><br><span class="line">codesg segment </span><br><span class="line">  start:	mov ax, datasg </span><br><span class="line">      mov ds, ax	;设置ds 指向 datasg段</span><br><span class="line">    </span><br><span class="line">      mov bx, 0	;设置（bx）=0，ds:bx指向’BaSic’的第一个字母</span><br><span class="line">      </span><br><span class="line">      mov cx, 5     	 ;设置循环次数5，因为’Basic&#x27;有5个字母</span><br><span class="line">  s:		mov al, [bx]     ;将ASCII码从ds:bx所指向的单元中取出</span><br><span class="line">      and al, 11011111B;将al中的ASCII码的第5位置为0，变为大写字母</span><br><span class="line">      mov [bx], al	 ;将转变后的ASCII码写回原单元</span><br><span class="line">      inc bx		     ;（bx）加1，ds:bx指向下一个字母</span><br><span class="line">      loop s </span><br><span class="line">      </span><br><span class="line">      mov bx, 5	;设置（bx）=5，ds:bx指向，iNfOrMaTion&#x27;的第一个字母</span><br><span class="line">      </span><br><span class="line">      mov cx, 11	;设置循环次数11，因为‘iNfOrMaTion&#x27;有11个字母</span><br><span class="line">  s0:		mov al, [bx]</span><br><span class="line">      or al, 00100000B;将a1中的ASCII码的第5位置为1，变为小写字母</span><br><span class="line">      mov [bx], al </span><br><span class="line">      inc bx</span><br><span class="line">      loop s0</span><br><span class="line">      </span><br><span class="line">      mov ax, 4c00h </span><br><span class="line">      int 21h </span><br><span class="line">codesg ends</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ol start="3">
<li>SI 和 DI</li>
</ol>
<p>​	SI 和 DI 是8086 CPU中和 bx 功能相近的寄存器，但是 SI 和 DI 不能分成连个该8为寄存器使用。</p>
<blockquote>
<p>idata : 立即数，直接的数据</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mov ax, 1                 ;对于直接包含在机器指令中的数据（执行前在CPU的指令缓冲器中）</span><br><span class="line">add bx, 2000h             ;在汇编语言中称为：立即数（idata）</span><br><span class="line">or bx, 00010000b</span><br><span class="line">mov al, &#x27;a&#x27;</span><br></pre></td></tr></table></figure>

<ol start="4">
<li>处理数据的长度</li>
</ol>
<blockquote>
<p>8086CPU的指令，可以处理两种尺寸的数据，byte和word（字节和字）。</p>
<p>通过寄<strong>存器名</strong>指明要处理的数据的尺寸。<br>例如： mov <strong>al</strong>, ds:[0] 寄存器al指明了数据为1字节</p>
<p>在没有寄存器名存在的情况下，用操作符X ptr指明内存单元的长度，X在汇编指令中可以为word或byte。<br>例如：mov byte ptr ds:[0], 1 byte ptr 指明了指令访问的内存单元是一个字节单元</p>
<p>有些<strong>指令默认</strong>了访问的是字单元还是字节单元<br>例如，push [1000H]，push 指令只进行<strong>字</strong>操作。</p>
</blockquote>
<ol start="6">
<li><strong>div指令、dd、dup、mul指令</strong></li>
</ol>
<blockquote>
<p>div ：除法指令。</p>
<p>除数：有8位和16位两种，在一个寄存器或内存单元中。</p>
<p>被除数：默认放在AX或DX和AX中，<br>如果除数为8位，被除数则为16位，默认在AX中存放；<br>如果除数为16位，被除数则为32位，在DX和AX中存放，DX存放高16位，AX存放低16位。</p>
<p>结果：<br>如果除数为8位，则AL存储除法操作的商，AH存储除法操作的余数；<br>如果除数为16位，则AX存储除法操作的商，DX存储除法操作的余数。</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">;利用除法指令计算100001/100。</span><br><span class="line">;100001D = 186A1H</span><br><span class="line">mov dx, 1</span><br><span class="line">mov ax, 86A1H ;(dx)*10000H+(ax)=100001</span><br><span class="line">mov bx, 100</span><br><span class="line">div bx</span><br><span class="line"></span><br><span class="line">;利用除法指令计算1001/100</span><br><span class="line">mov ax, 1001</span><br><span class="line">mov bl, 100</span><br><span class="line">div b1</span><br></pre></td></tr></table></figure>



<blockquote>
<p>dd：</p>
<ul>
<li><p>db 和 dw 定义字节型数据和字型数据。</p>
</li>
<li><p>dd 是用来定义dword（double word，<strong>双字（四个字节）</strong>）型数据的伪指令</p>
</li>
</ul>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">dd 100001</span><br><span class="line">dw 100</span><br><span class="line">dw 0</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<blockquote>
<p>操作符：</p>
<p>与db、dw、dd等数据定义伪指令配合使用，用来进行数据的重复</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">db 3 dup (0)       ;定义了3个字节，它们的值都是0，相当于db 0，0，0。</span><br><span class="line">db 3 dup (0, 1, 2) ;定义了9个字节，它们是0、1、2、0、1、2、0、1、2，相当于db 0，1，2，0，1，2，0，1，2。</span><br><span class="line">db 3 dup (&#x27;abc&#x27;, &#x27;ABC&#x27;) ;定义了18个字节，它们是abcABCabcABCabcABCC，相当于db &#x27;abc&#x27;, &#x27;ABC&#x27; ,&#x27;abc&#x27; , &#x27;ABC, &#x27;abc&#x27;, &#x27;ABC&#x27;。</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<blockquote>
<p>mul 指令 ：</p>
<ul>
<li><p>mul是乘法指令，使用 mul 做乘法的时候：相乘的两个数：要么都是8位，要么都是16位。</p>
</li>
<li><p>乘数：</p>
<ul>
<li><ol>
<li>8 位： <code>AL</code>中和 <code>8位寄存器</code>或<code>内存字节单元</code>中；</li>
<li>16 位： <code>AX</code>中和 <code>16 位寄存器</code>或<code>内存字单元</code>中。</li>
</ol>
</li>
</ul>
</li>
<li><p>结果：</p>
<ul>
<li>8位：AX中；</li>
<li>16位：DX（高位）和 AX（低位）中</li>
</ul>
</li>
</ul>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">; 8 位</span><br><span class="line">;计算100*10</span><br><span class="line">;100和10小于255，可以做8位乘法</span><br><span class="line">mov al,100</span><br><span class="line">mov bl,10</span><br><span class="line">mul bl</span><br><span class="line"></span><br><span class="line">;结果： (ax)=1000（03E8H） </span><br><span class="line"></span><br><span class="line">; 16 位置</span><br><span class="line"></span><br><span class="line">;计算100*10000</span><br><span class="line">;100小于255，可10000大于255，所以必须做16位乘法，程序如下：</span><br><span class="line">mov ax,100</span><br><span class="line">mov bx,10000</span><br><span class="line">mul bx</span><br><span class="line"></span><br><span class="line">;结果： (ax)=4240H，(dx)=000FH     （F4240H=1000000）</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="8-数据处理的两个基本问题"><a href="#8-数据处理的两个基本问题" class="headerlink" title="8.数据处理的两个基本问题"></a>8.数据处理的两个基本问题</h2><h3 id="寻址方式"><a href="#寻址方式" class="headerlink" title="寻址方式"></a>寻址方式</h3><p><strong>只有四个寄存器可以通过 [ … ] 进行内存单元的寻址</strong> </p>
<ul>
<li>以下代码为错误代码</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mov ax,[cx]</span><br><span class="line">mov ax,[dx]</span><br><span class="line">mov ax,[ax]</span><br><span class="line">mov ax,[ds]</span><br></pre></td></tr></table></figure>

<ul>
<li>在 [ … ] 中四个寄存器可以单独出现，或只能以四种组合出现</li>
</ul>
<blockquote>
<ol>
<li>bx 和 si</li>
<li>bx 和 di</li>
<li>bp 和 si</li>
<li>bp 和 di</li>
</ol>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mov ax,[bx+si]</span><br><span class="line">mov ax,[bx+di]</span><br><span class="line">mov ax,[bp+si]</span><br><span class="line">mov ax,[bp+di]</span><br><span class="line">            ;也可以加上data</span><br><span class="line">mov ax,[bx+si+idata</span><br><span class="line">mov ax,[bx+di+1]</span><br><span class="line">mov ax,[bp+si+2</span><br><span class="line">mov ax,[bp+di+3</span><br></pre></td></tr></table></figure>

<h3 id="处理的数据的大小"><a href="#处理的数据的大小" class="headerlink" title="处理的数据的大小"></a>处理的数据的大小</h3><ul>
<li>一般是字或者字节</li>
</ul>
<blockquote>
<p>在没有寄存器名的情况下可以使用 <code>X ptr</code>指明内存单元的长度</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mov word ptr ds:[0],1</span><br><span class="line">inc word ptr []bx</span><br><span class="line">add word ptr [bx],2</span><br><span class="line"></span><br><span class="line">mov byte ptr ds:[0],1</span><br><span class="line">inc byte ptr []bx</span><br><span class="line">add byte ptr [bx],2</span><br></pre></td></tr></table></figure>





<h2 id="9-转移指令"><a href="#9-转移指令" class="headerlink" title="9.转移指令"></a>9.转移指令</h2><blockquote>
<p>可以修改IP，或同时修改CS和IP的指令统称为转移指令。概括地讲，转移指令就是可以控制CPU执行内存中某处代码的指令。</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">jmp ax        ; 段内转移</span><br><span class="line">jmp 1000:0     ; 段间转移</span><br></pre></td></tr></table></figure>

<p><strong>offset</strong></p>
<blockquote>
<p>操作符offset在编语言中是由编译器处理的符号，它的功能是<strong>取得标号的偏移地址</strong>。</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">                  ;将s处的一条指令复制到s0处</span><br><span class="line">assume cs:codesg</span><br><span class="line">codesg segment</span><br><span class="line"> s:   mov ax, bx                 ;（mov ax,bx 的机器码占两个字节）</span><br><span class="line">      mov si, offset s           ;获得标号s的偏移地址</span><br><span class="line">      mov di, offset s0          ;获得标号s0的偏移地址</span><br><span class="line">      </span><br><span class="line">      mov ax, cs:[si]</span><br><span class="line">      mov cs:[di], ax</span><br><span class="line"> s0:  nop                           ;（nop的机器码占一个字节）</span><br><span class="line">      nop</span><br><span class="line"> codesg ends</span><br><span class="line"> ends</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>jmp指令</strong></p>
<blockquote>
<p><strong>jmp 为无条件转移</strong>，转到标号处执行指令可以只修改IP，也可以同时修改CS和IP；</p>
<p>jmp 指令要给出两种信息：</p>
<ol>
<li><p>转移的目的地址</p>
</li>
<li><p>转移的距离（段间转移、段内短转移，段内近转移）</p>
<p>jmp short 标号 jmp near ptr 标号 jcxz 标号 loop 标号 等几种汇编指令，它们对 IP的修改是根据转移目的地址和转移起始地址之间的位移来进行的。在它们对应的机器码中不包含转移的目的地址，而包含的是到目的地址的位移距离。</p>
</li>
</ol>
</blockquote>
<ol>
<li><strong>jmp short 标号</strong></li>
</ol>
<ul>
<li>实现段内短转移修改范围（-128-127）</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">assume cs:code</span><br><span class="line">code segment</span><br><span class="line">start: mov ax,9527h</span><br><span class="line">jmp short s        ; 跳转到</span><br><span class="line">add ax,1111h</span><br><span class="line">s: mov ax,2222h      ; 这里</span><br><span class="line">mov ax 4c00h</span><br><span class="line">int 21h</span><br><span class="line">code ends</span><br><span class="line">end start</span><br></pre></td></tr></table></figure>



<ol start="2">
<li><strong>jmp near ptr</strong></li>
</ol>
<ul>
<li>实现段内近转移（修改范围大于（-128-127）但是小于-32768～32767，编译成功但链接失败），这是jmp short 实现不了的。</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">assume cs:code</span><br><span class="line">code segment</span><br><span class="line">start: mov ax,9527h</span><br><span class="line">jmp near ptr s        ; 跳转到</span><br><span class="line">db 128 dup(0)        ; 制造距离超过127</span><br><span class="line">s: mov ax,2222h      ; 这里</span><br><span class="line">mov ax 4c00h</span><br><span class="line">int 21h</span><br><span class="line">code ends</span><br><span class="line">end start</span><br></pre></td></tr></table></figure>



<ol start="3">
<li><strong>jmp far ptr</strong></li>
</ol>
<ul>
<li>实现段间转移（修改范围超过-32768～32767）</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">assume cs:code</span><br><span class="line">code segment</span><br><span class="line">start: mov ax,9527h</span><br><span class="line">jmp near ptr s        ; 跳转到</span><br><span class="line">db 32768 dup(0)        ; 制造距离超过32767</span><br><span class="line">s: mov ax,2222h      ; 这里</span><br><span class="line">mov ax 4c00h</span><br><span class="line">int 21h</span><br><span class="line">code ends</span><br><span class="line">end start</span><br></pre></td></tr></table></figure>





<ol start="3">
<li><strong>转移地址在寄存器或内存中的jmp指令</strong></li>
</ol>
<ul>
<li>jmp 寄存器，直接修改ip为寄存器的值</li>
<li>jmp word ptr 内存单元</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mov ax, 0123H</span><br><span class="line">mov ds:[0], ax</span><br><span class="line">jmp word ptr ds:[0]      ;执行后，(IP)=0123H</span><br></pre></td></tr></table></figure>



<p><strong>jxcz 标号</strong> </p>
<blockquote>
<p>如果(cx)&#x3D;0,转移到标号处执行；若(cx) !&#x3D; 0,继续向下执行</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">assume cs:code,ds:data,ss:stack</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">data segment</span><br><span class="line">  db 0,0,0</span><br><span class="line">data ends</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">stack segment</span><br><span class="line"> </span><br><span class="line">  dw 16 dup(0)</span><br><span class="line"> </span><br><span class="line">stack ends</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">code segment  </span><br><span class="line">start:  mov  ax,2000H</span><br><span class="line">    mov  ds,ax</span><br><span class="line">    mov  bx,0</span><br><span class="line"> </span><br><span class="line">s:    mov  ch,0</span><br><span class="line">    mov  cl,ds:[bx]</span><br><span class="line">    jcxz ok		;若(cx)==0，跳转至ok标号处执行</span><br><span class="line">    inc  bx		;继续循环，直至查找到第一个值为0的字节</span><br><span class="line">    jmp  short s</span><br><span class="line"> </span><br><span class="line">ok:    mov  dx,bx</span><br><span class="line">    mov  ax,4c00H</span><br><span class="line">    int  21H</span><br><span class="line">code ends</span><br><span class="line"> </span><br><span class="line">end start</span><br></pre></td></tr></table></figure>



<h2 id="10-call和ret指令"><a href="#10-call和ret指令" class="headerlink" title="10.call和ret指令"></a>10.call和ret指令</h2><ul>
<li><strong>ret和retf</strong></li>
</ul>
<blockquote>
<ul>
<li><strong>ret</strong>指令用栈中的数据，修改IP的内容，从而实现<strong>近转移</strong></li>
</ul>
<p>对于ret：相当于<strong>一次</strong> pop，把数据放在ip里</p>
<ul>
<li><strong>retf</strong>指令用栈中的数据，修改CS和IP的内容，从而实现<strong>远转移</strong>。</li>
</ul>
<p>对于ret：相当于<strong>两次</strong> pop，第一次数据放在ip里，第二次放cs里</p>
</blockquote>
<ul>
<li><strong>call指令</strong></li>
</ul>
<p>类似于jmp，<strong>但是</strong>多了一个功能：<strong>将当前的 IP 或 CS和IP 压入栈中</strong>，此外，call没有短转移</p>
<ul>
<li><strong>call和ret的连招</strong></li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">assume cs:code</span><br><span class="line">code segment</span><br><span class="line">start:  mov ax,1</span><br><span class="line">      mov cx,3</span><br><span class="line">       call s ;（1）CPU指令缓冲器存放call指令，IP指向下一条指令（mov bx, ax），执行call指令，IP入栈，jmp</span><br><span class="line">       </span><br><span class="line">      mov bx,ax;（4）IP重新指向这里  bx = 8</span><br><span class="line">      </span><br><span class="line"></span><br><span class="line">       mov ax,4c00h</span><br><span class="line">       int 21h</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">     s: add ax,ax</span><br><span class="line">       loop s;（2）循环3次ax = 8</span><br><span class="line">      ret;（3）return : pop IP</span><br><span class="line">code ends</span><br><span class="line">end start</span><br><span class="line"></span><br></pre></td></tr></table></figure>







<h2 id="10-错题"><a href="#10-错题" class="headerlink" title="10.错题"></a>10.错题</h2><blockquote>
<p>一、下列关于8086CPU的工作原理的描述错误的是__3__。<br> 1、 汇编程序员可以通过对各种寄存器中内容的修改实现对CPU的控制。<br> 2、 CPU在访问内存时，采用“段地址*16+偏移地址”的形式给出要访问的内存单元的物理地址。<br>3、 任意时刻，CS:IP指向的内容即是此刻CPU正在执行的指令。<br> 4、 传送指令能够更改所有通用寄存器的内容。</p>
<p>注解：</p>
<pre><code> 1、正确，见课本P13
 2、正确 
 3、错误。课本P24，8086机中，任意时刻，CPU将CS：IP指向的内容当作指令执行。此处的含义是**将要执行**，比如输入T,CPU读取CS:IP的内容，载入指令执行，而不是正在执行。
 4、通用寄存器是AX、BX、CX、DX，传送指令是mov，mov指令可以改变4个通用寄存器的内容
</code></pre>
</blockquote>
<blockquote>
<p>六、下列说法中正确的是：<strong>4</strong><br>1、 8086CPU采用“段地址*16+偏移地址&#x3D;物理地址”的寻址模式，所以内存是由一个一个的段组成，每一个段有一个段地址。<br>2、 物理地址为ffff0H的内存单元的偏移地址可能为ffffH。<br>3、 一个段的大小可以是8Byte。<br>4、 在一段没有任何跳转指令的程序中，超出64K的部分将不会被执行。</p>
<p>注解：</p>
<pre><code> 1、第一句、第三句正确，第二句错误。内存没有分段，段的划分来自于CPU.见课本P22
 2、错误，不可能，若偏移地址为FFFFH，则段地址为EFFF1H，是不对的
 3、段大小最小16B(Byte)
 4、正确，CPU执行指令取决于CS;IP，IP最大65535，超过64K的IP不识别，CPU也就无法执行。
</code></pre>
</blockquote>
<blockquote>
<p>五、16位结构的CPU 不一定具备的特性是：<strong>4</strong><br>1、 运算器一次最多可以处理16位的数据<br>2、 寄存器的最大宽度为16位<br>3、 寄存器和运算器之间的通路为16位<br>4、 地址总线为16根</p>
<p>注解：见课本P18<br>      16位CPU特征：运算器一次最多可以处理16位的数据<br>                             寄存器的最大宽度为16位<br>                             寄存器和运算器之间的通路为16位<br>       8086CPU有20根地址总线，可以传送20位地址。故选择4</p>
</blockquote>
<blockquote>
<p>5.若将以1000H为段地址的整个段空间当作栈使用，那么寄存器SP的初始值最合理的设置是_____。 (1)<br>1、  0000H<br>2、  0001H<br>3、  FFFFH<br>4、  FFFEH</p>
<p>注解：以1000H为段地址的整个段空间，偏移地址为0-FFFFH，当栈中只有1个字时，偏移地址是FFFEH，当栈为空时，SP&#x3D;SP+2&#x3D;FFFF+2&#x3D;0000，所以选择1 </p>
<p>下列指令的书写正确的是： 3 。<br>1、 push al<br>2、 mov cs:[0],ds:[10]<br>3、 pop si<br>4、 mov ds:[0],2</p>
<p>解析：答案1错误，压堆指令一次性操作一个字；答案2错误，内存空间之间不能互相传送；答案3正确；答案4错误，不能将立即数送入内存空间</p>
</blockquote>
]]></content>
      <tags>
        <tag>笔记</tag>
        <tag>汇编</tag>
      </tags>
  </entry>
  <entry>
    <title>MySql学习笔记</title>
    <url>/2023/10/31/MySql%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h1 id="MySQL学习笔记（8-0）"><a href="#MySQL学习笔记（8-0）" class="headerlink" title="MySQL学习笔记（8.0）"></a>MySQL学习笔记（8.0）</h1><p>​		一切只因花几十块买了一年的云服务器。刚好目前需要用 用 JDBC ，于是就把数据库部署到了服务器上面。然而这其中却遇到了难以想象的困难（后来才发现没有必要这么弄，且一般也不这么弄，安全性大打折扣）。</p>
<h2 id="1-部署环境以及初始化配置"><a href="#1-部署环境以及初始化配置" class="headerlink" title="1.部署环境以及初始化配置"></a>1.部署环境以及初始化配置</h2><ul>
<li>Ubuntu</li>
</ul>
<h3 id="1-下载安装，配置密码"><a href="#1-下载安装，配置密码" class="headerlink" title="1.下载安装，配置密码"></a>1.下载安装，配置密码</h3><p>以root用户登录之后：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">apt update</span><br><span class="line">apt upgrade  #不解释</span><br><span class="line">apt install mysql-server -y  #下载</span><br></pre></td></tr></table></figure>

<p><strong>此时你可以直接进入mysql</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> use mysql;</span><br><span class="line">mysql<span class="operator">&gt;</span> apt install mysql<span class="operator">-</span>server <span class="operator">-</span>y #（将密码置为空）</span><br><span class="line">mysql<span class="operator">&gt;</span> quit;</span><br><span class="line">#  然后重启mysql，再次进入</span><br><span class="line">systemstl restart mysql</span><br><span class="line">mysql</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> use mysql;</span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">ALTER</span> <span class="keyword">USER</span> <span class="string">&#x27;root&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span> (如果不用远程链接则为<span class="string">&#x27;localhost&#x27;</span>)IDENTIFIED <span class="keyword">WITH</span> mysql_native_password <span class="keyword">BY</span> <span class="string">&#x27;新密码&#x27;</span>;</span><br><span class="line">mysql<span class="operator">&gt;</span> quit #修改完成</span><br></pre></td></tr></table></figure>

<ul>
<li>开启远程链接功能</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql</span><br><span class="line">mysql&gt; use mysql;</span><br><span class="line">mysql&gt; apt install mysql-server -y #修改访问权限，默认只能本地访问。</span><br></pre></td></tr></table></figure>

<ul>
<li>修改MySQL配置文件</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vim /etc/mysql/mysql.conf.d/mysqld.cnf</span><br><span class="line">将[mysqld]下面的 bind-address ***以及mysqlx-bind-address ****注释</span><br><span class="line">同时取消注释</span><br><span class="line">port</span><br><span class="line">user</span><br><span class="line">socket</span><br><span class="line">server-id</span><br><span class="line">重启测试即可</span><br></pre></td></tr></table></figure>

<h2 id="2-开始正式学习mysql"><a href="#2-开始正式学习mysql" class="headerlink" title="2. 开始正式学习mysql"></a>2. 开始正式学习mysql</h2>]]></content>
      <tags>
        <tag>笔记</tag>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>Data Structure and Algorithm</title>
    <url>/2023/11/12/Data-Structure-and-Algorithm/</url>
    <content><![CDATA[<h1 id="Start"><a href="#Start" class="headerlink" title="Start"></a>Start</h1><h2 id="树"><a href="#树" class="headerlink" title="树"></a>树</h2><h3 id="哈夫曼树（最优二叉树）"><a href="#哈夫曼树（最优二叉树）" class="headerlink" title="哈夫曼树（最优二叉树）"></a>哈夫曼树（最优二叉树）</h3><blockquote>
<p>​		哈夫曼算法：</p>
<ol>
<li>构造 n 棵二叉树森林，每一个都是带权值的根节点。</li>
<li>选择权值最小的两棵树作为左右子树，其根节点的权值为左右子树权值之和。</li>
<li>删除这两棵树，将新的树加入森林。</li>
<li>重复操作到只剩下一棵树为止。</li>
</ol>
</blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">*  基于结构体数组的哈曼树</span></span><br><span class="line"><span class="comment">*  C++</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">double</span> DataType; <span class="comment">//结点权值的数据类型</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">HTNode</span> <span class="comment">//单个结点的信息</span></span><br><span class="line">&#123;</span><br><span class="line">  DataType weight; <span class="comment">//权值</span></span><br><span class="line">  <span class="type">int</span> parent; <span class="comment">//父节点</span></span><br><span class="line">  <span class="type">int</span> lc, rc; <span class="comment">//左右孩子</span></span><br><span class="line">&#125;*HuffmanTree;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">char</span> **HuffmanCode; <span class="comment">//字符指针数组中存储的元素类型</span></span><br><span class="line">              <span class="comment">//用于存储哈夫曼编码</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//在下标为1到i-1的范围找到权值最小的两个值的下标，其中s1的权值小于s2的权值</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Select</span><span class="params">(HuffmanTree&amp; HT, <span class="type">int</span> n, <span class="type">int</span>&amp; s1, <span class="type">int</span>&amp; s2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="type">int</span> min;</span><br><span class="line">  <span class="comment">//找第一个最小值</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> (HT[i].parent == <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">      min = i;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> i = min + <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> (HT[i].parent == <span class="number">0</span> &amp;&amp; HT[i].weight &lt; HT[min].weight)</span><br><span class="line">      min = i;</span><br><span class="line">  &#125;</span><br><span class="line">  s1 = min; <span class="comment">//第一个最小值给s1</span></span><br><span class="line">  <span class="comment">//找第二个最小值</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> (HT[i].parent == <span class="number">0</span> &amp;&amp; i != s1)</span><br><span class="line">    &#123;</span><br><span class="line">      min = i;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> i = min + <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> (HT[i].parent == <span class="number">0</span> &amp;&amp; HT[i].weight &lt; HT[min].weight&amp;&amp;i != s1)</span><br><span class="line">      min = i;</span><br><span class="line">  &#125;</span><br><span class="line">  s2 = min; <span class="comment">//第二个最小值给s2</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//构建哈夫曼树</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">CreateHuff</span><span class="params">(HuffmanTree&amp; HT, DataType* w, <span class="type">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="type">int</span> m = <span class="number">2</span> * n - <span class="number">1</span>; <span class="comment">//哈夫曼树总结点数</span></span><br><span class="line">    </span><br><span class="line">  HT = (HuffmanTree)<span class="built_in">calloc</span>(m + <span class="number">1</span>, <span class="built_in">sizeof</span>(HTNode)); <span class="comment">//开m+1个HTNode，因为下标为0的HTNode不存储数据</span></span><br><span class="line">    </span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">  &#123;</span><br><span class="line">    HT[i].weight = w[i - <span class="number">1</span>]; <span class="comment">//赋权值给n个叶子结点</span></span><br><span class="line">  &#125;</span><br><span class="line">    </span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> i = n + <span class="number">1</span>; i &lt;= m; i++) <span class="comment">//构建哈夫曼树</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="comment">//选择权值最小的s1和s2，生成它们的父结点</span></span><br><span class="line">    <span class="type">int</span> s1, s2;</span><br><span class="line">    <span class="built_in">Select</span>(HT, i - <span class="number">1</span>, s1, s2); <span class="comment">//在下标为1到i-1的范围找到权值最小的两个值的下标，其中s1的权值小于s2的权值</span></span><br><span class="line">    HT[i].weight = HT[s1].weight + HT[s2].weight; <span class="comment">//i的权重是s1和s2的权重之和</span></span><br><span class="line">    HT[s1].parent = i; <span class="comment">//s1的父亲是i</span></span><br><span class="line">    HT[s2].parent = i; <span class="comment">//s2的父亲是i</span></span><br><span class="line">    HT[i].lc = s1; <span class="comment">//左孩子是s1</span></span><br><span class="line">    HT[i].rc = s2; <span class="comment">//右孩子是s2</span></span><br><span class="line">  &#125;</span><br><span class="line">    </span><br><span class="line">  <span class="comment">//打印哈夫曼树中各结点之间的关系</span></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;哈夫曼树为:&gt;\n&quot;</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;下标   权值     父结点   左孩子   右孩子\n&quot;</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;0                                  \n&quot;</span>);</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; i++)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%-4d   %-6.2lf   %-6d   %-6d   %-6d\n&quot;</span>, i, HT[i].weight, HT[i].parent, HT[i].lc, HT[i].rc);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//生成哈夫曼编码</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">HuffCoding</span><span class="params">(HuffmanTree&amp; HT, HuffmanCode&amp; HC, <span class="type">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  HC = (HuffmanCode)<span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(<span class="type">char</span>*)*(n + <span class="number">1</span>)); <span class="comment">//开n+1个空间，因为下标为0的空间不用</span></span><br><span class="line">  <span class="type">char</span>* code = (<span class="type">char</span>*)<span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(<span class="type">char</span>)*n); <span class="comment">//辅助空间，编码最长为n(最长时，前n-1个用于存储数据，最后1个用于存放&#x27;\0&#x27;)</span></span><br><span class="line">  code[n - <span class="number">1</span>] = <span class="string">&#x27;\0&#x27;</span>; <span class="comment">//辅助空间最后一个位置为&#x27;\0&#x27;</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="type">int</span> start = n - <span class="number">1</span>; <span class="comment">//每次生成数据的哈夫曼编码之前，先将start指针指向&#x27;\0&#x27;</span></span><br><span class="line">    <span class="type">int</span> c = i; <span class="comment">//正在进行的第i个数据的编码</span></span><br><span class="line">    <span class="type">int</span> p = HT[c].parent; <span class="comment">//找到该数据的父结点</span></span><br><span class="line">    <span class="keyword">while</span> (p) <span class="comment">//直到父结点为0，即父结点为根结点时，停止</span></span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> (HT[p].lc == c) <span class="comment">//如果该结点是其父结点的左孩子，则编码为0，否则为1</span></span><br><span class="line">        code[--start] = <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">        code[--start] = <span class="string">&#x27;1&#x27;</span>;</span><br><span class="line">      c = p; <span class="comment">//继续往上进行编码</span></span><br><span class="line">      p = HT[c].parent; <span class="comment">//c的父结点</span></span><br><span class="line">    &#125;</span><br><span class="line">    HC[i] = (<span class="type">char</span>*)<span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(<span class="type">char</span>)*(n - start)); <span class="comment">//开辟用于存储编码的内存空间</span></span><br><span class="line">    <span class="built_in">strcpy</span>(HC[i], &amp;code[start]); <span class="comment">//将编码拷贝到字符指针数组中的相应位置</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">free</span>(code); <span class="comment">//释放辅助空间</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//主函数</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="type">int</span> n = <span class="number">0</span>;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;请输入数据个数:&gt;&quot;</span>);</span><br><span class="line">  <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">  DataType* w = (DataType*)<span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(DataType)*n);</span><br><span class="line">  <span class="keyword">if</span> (w == <span class="literal">NULL</span>)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;malloc fail\n&quot;</span>);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;请输入数据:&gt;&quot;</span>);</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%lf&quot;</span>, &amp;w[i]);</span><br><span class="line">  &#125;</span><br><span class="line">  HuffmanTree HT;</span><br><span class="line">  <span class="built_in">CreateHuff</span>(HT, w, n); <span class="comment">//构建哈夫曼树</span></span><br><span class="line"></span><br><span class="line">  HuffmanCode HC;</span><br><span class="line">  <span class="built_in">HuffCoding</span>(HT, HC, n); <span class="comment">//构建哈夫曼编码</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) <span class="comment">//打印哈夫曼编码</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;数据%.2lf的编码为:%s\n&quot;</span>, HT[i].weight, HC[i]);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">free</span>(w);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="二叉树：求树的高度"><a href="#二叉树：求树的高度" class="headerlink" title="二叉树：求树的高度"></a>二叉树：求树的高度</h3><ol>
<li>递归</li>
</ol>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">使用递归</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">GetHeight</span><span class="params">(BinTree BT)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!BT) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> max(GetHeight(BT-&gt;Left),GetHeight(BT-&gt;Right))+<span class="number">1</span>;</span><br><span class="line">&#125; </span><br><span class="line"><span class="type">int</span> <span class="title function_">max</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span>&#123;<span class="keyword">return</span> a &gt; b ? a : b;&#125;</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>使用队列</li>
</ol>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//使用队列</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">GetHeight</span><span class="params">( BinTree BT )</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>(BT==<span class="literal">NULL</span>)<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    BinTree arr[<span class="number">100</span>];</span><br><span class="line">    BinTree tmpFront;</span><br><span class="line">    <span class="type">int</span> front=<span class="number">0</span>,rear=<span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> h=<span class="number">0</span>;</span><br><span class="line">    arr[rear++]=BT;</span><br><span class="line">    <span class="type">int</span> count=<span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> nextCount=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(front!=rear)&#123;</span><br><span class="line">        h++;</span><br><span class="line">        count=nextCount;</span><br><span class="line">        nextCount=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(count--)&#123;</span><br><span class="line">            tmpFront=arr[front++];</span><br><span class="line">            <span class="keyword">if</span>(tmpFront-&gt;Left)&#123;</span><br><span class="line">                arr[rear++]=tmpFront-&gt;Left;</span><br><span class="line">                nextCount++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(tmpFront-&gt;Right)&#123;</span><br><span class="line">                arr[rear++]=tmpFront-&gt;Right;</span><br><span class="line">                nextCount++;</span><br><span class="line">            &#125; </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> h;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="二叉树：顺序存储"><a href="#二叉树：顺序存储" class="headerlink" title="二叉树：顺序存储"></a>二叉树：顺序存储</h3><p>​	存储按照完全二叉树来（遇到空节点则 赋值 isEmpty 为 true）</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> MaxSize 100</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">TreeNode</span>&#123;</span></span><br><span class="line">   ElemType value; <span class="comment">//结点中的数据元素</span></span><br><span class="line">   <span class="type">bool</span> isEmpty;   <span class="comment">//结点是否为空</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">   TreeNode t[MaxSize];</span><br><span class="line">   <span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">0</span>; i&lt;MaxSize; i++)&#123;</span><br><span class="line">      t[i].isEmpty = <span class="literal">true</span>;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="二叉树的创建"><a href="#二叉树的创建" class="headerlink" title="二叉树的创建"></a>二叉树的创建</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//输入:ABC##DE#G##F###</span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">creat</span><span class="params">(BiTree *T)</span>  <span class="comment">//创建二叉树</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">char</span> ch;</span><br><span class="line">  <span class="built_in">scanf</span>(<span class="string">&quot;%c&quot;</span>,&amp;ch);</span><br><span class="line">  <span class="keyword">if</span>(ch==<span class="string">&#x27;#&#x27;</span>)		<span class="comment">//判断该字符ch是不是为&#x27;#&#x27;,意思是该节点是不是空的</span></span><br><span class="line">    *T=<span class="literal">NULL</span>;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    *T=(BiTree)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(BiTNode));	<span class="comment">//为结点T申请空间</span></span><br><span class="line">    (*T)-&gt;data=ch;		<span class="comment">//将ch的值赋给(*T)-&gt;data</span></span><br><span class="line">    creat(&amp;(*T)-&gt;lchild);</span><br><span class="line">    creat(&amp;(*T)-&gt;rchild);</span><br><span class="line">  &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h3 id="二叉树的遍历"><a href="#二叉树的遍历" class="headerlink" title="二叉树的遍历"></a>二叉树的遍历</h3><ul>
<li><strong>二叉树：先序遍历</strong></li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">PreOrder</span><span class="params">(BiTree T)</span>&#123;</span><br><span class="line">   <span class="keyword">if</span>(T!=<span class="literal">NULL</span>)&#123;</span><br><span class="line">      visit(T);                 <span class="comment">//访问根结点</span></span><br><span class="line">       </span><br><span class="line">      PreOrder(T-&gt;lchild);      <span class="comment">//递归遍历左子树</span></span><br><span class="line">      PreOrder(T-&gt;rchild);      <span class="comment">//递归遍历右子树</span></span><br><span class="line">   &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;        <span class="comment">//遍历失败，根节点空</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;     </span><br></pre></td></tr></table></figure>

<p><strong>二叉树：中序遍历</strong></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">ShowZhongXu</span><span class="params">(BitTree T)</span>      <span class="comment">//		先序遍历二叉树</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">if</span>(T==<span class="literal">NULL</span>)						<span class="comment">//	递归中遇到NULL，返回上一层节点</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> &#123;</span><br><span class="line">  ShowZhongXu(T-&gt;lchild);			<span class="comment">//	递归遍历左子树</span></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,T-&gt;data);</span><br><span class="line">  ShowZhongXu(T-&gt;rchild);			<span class="comment">//	递归遍历右子树</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>二叉树：后序遍历</strong></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">ShowZhongXu</span><span class="params">(BitTree T)</span>      <span class="comment">//		先序遍历二叉树</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">if</span>(T==<span class="literal">NULL</span>)						<span class="comment">//	递归中遇到NULL，返回上一层节点</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;					<span class="comment">// 空根</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> &#123;</span><br><span class="line">  ShowZhongXu(T-&gt;lchild);			<span class="comment">//	递归遍历左子树</span></span><br><span class="line">  ShowZhongXu(T-&gt;rchild);			<span class="comment">//	递归遍历右子树</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,T-&gt;data);      </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>二叉树：层序遍历</strong></li>
</ul>
<ul>
<li>使用队列</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">LevelOrder</span><span class="params">(BiTree T)</span>&#123;</span><br><span class="line">   LinkQueue Q;</span><br><span class="line">   InitQueue (Q);          <span class="comment">//初始化辅助队列</span></span><br><span class="line">    </span><br><span class="line">   BiTree p;</span><br><span class="line">   EnQueue(Q,T);           <span class="comment">//将根节点入队</span></span><br><span class="line">    </span><br><span class="line">   <span class="keyword">while</span>(!isEmpty(Q))&#123;     <span class="comment">//队列不空则循环</span></span><br><span class="line">      DeQueue(Q,p);        <span class="comment">//队头结点出队</span></span><br><span class="line">      visit(p);            <span class="comment">//访问出队结点</span></span><br><span class="line">      <span class="keyword">if</span>(p-&gt;lchild != <span class="literal">NULL</span>)</span><br><span class="line">         EnQueue(Q,p-&gt;lchild);   <span class="comment">//左孩子入队</span></span><br><span class="line">      <span class="keyword">if</span>(p-&gt;rchild != <span class="literal">NULL</span>)</span><br><span class="line">         EnQueue(Q,p-&gt;rchild);   <span class="comment">//右孩子入队</span></span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="二叉树交换左右孩子"><a href="#二叉树交换左右孩子" class="headerlink" title="二叉树交换左右孩子"></a>二叉树交换左右孩子</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//类似于先序遍历</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">swap</span><span class="params">(BiTree T)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">if</span>(T!=<span class="literal">NULL</span>)</span><br><span class="line">  &#123;</span><br><span class="line">    BiTNode *m=T-&gt;lchild;<span class="comment">/*这三行类似于&quot;打擂台法&quot;*/</span></span><br><span class="line">    T-&gt;lchild=T-&gt;rchild;</span><br><span class="line">    T-&gt;rchild=m;			</span><br><span class="line">    swap(T-&gt;lchild);</span><br><span class="line">    swap(T-&gt;rchild);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="求二叉树高度-深度"><a href="#求二叉树高度-深度" class="headerlink" title="求二叉树高度(深度)"></a>求二叉树高度(深度)</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">Depth</span><span class="params">( BiTree T )</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> countl =<span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> countr =<span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> max;</span><br><span class="line">    <span class="keyword">if</span>(T==<span class="literal">NULL</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">       </span><br><span class="line">        countl=Depth( T-&gt;lchild );</span><br><span class="line">        countr=Depth( T-&gt;rchild );</span><br><span class="line">        max=countl&gt;countr? countl:countr;</span><br><span class="line">        <span class="keyword">return</span> max+<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="线索二叉树"><a href="#线索二叉树" class="headerlink" title="线索二叉树"></a>线索二叉树</h3><blockquote>
<p>将空的指针域用以指向前驱后继节点。</p>
<p>遵循：</p>
<ul>
<li>ltag&#x3D;&#x3D;0，指向左孩子；ltag&#x3D;&#x3D;1，指向前驱结点</li>
<li>rtag&#x3D;&#x3D;0，指向右孩子；rtag&#x3D;&#x3D;1，指向后继结点</li>
</ul>
</blockquote>
<pre><code>    1. 二叉树的线索化
</code></pre>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//中序线索化</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">inOrderThreadTree</span><span class="params">(Node* node)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="comment">//如果当前结点为NULL 直接返回</span></span><br><span class="line">  <span class="keyword">if</span> (node == <span class="literal">NULL</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//先处理左子树</span></span><br><span class="line">  inOrderThreadTree(node-&gt;left_node);</span><br><span class="line">  <span class="keyword">if</span> (node-&gt;left_node == <span class="literal">NULL</span>)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="comment">//设置前驱结点</span></span><br><span class="line">    node-&gt;left_type = <span class="number">1</span>;</span><br><span class="line">    node-&gt;left_node = pre;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//如果结点的右子节点为NULL 处理前驱的右指针</span></span><br><span class="line">  <span class="keyword">if</span> (pre !=<span class="literal">NULL</span> &amp;&amp; pre-&gt;right_node == <span class="literal">NULL</span>)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="comment">//设置后继</span></span><br><span class="line">    pre-&gt;right_node = node;</span><br><span class="line">    pre-&gt;right_type = <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//每处理一个节点 当前结点是下一个节点的前驱</span></span><br><span class="line">  pre = node;</span><br><span class="line">  <span class="comment">//最后处理右子树</span></span><br><span class="line">  inOrderThreadTree(node-&gt;right_node);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ol start="2">
<li>中序遍历线索二叉树</li>
</ol>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">inOrderTraverse</span><span class="params">(Node* root)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="comment">//从根节点开始先找到最左边</span></span><br><span class="line">  <span class="keyword">if</span> (root == <span class="literal">NULL</span>)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  Node* temp = root;</span><br><span class="line">  <span class="comment">//先找到最左边结点 然后根据线索化直接向右遍历</span></span><br><span class="line">  <span class="keyword">while</span> (temp != <span class="literal">NULL</span> &amp;&amp; temp-&gt;left_type == <span class="number">0</span>)</span><br><span class="line">  &#123;</span><br><span class="line">    temp = temp-&gt;left_node;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">while</span> (temp != <span class="literal">NULL</span>)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="comment">//输出</span></span><br><span class="line">    temp = temp-&gt;right_node;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="二叉搜索树"><a href="#二叉搜索树" class="headerlink" title="二叉搜索树"></a>二叉搜索树</h3><p><strong>线索二叉树操作集合</strong></p>
<ol>
<li>结构体</li>
</ol>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">TNode</span> *<span class="title">Position</span>;</span></span><br><span class="line"><span class="keyword">typedef</span> Position BinTree;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">TNode</span>&#123;</span></span><br><span class="line">    ElementType Data;</span><br><span class="line">    BinTree Left;</span><br><span class="line">    BinTree Right;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>主函数</li>
</ol>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">int</span> ElementType;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">TNode</span> *<span class="title">Position</span>;</span></span><br><span class="line"><span class="keyword">typedef</span> Position BinTree;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">TNode</span>&#123;</span></span><br><span class="line">    ElementType Data;</span><br><span class="line">    BinTree Left;</span><br><span class="line">    BinTree Right;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">PreorderTraversal</span><span class="params">( BinTree BT )</span>; <span class="comment">/* 先序遍历，由裁判实现，细节不表 */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">InorderTraversal</span><span class="params">( BinTree BT )</span>;  <span class="comment">/* 中序遍历，由裁判实现，细节不表 */</span></span><br><span class="line"></span><br><span class="line">BinTree <span class="title function_">Insert</span><span class="params">( BinTree BST, ElementType X )</span>;</span><br><span class="line">BinTree <span class="title function_">Delete</span><span class="params">( BinTree BST, ElementType X )</span>;</span><br><span class="line">Position <span class="title function_">Find</span><span class="params">( BinTree BST, ElementType X )</span>;</span><br><span class="line">Position <span class="title function_">FindMin</span><span class="params">( BinTree BST )</span>;</span><br><span class="line">Position <span class="title function_">FindMax</span><span class="params">( BinTree BST )</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    BinTree BST, MinP, MaxP, Tmp;</span><br><span class="line">    ElementType X;</span><br><span class="line">    <span class="type">int</span> N, i;</span><br><span class="line"></span><br><span class="line">    BST = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;N);</span><br><span class="line">    <span class="keyword">for</span> ( i=<span class="number">0</span>; i&lt;N; i++ ) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;X);</span><br><span class="line">        BST = Insert(BST, X);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Preorder:&quot;</span>); PreorderTraversal(BST); <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    MinP = FindMin(BST);</span><br><span class="line">    MaxP = FindMax(BST);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;N);</span><br><span class="line">    <span class="keyword">for</span>( i=<span class="number">0</span>; i&lt;N; i++ ) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;X);</span><br><span class="line">        Tmp = Find(BST, X);</span><br><span class="line">        <span class="keyword">if</span> (Tmp == <span class="literal">NULL</span>) <span class="built_in">printf</span>(<span class="string">&quot;%d is not found\n&quot;</span>, X);</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d is found\n&quot;</span>, Tmp-&gt;Data);</span><br><span class="line">            <span class="keyword">if</span> (Tmp==MinP) <span class="built_in">printf</span>(<span class="string">&quot;%d is the smallest key\n&quot;</span>, Tmp-&gt;Data);</span><br><span class="line">            <span class="keyword">if</span> (Tmp==MaxP) <span class="built_in">printf</span>(<span class="string">&quot;%d is the largest key\n&quot;</span>, Tmp-&gt;Data);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;N);</span><br><span class="line">    <span class="keyword">for</span>( i=<span class="number">0</span>; i&lt;N; i++ ) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;X);</span><br><span class="line">        BST = Delete(BST, X);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Inorder:&quot;</span>); InorderTraversal(BST); <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 你的代码将被嵌在这里 */</span></span><br></pre></td></tr></table></figure>

<ol start="3">
<li>操作集合</li>
</ol>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//插入</span></span><br><span class="line">BinTree <span class="title function_">Insert</span><span class="params">( BinTree BST, ElementType X )</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(BST==<span class="literal">NULL</span>) &#123;          <span class="comment">/* 若原树为空，生成并返回一个结点的二叉搜索树 */</span></span><br><span class="line">        BST = (BinTree)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(BinTree));</span><br><span class="line">        BST -&gt;Data = X;</span><br><span class="line">        BST -&gt;Left = BST -&gt;Right = <span class="literal">NULL</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;         <span class="comment">/* 开始寻找要插入元素的位置 */</span></span><br><span class="line">        <span class="keyword">if</span>(X &lt; BST -&gt;Data ) &#123;</span><br><span class="line">            BST -&gt;Left = Insert(BST -&gt;Left, X);</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(X &gt; BST -&gt;Data ) &#123;</span><br><span class="line">            BST -&gt;Right = Insert(BST -&gt;Right, X);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">/* X已经存在，不用操作 */</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> BST;</span><br><span class="line">&#125; </span><br><span class="line"><span class="comment">//删除</span></span><br><span class="line">BinTree <span class="title function_">Delete</span><span class="params">( BinTree BST, ElementType X )</span>&#123;</span><br><span class="line">    BinTree Tmp;</span><br><span class="line">    <span class="keyword">if</span>(BST==<span class="literal">NULL</span>)    </span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Not Found\n&quot;</span>);</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>( X &lt; BST-&gt;Data)  </span><br><span class="line">            BST -&gt;Left = Delete(BST-&gt;Left, X);          <span class="comment">/* 左子树递归删除 */</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(X &gt; BST-&gt;Data ) </span><br><span class="line">            BST -&gt;Right = Delete(BST-&gt;Right , X);       <span class="comment">/* 右子树递归删除*/</span></span><br><span class="line">        <span class="keyword">else</span> &#123;                                          <span class="comment">/* 找到需要删除的结点 */</span></span><br><span class="line">            <span class="keyword">if</span>(BST-&gt;Left &amp;&amp; BST-&gt;Right) &#123;               <span class="comment">/* 被删除的结点有左右子结点 */</span></span><br><span class="line">                Tmp=FindMin(BST-&gt;Right);                <span class="comment">/* 在右子树中找到最小结点填充删除结点 */</span></span><br><span class="line">                BST-&gt;Data = Tmp -&gt;Data;</span><br><span class="line">                BST-&gt;Right=Delete(BST-&gt;Right,BST-&gt;Data);<span class="comment">/* 递归删除要删除结点的右子树中最小元素 */</span></span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;                                     <span class="comment">/* 被删除结点有一个或没有子结点*/</span></span><br><span class="line">                Tmp = BST;</span><br><span class="line">                <span class="keyword">if</span>(!BST-&gt;Left) BST = BST-&gt;Right;        <span class="comment">/*有右孩子或者没孩子*/</span> </span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span>(!BST-&gt;Right)    BST = BST-&gt;Left;<span class="comment">/*有左孩子，一定要加else，不然BST可能是NULL，会段错误*/</span> </span><br><span class="line">                <span class="built_in">free</span>(Tmp);                              <span class="comment">/*如无左右孩子直接删除*/</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> BST;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//查找</span></span><br><span class="line">Position <span class="title function_">Find</span><span class="params">( BinTree BST, ElementType X )</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(BST==<span class="literal">NULL</span>)    <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">if</span>(BST-&gt;Data==X)    <span class="keyword">return</span> BST; </span><br><span class="line">    <span class="keyword">if</span>(X&gt;BST-&gt;Data)     <span class="keyword">return</span> Find(BST-&gt;Right,X);      </span><br><span class="line">    <span class="keyword">if</span>(X&lt;BST-&gt;Data)     <span class="keyword">return</span> Find(BST-&gt;Left,X);</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/*  以下几种写法均可，推荐第上面这一种 </span></span><br><span class="line"><span class="comment"> </span></span><br><span class="line"><span class="comment">    if(!BST)    return NULL;</span></span><br><span class="line"><span class="comment">    if(BST-&gt;Data==X)    return BST; </span></span><br><span class="line"><span class="comment">    if(X&gt;BST-&gt;Data)     Find(BST-&gt;Right,X);     </span></span><br><span class="line"><span class="comment">    if(X&lt;BST-&gt;Data)     Find(BST-&gt;Left,X);</span></span><br><span class="line"><span class="comment"> </span></span><br><span class="line"><span class="comment">    if(BST)&#123;</span></span><br><span class="line"><span class="comment">        if(BST-&gt;Data==X)    return BST; </span></span><br><span class="line"><span class="comment">        if(X&gt;BST-&gt;Data)     Find(BST-&gt;Right,X);     //如果不写return，则返回过来的值并没有继续返回给最开始的函数 </span></span><br><span class="line"><span class="comment">        if(X&lt;BST-&gt;Data)     Find(BST-&gt;Left,X);</span></span><br><span class="line"><span class="comment">    &#125; </span></span><br><span class="line"><span class="comment">    else return NULL;   </span></span><br><span class="line"><span class="comment"> </span></span><br><span class="line"><span class="comment">    if(BST)&#123;</span></span><br><span class="line"><span class="comment">        if(BST-&gt;Data==X)    return BST; </span></span><br><span class="line"><span class="comment">        if(X&gt;BST-&gt;Data)     return  Find(BST-&gt;Right,X); </span></span><br><span class="line"><span class="comment">        if(X&lt;BST-&gt;Data)     return  Find(BST-&gt;Left,X);</span></span><br><span class="line"><span class="comment">    &#125; </span></span><br><span class="line"><span class="comment">    return NULL;</span></span><br><span class="line"><span class="comment"> </span></span><br><span class="line"><span class="comment">    if(BST)&#123;</span></span><br><span class="line"><span class="comment">        if(BST-&gt;Data==X)    return BST; </span></span><br><span class="line"><span class="comment">        if(X&gt;BST-&gt;Data)     return Find(BST-&gt;Right,X);      </span></span><br><span class="line"><span class="comment">        if(X&lt;BST-&gt;Data)     return Find(BST-&gt;Left,X);</span></span><br><span class="line"><span class="comment">    &#125; </span></span><br><span class="line"><span class="comment">    else return NULL;</span></span><br><span class="line"><span class="comment">    */</span>                          </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*如果return NULL前面不写else且Find前也不写else，则最后递归返回的也没return，最后只能是执行到了return NULL</span></span><br><span class="line"><span class="comment">返回了，而如果find 前加上了return则就把递归的结果利用起来了，最后加不加else也无所谓了，而如果直接最后else，</span></span><br><span class="line"><span class="comment">不加return find也是可以的，加上了else之后就不会被每一次返回时最后的return NULL给覆盖掉，所以也行。 */</span> </span><br><span class="line">Position <span class="title function_">FindMin</span><span class="params">( BinTree BST )</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(BST)&#123;</span><br><span class="line">        <span class="keyword">while</span>(BST-&gt;Left)&#123;</span><br><span class="line">            BST=BST-&gt;Left;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; </span><br><span class="line">    <span class="keyword">return</span> BST; </span><br><span class="line">&#125; </span><br><span class="line">Position <span class="title function_">FindMax</span><span class="params">( BinTree BST )</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(BST)&#123;</span><br><span class="line">        <span class="keyword">while</span>(BST-&gt;Right)&#123;</span><br><span class="line">            BST=BST-&gt;Right;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; </span><br><span class="line">    <span class="keyword">return</span> BST; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="图"><a href="#图" class="headerlink" title="图"></a>图</h2><h3 id="并查集"><a href="#并查集" class="headerlink" title="并查集"></a>并查集</h3><p>​	 	主要用于解决一些<strong>元素分组</strong>的问题。也可以用来判断图的连通性，它管理一系列<strong>不相交的集合</strong>，并支持两种操作：</p>
<ul>
<li><strong>合并</strong>（Union）：把两个不相交的集合合并为一个集合。</li>
<li><strong>查询</strong>（Find）：查询两个元素是否在同一个集合中。</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">find</span><span class="params">(<span class="type">int</span> x)</span>  <span class="comment">//最简单版本</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    *当数据很多时，查找会很耗费时间</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">if</span>(father[x]!=x) father[x]=find(father[x]);</span><br><span class="line">    <span class="keyword">return</span> father[x];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">find</span><span class="params">(<span class="type">int</span> x)</span>&#123;           <span class="comment">//查找根节点的函数 </span></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    *  升级版</span></span><br><span class="line"><span class="comment">    *  带路径压缩功能</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="type">int</span> a;</span><br><span class="line">  a=x;</span><br><span class="line">  <span class="keyword">while</span>(x!=father[x])x=father[x];</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">while</span>(a!=father[a])&#123;    <span class="comment">//路径压缩 </span></span><br><span class="line">    <span class="type">int</span> z=a;</span><br><span class="line">    a=father[a];</span><br><span class="line">    father[z]=x;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Union</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span>&#123; </span><br><span class="line">                <span class="comment">//合并两个集合</span></span><br><span class="line">    <span class="type">int</span> fx=find(a);</span><br><span class="line">    <span class="type">int</span> fy=find(b);</span><br><span class="line">    father[fx]=fy;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">judgeConnect</span><span class="params">()</span>&#123;</span><br><span class="line">                <span class="comment">//判断连通性</span></span><br><span class="line">    <span class="type">int</span> i,k=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=vertex;i++)</span><br><span class="line">        <span class="keyword">if</span>(father[i]==i) k++;</span><br><span class="line">        <span class="keyword">if</span>(k==<span class="number">1</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="AOE图"><a href="#AOE图" class="headerlink" title="AOE图"></a>AOE图</h3><blockquote>
<p><em>concept:</em></p>
<p>1、<strong>最早发生</strong>时间：从前往后，前驱结点到当前结点所需时间，取<strong>最大值</strong>；</p>
<p>2、<strong>最迟发生</strong>时间：从后往前，后继结点的最迟时间减去边权的值，取<strong>最小值</strong>；</p>
<p><strong>结束节点的最早发生时间和最迟发生时间相同。</strong></p>
<p>3、关键路径：最早发生时间和最迟发生时间相同的结点叫做关键路径上的结点；</p>
<p>4、<strong>最早开始</strong>时间：等于当前边起始节点的最早发生时间；</p>
<p>5、<strong>最晚开始</strong>时间：等于当前便指向结点的最迟时间减去当前边的权值；</p>
<p>6、<strong>最早完工</strong>时间：等于当前边指向结点的最早发生时间；</p>
<p>7、<strong>最晚完工</strong>时间：等于当前边指向结点的最迟发生时间；</p>
</blockquote>
<h3 id="图的链式存储结构"><a href="#图的链式存储结构" class="headerlink" title="图的链式存储结构"></a>图的链式存储结构</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MVNum 100                                 <span class="comment">//最大顶点数 </span></span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">ArcNode</span>&#123;</span>                        <span class="comment">//表结点 </span></span><br><span class="line">    <span class="type">int</span> adjvex;                                    <span class="comment">//邻接点的位置 </span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">ArcNode</span> * <span class="title">nextarc</span>;</span>      <span class="comment">//指向下一个表结点的指针 </span></span><br><span class="line">  &#125;ArcNode; </span><br><span class="line">  </span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">VNode</span>&#123;</span> </span><br><span class="line">   <span class="type">char</span> data;                                    <span class="comment">//顶点信息 </span></span><br><span class="line">   ArcNode * firstarc;         <span class="comment">//指向第一个表结点的指针 </span></span><br><span class="line">&#125;VNode, AdjList[MVNum];                 <span class="comment">//AdjList表示邻接表类型 </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span>&#123;</span> </span><br><span class="line">    AdjList vertices;              <span class="comment">//头结点数组</span></span><br><span class="line">    <span class="type">int</span> vexnum, arcnum;     <span class="comment">//图的当前顶点数和边数 </span></span><br><span class="line">&#125;ALGraph; </span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">CreatMGraph</span><span class="params">(ALGraph *G)</span>;<span class="comment">/* 创建图 */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">printGraph</span><span class="params">(ALGraph G)</span>;<span class="comment">/*输出图 */</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    ALGraph G;</span><br><span class="line">    CreatMGraph(&amp;G);</span><br><span class="line">    printGraph(G);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">CreatMGraph</span><span class="params">(ALGraph *G)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> i,j,k;</span><br><span class="line">    ArcNode *s;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;G-&gt;vexnum,&amp;G-&gt;arcnum);</span><br><span class="line">    getchar();</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;G-&gt;vexnum;i++)</span><br><span class="line">         <span class="built_in">scanf</span>(<span class="string">&quot;%c&quot;</span>,&amp;G-&gt;vertices[i].data);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;G-&gt;vexnum;i++)</span><br><span class="line">         G-&gt;vertices[i].firstarc=<span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(k=<span class="number">0</span>;k&lt;G-&gt;arcnum;k++) &#123;  </span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;i,&amp;j);    </span><br><span class="line">        s=(ArcNode*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(ArcNode));</span><br><span class="line">        s-&gt;adjvex=j;</span><br><span class="line">        s-&gt;nextarc=G-&gt;vertices[i].firstarc;</span><br><span class="line"></span><br><span class="line">        G-&gt;vertices[i].firstarc=s;   </span><br><span class="line"></span><br><span class="line">        s=(ArcNode*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(ArcNode));</span><br><span class="line">        s-&gt;adjvex=i;</span><br><span class="line"></span><br><span class="line">        s-&gt;nextarc=G-&gt;vertices[j].firstarc;;</span><br><span class="line">        G-&gt;vertices[j].firstarc=s;  </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">printGraph</span><span class="params">(ALGraph G)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> i,j;</span><br><span class="line">    ArcNode *p;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;G.vexnum;i++)</span><br><span class="line">    &#123;</span><br><span class="line">       <span class="built_in">printf</span>(<span class="string">&quot;%c:&quot;</span>,G.vertices[i].data);</span><br><span class="line">       <span class="keyword">for</span>(p=G.vertices[i].firstarc;p;p=p-&gt;nextarc)</span><br><span class="line">           <span class="built_in">printf</span>(<span class="string">&quot; %c&quot;</span>,G.vertices[p-&gt;adjvex].data);</span><br><span class="line">       <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="查找（搜索）"><a href="#查找（搜索）" class="headerlink" title="查找（搜索）"></a>查找（搜索）</h2><h3 id="折半搜索"><a href="#折半搜索" class="headerlink" title="折半搜索"></a>折半搜索</h3><blockquote>
<p>因为折半查找需要方便地定位查找区域，所以它要求线性表必须具有随机存取的特性。因此，该查找法仅适合于顺序存储结构，不适合于链式存储结构，且要求元素按关键字有序排列。</p>
</blockquote>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">BinSearch</span><span class="params">(<span class="type">int</span> <span class="built_in">array</span>[], <span class="type">int</span> x, <span class="type">int</span> n)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> arr[<span class="number">10</span>];<span class="comment">//0 1 2 3 4 5 6 7 8 9 </span></span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> num;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        arr[i]=i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> re=BinSearch(arr,<span class="number">9</span>,<span class="number">10</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;下标：%d\n&quot;</span>,re);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">                <span class="comment">//按折半查找法查找值为x的数组元素，若找到则返回x在数组中的下标位置，否则返回-1</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">BinSearch</span><span class="params">(<span class="type">int</span> <span class="built_in">array</span>[], <span class="type">int</span> x, <span class="type">int</span> n)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> low = <span class="number">0</span>, high = n<span class="number">-1</span>, mid;<span class="comment">//区间左端点low置为0，右端点high置为n-1</span></span><br><span class="line">    <span class="type">int</span> num=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (low &lt;= high)      <span class="comment">//若左端点小于等于右端点，则继续查找</span></span><br><span class="line">    &#123;</span><br><span class="line">        num++;</span><br><span class="line">        mid = low + (high - low) / <span class="number">2</span>;<span class="comment">//取数据区间的重点</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,mid);</span><br><span class="line">        <span class="keyword">if</span> (x &gt; <span class="built_in">array</span>[mid])</span><br><span class="line">            low = mid + <span class="number">1</span>;      <span class="comment">//若x&gt;array[mid]，则修改区间的左端点</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (x &lt; <span class="built_in">array</span>[mid])</span><br><span class="line">            high = mid - <span class="number">1</span>;      <span class="comment">//若x&lt;array[mid]，则修改区间的右端点</span></span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;次数：%d\n&quot;</span>,num);</span><br><span class="line">            <span class="keyword">return</span> mid;        <span class="comment">//若找到，则返回下标值mid</span></span><br><span class="line">            &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;            <span class="comment">//循环结束仍未找到，则返回值-1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="插值查找"><a href="#插值查找" class="headerlink" title="插值查找"></a>插值查找</h3><blockquote>
<p>类似于折半搜索，只是mid的计算方法不一样</p>
<p>比较元素的下标：</p>
<p>Mid &#x3D; Begin + ( (End - Begin) &#x2F; (A[End] - A[Begin]) ) * (X - A[Begin])</p>
<blockquote>
<p>式子中，各部分的含义分别是：</p>
<p>Mid：计算得出的元素的位置；</p>
<p>End：搜索区域内最后一个元素所在的位置；</p>
<p>Begin：搜索区域内第一个元素所在的位置；</p>
<p>X：要查找的目标元素；</p>
<p>A[]：表示整个待搜索序列</p>
</blockquote>
</blockquote>
<p>C语言实现过程</p>
<p>​	<strong>递归算法</strong></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="comment">//实现插值查找算法，ele 表示要查找的目标元素，[begin,end] 指定查找区域</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">interpolation_search</span><span class="params">(<span class="type">int</span>* arr, <span class="type">int</span> begin, <span class="type">int</span> end, <span class="type">int</span> ele)</span> &#123;</span><br><span class="line">    <span class="type">int</span> mid = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">//如果[begin,end] 不存在，返回 -1</span></span><br><span class="line">    <span class="keyword">if</span> (begin &gt; end) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//如果搜索区域内只有一个元素，判断其是否为目标元素</span></span><br><span class="line">    <span class="keyword">if</span> (begin == end) &#123;</span><br><span class="line">        <span class="keyword">if</span> (ele == arr[begin]) &#123;</span><br><span class="line">            <span class="keyword">return</span> begin;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//如果该元素非目标元素，则查找失败</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 找到&quot;中间元素&quot;所在的位置</span></span><br><span class="line">    mid = begin + ((end - begin) / (arr[end] - arr[begin]) * (ele - arr[begin]));</span><br><span class="line">    <span class="comment">//递归的出口</span></span><br><span class="line">    <span class="keyword">if</span> (ele == arr[mid]) &#123;</span><br><span class="line">        <span class="keyword">return</span> mid;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//比较 ele 和 arr[mid] 的值，缩小 ele 可能存在的区域</span></span><br><span class="line">    <span class="keyword">if</span> (ele &lt; arr[mid]) &#123;</span><br><span class="line">        <span class="comment">//新的搜索区域为 [begin,mid-1]</span></span><br><span class="line">        <span class="keyword">return</span> interpolation_search(arr, begin, mid - <span class="number">1</span>, ele);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">//新的搜索区域为 [mid+1,end]</span></span><br><span class="line">        <span class="keyword">return</span> interpolation_search(arr, mid + <span class="number">1</span>, end, ele);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> arr[<span class="number">10</span>] = &#123; <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span> &#125;;</span><br><span class="line">    <span class="comment">//输出元素 2 所在位置的下标</span></span><br><span class="line">    <span class="type">int</span> pos = interpolation_search(arr, <span class="number">0</span>, <span class="number">9</span>, <span class="number">2</span>);</span><br><span class="line">    <span class="keyword">if</span> (pos != <span class="number">-1</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, interpolation_search(arr, <span class="number">0</span>, <span class="number">9</span>, <span class="number">2</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;查找失败&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="二叉排序树"><a href="#二叉排序树" class="headerlink" title="二叉排序树"></a>二叉排序树</h3><blockquote>
<ol>
<li>若左子树非空，则左子树上所有结点的值均小于根结点的值。</li>
<li>若右子树非空，则右子树上所有结点的值均大于根结点的值。</li>
<li>左、右子树也分别是一棵二叉排序树。</li>
</ol>
</blockquote>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*二叉树的二叉链表结点结构定义*/</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">BiTNode</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  <span class="type">int</span> data;	<span class="comment">//结点数据</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">BiTNode</span> *<span class="title">lchild</span>, *<span class="title">rchild</span>;</span>	<span class="comment">//左右孩子指针</span></span><br><span class="line">&#125; BiTNode, *Bitree;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">递归查找二叉排序树T中是否存在key</span></span><br><span class="line"><span class="comment">指针f指向T的双亲，其初始调用值为NULL</span></span><br><span class="line"><span class="comment">若查找成功，则指针p指向该数据元素结点，并返回TRUE</span></span><br><span class="line"><span class="comment">否则指针p指向查找路径上访问的最后一个结点并返回FALSE</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="type">bool</span> <span class="title function_">SearchBST</span><span class="params">(BiTree T, <span class="type">int</span> key, BiTree f, BiTree *p)</span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(!T)&#123;</span><br><span class="line">    *p = f;</span><br><span class="line">    <span class="keyword">return</span> FALSE;</span><br><span class="line">  &#125;<span class="keyword">else</span> <span class="keyword">if</span>(key == T-&gt;data)&#123;</span><br><span class="line">    <span class="comment">//查找成功</span></span><br><span class="line">    *p = T;</span><br><span class="line">    <span class="keyword">return</span> TRUE;</span><br><span class="line">  &#125;<span class="keyword">else</span> <span class="keyword">if</span>(key &lt; T-&gt;data)&#123;</span><br><span class="line">    <span class="keyword">return</span> SearchBST(T-&gt;lchild, key, T, p);	<span class="comment">//在左子树继续查找</span></span><br><span class="line">  &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> SearchBST(T-&gt;rchild, key, T, p);	<span class="comment">//在右子树继续查找</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">当二叉排序树T中不存在关键字等于key的数据元素时</span></span><br><span class="line"><span class="comment">插入key并返回TRUE，否则返回FALSE</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="type">bool</span> <span class="title function_">InsertBST</span><span class="params">(BiTree *T, <span class="type">int</span> key)</span>&#123;</span><br><span class="line">  BiTree p, s;</span><br><span class="line">  <span class="keyword">if</span>(!SearchBST(*T, key, <span class="literal">NULL</span>, &amp;p))&#123;</span><br><span class="line">    <span class="comment">//查找不成功</span></span><br><span class="line">    s = (BiTree)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(BiTNode));</span><br><span class="line">    s-&gt;data = key;</span><br><span class="line">    s-&gt;lchild = s-&gt;rchild = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">if</span>(!p)&#123;</span><br><span class="line">      *T = s;	<span class="comment">//插入s为新的根节点</span></span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(key &lt; p-&gt;data)&#123;</span><br><span class="line">      p-&gt;lchild = s;	<span class="comment">//插入s为左孩子</span></span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">      p-&gt;rchild = s;	<span class="comment">//插入s为右孩子</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> TRUE;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">      <span class="keyword">return</span> FALSE;	<span class="comment">//树种已有关键字相同的结点，不再插入</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*********************构造二叉排序树************/</span></span><br><span class="line"><span class="type">int</span> i;</span><br><span class="line"><span class="type">int</span> a[<span class="number">10</span>] = &#123;<span class="number">62</span>, <span class="number">88</span>, <span class="number">58</span>, <span class="number">47</span>, <span class="number">35</span>, <span class="number">73</span>, <span class="number">51</span>, <span class="number">99</span>, <span class="number">37</span>, <span class="number">93</span>&#125;;</span><br><span class="line">BiTree T = <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i&lt;<span class="number">10</span>; i++)&#123;</span><br><span class="line">  InsertBST(&amp;T, a[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/************************************************/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">若二叉排序树T中存在关键字等于key的数据元素时，则删除该数据元素结点，</span></span><br><span class="line"><span class="comment">并返回TRUE;否则返回FALSE</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="type">bool</span> <span class="title function_">DeleteBST</span><span class="params">(BiTree *T, <span class="type">int</span> key)</span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(!T)&#123;</span><br><span class="line">    <span class="keyword">return</span> FALSE; </span><br><span class="line">  &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(key == T-&gt;data)&#123;</span><br><span class="line">      <span class="comment">//找到关键字等于key的数据元素</span></span><br><span class="line">      <span class="keyword">return</span> Delete(T);</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(key &lt; T -&gt; data)&#123;</span><br><span class="line">      <span class="keyword">return</span> DeleteBST(T -&gt; lchild, key);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">      <span class="keyword">return</span> DeleteBST(T -&gt; rchild, key);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="哈希表（散列表）"><a href="#哈希表（散列表）" class="headerlink" title="哈希表（散列表）"></a>哈希表（散列表）</h3><blockquote>
<p>​	散列表是根据关键字而直接进行访问的数据结构。也就是说，散列表建立了关键字和存储地址之间的一种直接映射关系。</p>
<p>​	这种对应关系称为散列函数，又称为哈希(Hash) 函数。按这个思想，采用散列技术将记录存储在一块连续的存储空间中，这块连续存储空间称为散列表或哈希表(Hash table)。那么关键字对应的记录存储位置我们称为散列地址。</p>
</blockquote>
<h4 id="散列函数的构造方法"><a href="#散列函数的构造方法" class="headerlink" title="散列函数的构造方法"></a>散列函数的构造方法</h4><ol>
<li>直接定址法</li>
</ol>
<p>​				直接取关键字的某个线性函数值为散列地址，散列函数为：<br>$$<br>H(key)&#x3D;key或H(key)&#x3D;a∗key+b<br>$$</p>
<ol start="2">
<li>数字分析法</li>
</ol>
<blockquote>
<p>分析数字关键字在各位上的变化情况，取比较随机的位作为散列地址。</p>
</blockquote>
<ol start="3">
<li>平方取中法</li>
</ol>
<blockquote>
<p>平方取中法比较适合于不知道关键字的分布，而位数又不是很大的情况。</p>
<p>字面意思：平方之后取中间的数字作为散列地址</p>
</blockquote>
<ol start="4">
<li>除留余数法</li>
</ol>
<p>​				散列函数：</p>
<blockquote>
<p>h（key） &#x3D; key % 17</p>
<blockquote>
<ul>
<li>p取素数（避免余数相关性）</li>
</ul>
</blockquote>
</blockquote>
<ol start="5">
<li>随机数法</li>
</ol>
<p>$$<br>H(key)&#x3D;random(key)<br>$$</p>
<h4 id="处理散列冲突"><a href="#处理散列冲突" class="headerlink" title="处理散列冲突"></a>处理散列冲突</h4><p>​				开放地址法（闭散列表）和链地址法（开散列表法）</p>
<ol>
<li>线性探测法</li>
</ol>
<blockquote>
<p>从冲突的的下一个位置起，依次寻找空的散列地址</p>
<blockquote>
<ul>
<li>存在堆积现象</li>
</ul>
</blockquote>
</blockquote>
<p>​	公式：<br>$$<br>H<br>i<br>​<br> (key)&#x3D;(f(key)+d<br>i<br>​<br> )%m (d<br>i<br>​<br> &#x3D;1,2,3,…,m−1)<br>$$<br>​	此时： di &#x3D; 0,1,2,3,…k</p>
<ol start="2">
<li>二次（平方）探测法</li>
</ol>
<p>​		公式<br>$$<br>H<br>i<br>​<br> (key)&#x3D;(f(key)+d<br>i<br>​<br> )%m (d<br>i<br>​<br> &#x3D;1,2,3,…,m−1)<br>$$<br>​	此时：di &#x3D; 0,1,-1,2^2,-2^2,….k^2,-k^2</p>
<ol start="3">
<li>拉链法</li>
</ol>
<blockquote>
<p>将所有关键字为同义词的记录存储在一个单链表中，我们称这种表为同义词子表，在散列表中只存储所有同义词子表的头指针。</p>
</blockquote>
<h2 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h2><h3 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a>插入排序</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">InsertSort</span><span class="params">(<span class="type">int</span>* arr, <span class="type">int</span> n)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n - <span class="number">1</span>; ++i)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="comment">//记录有序序列最后一个元素的下标</span></span><br><span class="line">    <span class="type">int</span> end = i;</span><br><span class="line">    <span class="comment">//待插入的元素</span></span><br><span class="line">    <span class="type">int</span> tem = arr[end + <span class="number">1</span>];</span><br><span class="line">    <span class="comment">//单趟排</span></span><br><span class="line">    <span class="keyword">while</span> (end &gt;= <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="comment">//比插入的数大就向后移</span></span><br><span class="line">      <span class="keyword">if</span> (tem &lt; arr[end])</span><br><span class="line">      &#123;</span><br><span class="line">        arr[end + <span class="number">1</span>] = arr[end];</span><br><span class="line">        end--;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">//比插入的数小，跳出循环</span></span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">      &#123;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//tem放到比插入的数小的数的后面</span></span><br><span class="line">    arr[end  + <span class="number">1</span>] = tem;</span><br><span class="line">    <span class="comment">//代码执行到此位置有两种情况:</span></span><br><span class="line">    <span class="comment">//1.待插入元素找到应插入位置（break跳出循环到此）</span></span><br><span class="line">    <span class="comment">//2.待插入元素比当前有序序列中的所有元素都小（while循环结束后到此）</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<blockquote>
<p>时间复杂度：	</p>
<ul>
<li>最坏（逆序）：O(n^2)</li>
<li>最好（升序）：O(n)</li>
</ul>
<p>空间复杂度：O(1)</p>
</blockquote>
<h3 id="希尔排序"><a href="#希尔排序" class="headerlink" title="希尔排序"></a>希尔排序</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//希尔排序</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">ShellSort</span><span class="params">(<span class="type">int</span>* arr, <span class="type">int</span> n)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> gap = n;</span><br><span class="line">  <span class="keyword">while</span> (gap&gt;<span class="number">1</span>)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="comment">//每次对gap折半操作</span></span><br><span class="line">    gap = gap / <span class="number">2</span>;</span><br><span class="line">    <span class="comment">//单趟排序</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n - gap; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="type">int</span> end = i;</span><br><span class="line">      <span class="type">int</span> tem = arr[end + gap];</span><br><span class="line">      <span class="keyword">while</span> (end &gt;= <span class="number">0</span>)</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="keyword">if</span> (tem &lt; arr[end])</span><br><span class="line">        &#123;</span><br><span class="line">          arr[end + gap] = arr[end];</span><br><span class="line">          end -= gap;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      arr[end + gap] = tem;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<blockquote>
<p>时间复杂度(平均)：O(N^1.3)<br>空间复杂度：O(1)</p>
</blockquote>
<h3 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//选择排序</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">swap</span><span class="params">(<span class="type">int</span>* a, <span class="type">int</span>* b)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> tem = *a;</span><br><span class="line">  *a = *b;</span><br><span class="line">  *b = tem;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">SelectSort</span><span class="params">(<span class="type">int</span>* arr, <span class="type">int</span> n)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="comment">//保存参与单趟排序的第一个数和最后一个数的下标</span></span><br><span class="line">  <span class="type">int</span> begin = <span class="number">0</span>, end = n - <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">while</span> (begin &lt; end)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="comment">//保存最大值的下标</span></span><br><span class="line">    <span class="type">int</span> maxi = begin;</span><br><span class="line">    <span class="comment">//保存最小值的下标</span></span><br><span class="line">    <span class="type">int</span> mini = begin;</span><br><span class="line">    <span class="comment">//找出最大值和最小值的下标</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = begin; i &lt;= end; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> (arr[i] &lt; arr[mini])</span><br><span class="line">      &#123;</span><br><span class="line">        mini = i;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (arr[i] &gt; arr[maxi])</span><br><span class="line">      &#123;</span><br><span class="line">        maxi = i;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//最小值放在序列开头</span></span><br><span class="line">    swap(&amp;arr[mini], &amp;arr[begin]);</span><br><span class="line">    <span class="comment">//防止最大的数在begin位置被换走</span></span><br><span class="line">    <span class="keyword">if</span> (begin == maxi)</span><br><span class="line">    &#123;</span><br><span class="line">      maxi = mini;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//最大值放在序列结尾</span></span><br><span class="line">    swap(&amp;arr[maxi], &amp;arr[end]);</span><br><span class="line">    ++begin;</span><br><span class="line">    --end;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">c</span><br></pre></td></tr></table></figure>

<blockquote>
<p>时间复杂度：</p>
<ul>
<li>最坏情况：O(N^2)</li>
<li>最好情况：O(N^2)</li>
</ul>
<p>空间复杂度：O(1)</p>
</blockquote>
<h3 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//冒泡排序</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">BubbleSort</span><span class="params">(<span class="type">int</span>* arr, <span class="type">int</span> n)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> end = n;</span><br><span class="line">  <span class="keyword">while</span> (end)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="type">int</span> flag = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; end; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> (arr[i - <span class="number">1</span>] &gt; arr[i])</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="type">int</span> tem = arr[i];</span><br><span class="line">        arr[i] = arr[i - <span class="number">1</span>];</span><br><span class="line">        arr[i - <span class="number">1</span>] = tem;</span><br><span class="line">        flag = <span class="number">1</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (flag == <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    --end;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<blockquote>
<p>时间复杂度：</p>
<ul>
<li>最坏情况：O(N^2)</li>
<li>最好情况：O(N)</li>
</ul>
<p>空间复杂度：O(1)</p>
</blockquote>
<h3 id="堆排序"><a href="#堆排序" class="headerlink" title="堆排序"></a>堆排序</h3><blockquote>
<p>堆的分类：</p>
<ul>
<li>大根堆：每个节点的值大于或等于左右孩子节点的值</li>
<li>小根堆：每个节点的值小于或等于左右孩子节点的值</li>
</ul>
</blockquote>
<p>步骤：</p>
<ol>
<li>构造大根堆</li>
<li>顶端与末尾值交换</li>
<li>将剩下的n-1个数造次构造为大根堆，重复上述操作。</li>
</ol>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//目标为升序</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">HeapAdjust</span><span class="params">(<span class="type">int</span>* arr, <span class="type">int</span> start, <span class="type">int</span> end)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> tmp = arr[start];</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">2</span> * start + <span class="number">1</span>; i &lt;= end; i = i * <span class="number">2</span> + <span class="number">1</span>)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> (i &lt; end&amp;&amp; arr[i] &lt; arr[i + <span class="number">1</span>])<span class="comment">//有右孩子并且左孩子小于右孩子</span></span><br><span class="line">    &#123;</span><br><span class="line">      i++;</span><br><span class="line">    &#125;<span class="comment">//i一定是左右孩子的最大值</span></span><br><span class="line">    <span class="keyword">if</span> (arr[i] &gt; tmp)</span><br><span class="line">    &#123;</span><br><span class="line">      arr[start] = arr[i];</span><br><span class="line">      start = i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  arr[start] = tmp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">HeapSort</span><span class="params">(<span class="type">int</span>* arr, <span class="type">int</span> len)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="comment">//第一次建立大根堆，从后往前依次调整</span></span><br><span class="line">  <span class="keyword">for</span>(<span class="type">int</span> i=(len<span class="number">-1</span><span class="number">-1</span>)/<span class="number">2</span>;i&gt;=<span class="number">0</span>;i--)</span><br><span class="line">  &#123;</span><br><span class="line">    HeapAdjust(arr, i, len - <span class="number">1</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//每次将根和待排序的最后一次交换，然后在调整</span></span><br><span class="line">  <span class="type">int</span> tmp;</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; len - <span class="number">1</span>; i++)</span><br><span class="line">  &#123;</span><br><span class="line">    tmp = arr[<span class="number">0</span>];</span><br><span class="line">    arr[<span class="number">0</span>] = arr[len - <span class="number">1</span>-i];</span><br><span class="line">    arr[len - <span class="number">1</span> - i] = tmp;</span><br><span class="line">    HeapAdjust(arr, <span class="number">0</span>, len - <span class="number">1</span>-i- <span class="number">1</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> arr[] = &#123; <span class="number">9</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">3</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">96</span>,<span class="number">66</span> &#125;;</span><br><span class="line">  HeapSort(arr, <span class="keyword">sizeof</span>(arr) / <span class="keyword">sizeof</span>(arr[<span class="number">0</span>]));</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;排序后为:&quot;</span>);</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="keyword">sizeof</span>(arr) / <span class="keyword">sizeof</span>(arr[<span class="number">0</span>]); i++)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, arr[i]);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<blockquote>
<p>时间复杂度：时间复杂度为O(nlogn)</p>
<p>空间复杂度：O(1)</p>
</blockquote>
<h3 id="快速排序（挖坑法）"><a href="#快速排序（挖坑法）" class="headerlink" title="快速排序（挖坑法）"></a>快速排序（挖坑法）</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">PartSort</span><span class="params">(<span class="type">int</span>* arr, <span class="type">int</span> left, <span class="type">int</span> right)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> key = arr[left];</span><br><span class="line">    <span class="type">int</span> hole = left;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span> (left &lt; right)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">while</span> (left &lt; right &amp;&amp; arr[right] &gt;= key)</span><br><span class="line">        &#123;</span><br><span class="line">            right--;</span><br><span class="line">        &#125;</span><br><span class="line">        arr[hole] = arr[right];</span><br><span class="line">        hole = right;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span> (left &lt; right &amp;&amp; arr[left] &lt;= key)</span><br><span class="line">        &#123;</span><br><span class="line">            left++;</span><br><span class="line">        &#125;</span><br><span class="line">        arr[hole] = arr[left];</span><br><span class="line">        hole = left;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    arr[hole] = key;</span><br><span class="line">    <span class="keyword">return</span> hole;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="快速排序（库函数直接调用法）"><a href="#快速排序（库函数直接调用法）" class="headerlink" title="快速排序（库函数直接调用法）"></a>快速排序（库函数直接调用法）</h3><p>函数原型</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">qsort</span><span class="params">(<span class="type">void</span>* base<span class="comment">/*数组名字*/</span>,<span class="type">size_t</span> num<span class="comment">/*元素个数*/</span>,<span class="type">size_t</span> width<span class="comment">/*单个元素所占字节*/</span>,<span class="type">int</span>(__cdecl*compare)(<span class="type">const</span> <span class="type">void</span>*,<span class="type">const</span> <span class="type">void</span>*)<span class="comment">/*比较函数*/</span>)</span>;</span><br></pre></td></tr></table></figure>

<p>案例：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">cmp</span><span class="params">(<span class="type">const</span> <span class="type">void</span> *a,<span class="type">const</span> <span class="type">void</span> *b)</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> *(<span class="type">int</span>*)a-*(<span class="type">int</span>*)b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">  <span class="type">int</span> n,i;</span><br><span class="line">  <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line">  <span class="type">int</span> time[n];</span><br><span class="line">  <span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;n; i++) &#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;time[i]);</span><br><span class="line">  &#125;</span><br><span class="line">  qsort(time,n,<span class="keyword">sizeof</span>(<span class="type">int</span>),cmp);</span><br><span class="line">  <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,time[i]);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="归并排序"><a href="#归并排序" class="headerlink" title="归并排序"></a>归并排序</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">Merge</span><span class="params">(<span class="type">int</span> sourceArr[],<span class="type">int</span> tempArr[], <span class="type">int</span> startIndex, <span class="type">int</span> midIndex, <span class="type">int</span> endIndex)</span>&#123;</span><br><span class="line">    <span class="type">int</span> i = startIndex, j=midIndex+<span class="number">1</span>, k = startIndex;</span><br><span class="line">    <span class="keyword">while</span>(i!=midIndex+<span class="number">1</span> &amp;&amp; j!=endIndex+<span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span>(sourceArr[i] &gt; sourceArr[j])</span><br><span class="line">            tempArr[k++] = sourceArr[j++];</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            tempArr[k++] = sourceArr[i++];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(i != midIndex+<span class="number">1</span>)</span><br><span class="line">        tempArr[k++] = sourceArr[i++];</span><br><span class="line">    <span class="keyword">while</span>(j != endIndex+<span class="number">1</span>)</span><br><span class="line">        tempArr[k++] = sourceArr[j++];</span><br><span class="line">    <span class="keyword">for</span>(i=startIndex; i&lt;=endIndex; i++)</span><br><span class="line">        sourceArr[i] = tempArr[i];</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">//内部使用递归</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">MergeSort</span><span class="params">(<span class="type">int</span> sourceArr[], <span class="type">int</span> tempArr[], <span class="type">int</span> startIndex, <span class="type">int</span> endIndex)</span> &#123;</span><br><span class="line">    <span class="type">int</span> midIndex;</span><br><span class="line">    <span class="keyword">if</span>(startIndex &lt; endIndex) &#123;</span><br><span class="line">        midIndex = startIndex + (endIndex-startIndex) / <span class="number">2</span>;<span class="comment">//避免溢出int</span></span><br><span class="line">        MergeSort(sourceArr, tempArr, startIndex, midIndex);</span><br><span class="line">        MergeSort(sourceArr, tempArr, midIndex+<span class="number">1</span>, endIndex);</span><br><span class="line">        Merge(sourceArr, tempArr, startIndex, midIndex, endIndex);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> * argv[])</span> &#123;</span><br><span class="line">    <span class="type">int</span> a[<span class="number">8</span>] = &#123;<span class="number">50</span>, <span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>, <span class="number">70</span>, <span class="number">40</span>, <span class="number">80</span>, <span class="number">60</span>&#125;;</span><br><span class="line">    <span class="type">int</span> i, b[<span class="number">8</span>];</span><br><span class="line">    MergeSort(a, b, <span class="number">0</span>, <span class="number">7</span>);</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;<span class="number">8</span>; i++)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, a[i]);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>







<blockquote>
<p> 时间复杂度：O(nlogn)。</p>
<p> 空间复杂度：O(N)，归并排序需要一个与原数组相同长度的数组做辅助来排序。</p>
</blockquote>
<h3 id="基数排序"><a href="#基数排序" class="headerlink" title="基数排序"></a>基数排序</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="type">void</span> <span class="title function_">testBS</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    inta[] = &#123;<span class="number">2</span>, <span class="number">343</span>, <span class="number">342</span>, <span class="number">1</span>, <span class="number">123</span>, <span class="number">43</span>, <span class="number">4343</span>, <span class="number">433</span>, <span class="number">687</span>, <span class="number">654</span>, <span class="number">3</span>&#125;;</span><br><span class="line">    <span class="type">int</span> *a_p = a;</span><br><span class="line">    <span class="comment">//计算数组长度</span></span><br><span class="line">    intsize = <span class="keyword">sizeof</span>(a) / <span class="keyword">sizeof</span>(<span class="type">int</span>);</span><br><span class="line">    <span class="comment">//基数排序</span></span><br><span class="line">    bucketSort3(a_p, size);</span><br><span class="line">    <span class="comment">//打印排序后结果</span></span><br><span class="line">    inti;</span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; size; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, a[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    intt;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, t);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//基数排序</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">bucketSort3</span><span class="params">(<span class="type">int</span> *p, intn)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//获取数组中的最大数</span></span><br><span class="line">    intmaxNum = findMaxNum(p, n);</span><br><span class="line">    <span class="comment">//获取最大数的位数，次数也是再分配的次数。</span></span><br><span class="line">    intloopTimes = getLoopTimes(maxNum);</span><br><span class="line">    inti;</span><br><span class="line">    <span class="comment">//对每一位进行桶分配</span></span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">1</span>; i &lt;= loopTimes; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        sort2(p, n, i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//获取数字的位数</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">getLoopTimes</span><span class="params">(intnum)</span></span><br><span class="line">&#123;</span><br><span class="line">    intcount = <span class="number">1</span>;</span><br><span class="line">    inttemp = num / <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">while</span>(temp != <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        count++;</span><br><span class="line">        temp = temp / <span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    returncount;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//查询数组中的最大数</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">findMaxNum</span><span class="params">(<span class="type">int</span> *p, intn)</span></span><br><span class="line">&#123;</span><br><span class="line">    inti;</span><br><span class="line">    intmax = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(*(p + i) &gt; max)</span><br><span class="line">        &#123;</span><br><span class="line">            max = *(p + i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    returnmax;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//将数字分配到各自的桶中，然后按照桶的顺序输出排序结果</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">sort2</span><span class="params">(<span class="type">int</span> *p, intn, intloop)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//建立一组桶此处的20是预设的根据实际数情况修改</span></span><br><span class="line">    intbuckets[<span class="number">10</span>][<span class="number">20</span>] = &#123;&#125;;</span><br><span class="line">    <span class="comment">//求桶的index的除数</span></span><br><span class="line">    <span class="comment">//如798个位桶index=(798/1)%10=8</span></span><br><span class="line">    <span class="comment">//十位桶index=(798/10)%10=9</span></span><br><span class="line">    <span class="comment">//百位桶index=(798/100)%10=7</span></span><br><span class="line">    <span class="comment">//tempNum为上式中的1、10、100</span></span><br><span class="line">    inttempNum = (<span class="type">int</span>)<span class="built_in">pow</span>(<span class="number">10</span>, loop - <span class="number">1</span>);</span><br><span class="line">    inti, j;</span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        introw_index = (*(p + i) / tempNum) % <span class="number">10</span>;</span><br><span class="line">        <span class="keyword">for</span>(j = <span class="number">0</span>; j &lt; <span class="number">20</span>; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(buckets[row_index][j] == <span class="literal">NULL</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                buckets[row_index][j] = *(p + i);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//将桶中的数，倒回到原有数组中</span></span><br><span class="line">    intk = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(j = <span class="number">0</span>; j &lt; <span class="number">20</span>; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(buckets[i][j] != <span class="literal">NULL</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                *(p + k) = buckets[i][j];</span><br><span class="line">                buckets[i][j] = <span class="literal">NULL</span>;</span><br><span class="line">                k++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="/images/dataStructureSort.webp" alt=" comparison "></p>
<h2 id="应试"><a href="#应试" class="headerlink" title="应试"></a>应试</h2><h3 id="概述作业"><a href="#概述作业" class="headerlink" title="概述作业"></a>概述作业</h3><blockquote>
<p>数据在计算机内存中的表示是指（） 。数据的存储结构</p>
<p>数据结构形式地定义为（K，R），其中K是（）的有限集合，R是K上的关系上的有限集合。数据元素</p>
<p>数据结构形式地定义为（D,S），其中D是数据元素的有限集合，S是D上的（）的有限集合。关系</p>
<p>一个广义表的表尾总是一个（ ）。广义表</p>
</blockquote>
<h3 id="线性表"><a href="#线性表" class="headerlink" title="线性表"></a>线性表</h3><blockquote>
<p>对于线性表的各种操作，考虑：</p>
<ol>
<li>length与MaxSize的关系</li>
<li>length是否为零</li>
<li>输入的参数是否符合规则（大于或小于零，是否为空）</li>
</ol>
</blockquote>
<h3 id="栈"><a href="#栈" class="headerlink" title="栈"></a>栈</h3><blockquote>
<p>对于栈的各种操作，考虑：</p>
<ol>
<li>栈空或栈满的情况</li>
<li>输入的参数是否符合规则（大于或小于零，是否为空）</li>
</ol>
</blockquote>
<ul>
<li>后缀表达式</li>
</ul>
<blockquote>
<p>从左往右开始扫描中缀表达式。<br>        遇到数字直接加入后缀表达式<br>        遇到运算符时：<br>            a.若为’(‘则入栈<br>            b.若为’)’，则依次把栈中的运算符加入后缀表达式，直到出现’(’，从栈中删除’)’。<br>            c.若为除括号外的其他运算符，当其他优先级高于除’)’外的栈顶运算符时，直接入栈。<br>        否则从栈顶开始，依次弹出比当前处理的运算符优先级高和优先级相等的运算符，<br>        直到一个比它优先级低的或遇到了一个左括号为止。</p>
</blockquote>
<h3 id="队列"><a href="#队列" class="headerlink" title="队列"></a>队列</h3><blockquote>
<p>对于队列的各种操作，考虑：</p>
<ol>
<li>队列空和满的情况</li>
<li>输入的参数是否符合规则（大于或小于零，是否为空）</li>
</ol>
</blockquote>
<h3 id="图-1"><a href="#图-1" class="headerlink" title="图"></a>图</h3><blockquote>
<p>用邻接矩阵表示有N个结点E条边的图时，深度优先遍历算法的时间复杂度是：C.O(N2)</p>
</blockquote>
<h3 id="栈与队列"><a href="#栈与队列" class="headerlink" title="栈与队列"></a>栈与队列</h3><blockquote>
<p> 下列关于栈的叙述中，错误的是：</p>
<ol>
<li><strong>采用非递归方式重写递归程序时必须使用栈</strong></li>
<li>函数调用时，系统要用栈保存必要的信息</li>
<li><strong>只要确定了入栈次序，即可确定出栈次序</strong></li>
<li><strong>栈是一种受限的线性表，允许在其两端进行操作</strong></li>
</ol>
</blockquote>
<blockquote>
<p> 最不适合用作栈的链表是（）。</p>
<p>A.只有表头指针没有表尾指针的循环双链表</p>
<p>B.只有表尾指针没有表头指针的循环双链表</p>
<p>C.只有表尾指针没有表头指针的循环单链表</p>
<p>D.<strong>只有表头指针没有表尾指针的循环单链表</strong></p>
</blockquote>
<blockquote>
<p> 下列关于栈的叙述中，错误的是：</p>
<ol>
<li>采用非递归方式重写递归程序时必须使用栈</li>
<li>函数调用时，系统要用栈保存必要的信息</li>
<li>只要确定了入栈次序，即可确定出栈次序</li>
<li>栈是一种受限的线性表，允许在其两端进行操作</li>
</ol>
<p> A.仅 1</p>
<p> B.仅 1、2、3</p>
<p> **C.**仅 1、3、4</p>
<p> D.仅 2、3、4</p>
<p> 循环队列的引入是为了（ ）。克服假溢出</p>
</blockquote>
<h3 id="树-1"><a href="#树-1" class="headerlink" title="树"></a>树</h3><blockquote>
<p>树的后序遍历与其对应的二叉树的哪种遍历相同？中序</p>
<p>森林的中序遍历与对应二叉树的什么遍历序列相同？中序</p>
</blockquote>
<h3 id="排序-1"><a href="#排序-1" class="headerlink" title="排序"></a>排序</h3><blockquote>
<p>有组记录的排序码为{ 46，79，56，38，40，84 }，则利用堆排序的方法建立的初始堆为：</p>
<p>84，79，56，38，40，46</p>
</blockquote>
<blockquote>
<p>下面四种排序算法中，稳定的算法是：归并排序</p>
</blockquote>
<blockquote>
<p>快速排序下列排序算法中，时间复杂度不受数据初始状态影响，恒为O(NlogN)的是：</p>
<p>堆排序</p>
</blockquote>
<blockquote>
<p>对N个记录进行快速排序，在最坏的情况下，其时间复杂度是：</p>
<p>O(N2)</p>
</blockquote>
<blockquote>
<p>下列关键码序列中，属于堆的是（ 　）。</p>
<p>（15，30，22，93，52，71）</p>
</blockquote>
]]></content>
      <tags>
        <tag>笔记</tag>
        <tag>Data-Structure-and-Algorithm</tag>
      </tags>
  </entry>
  <entry>
    <title>GIT basic</title>
    <url>/2023/11/26/GIT-basic/</url>
    <content><![CDATA[<h1 id="Git-以及github，gitee的使用"><a href="#Git-以及github，gitee的使用" class="headerlink" title="Git 以及github，gitee的使用"></a>Git 以及github，gitee的使用</h1><blockquote>
<p>git简介：</p>
<p>Git (&#x2F;ɡɪt&#x2F;) is a distributed version control system that tracks changes in any set of computer files, usually used for coordinating work among programmers who are collaboratively developing source code during software development. Its goals include speed, data integrity, and support for distributed, non-linear workflows (thousands of parallel branches running on different computers).</p>
</blockquote>
<ul>
<li><strong>What is Git?</strong><br>Git is a popular version control system. It was created by Linus Torvalds in 2005, and has been maintained by Junio Hamano since then.</li>
</ul>
<p>It is used for:</p>
<p>Tracking code changes<br>Tracking who made changes<br>Coding collaboration</p>
<ul>
<li><strong>What does Git do?</strong></li>
</ul>
<p>Manage projects with <strong>Repositories</strong><br><strong>Clone</strong> a project to work on a local copy<br><strong>Control and track</strong> changes with <strong>Staging and Committing</strong><br><strong>Branch and Merge</strong> to allow for work on different parts and versions of a project<br><strong>Pull</strong> the latest version of the project to a local copy<br><strong>Push</strong> local updates to the main project</p>
<ul>
<li><strong>Working with Git</strong></li>
</ul>
<p>Initialize Git on a folder, making it a Repository<br>Git now creates a hidden folder to keep track of changes in that folder<br>When a file is changed, added or deleted, it is considered modified<br>You select the modified files you want to Stage<br>The Staged files are Committed, which prompts Git to store a permanent snapshot of the files<br>Git allows you to see the full history of every commit.<br>You can revert back to any previous commit.<br>Git does not store a separate copy of every file in every commit, but keeps track of changes made in each commit!<br>Change Platform:</p>
<p>Shift focus to GitHubGitHub<br>Shift focus to BitbucketBitbucket<br>Shift focus to GitLabGitLab</p>
<ul>
<li><strong>Why Git?</strong></li>
</ul>
<p>Over 70% of developers use Git!<br>Developers can work together from anywhere in the world.<br>Developers can see the full history of the project.<br>Developers can revert to earlier versions of a project.</p>
<ul>
<li><strong>What is GitHub?</strong></li>
</ul>
<p>Git is not the same as GitHub.<br>GitHub makes tools that use Git.<br>GitHub is the largest host of source code in the world, and has been owned by Microsoft since 2018.<br>In this tutorial, we will focus on using Git with GitHub.</p>
<p>git 有图形化界面（gui）和命令行（bash），这里仅使用git命令行，即git（bash）。</p>
<ul>
<li><strong>初始化</strong></li>
</ul>
<ol>
<li>check git version and info</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git —version</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ol start="2">
<li>configure git</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git config --global user.name <span class="string">&quot;regen&quot;</span>    <span class="comment"># global means all the repos are in charge</span></span><br><span class="line">git config --global user.email <span class="string">&quot;regenissb@gmail.com&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># if you just want to use “regen” for just once , you can remove “—global”</span></span><br><span class="line"></span><br><span class="line">git config  user.name <span class="string">&quot;regen&quot;</span>    </span><br><span class="line">git config  user.email <span class="string">&quot;regenissb@gmail.com&quot;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ol start="3">
<li>initialize you repo</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#use mkdir and cd to create you working file . Then</span></span><br><span class="line"></span><br><span class="line">git init  </span><br><span class="line"></span><br><span class="line"><span class="comment"># This file is initialized as a git repository from now on . You can make files.</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">touch</span> hello.c</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>** file operation  **</li>
</ul>
<ol>
<li>check file status<br>Files in the repo has 2 status:<ul>
<li>Tracked - files that Git knows about and are added to the repository</li>
<li>Untracked - files that are in your working directory, but not added to the repository</li>
</ul>
</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git status</span><br></pre></td></tr></table></figure>

<p>​		or you can use </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git status --short</span><br><span class="line"><span class="comment">#  Note: Short status flags are:</span></span><br><span class="line"><span class="comment">#    ?? - Untracked files</span></span><br><span class="line"><span class="comment">#    A - Files added to stage</span></span><br><span class="line"><span class="comment">#    M - Modified files</span></span><br><span class="line"><span class="comment">#    D - Deleted files</span></span><br></pre></td></tr></table></figure>







<ol start="2">
<li>add to stage environment</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># once you finish a part or a bug ,you need to add it to  stage environment. So that you files in the stage environment are ready to commit .</span></span><br><span class="line"></span><br><span class="line">git add hello.c</span><br><span class="line"></span><br><span class="line"><span class="comment"># or you can use </span></span><br><span class="line">git add —all</span><br><span class="line">git add -A</span><br><span class="line"><span class="comment"># this two commends stages all the changes .  </span></span><br></pre></td></tr></table></figure>

<ol start="3">
<li>move from  stage to <strong>commit</strong> for our repo.</li>
</ol>
<ul>
<li>commit all the changes</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git commit -m <span class="string">&quot;First release of Hello World!&quot;</span></span><br><span class="line"><span class="comment"># The commit command performs a commit, and the -m &quot;message&quot; adds a message.</span></span><br><span class="line"><span class="comment"># When we commit, we should always include a message.</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>commit all the changes without add them to stage</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git commit -a -m <span class="string">&quot;Updated index.html with a new line&quot;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>view the history of commit log</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">log</span></span><br></pre></td></tr></table></figure>

<ul>
<li><strong>GIT branch</strong></li>
</ul>
<p>​	Introduction :</p>
<blockquote>
<p>In Git, a <code>branch</code> is a new&#x2F;separate version of the main repository.</p>
<p>Branches allow you to work on different parts of a project without impacting the main branch.</p>
<p>When the work is complete, a branch can be merged with the main project.</p>
<p>You can even switch between branches and work on different projects without them interfering with each other.</p>
<p>Branching in Git is very lightweight and fast!</p>
</blockquote>
<ol>
<li>create new git branch</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git branch newBranch</span><br><span class="line">  <span class="comment"># add a new branch</span></span><br></pre></td></tr></table></figure>

<ol start="2">
<li>check out the branches</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git branch</span><br><span class="line"></span><br><span class="line">    newBtanch</span><br><span class="line">  * master</span><br><span class="line"><span class="comment"># The &#x27; * &#x27;means that you are working on master branch.</span></span><br></pre></td></tr></table></figure>

<ol start="3">
<li>move branch</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git checkout newbranch     <span class="comment"># switch to new branch &#x27;newBranch&#x27;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ol start="4">
<li>check status of this branch , add to stage and commit . (same code)</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git status</span><br><span class="line">git add --all</span><br><span class="line">git commit -m <span class="string">&quot;new changes in branch newBranch&quot;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>merge branch</li>
</ul>
<ol>
<li>In order to merge two branches, we need to change to the master branch:</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git checkout master</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>merge</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git merge newBranch</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>delete branches</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git branch -d newBranch</span><br></pre></td></tr></table></figure>

<ul>
<li>merge conflict</li>
</ul>
<p><strong>其他操作</strong></p>
<ul>
<li>GIT Associating a local repository to a remote repository</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git remote add origin git@github.com:beiszhihao/test.git</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">git push -u origin master</span><br></pre></td></tr></table></figure>
<p><strong>Situations</strong></p>
]]></content>
      <tags>
        <tag>笔记</tag>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux Projects</title>
    <url>/2023/11/28/Linux-Projects/</url>
    <content><![CDATA[<p>​	以下项目都是我在已经完成之后补录的笔记，包括但不限于遇到的报错，问题。便于以后复现。实际上不能说是项目，仅仅是复现并且享受大佬的成果而已。开源不易，感谢大佬们开源！</p>
<h1 id="ZeroTier-内网穿透"><a href="#ZeroTier-内网穿透" class="headerlink" title="ZeroTier 内网穿透"></a>ZeroTier 内网穿透</h1><h2 id="1-简介"><a href="#1-简介" class="headerlink" title="1.简介"></a>1.简介</h2><p>​	官网：<a href="https://www.zerotier.com/">ZeroTier</a></p>
<blockquote>
<p><strong>ZeroTier Client :</strong></p>
<p>The ZeroTier client is used to connect to virtual networks previously created in the ZeroTier Central web-based <a href="https://en.wikipedia.org/wiki/User_interface">UI</a>. Endpoint connections are peer-to-peer and <a href="https://en.wikipedia.org/wiki/End-to-end_encryption">end-to-end encrypted</a>. <a href="https://en.wikipedia.org/wiki/STUN">STUN</a> and <a href="https://en.wikipedia.org/wiki/Hole_punching_(networking)">hole punching</a> are used to establish direct connections between peers behind <a href="https://en.wikipedia.org/wiki/Network_Address_Translation">NAT</a>. Direct connection route discovery is made with the help of a global network of <em>root servers</em> via a mechanism similar to <a href="https://en.wikipedia.org/wiki/Interactive_Connectivity_Establishment">ICE</a> in <a href="https://en.wikipedia.org/wiki/WebRTC">WebRTC</a>.</p>
</blockquote>
<h2 id="2-安装"><a href="#2-安装" class="headerlink" title="2.安装"></a>2.安装</h2><p>​		实际上十分简单，对于Windows，iPad，Android，macOS都有相应软件。</p>
<p><img src="/images/ZeroTIerDownload.png"></p>
<h3 id="linux"><a href="#linux" class="headerlink" title="linux"></a>linux</h3><ol>
<li>安装</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl -s https://install.zerotier.com | sudo bash</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>操作：加入，离开，查看已经连接的网络</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">zerotier-cli <span class="built_in">join</span> &lt;NETWORK ID&gt;</span><br><span class="line"><span class="comment">#加入</span></span><br><span class="line">zerotier-cli leave &lt;NETWORK ID&gt;</span><br><span class="line"><span class="comment">#离开</span></span><br><span class="line">zerotier-cli listnetworks</span><br><span class="line"><span class="comment">#连接列表</span></span><br></pre></td></tr></table></figure>

<h2 id="3-管理"><a href="#3-管理" class="headerlink" title="3.管理"></a>3.管理</h2><p>​	直接登录官网即可进行对已组网络的管理，例如授权用户，修改网络内部IP地址以及备注信息等等</p>
<p><img src="/images/ZeroTierAdmin.jpg" alt="Admin Page"></p>
<h2 id="4-Last"><a href="#4-Last" class="headerlink" title="4.Last"></a>4.Last</h2><p>​	世上还是好人多啊，ZeroTier的出现真的让内网穿透方便了很多，免费用户的配置也很不错！</p>
<h1 id="FTP-服务器搭建"><a href="#FTP-服务器搭建" class="headerlink" title="FTP 服务器搭建"></a>FTP 服务器搭建</h1><h1 id="MQTT服务器搭建（mosquitto）"><a href="#MQTT服务器搭建（mosquitto）" class="headerlink" title="MQTT服务器搭建（mosquitto）"></a>MQTT服务器搭建（mosquitto）</h1><h2 id="0-简介"><a href="#0-简介" class="headerlink" title="0.简介"></a>0.简介</h2><ol>
<li>简介</li>
</ol>
<blockquote>
<p>MQTT也称为”消息代理”（Broker）。</p>
<p>MQTT是一个基于客户端-服务器的消息发布&#x2F;订阅传输协议。MQTT协议是轻量、简单、开放和易于实现的，这些特点使它适用范围非常广泛。在很多情况下，包括受限的环境中，如：机器与机器（M2M）通信和物联网（IoT）。其在，通过卫星链路通信传感器、偶尔拨号的医疗设备、智能家居、及一些小型化设备中已广泛使用。</p>
</blockquote>
<ol start="2">
<li>原理</li>
</ol>
<blockquote>
<p>MQTT协议原理<br>MQTT协议实现方式<br>实现MQTT协议需要客户端和服务器端通讯完成，在通讯过程中，MQTT协议中有三种身份：发布者（Publish）、代理（Broker）（服务器）、订阅者（Subscribe）。其中，消息的发布者和订阅者都是客户端，消息代理是服务器，消息发布者可以同时是订阅者。</p>
<p>MQTT传输的消息分为：主题（Topic）和负载（payload）两部分：</p>
<p>（1）Topic，可以理解为消息的类型，订阅者订阅（Subscribe）后，就会收到该主题的消息内容（payload）</p>
<p>（2）payload，可以理解为消息的内容，是指订阅者具体要使用的内容。</p>
</blockquote>
<h2 id="1-mosquitto-服务端"><a href="#1-mosquitto-服务端" class="headerlink" title="1. mosquitto 服务端"></a>1. mosquitto 服务端</h2><ul>
<li>安装</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">apt install mosquitto</span><br></pre></td></tr></table></figure>

<ul>
<li>配置</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /etc/mosquitto</span><br></pre></td></tr></table></figure>

<ul>
<li>修改配置文件</li>
</ul>
<p>​				在 <strong>&#x2F;etc&#x2F;mosquitto&#x2F;conf.d</strong>目录下有一个叫 README 的文件，上面写了信息：</p>
<blockquote>
<h1 id="Any-files-placed-in-this-directory-that-have-a-conf-ending-will-be-loaded-as-config-files-by-the-broker-Use-this-to-make-your-local-config"><a href="#Any-files-placed-in-this-directory-that-have-a-conf-ending-will-be-loaded-as-config-files-by-the-broker-Use-this-to-make-your-local-config" class="headerlink" title="Any files placed in this directory that have a .conf ending will be loaded as config files by the broker. Use this to make your local config."></a>Any files placed in this directory that have a .conf ending will be loaded as config files by the broker. Use this to make your local config.</h1></blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /etc/mosquitto/conf.d</span><br><span class="line"></span><br><span class="line">vim config.conf</span><br><span class="line"><span class="comment"># 添加下面配置</span></span><br><span class="line"><span class="comment"># 不允许匿名访问</span></span><br><span class="line">allow_anonymous <span class="literal">false</span></span><br><span class="line"><span class="comment"># 配置端口</span></span><br><span class="line">listener 1883</span><br><span class="line"><span class="comment"># 设置密码文件保存目录</span></span><br><span class="line">password_file /etc/mosquitto/pwfile.example</span><br></pre></td></tr></table></figure>

<ul>
<li>运行配置文件</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mosquitto -c /etc/mosquitto/conf.d/config.conf -v</span><br></pre></td></tr></table></figure>

<ul>
<li>添加用户</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mosquitto_passwd -c /etc/mosquitto/pwfile.example username</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>关闭防火墙！！！</strong></li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ufw <span class="built_in">disable</span></span><br><span class="line"><span class="comment"># 或者添加规则</span></span><br><span class="line">ufw allow 1883</span><br></pre></td></tr></table></figure>

<h2 id="2-mosquitto-clients-客户端"><a href="#2-mosquitto-clients-客户端" class="headerlink" title="2. mosquitto-clients 客户端"></a>2. mosquitto-clients 客户端</h2><ul>
<li>用户登录订阅，发布</li>
</ul>
<p>​	其实一般都是接近被控设备的系统，比如各种Mcu（esp32，esp8266）等等。这部分将在寒假进行补充（在另外一篇博客）。<a href="https://regenm.gitee.io/">esp8266或者esp32等</a></p>
<p>对于Linux客户，可以是模拟器（ ISH ，Termux）</p>
<ul>
<li>安装</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">apt install mosquitto-clients</span><br></pre></td></tr></table></figure>

<ul>
<li>订阅</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mosquitto_sub -h <span class="string">&quot;IP address&quot;</span> -p 1883 -u username -P regen -t <span class="string">&quot;test&quot;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>发布</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mosquitto_pub -h <span class="string">&quot;IP address&quot;</span> -p 1883 -u username -P regen -t <span class="string">&quot;test&quot;</span> -m <span class="string">&quot;hello mqtt! hello ! mosquitto!&quot;</span></span><br></pre></td></tr></table></figure>

<h2 id="3-mosquitto使用"><a href="#3-mosquitto使用" class="headerlink" title="3. mosquitto使用"></a>3. mosquitto使用</h2><ul>
<li><strong>脚本制作</strong></li>
</ul>
<p>​				为了方便 mosquitto 的使用，可以写几个脚本用于发布和订阅</p>
<ol>
<li>发布</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim regenMosquittoScriptSendRemote.sh</span><br><span class="line"></span><br><span class="line"><span class="comment">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line">mosquitto_pub -h <span class="string">&quot;IP address&quot;</span> -p 1883 -u username -P regen -t <span class="string">&quot;test&quot;</span> -m <span class="string">&quot;<span class="variable">$1</span>&quot;</span></span><br></pre></td></tr></table></figure>

<p>​	赋权</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">chmod</span> 777 regenMosquittoScriptSendRemote.sh</span><br></pre></td></tr></table></figure>

<p>​	运行</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./regenMosquittoScriptSendRemote.sh hello!</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>订阅，同理</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim regenMosquittoScriptSubRemote.sh</span><br><span class="line"></span><br><span class="line"><span class="comment">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line">mosquitto_sub -h <span class="string">&quot;IP address&quot;</span> -p 1883 -u username -P regen -t <span class="string">&quot;<span class="variable">$1</span>&quot;</span></span><br></pre></td></tr></table></figure>

<p>​	赋权</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">chmod</span> 777 regenMosquittoScriptSubRemote.sh</span><br></pre></td></tr></table></figure>

<p>​	运行</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./regenMosquittoScriptSendRemote.sh topic</span><br></pre></td></tr></table></figure>

<ul>
<li>连接esp32或8266</li>
</ul>
<h1 id="VPN隧道搭建"><a href="#VPN隧道搭建" class="headerlink" title="VPN隧道搭建"></a>VPN隧道搭建</h1><h2 id="1-协议选择-V2RAY的VMess协议"><a href="#1-协议选择-V2RAY的VMess协议" class="headerlink" title="1.协议选择 V2RAY的VMess协议"></a>1.协议选择 V2RAY的VMess协议</h2><h2 id="2-一键安装脚本-：v2ray-sh"><a href="#2-一键安装脚本-：v2ray-sh" class="headerlink" title="2.一键安装脚本 ：v2ray.sh"></a>2.一键安装脚本 ：v2ray.sh</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo su root</span><br><span class="line"></span><br><span class="line">bash &lt;(curl -s -L https://git.io/v2ray.sh)</span><br></pre></td></tr></table></figure>

<h2 id="3-查看信息"><a href="#3-查看信息" class="headerlink" title="3.查看信息"></a>3.查看信息</h2><p>信息目录：<code> /etc/v2ray/config.json</code></p>
<h1 id="自建服务器（搭配ZeroTier食用）"><a href="#自建服务器（搭配ZeroTier食用）" class="headerlink" title="自建服务器（搭配ZeroTier食用）"></a>自建服务器（搭配ZeroTier食用）</h1><h2 id="1-begin"><a href="#1-begin" class="headerlink" title="1. begin"></a>1. begin</h2><p>​	虽然和hxy合伙买的白菜价国外服务器性能也还够用，但是也仅仅是够用，之前发现的内网穿透神器Zerotier刚好可以拿来当我的梦中情机的最后一块拼图。使用ZeroTier就可以让我方便的在SH连接到JX的家中局域网内的服务器了！</p>
<h2 id="2-介绍"><a href="#2-介绍" class="headerlink" title="2.介绍"></a>2.介绍</h2><h3 id="1-硬件介绍"><a href="#1-硬件介绍" class="headerlink" title="1.硬件介绍"></a>1.硬件介绍</h3><p>​			硬件部分的清单：</p>
<blockquote>
<p>CPU : E3 1230 v2 (4核8线，3.3ghz)</p>
<p>显卡 ： gt610 	（亮机即可，且低功耗）</p>
<p>内存：8g</p>
<p>外存：240（固态）+500（机械）</p>
</blockquote>
<h3 id="2-软件介绍"><a href="#2-软件介绍" class="headerlink" title="2.软件介绍"></a>2.软件介绍</h3><p>​		由于我正在使用的pc中恰好有四个下载好的镜像文件，分别是 macOS.Ventura_13.4 , deepin ，ubuntu22.04，kali2023，最终使用的是kali,原因在于kali已经安装好绝大部分软件和其需运行的环境，例如：httpd，JDK，javarun，makefile等等。</p>
<h2 id="3-组装（跳过）"><a href="#3-组装（跳过）" class="headerlink" title="3.组装（跳过）"></a>3.组装（跳过）</h2><h2 id="4-配置ZeroTier-如上篇ZeroTier内网穿透"><a href="#4-配置ZeroTier-如上篇ZeroTier内网穿透" class="headerlink" title="4.配置ZeroTier(如上篇ZeroTier内网穿透)"></a>4.配置ZeroTier(如上篇ZeroTier内网穿透)</h2><h2 id="5-结束"><a href="#5-结束" class="headerlink" title="5.结束"></a>5.结束</h2><p>最终效果，通过ipad的终端ssh外网连接kali</p>
<p><img src="/images/ipadConnectKali.jpg" alt="ipadConnectKali"></p>
<h1 id="makefile"><a href="#makefile" class="headerlink" title="makefile"></a>makefile</h1><h2 id="1-make简要介绍"><a href="#1-make简要介绍" class="headerlink" title="1.make简要介绍"></a>1.make简要介绍</h2><blockquote>
<p>​	In <a href="https://en.wikipedia.org/wiki/Software_development">software development</a>, <strong>Make</strong> is a <a href="https://en.wikipedia.org/wiki/Build_automation">build automation</a> tool that <a href="https://en.wikipedia.org/wiki/Software_build">builds</a> <a href="https://en.wikipedia.org/wiki/Executable_program">executable programs</a> and <a href="https://en.wikipedia.org/wiki/Library_(software)">libraries</a> from <a href="https://en.wikipedia.org/wiki/Source_code">source code</a> by reading <a href="https://en.wikipedia.org/wiki/File_(computing)">files</a> called <em>makefiles</em> which specify how to derive the target program. Though <a href="https://en.wikipedia.org/wiki/Integrated_development_environment">integrated development environments</a> and <a href="https://en.wikipedia.org/wiki/Programming_language">language</a>-specific <a href="https://en.wikipedia.org/wiki/Compiler_(computing)">compiler</a> features can also be used to manage a build process, Make remains widely used, especially in <a href="https://en.wikipedia.org/wiki/Unix">Unix</a> and <a href="https://en.wikipedia.org/wiki/Unix-like">Unix-like</a> <a href="https://en.wikipedia.org/wiki/Operating_system">operating systems</a>.</p>
</blockquote>
<blockquote>
<p>​	Make is not limited to building programs. It can also be used to manage any project where some files need to be updated automatically from other files whenever the other files change.</p>
</blockquote>
<h2 id="2-makefile简要介绍"><a href="#2-makefile简要介绍" class="headerlink" title="2.makefile简要介绍"></a>2.makefile简要介绍</h2><p>​	makefile文件用于告诉make命令如何执行编译和链接。</p>
<p>​	当一个文件具有很多个.c文件和.h文件时，如果将makefile写好了，就只需要一行代码<code>make</code>即可完成编译链接或者<code>make clean</code>删除所有目标文件，同时还能具备以下特性：</p>
<blockquote>
<p>​      1.如果这个工程没有编译过，那么所有C文件都会编译并被链接。</p>
<p>​      2.如果这个工程的某几个C文件被修改，那么只编译被修改的C文件，并链接目标程序。</p>
<p>​      3.如果这个工程的头文件被改变了，那么我们需要编译引用了这几个头文件的C文件，并链接目标程序。</p>
</blockquote>
<h2 id="3-makefile的规则"><a href="#3-makefile的规则" class="headerlink" title="3.makefile的规则"></a>3.makefile的规则</h2><figure class="highlight makefile"><table><tr><td class="code"><pre><span class="line">target ... : prerequisites ...</span><br><span class="line"></span><br><span class="line">         command</span><br><span class="line"></span><br><span class="line">         ...</span><br><span class="line"></span><br><span class="line">         ...</span><br><span class="line">        -------------------------------------------------------------------------------</span><br></pre></td></tr></table></figure>

<ul>
<li>target : 目标文件（可以使object文件，可执行文件，还可以是<strong>标签</strong>）</li>
<li>prerequisites ：生成target所需要的文件或是目标。</li>
<li>command也就是make需要执行的命令。（Shell命令）</li>
</ul>
<h2 id="4-makefile的使用"><a href="#4-makefile的使用" class="headerlink" title="4.makefile的使用"></a>4.makefile的使用</h2><p>​	makefile的规则看似十分简单，但是写好一个makefile却是不简单的。下面举例说明&#96;&#96;&#96;</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#假设已经存在3个c文件，4个.h文件，分别是:</span></span><br><span class="line">cFile1.c cFile2.c cFile3.c</span><br><span class="line">hFile1.h hFile2.h hFile3.h hFile4.h</span><br></pre></td></tr></table></figure>

<p>​		如果我们最终想要生成可执行文件main，那么makefile可以这样写，以下是我使用在线makefile生成器生成的。</p>
<p>​		同时介绍一下gcc的参数：</p>
<blockquote>
<ul>
<li><p>-g可执行程序包含调试信息<br>-g为了调试用的<br>加个-g 是为了gdb 用，不然gdb用不到</p>
</li>
<li><p>-o指定输出文件名<br>-o output_filename，确定输出文件的名称为output_filename，同时这个名称不能和源文件同名。如果不给出这个选项，gcc就给出</p>
</li>
<li><p>-c 只编译不链接<br>产生.o文件，就是obj文件，不产生执行文件</p>
</li>
<li><p>-D 其意义是添加宏定义</p>
</li>
<li><p>-w的意思是关闭编译时的警告，也就是编译后不显示任何warning，因为有时在编译之后编译器会显示一些例如数据转换之类的警告，这些警告是我们平时可以忽略的。</p>
</li>
<li><p>-W选项类似-Wall，会显示警告，但是只显示编译器认为会出现错误的警告。</p>
</li>
<li><p>-Wall选项意思是编译后显示所有警告</p>
</li>
</ul>
</blockquote>
<figure class="highlight makefile"><table><tr><td class="code"><pre><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># In order to execute this &quot;Makefile&quot; just type &quot;make&quot;</span></span><br><span class="line"><span class="comment">#  A. Delis (ad@di.uoa.gr)</span></span><br><span class="line"><span class="comment"># web: https://solver.assistedcoding.eu/makefilegen</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"></span><br><span class="line">OBJS  = cFile1.o cFile2.o cFile3.o</span><br><span class="line">SOURCE  = cFile1.c cFile2.c cFile3.c</span><br><span class="line">HEADER  = hFile1.h hFile2.h hFile3.h hFile4.h</span><br><span class="line">OUT  = main.out</span><br><span class="line">CC   = gcc</span><br><span class="line">FLAGS   = -g -c -Wall				 </span><br><span class="line">LFLAGS   = </span><br><span class="line"><span class="comment"># -g option enables debugging mode </span></span><br><span class="line"><span class="comment"># -c flag generates object code for separate files</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="section">all: <span class="variable">$(OBJS)</span></span></span><br><span class="line">  <span class="variable">$(CC)</span> -g <span class="variable">$(OBJS)</span> -o <span class="variable">$(OUT)</span> <span class="variable">$(LFLAGS)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># create/compile the individual files &gt;&gt;separately&lt;&lt;</span></span><br><span class="line"><span class="section">cFile1.o: cFile1.c</span></span><br><span class="line">  <span class="variable">$(CC)</span> <span class="variable">$(FLAGS)</span> cFile1.c -lcunit</span><br><span class="line"></span><br><span class="line"><span class="section">cFile2.o: cFile2.c</span></span><br><span class="line">  <span class="variable">$(CC)</span> <span class="variable">$(FLAGS)</span> cFile2.c -lcunit</span><br><span class="line"></span><br><span class="line"><span class="section">cFile3.o: cFile3.c</span></span><br><span class="line">  <span class="variable">$(CC)</span> <span class="variable">$(FLAGS)</span> cFile3.c -lcunit</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># clean house</span></span><br><span class="line"><span class="section">clean:</span></span><br><span class="line">  rm -f <span class="variable">$(OBJS)</span> <span class="variable">$(OUT)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># run the program</span></span><br><span class="line"><span class="section">run: <span class="variable">$(OUT)</span></span></span><br><span class="line">  ./<span class="variable">$(OUT)</span></span><br></pre></td></tr></table></figure>



<h1 id="cmake"><a href="#cmake" class="headerlink" title="cmake"></a>cmake</h1><h2 id="1-简要介绍"><a href="#1-简要介绍" class="headerlink" title="1. 简要介绍"></a>1. 简要介绍</h2><blockquote>
<p>From Wikipedia, the free encyclopedia</p>
<p>In <a href="https://en.wikipedia.org/wiki/Software_development">software development</a>, <strong>CMake</strong> is <a href="https://en.wikipedia.org/wiki/Cross-platform">cross-platform</a> <a href="https://en.wikipedia.org/wiki/Free_and_open-source_software">free and open-source software</a> for <a href="https://en.wikipedia.org/wiki/Build_automation">build automation</a>, <a href="https://en.wikipedia.org/wiki/Software_testing">testing</a>, <a href="https://en.wikipedia.org/wiki/Package_(package_management_system)">packaging</a> and <a href="https://en.wikipedia.org/wiki/Installation_(computer_programs)">installation</a> of software by using a <a href="https://en.wikipedia.org/wiki/Compiler">compiler</a>-independent method.[<a href="https://en.wikipedia.org/wiki/CMake#cite_note-3">3]</a> CMake is not a build system itself; it generates another system’s build files.[<a href="https://en.wikipedia.org/wiki/CMake#cite_note-:1-4">4]</a> It supports directory hierarchies and applications that depend on multiple libraries. It can invoke native build environments such as <a href="https://en.wikipedia.org/wiki/Make_(software)">Make</a>, <a href="https://en.wikipedia.org/wiki/Qt_Creator">Qt Creator</a>, <a href="https://en.wikipedia.org/wiki/Ninja_(build_system)">Ninja</a>, <a href="https://en.wikipedia.org/wiki/Android_Studio">Android Studio</a>, Apple’s <a href="https://en.wikipedia.org/wiki/Xcode">Xcode</a>, and <a href="https://en.wikipedia.org/wiki/Microsoft_Visual_Studio">Microsoft Visual Studio</a>.[<a href="https://en.wikipedia.org/wiki/CMake#cite_note-:1-4">4]</a> It has minimal dependencies, requiring only a <a href="https://en.wikipedia.org/wiki/C%2B%2B">C++</a> compiler on its own build system.[<a href="https://en.wikipedia.org/wiki/CMake#cite_note-:1-4">4]</a></p>
<p>CMake is distributed as <a href="https://en.wikipedia.org/wiki/Free_and_open-source_software">free and open-source software</a> under a permissive <a href="https://en.wikipedia.org/wiki/BSD_licenses">BSD-3-Clause</a> license.[<a href="https://en.wikipedia.org/wiki/CMake#cite_note-5"></a></p>
</blockquote>
<p>​	我的理解就是cmake是一款能够夸平台的生成makefile的工具，这样就不需要写复杂的makefile了。</p>
<h2 id="2-cmake使用"><a href="#2-cmake使用" class="headerlink" title="2.	cmake使用"></a>2.	cmake使用</h2><h3 id="1-使用流程"><a href="#1-使用流程" class="headerlink" title="1.使用流程"></a>1.使用流程</h3><pre><code>1. 在项目根目录下创建一个名为` CMakeLists.txt`的文件
</code></pre>
<ol start="2">
<li>编写该文件（当文件比较少的时候）</li>
</ol>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="keyword">cmake_minimum_required</span>(VERSION <span class="number">3.15</span>)  <span class="comment"># 版本要求</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># set the project name</span></span><br><span class="line"><span class="keyword">project</span>(firstProject)</span><br><span class="line"></span><br><span class="line"><span class="comment"># add the executable（包括所有的用到的源文件）</span></span><br><span class="line"><span class="keyword">add_executable</span>(firstOut a.cpp b.cpp)</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>使用cmake命令生成makefile</li>
</ol>
<ul>
<li>cmake命令的使用</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Usage</span><br><span class="line"></span><br><span class="line">  cmake [options] &lt;path-to-source&gt;</span><br><span class="line">  cmake [options] &lt;path-to-existing-build&gt;</span><br><span class="line">  cmake [options] -S &lt;path-to-source&gt; -B &lt;path-to-build&gt;</span><br><span class="line"></span><br><span class="line">Specify a <span class="built_in">source</span> directory to (re-)generate a build system <span class="keyword">for</span> it <span class="keyword">in</span> the</span><br><span class="line">current working directory.  Specify an existing build directory to</span><br><span class="line">re-generate its build system.</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ol start="4">
<li>使用make得到输出</li>
</ol>
<h3 id="2-单个源文件的项目"><a href="#2-单个源文件的项目" class="headerlink" title="2.单个源文件的项目"></a>2.单个源文件的项目</h3><ol>
<li>编写main.cpp</li>
</ol>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;<span class="built_in">printf</span>(<span class="string">&quot;hello\n&quot;</span>);<span class="keyword">return</span> <span class="number">0</span>;&#125;</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>编写CMakeLists.txt</li>
</ol>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="keyword">cmake_minimum_required</span>(VERSION <span class="number">3.15</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># set the project name</span></span><br><span class="line"><span class="keyword">project</span>(firstProject)</span><br><span class="line"></span><br><span class="line"><span class="comment"># add the executable</span></span><br><span class="line"><span class="keyword">add_executable</span>(firstOut main.cpp)</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>创建输出文件夹并且进行输出</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> build</span><br><span class="line">cmake -S . -B ./build/</span><br></pre></td></tr></table></figure>

<ol start="4">
<li>使用make进行编译链接即可得到可执行文件<code>firstOut</code></li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">make</span><br></pre></td></tr></table></figure>

<h3 id="3-CMakeLists-txt-的写法"><a href="#3-CMakeLists-txt-的写法" class="headerlink" title="3. CMakeLists.txt 的写法"></a>3. CMakeLists.txt 的写法</h3><h4 id="1-使用set"><a href="#1-使用set" class="headerlink" title="1.使用set"></a>1.使用set</h4><ul>
<li>定义变量 <strong>set</strong> ，类型为字符串</li>
</ul>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="keyword">set</span>(outName[forstOut])</span><br></pre></td></tr></table></figure>

<ul>
<li>使用宏</li>
</ul>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="keyword">set</span>(CMAKE_CXX_STANDARD <span class="number">11</span>)         <span class="comment"># 指定c++标准的宏</span></span><br><span class="line"><span class="keyword">set</span>(EXECUTABLE_OUTPUT_PATH   /home/regen/CMake/regen_1/build)<span class="comment"># 指定可执行文件的输出目录</span></span><br></pre></td></tr></table></figure>

<ul>
<li>取值</li>
</ul>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="variable">$&#123;outName&#125;</span></span><br></pre></td></tr></table></figure>

<h4 id="2-文件搜索（便于源文件很多的情况）获取源文件名字"><a href="#2-文件搜索（便于源文件很多的情况）获取源文件名字" class="headerlink" title="2.文件搜索（便于源文件很多的情况）获取源文件名字"></a>2.文件搜索（便于源文件很多的情况）获取源文件名字</h4><p>​	建议将源文件放在独立的目录下，便于获取源文件名字。</p>
<ol>
<li>使用<code>aux_source_directory(&lt; dir &gt; &lt; variable &gt;)</code></li>
</ol>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="keyword">aux_source_directory</span>(&lt; dir &gt; &lt; variable &gt;)</span><br><span class="line"><span class="keyword">aux_source_directory</span>(<span class="variable">$&#123;PROJECT_SOURCE_DIR&#125;</span> SRC)</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>使用file（用于应对很多源文件在不同目录的情况）</li>
</ol>
<ul>
<li>后缀搜索目录下所有源文件</li>
</ul>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="keyword">file</span>(GLOB MAIN_SRC <span class="variable">$&#123;PROJECT_SOURCE_DIR&#125;</span>/src/*.cpp)</span><br><span class="line"><span class="keyword">file</span>(GLOB MAIN_HEAD <span class="variable">$&#123;PROJECT_SOURCE_DIR&#125;</span>/<span class="keyword">include</span>/*.h)</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>头文件与源文件分开放的处理方法</li>
</ol>
<ul>
<li>使用宏</li>
</ul>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="keyword">include_directories</span>(headpath)</span><br></pre></td></tr></table></figure>





<h2 id="3-静态库和动态库"><a href="#3-静态库和动态库" class="headerlink" title="3.静态库和动态库"></a>3.静态库和动态库</h2><p>​	pause.打算在下次用到的时候补充</p>
<p>​                                </p>
]]></content>
      <tags>
        <tag>笔记</tag>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>《丧钟为谁而鸣》</title>
    <url>/2023/12/02/%E3%80%8A%E4%B8%A7%E9%92%9F%E4%B8%BA%E8%B0%81%E8%80%8C%E9%B8%A3%E3%80%8B/</url>
    <content><![CDATA[<p><img src="/images/bookszwsrm.jpg" alt="丧钟为谁而鸣"></p>
<ul>
<li><p>这本书是Winston推荐的，其实我原本是想问问他给推荐几本简单易读的英文原著。回来一看，是一部长篇qwq，感觉读原著的话会有些吃力（英语水平有限: sigh :），于是就先读了翻译后的版本。看完以后久久不能释怀。</p>
</li>
<li><p>昨天深夜读完这本书，看看时间，恰好 2 : 00，合上眼，情节一幕幕复现在眼前，再过一个小时，皮拉尔就应该发现巴勃罗将罗伯托的起爆器和雷管偷走了。不知道如果巴勃罗没有偷走它们，又或者没有将它们扔下悬崖，罗伯托和巴塞尔默会不会能够活下去。巴塞尔默是那么热心肠，那么认真的令人尊敬的老人啊！不过死亡也许对他来说也是一种解脱吧。</p>
</li>
<li><p>在爱情上，我和罗伯托都是这样的人，在爱情上认为自己不会爱上别人，孑然一身，只是做着自己的事。然而他找到了小兔子玛利亚。在这样恐怖的栈帧中，能与她将往后余生的长相厮守浓缩为三天就已经十分幸运了不是吗？何必奢求永远。</p>
</li>
</ul>
<blockquote>
<p>“  你在要求不可能的事，你在要求绝不可能的事。所以，如果你真像你说的那样深爱这姑娘，那最好的，就是好好爱她，用尽全力，用浓烈填补这段关系中必将缺乏的长度与跨度。你听到了？过去，人们用一生的时间来做这件事。而现在，当你找到它，你得到两个夜晚，你会惊诧，这所有的幸运究竟从何而来。”</p>
<p>摘录来自<br>丧钟为谁而鸣(海明威代表作，普利策奖遗珠，海明威献给夫人玛莎·盖尔霍恩的定情之作)<br>厄尼斯特·海明威</p>
</blockquote>
<ul>
<li><p>人类似乎也遵循热力学第二定律，像化学反应一样，总是向着熵增的方向进行。战争带来了太多悲剧，太多遗憾。在看战争片和有关战争的书籍时，每每到有人逝去的情节时，眼角总是会不自觉的湿润。虽然我知道开始的各种暗示都意味着罗伯托会死，但是当他们炸桥成功任务完成时，我竟心怀一丝希望。就算罗伯托没死，战争确是无情的。历史上，有数不清的像罗伯托一样的人，将人类的和平与自由作为自己的信仰，至死不渝。这便是人性的光芒。</p>
</li>
<li><p>接下来就是读原著了。</p>
</li>
</ul>
]]></content>
      <tags>
        <tag>读书</tag>
        <tag>随手记</tag>
      </tags>
  </entry>
  <entry>
    <title>Java Projects</title>
    <url>/2023/12/07/Java-Projects/</url>
    <content><![CDATA[]]></content>
      <tags>
        <tag>笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>前端学习笔记</title>
    <url>/2023/12/22/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h1 id="CSS"><a href="#CSS" class="headerlink" title="CSS"></a>CSS</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><blockquote>
<p>​	</p>
<p>CSS：Cascading Style Sheet 层叠样式表，是一组样式设置的规则，用于控制页面的外观样式。</p>
<p>广泛用于页面外观美化，布局和定位。</p>
</blockquote>
<h2 id="CSS如何使用"><a href="#CSS如何使用" class="headerlink" title="CSS如何使用"></a>CSS如何使用</h2><ul>
<li>嵌入HTML或者JSP</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">&lt;head&gt;</span><br><span class="line">  &lt;meta charset=&quot;UTF-<span class="number">8</span>&quot;&gt;</span><br><span class="line">  &lt;title&gt;Document&lt;/title&gt;</span><br><span class="line">  &lt;style&gt;</span><br><span class="line">    <span class="selector-tag">p</span>&#123;</span><br><span class="line">      <span class="attribute">color</span>:blue;</span><br><span class="line">    &#125;</span><br><span class="line">  &lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br></pre></td></tr></table></figure>



<ul>
<li>外部导入（常用，更加方便，便于复制黏贴 :D）</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">&lt;head&gt;</span><br><span class="line">  &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;css/eg<span class="selector-class">.css</span>&quot;&gt; </span><br><span class="line">&lt;/head&gt;</span><br></pre></td></tr></table></figure>

<h2 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h2><ul>
<li>选择器：要修饰的对象，例如HTML的各类标签</li>
<li>属性名：属于修饰对象的属性</li>
<li>属性值：修饰对象的属性的样式取值</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">&lt;head&gt;</span><br><span class="line">  &lt;style&gt;</span><br><span class="line">    选择器&#123;</span><br><span class="line">      属性名：属性值;</span><br><span class="line">      属性名：属性值;</span><br><span class="line">    &#125;</span><br><span class="line">  &lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br></pre></td></tr></table></figure>

<h2 id="选择器"><a href="#选择器" class="headerlink" title="选择器"></a>选择器</h2>]]></content>
      <tags>
        <tag>笔记</tag>
        <tag>css</tag>
      </tags>
  </entry>
  <entry>
    <title>《寂寞的游戏》</title>
    <url>/2023/12/24/%E3%80%8A%E5%AF%82%E5%AF%9E%E7%9A%84%E6%B8%B8%E6%88%8F%E3%80%8B/</url>
    <content><![CDATA[<h1 id="《寂寞的游戏》"><a href="#《寂寞的游戏》" class="headerlink" title="《寂寞的游戏》"></a>《寂寞的游戏》</h1><p><img src="/images/%E5%AF%82%E5%AF%9E%E7%9A%84%E6%B8%B8%E6%88%8F.jpg" alt="寂寞的游戏">	</p>
<p>​	<strong>其实</strong>，这本书我在2020年就看过一遍了，因为十分合拍的原因，还拍下了当时读书时的画面。当时就感受到了袁哲生先生的文字下的细腻，将一个敏感的青年通过笔墨绘于纸上。</p>
<p>​	<strong>那时</strong>，我刚刚升入高中，不曾想到进了高一的奥赛班，以为以我的适应能力能够立马就与同学打成一片，然而这个班的同学早已互相认识，只留少数几个像我一样对于新环境完全陌生的新人，不仅是交际上的原因，学业上也频频受挫。初中时的锐气与自信受到巨大的打击，于是便抓住文字这根救命稻草，以求在陌生而冷淡的环境汲取一丝慰藉。</p>
<p>​	<strong>文字</strong>，从未给过我失望，透过《寂寞的游戏》，我看到了一个像我一样的青年，借由他的经历，让我那时的无力感得到稍许减弱。</p>
<blockquote>
<p>“	我想，人天生就喜欢躲藏，</p>
<p>渴望消失，这是一点都不奇怪的事。	”</p>
<p>“	我就这样躲躲藏藏了许多年，直到有一天，捉迷藏的乐趣像一颗流星，眨眼就消失的无影无踪。	”</p>
</blockquote>
<p>​	这些细腻且真实的文字打动着我，让那时的我感动：我不是一个人，袁哲生先生也和我一样。</p>
<p><img src="/images/%E5%AF%82%E5%AF%9E%E7%9A%84%E6%B8%B8%E6%88%8F2.jpg" alt="2020 第一次读这本书就被吸引"></p>
<p>​	<strong>那时</strong>，图片中的有着斑马图案像条形码的马克杯还没碎。那是妈妈在外地别人家打工时，住在那里的姐姐托妈妈送给我的，杯子里还有一张写着QQ号码和昵称 Nancy 的纸条。依稀记得为了这个纸条找发小帮忙注册了一个QQ号。然而她没有同意我的申请添加，而后QQ号也给弄丢了。</p>
<p>​	<strong>再次</strong>，拿起这本书的原因是在市区的书架上看到，蓝色的书封，和我在那会同时看的《夜晚的潜水艇》有几分相似，在手指触碰到书的瞬间，那时的回忆涌现出来，那个茶杯，那本有淡淡香味的书，把我拉到过去，回过神来，同行的朋友早已不见。那晚，沉浸在过去回忆中的我，打开手机，下来了电子书看，那时我是这么热爱看书，而今双手却不离键盘手机。过去的我如果看到我这个模样，估计会因为不理解而叹息吧。重读过程，不仅是过去的回忆，读书时的令人享受的感觉也再次回到我的大脑。大概是内啡肽吧。不知不觉就读完了这本。</p>
<blockquote>
<p>“好好活下去，不一定要在意别人的话，人生有时候要走自己的路。”</p>
<p>“我知道父亲拙于言词，在面对生命难以省略的伤痛时，更无力打破沉默。”</p>
</blockquote>
<p>​	<strong>最近</strong>，作息有点阴间，书中这句话突然点醒了我。</p>
<blockquote>
<p>“平常上班的日子，他不乏迟到的纪录，不过，他从未在星期天晚起过，因为这是他最重视的、为自己而活的日子。”</p>
</blockquote>
<p>​	以前我还爱用“	理想主义的少年不会被现实主义打败。”这句话来激励我自己，然而，这句话的力量在我觉得它幼稚的那一刻荡然无存，就好像否定了理想主义的存在一样。<strong>总之</strong>，这本书让我重新感受到了文字的温度与力量，我感激袁哲生先生的文字，我想，您之所以选择走向天堂，是因为想要把这些文字带给天国的人们吧。</p>
<blockquote>
<p> <strong>这一位看自己灵魂风水的人，最终选择留下了的叹息，也成为了读者对一位如此能抓住人心的作者的叹息。</strong></p>
</blockquote>
]]></content>
      <tags>
        <tag>读书</tag>
        <tag>随手记</tag>
      </tags>
  </entry>
  <entry>
    <title>《再穷也要去旅游》</title>
    <url>/2023/09/21/%E3%80%8A%E5%86%8D%E7%A9%B7%E4%B9%9F%E8%A6%81%E5%8E%BB%E6%97%85%E6%B8%B8%E3%80%8B/</url>
    <content><![CDATA[<h1 id="《再穷也要去旅游》"><a href="#《再穷也要去旅游》" class="headerlink" title="《再穷也要去旅游》"></a>《再穷也要去旅游》</h1><p>​	我今天才开始接触这本书，初见时就是惊鸿一瞥，可能是比较贴切当代像我一样穷大学生的现状吧 &lt;3。</p>
<p>​	唉，我好像老是嘴上说着要去哪里哪里走一走，但是到头来总是会出现各种各样的阻挠。就像今年夏天，驾照啦，作业啦之类的。但是仔细想想，好像这只是给自己家里蹲找的借口而已。于是不了终了，开学时只得借大隐隐于市聊以自慰。</p>
<p>​	不行啊！这个寒假可不能在颓废了！你不是会骑摩托了吗？！这个寒假就加满油去野营吧！看看能否找到冬季银河的踪迹。（回家之前）</p>
<p>​	nmmd，这么冷，不是下雨就是下雪，这个世界又多了一个伤心的人。</p>
]]></content>
      <tags>
        <tag>读书</tag>
        <tag>随手记</tag>
      </tags>
  </entry>
  <entry>
    <title>《奇风岁月》</title>
    <url>/2024/01/26/%E3%80%8A%E5%A5%87%E9%A3%8E%E5%B2%81%E6%9C%88%E3%80%8B/</url>
    <content><![CDATA[<p>​	这应该是我青少年时期最喜欢的一本书了，那时推荐给了很多人看。高中时很喜欢一个up主，他一边介绍高质量游戏，一边给我们推荐他觉得好看的有意思的书。这本书就是他推荐的。</p>
<p>​	也是在整理东西的时候发现的过去写的文字。</p>
<p><img src="/images/read/qiFengSuiYue_1.jpg" alt="看完一年后高三时怀念奇风镇"></p>
<p><img src="/images/read/qiFengSuiYue_2.jpg" alt="第一次看《奇风岁月》"></p>
]]></content>
      <tags>
        <tag>读书</tag>
        <tag>随手记</tag>
      </tags>
  </entry>
  <entry>
    <title>《霍乱时期的爱情》</title>
    <url>/2024/01/26/%E3%80%8A%E9%9C%8D%E4%B9%B1%E6%97%B6%E6%9C%9F%E7%9A%84%E7%88%B1%E6%83%85%E3%80%8B/</url>
    <content><![CDATA[<p>​	在老家整理东西的时候发现了许多在高中时代写的文字，怀念的感觉油然而生。这本书是我在高二的时候看过的。那时看完之后心情久久不得平静，就撕下一页稿纸，随手写了这点东西。</p>
<p> <img src="/images/read/huoLuanShiQiDeAiQing.jpg"></p>
<p>​	想到那时的自己还是书虫，每日不读书就浑身难受。再看看现在，好像已经有几个月没有拿起一本书像过去的我一样一有时间就打开阅读了。</p>
<p>​	最近就把过去看过的书再温习一遍吧！</p>
]]></content>
      <tags>
        <tag>读书</tag>
        <tag>随手记</tag>
      </tags>
  </entry>
  <entry>
    <title>时间胶囊</title>
    <url>/2024/01/26/%E6%97%B6%E9%97%B4%E8%83%B6%E5%9B%8A/</url>
    <content><![CDATA[<p>​	<img src="/images/timeCapsule/1.jpg"></p>
<p>​	高中晚自习的时候，下暴雨时有感。</p>
<p>​	<img src="/images/timeCapsule/2.jpg"></p>
<p>​	高中午休时胡思乱想有感。</p>
<p>​	<img src="/images/timeCapsule/3.jpg"></p>
<p>​	高中数学课有感。</p>
<p>​	<img src="/images/timeCapsule/4.jpg"></p>
<p>​	高中被室友呼噜声吵失眠有感。</p>
<p>​	<img src="/images/timeCapsule/5.jpg"></p>
<p>​	看完凯鲁亚克的《在路上》后有感。</p>
]]></content>
      <tags>
        <tag>随手记</tag>
      </tags>
  </entry>
  <entry>
    <title>随手记</title>
    <url>/2023/10/09/%E9%9A%8F%E6%89%8B%E8%AE%B0/</url>
    <content><![CDATA[<h1 id="困饿累睡不着"><a href="#困饿累睡不着" class="headerlink" title="困饿累睡不着"></a>困饿累睡不着</h1><p><img src="/images/myPoems_1.jpg"></p>
<p>​	上课的时候随便乱写的&lt;3,没想到我还是这么中二</p>
]]></content>
      <tags>
        <tag>随手记</tag>
      </tags>
  </entry>
  <entry>
    <title>STM32</title>
    <url>/2024/01/29/STM32/</url>
    <content><![CDATA[<h1 id="1-STM32和51"><a href="#1-STM32和51" class="headerlink" title="1. STM32和51"></a>1. STM32和51</h1><h2 id="1-51的优缺点"><a href="#1-51的优缺点" class="headerlink" title="1. 51的优缺点"></a>1. 51的优缺点</h2><h3 id="1-51-的优点"><a href="#1-51-的优点" class="headerlink" title="1. 51 的优点"></a>1. 51 的优点</h3><ul>
<li>硬件层面</li>
</ul>
<blockquote>
<ol>
<li>结构简单，8位</li>
<li>硬件到软件有一套按位操作系统。（进行位的操作：传送、置位、清零、测试，逻辑运算）</li>
<li>包含乘除法指令</li>
</ol>
</blockquote>
<ul>
<li>软件层面</li>
</ul>
<blockquote>
<ol>
<li>可以使用C进行编程</li>
</ol>
</blockquote>
<h3 id="2-51的缺点"><a href="#2-51的缺点" class="headerlink" title="2. 51的缺点"></a>2. 51的缺点</h3><ul>
<li>硬件层面</li>
</ul>
<blockquote>
<ol>
<li>功能少，运行速度慢</li>
<li>I&#x2F;O高电平无输出能力</li>
<li>保护能力差</li>
</ol>
</blockquote>
<h2 id="2-stm32的简介"><a href="#2-stm32的简介" class="headerlink" title="2.stm32的简介"></a>2.stm32的简介</h2><blockquote>
<p>​	由ST厂商推出的STM32系列单片机，行业的朋友都知道，这是一款性价比超高的系列单片机，应该没有之一，功能及其强大。其基于专为要求高性能、低成本、低功耗的嵌入式应用专门设计的ARM Cortex-M内核，同时具有一流的外设：1μs的双12位ADC，4兆位&#x2F;秒的UART，18兆位&#x2F;秒的SPI等等，在功耗和集成度方面也有不俗的表现，当然和MSP430的功耗比起来是稍微逊色的一些，但这并不影响工程师们对它的热捧程度，由于其简单的结构和易用的工具再配合其强大的功能在行业中赫赫有名。</p>
</blockquote>
<ul>
<li>强大功能体现</li>
</ul>
<blockquote>
<ol>
<li><p>内核<br>STM32 系列采用了多种 ARM Cortex-M 内核，包括 Cortex-M0、Cortex-M3、Cortex-M4 等，具有不同的性能和功能特点，可根据应用场景的需求进行选择。</p>
</li>
<li><p>时钟<br>STM32 系列支持多种时钟源，包括内部 RC 振荡器、内部晶体振荡器、外部晶体振荡器等，可根据应用场景的需求进行选择。同时还支持多种时钟分频和时钟输出等功能。</p>
</li>
<li><p>存储器<br>STM32 系列支持多种存储器类型，包括 Flash 存储器、RAM 存储器、EEPROM 存储器等，可以根据应用场景的需求进行选择。同时还支持多种存储器保护和存储器映射等功能。</p>
</li>
<li><p>支持多种通讯</p>
<p>STM32 系列还支持多种通信协议，如 SPI、I2C、CAN、USART 等。这使得 STM32 系列非常适合各种应用，特别是需要与其他设备或模块进行通信的应用。</p>
</li>
</ol>
</blockquote>
<h2 id="3-STM32F103C8T6-最小系统制作"><a href="#3-STM32F103C8T6-最小系统制作" class="headerlink" title="3.STM32F103C8T6 最小系统制作"></a>3.STM32F103C8T6 最小系统制作</h2><h3 id="1-供电电路"><a href="#1-供电电路" class="headerlink" title="1.供电电路"></a>1.供电电路</h3><h4 id="1-芯片特性"><a href="#1-芯片特性" class="headerlink" title="1.芯片特性"></a>1.芯片特性</h4><ul>
<li>操作定压Vdd&#x3D;2.0~3.6v</li>
<li>Vdd关闭后，RTC和备用寄存器可以从Vbat供电</li>
</ul>
<h3 id="2-电源转换电路"><a href="#2-电源转换电路" class="headerlink" title="2.电源转换电路"></a>2.电源转换电路</h3><ul>
<li>USB供电（5v）转3.3v供电</li>
</ul>
<p>​	采用AMS1117芯片</p>
<ul>
<li>AMS1117<ul>
<li>特点：</li>
</ul>
</li>
</ul>
<blockquote>
<p>Three Terminal Adjustable or Fixed Voltages* </p>
<p>• High Efficiency Linear Regulators  1.5V, 1.8V, 2.5V, 2.85V, 3.3V and 5.0V </p>
<p>• Post Regulators for Switching Supplies  • Output Current of 1A </p>
<p>• 5V to 3.3V Linear Regulator  </p>
<p>• Operates Down to 1V Dropout </p>
<p>• Line Regulation: 0.2% Max. </p>
<p>• Active SCSI Terminators  </p>
<p>• Load Regulation: 0.4% Max. </p>
<p>• SOT-223, TO-252 and SO-8 package</p>
</blockquote>
<h3 id="3-SWD下载电路"><a href="#3-SWD下载电路" class="headerlink" title="3.SWD下载电路"></a>3.SWD下载电路</h3><ul>
<li>PA13和PA14为STM32F103C8T6芯片的SWD下载调试引脚</li>
</ul>
<h3 id="4-时钟电路"><a href="#4-时钟电路" class="headerlink" title="4.时钟电路"></a>4.时钟电路</h3><ul>
<li>时钟源</li>
</ul>
<blockquote>
<p>三个不同的时钟源可以用来驱动系统时钟(SYSCLK)： </p>
<p>● HSI晶振时钟(高速内部时钟信号)  </p>
<p>● HSE晶振时钟(高速外部时钟信号)  </p>
<p>● PLL时钟 </p>
<p>STM32有两个二级时钟源： </p>
<p>● 40kHz的低速内部RC，它可以驱动独立看门狗，还可选择地通过程序选择驱动RTC。RTC 用于从停机&#x2F;待机模式下自动唤醒系统。 </p>
<p>● 32.768kHz的低速外部晶振，可选择它用来驱动RTC(RTCCLK)。</p>
</blockquote>
<ul>
<li>时钟电路（晶振电路）</li>
</ul>
<h3 id="5-复位电路"><a href="#5-复位电路" class="headerlink" title="5.复位电路"></a>5.复位电路</h3><ul>
<li><p>复位条件：</p>
<ul>
<li>NRST引脚上出现低电平(外部复位)  </li>
<li>窗口看门狗计数终止(WWDG复位)  </li>
<li>独立看门狗计数终止(IWDG复位)  </li>
<li>软件复位(SW复位)  </li>
<li>低功耗管理复位</li>
</ul>
</li>
<li><p>复位电路</p>
</li>
</ul>
<h3 id="6-外围测试电路"><a href="#6-外围测试电路" class="headerlink" title="6.外围测试电路"></a>6.外围测试电路</h3><ul>
<li>LED测试电路</li>
</ul>
<blockquote>
<ol>
<li>电源指示灯</li>
<li>烧录指示灯</li>
<li>blink程序测试用灯</li>
</ol>
</blockquote>
<ul>
<li>引脚引出</li>
</ul>
]]></content>
      <tags>
        <tag>笔记</tag>
        <tag>嵌入式</tag>
        <tag>STM32</tag>
      </tags>
  </entry>
  <entry>
    <title>常见通信协议以及通信方式</title>
    <url>/2024/01/29/%E5%B8%B8%E8%A7%81%E9%80%9A%E4%BF%A1%E5%8D%8F%E8%AE%AE%E4%BB%A5%E5%8F%8A%E9%80%9A%E4%BF%A1%E6%96%B9%E5%BC%8F/</url>
    <content><![CDATA[<h1 id="常用的通信方式"><a href="#常用的通信方式" class="headerlink" title="常用的通信方式"></a>常用的通信方式</h1><h2 id="1-串行和并行通信"><a href="#1-串行和并行通信" class="headerlink" title="1. 串行和并行通信"></a>1. 串行和并行通信</h2><ul>
<li>串行通信优缺点</li>
</ul>
<blockquote>
<p>优点：</p>
<p>​	1. 占用资源少（只需一根线）</p>
<p>缺点：</p>
<p>​	1. 传输速率慢</p>
</blockquote>
<ul>
<li>并行通信优缺点</li>
</ul>
<blockquote>
<p>优点：</p>
<p>​	1. 传输速率快</p>
<p>缺点：</p>
<p>​	1. 占用资源多（多根线同时使用）</p>
</blockquote>
<h2 id="2-同步和异步通信"><a href="#2-同步和异步通信" class="headerlink" title="2. 同步和异步通信"></a>2. 同步和异步通信</h2><h3 id="1-概念"><a href="#1-概念" class="headerlink" title="1.概念"></a>1.概念</h3><ul>
<li>同步通信</li>
</ul>
<blockquote>
<p><strong>同步通信：</strong> 发送端在发送串行数据的同时，提供一个时钟信号，并按照一定的约定（例如：在时钟信号的上升沿的时候，将数据发送出去）发送数据，接收端根据发送端提供的时钟信号，以及大家的约定，接收数据。如：I2C、SPI等有时钟信号的协议，都属于这种通信方式。</p>
</blockquote>
<ul>
<li>异步通信</li>
</ul>
<blockquote>
<p><strong>异步通信：</strong> <strong>接收方并不知道数据什么时候会到达，收发双方可以有各自自己的时钟</strong>。发送方发送的时间间隔可以不均，接收方是在数据的起始位和停止位的帮助下实现信息同步的。这种传输通常是很小的分组，比如：一个字符为一组，数据组配备起始位和结束位。所以这种传输方式的效率是比较低的，因为额外加入了很多的辅助位作为负载，常用在低速的传输中。</p>
</blockquote>
<h3 id="2-比较"><a href="#2-比较" class="headerlink" title="2. 比较"></a>2. 比较</h3><ul>
<li><p>同步通信要求接收端时钟频率和发送端时钟频率一致，发送端发送连续的比特流；异步通信时不要求接收端时钟和发送端时钟同步，发送端发送完一个字节后，可经过任意长的时间间隔再发送下一个字节。</p>
</li>
<li><p>同步通信效率高；异步通信效率较低。</p>
</li>
<li><p>同步通信较复杂，双方时钟的允许误差较小；异步通信简单，双方时钟可允许一定误差。</p>
</li>
<li><p>同步通信可用于点对多点；异步通信只适用于点对点。</p>
</li>
</ul>
<h2 id="3-单工、半双工、全双工通信"><a href="#3-单工、半双工、全双工通信" class="headerlink" title="3. 单工、半双工、全双工通信"></a>3. 单工、半双工、全双工通信</h2><h3 id="1-概念-1"><a href="#1-概念-1" class="headerlink" title="1. 概念"></a>1. 概念</h3><ul>
<li>单工数据传输只支持数据在一个方向上传输</li>
<li>半双工数据传输允许数据在两个方向上传输，但是，在某一时刻，只允许数据在一个方向上传输，它实际上是一种切换方向的单工通信</li>
<li>全双工数据通信允许数据同时在两个方向上传输，因此，全双工通信是两个单工通信方式的结合，它要求发送设备和接收设备都有独立的接收和发送能力。</li>
</ul>
<h2 id="4-通信速率"><a href="#4-通信速率" class="headerlink" title="4. 通信速率"></a>4. 通信速率</h2><ul>
<li>比特率</li>
</ul>
<blockquote>
<p>比特率(bit rate)又称传信率、信息传输速率(简称信息速率，information rate)。其定义是：通信线路(或系统)单位时间(每秒)内传输的信息量，即每秒能传输的二进制位数，通常用Rb表示，其单位是比特&#x2F;秒(bit&#x2F;s或b&#x2F;s，英文缩略语为bps)。</p>
</blockquote>
<ul>
<li>波特率</li>
</ul>
<blockquote>
<p>波特率(Baud rate)又称传码率、码元传输速率(简称码元速率)、信号传输速率(简称信号速率，signaling rate)或调制速率。其定义是：通信线路(或系统)单位时间(每秒)内传输的码元(脉冲)个数；或者表示信号调制过程中，单位时间内调制信号波形的变换次数，通常用RB表示，单位是波特(Bd或Baud，前者规范)。如果每秒传输1个码元就称为1Bd；如果1码元的时间长短为200ms，则每秒可传输5个码元，那么码元速率(波特率)就是5Bd。</p>
</blockquote>
<ul>
<li>码元</li>
</ul>
<blockquote>
<p>码元(code cell)是携带信息的数字单位，是指在数字信道中传送数字信号的一个波形符号，也即“时间轴上的一个信号编码单元”。码元可能是二进制的，也可能是多进制的。 </p>
</blockquote>
<h2 id="5-常见通信方式"><a href="#5-常见通信方式" class="headerlink" title="5. 常见通信方式"></a>5. 常见通信方式</h2><p>​	USART ( Universal Synchronous Asynchronous Receiver and Transmitter )</p>
<p>​	UART ( Universal Asynchronous Receiver and Transmitter )</p>
<h4 id="1-TTL"><a href="#1-TTL" class="headerlink" title="1. TTL"></a>1. TTL</h4><blockquote>
<p>TTL（transistor transistor logic）即晶体管-晶体管逻辑电平。TTL电平信号规定，+5V等价于逻辑“1”，0 V等价于逻辑“0”(采用二进制来表示数据时)。</p>
</blockquote>
<h4 id="2-RS232"><a href="#2-RS232" class="headerlink" title="2. RS232"></a>2. RS232</h4><ul>
<li>协议简介</li>
</ul>
<blockquote>
<p>RS-232总线规定了25条线，包含了两个信号通道，即第一通道（称为主通道）和第二通道（称为副通道）。利用RS- 232总线可以实现全双工通信，通常使用的是主通道，而副通道使用较少。在一般应用中，使用3条～9条信号线就可以实现全双工通信，采用三条信号线（接收线RXD、发送线TXD和信号地GND）能实现简单的全双工通信过程。因此RS232标准有两种接口——DB9和DB25，其中常用的是DB9接口。</p>
</blockquote>
<ul>
<li>特征</li>
</ul>
<blockquote>
<ul>
<li>接口信号电平高，容易损坏接口电路的芯片。RS232接口上任何信号线的电压都处于负逻辑关系中。即：逻辑“1”为-3 ~ -15V;逻辑为“0”：+3 ~ +15V，噪声裕量为2V。也就是说，接收器需要将高于+3V的信号识别为逻辑“0”，将低于-3V的信号识别为逻辑“1”，将5V的TTL电平识别为逻辑正极，将0识别为逻辑负极。</li>
<li>与TTL电平不兼容，需要一个电平转换电路来连接到TTL电路。</li>
<li>传输速率低。在异步传输中，比特率为20Kbps;因此，在51CPLD开发板中，集成程序波特率只能是19200，这也是原因。</li>
<li>接口采用信号线和信号回波串，形成共同的接地传输形式。这种标准的接地传输容易受到共模干扰，因此抗噪性较弱。</li>
<li>传输距离有限。最大传输距离为50英尺。它只能达到大约15米。</li>
</ul>
</blockquote>
<h4 id="3-RS485"><a href="#3-RS485" class="headerlink" title="3. RS485"></a>3. RS485</h4><ul>
<li>简介</li>
</ul>
<blockquote>
<p>RS485 通信采用差分信号传输，通常情况下只需要两根信号线就可以进行正常的通信。<br>在差分信号中，逻辑0和逻辑1是用两根信号线（A+和B-）的电压差来表示。</p>
<p>逻辑 1：两根信号线（A+和B-）的电压差在 +2V～+6V 之间。<br>逻辑 0：两根信号线（A+和B-）的电压差在 -2V～-6V 之间。</p>
</blockquote>
<ul>
<li>特征</li>
</ul>
<blockquote>
<p>RS-485的电气特性：逻辑“1”由两条线路+2V<del>+6V之间的电压差表示，逻辑“0”由两条线路之间的电压差-6V</del>-2V表示。接口信号电平低于RS-232，不易损坏接口电路芯片。该电平与TTL电平兼容，便于与TTL电路连接。<br>最高数据传输速率为：10Mbps<br>RS-485接口采用平衡驱动器和差分接收机的组合，具有抗共振固模干扰能力，即抗噪声性能好。<br>RS-485接口的最大传输距离为4000英尺，实际上可达3000米。<br>RS-232接口仅允许一个收发器连接到总线，即单站功能。相比之下，RS-485接口仅允许在总线上连接多达128个收发器，即多站能力。用户 使用单个RS-485接口可以快速建立设备网络。</p>
</blockquote>
<h3 id="3-I2C"><a href="#3-I2C" class="headerlink" title="3.  I2C"></a>3.  I2C</h3><ul>
<li>简介</li>
</ul>
<blockquote>
<p>I2C（同步半双工）通讯协议(Inter－Integrated Circuit)是由 Phiilps（飞利浦） 公司开发的，由于它引脚少，硬件实现简单，可扩展性强，不需要 USART、 CAN 等通讯协议的外部收发设备，现在被广泛地使用在系统内多个集成电路(IC)间的通讯。</p>
</blockquote>
<ul>
<li>特点</li>
</ul>
<blockquote>
<p>(1) 它是一个支持多设备的总线。“总线”指多个设备共用的信号线。在一个 I2C 通讯总线中，可连接多个 I2C 通讯设备，支持多个通讯主机及多个通讯从机。</p>
<p>(2) 一个 I2C 总线只使用两条总线线路，一条双向串行数据线(SDA) ，一条串行时钟线(SCL)。数据线即用来表示数据，时钟线用于数据收发同步。</p>
<p>(3) 每个连接到总线的设备都有一个独立的地址，主机可以利用这个地址进行不同设备之间的访问。</p>
<p>(4) 总线通过上拉电阻接到电源。当 I2C 设备空闲时，会输出高阻态，而当所有设备都空闲，都输出高阻态时，由上拉电阻把总线拉成高电平。</p>
<p>(5) 多个主机同时使用总线时，为了防止数据冲突，会利用仲裁方式决定由哪个设备占用总线。</p>
<p>(6) 具有三种传输模式：标准模式传输速率为 100kbit&#x2F;s ，快速模式400kbit&#x2F;s ，高速模式下可达 1Mbit&#x2F;s，但目前大多 I2C 设备尚不支持高速模式。</p>
<p>(7) 连接到相同总线的 IC 数量受到总线的最大电容 400pF 限制 。</p>
</blockquote>
<h3 id="4-SPI"><a href="#4-SPI" class="headerlink" title="4. SPI"></a>4. SPI</h3><ul>
<li>简介</li>
</ul>
<blockquote>
<p>SPI （同步全双工）协议是由摩托罗拉公司提出的通讯协议(Serial Peripheral Interface)，即串行外围设备接口，是一种高速全双工的通信总线。它被广泛地使用在 ADC、 LCD 等设备与 MCU 间，要求通讯速率较高的场合。</p>
</blockquote>
<ul>
<li>特征</li>
</ul>
<blockquote>
</blockquote>
<h3 id="5-CAN"><a href="#5-CAN" class="headerlink" title="5. CAN"></a>5. CAN</h3><ul>
<li>简介</li>
</ul>
<blockquote>
<p>CAN 是控制器局域网络(Controller Area Network)的简称， 它是由研发和生产汽车电子产品著称的德国 BOSCH 公司开发的，并最终成为国际标准（ISO11519） ， 是国际上应用最广泛的现场总线之一。</p>
<p>CAN 总线协议已经成为汽车计算机控制系统和嵌入式工业控制局域网的标准总线，并且拥有以 CAN 为底层协议专为大型货车和重工机械车辆设计的 J1939 协议。近年来， 它具有的高可靠性和良好的错误检测能力受到重视，被广泛应用于汽车计算机控制系统和环境温度恶劣、电磁辐射强及振动大的工业环境。</p>
</blockquote>
<ul>
<li>特征</li>
</ul>
<h3 id="6-USB2-0"><a href="#6-USB2-0" class="headerlink" title="6. USB2.0"></a>6. USB2.0</h3><ul>
<li>简介</li>
</ul>
<blockquote>
<ul>
<li>USB 是一种支持热插拔的高速串行传输总线，使用差分信号来传输数据，最高速度<br>可达 480Mb&#x2F;S。USB 支持“总线供电”和“自供电”两种供电模式。在总线供电模式下，USB2.0设备最多可以获得500mA的电流。</li>
<li>2.USB2.0 被设计成为向下兼容的模式，当有全速 （USB 1.1）或者低速（USB 1.0）设备连接到高速（USB 2.0）主机时，主机可以通过分离传输来支持它们。</li>
<li>3.一条 USB 总线上，可达到的最高传输速度等级由该总线上最慢的“设备”决定，该设备包括主机、HUB以及USB功能设备。</li>
<li>4.USB 体系包括“主机”、“设备”以及“物理连接”三个部分。主机是一个提供USB接口及接口管理能力的硬件、软件及固件的复合体，可以是PC，也可以是OTG设备。一个USB 系统中仅有一个USB主机；</li>
<li>5.设备包括 USB功能设备和 USB HUB，最多支持 127个设备；物理连接即指的是USB 的传输线。在USB 2.0系统中，要求使用屏蔽的双绞线。USB 体系采用分层的星型拓扑来连接所有USB设备。</li>
<li>6.以 HOST-ROOT HUB为起点，最多支持 7 层（Tier），也就是说任何一个USB 系统中最多可以允许 5个 USB HUB 级联。一个复合设备（Compound Device）将同时占据两层或更多的层。</li>
<li>7.一个 USB HOST 最多可以同时支持 128 个地址，地址 0 作为默认地址，只在设备枚举期间临时使用，而不能被分配给任何一个设备，因此一个 USB HOST 最多可以同时支持 127 个地址，如果一个设备只占用一个地址，那么可最多支持 127个 USB设备（含USB HUB）。<br>USB连接器支持热拔插；高速&#x2F;全速USB线缆要求使用内含双绞线的屏蔽线，而且必须打上符合USB使用标记；低速USB推荐但非要求使用双绞线和屏蔽线；</li>
</ul>
</blockquote>
]]></content>
      <tags>
        <tag>笔记</tag>
        <tag>嵌入式</tag>
        <tag>51</tag>
        <tag>STM32</tag>
      </tags>
  </entry>
  <entry>
    <title>模拟电子技术基础</title>
    <url>/2024/02/01/%E6%A8%A1%E6%8B%9F%E7%94%B5%E5%AD%90%E6%8A%80%E6%9C%AF%E5%9F%BA%E7%A1%80/</url>
    <content><![CDATA[<h1 id="模拟电子技术基础"><a href="#模拟电子技术基础" class="headerlink" title="模拟电子技术基础"></a>模拟电子技术基础</h1><h2 id="1-半导体器件"><a href="#1-半导体器件" class="headerlink" title="1.半导体器件"></a>1.半导体器件</h2><ul>
<li><strong>本征半导体</strong>：纯净，具有晶体结构的半导体</li>
<li><strong>N型半导体</strong>：negative，掺入5价元素，多一个电子。</li>
<li><strong>P型半导体</strong>：positive，掺入3价元素，少一个电子。</li>
<li><strong>PN结</strong>：将P型半导体和N型半导体制作在同一硅片上，交界处形成PN结。</li>
<li><strong>空间电荷区</strong>：PN结交接处区域的复合。也称为耗尽层。</li>
</ul>
<h3 id="1-PN结"><a href="#1-PN结" class="headerlink" title="1.PN结"></a>1.PN结</h3><h4 id="1-PN结的伏安特性"><a href="#1-PN结的伏安特性" class="headerlink" title="1.PN结的伏安特性"></a>1.PN结的伏安特性</h4><ul>
<li>反向击穿</li>
</ul>
<blockquote>
<ol>
<li><strong>齐纳击穿</strong>：在高掺杂，耗尽层宽度窄的情况下，较低的反向电压即可击穿</li>
<li><strong>雪崩击穿</strong>：在低掺杂，耗尽层宽度宽的情况下，较高的反向电压可击穿</li>
</ol>
</blockquote>
<h4 id="2-PN结的电容效应"><a href="#2-PN结的电容效应" class="headerlink" title="2.PN结的电容效应"></a>2.PN结的电容效应</h4><ul>
<li>势垒电容</li>
</ul>
<p>​	当PN结的反向电压变化时，空间电荷区的宽度随之变化，耗尽层电荷变化，导致等效电容变化。</p>
<h3 id="2-二极管"><a href="#2-二极管" class="headerlink" title="2.二极管"></a>2.二极管</h3><h4 id="1-伏安特性"><a href="#1-伏安特性" class="headerlink" title="1.伏安特性"></a>1.伏安特性</h4><ul>
<li>同PN结的对比</li>
</ul>
<blockquote>
<ol>
<li>单向导电性</li>
<li>二极管存在半导体体电阻和引线电阻（同电压下正向电压更小）</li>
<li>表面漏电流（反向电流更大）。漏电流（当施加反向电压时，电流仍然流过器件）</li>
</ol>
</blockquote>
<h4 id="2-不同材料二极管的对比"><a href="#2-不同材料二极管的对比" class="headerlink" title="2.不同材料二极管的对比"></a>2.不同材料二极管的对比</h4><table>
<thead>
<tr>
<th>材料</th>
<th>开启电压</th>
<th>导通电压</th>
<th>反向饱和电流</th>
</tr>
</thead>
<tbody><tr>
<td>硅</td>
<td>0.5</td>
<td>0.6-0.8</td>
<td>&lt;0&#x2F;1</td>
</tr>
<tr>
<td>锗</td>
<td>0.1</td>
<td>0.1-0.3</td>
<td>几十</td>
</tr>
</tbody></table>
<h4 id="3-温度的影响"><a href="#3-温度的影响" class="headerlink" title="3.温度的影响"></a>3.温度的影响</h4><ul>
<li>温度越高：正向曲线左移，方向曲线下移</li>
</ul>
<h4 id="4-二极管的参数"><a href="#4-二极管的参数" class="headerlink" title="4.二极管的参数"></a>4.二极管的参数</h4><ul>
<li>If：最大整流电流</li>
<li>UR：最高反向工作电压</li>
<li>IR：反向电流</li>
<li>fM最高反向工作电流</li>
</ul>
<h3 id="3-稳压二极管"><a href="#3-稳压二极管" class="headerlink" title="3.稳压二极管"></a>3.稳压二极管</h3><ul>
<li>反向击穿时在一定功耗损耗范围内端电压几乎不变</li>
</ul>
<h4 id="1-伏安特性-1"><a href="#1-伏安特性-1" class="headerlink" title="1.伏安特性"></a>1.伏安特性</h4><ul>
<li>正向：类似于二极管</li>
<li>反向：电压不变，大到一定程度击穿</li>
</ul>
<h4 id="1-主要参数"><a href="#1-主要参数" class="headerlink" title="1.主要参数"></a>1.主要参数</h4><ul>
<li><p>稳定电压Uz</p>
</li>
<li><p>稳定电流Iz：小于时稳压效果变坏</p>
</li>
<li><p>额定功耗Pzm：最大稳定电流（Izm）与Uz的乘积</p>
</li>
<li><p>在额定功耗内，电流越大稳压效果越好</p>
</li>
</ul>
<p>需串联限流电阻防止烧坏</p>
<h3 id="4-发光二极管（Light-Emit-Diode）"><a href="#4-发光二极管（Light-Emit-Diode）" class="headerlink" title="4.发光二极管（Light Emit Diode）"></a>4.发光二极管（Light Emit Diode）</h3><table>
<thead>
<tr>
<th>颜色</th>
<th>开启电压</th>
</tr>
</thead>
<tbody><tr>
<td>红色</td>
<td>1.6-1.8v</td>
</tr>
<tr>
<td>绿色</td>
<td>2v</td>
</tr>
</tbody></table>
<h3 id="5-光电二极管（Optoelectronic-Diode）"><a href="#5-光电二极管（Optoelectronic-Diode）" class="headerlink" title="5.光电二极管（Optoelectronic Diode）"></a>5.光电二极管（Optoelectronic Diode）</h3><p><img src="/images/analogElectronics/%E5%85%89%E7%94%B5%E4%BA%8C%E6%9E%81%E7%AE%A1%E7%AC%A6%E5%8F%B7.png" alt="符号"></p>
<ul>
<li>暗电流：反向电压下的产生的反向电流。</li>
<li>光电流：反压下受到光照而产生的电流。（照度越大光电流越大）</li>
</ul>
<h3 id="6-变容二极管（Varicap-Diode）"><a href="#6-变容二极管（Varicap-Diode）" class="headerlink" title="6.变容二极管（Varicap Diode）"></a>6.变容二极管（Varicap Diode）</h3><ul>
<li>变容二极管在反向偏置状态下工作，因此没有直流电流流过器件</li>
<li>反向偏置量控制耗尽区的厚度，因此控制变容二极管的结电容</li>
</ul>
<h3 id="7-隧道二极管（Tunnel-Diode）"><a href="#7-隧道二极管（Tunnel-Diode）" class="headerlink" title="7.隧道二极管（Tunnel Diode）"></a>7.隧道二极管（Tunnel Diode）</h3><ul>
<li>隧道二极管常用于<a href="https://zh.wikipedia.org/w/index.php?title=%E9%A0%BB%E7%8E%87%E8%BD%89%E6%8F%9B%E5%99%A8&action=edit&redlink=1">频率转换器</a>和侦测器上</li>
<li>负微分电阻的特性，其也可应用于<a href="https://zh.wikipedia.org/wiki/%E6%8C%AF%E7%9B%AA%E5%99%A8">振荡器</a>、<a href="https://zh.wikipedia.org/wiki/%E6%94%BE%E5%A4%A7%E5%99%A8">放大器</a>以及<a href="https://zh.wikipedia.org/w/index.php?title=%E9%96%8B%E9%97%9C%E9%9B%BB%E8%B7%AF&action=edit&redlink=1">开关电路</a>的迟滞。</li>
</ul>
<h3 id="8-肖特基二极管（Schottky-diode）"><a href="#8-肖特基二极管（Schottky-diode）" class="headerlink" title="8.肖特基二极管（Schottky diode）"></a>8.肖特基二极管（Schottky diode）</h3><ul>
<li>导通电压降较低、允许高速切换的二极管</li>
<li>肖特基二极管的电压降只有 0.15-0.45 伏特，因此可以提升系统的效率。</li>
<li>缺点是其反向偏置较低及反向漏电流偏大</li>
</ul>
<h2 id="2-晶体三极管"><a href="#2-晶体三极管" class="headerlink" title="2.晶体三极管"></a>2.晶体三极管</h2><p>​	晶体三极管又称为双极性晶体管 （BJT）</p>
<h3 id="1-电流放大作用"><a href="#1-电流放大作用" class="headerlink" title="1.电流放大作用"></a>1.电流放大作用</h3><ul>
<li><p>晶体管是放大电路的核心器件。</p>
</li>
<li><p>输入回路：基极-发射极回路。</p>
</li>
<li><p>输出回路：集电极-发射极回路。</p>
</li>
<li><p>共射放大电路： 发射极为输入回路和输出回路公共端</p>
</li>
<li><p>放大状态的外部条件： 发射结正向偏置，集电结反向偏置。</p>
</li>
</ul>
<h3 id="2-共射特性曲线"><a href="#2-共射特性曲线" class="headerlink" title="2.共射特性曲线"></a>2.共射特性曲线</h3><h4 id="1-输入特性曲线"><a href="#1-输入特性曲线" class="headerlink" title="1.输入特性曲线"></a>1.输入特性曲线</h4>]]></content>
      <tags>
        <tag>笔记</tag>
        <tag>模电</tag>
        <tag>电子元件</tag>
        <tag>模拟电路</tag>
      </tags>
  </entry>
  <entry>
    <title>电子电路基础</title>
    <url>/2024/02/06/%E7%94%B5%E5%AD%90%E7%94%B5%E8%B7%AF%E5%9F%BA%E7%A1%80/</url>
    <content><![CDATA[<h1 id="符号"><a href="#符号" class="headerlink" title="符号"></a>符号</h1><ul>
<li><p>VCC：C&#x3D;circuit，表示电路的意思，即接入电路的电压。</p>
</li>
<li><p>VDD：D&#x3D;device，表示器件的意思，即器件内部的工作电压。</p>
</li>
<li><p>VSS：S&#x3D;series，表示公共连接的意思，通常指电路公共接地端电压。</p>
</li>
</ul>
<h1 id="名词"><a href="#名词" class="headerlink" title="名词"></a>名词</h1>]]></content>
      <tags>
        <tag>笔记</tag>
        <tag>模电</tag>
        <tag>电子元件</tag>
        <tag>模拟电路</tag>
        <tag>电路基础</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux Notes</title>
    <url>/2023/11/28/Linux-system-Notes/</url>
    <content><![CDATA[<p>A note about linux basic operation.</p>
<h1 id="系统操作"><a href="#系统操作" class="headerlink" title="*系统操作"></a>*系统操作</h1><h2 id="1-显示后台指令"><a href="#1-显示后台指令" class="headerlink" title="1.显示后台指令"></a>1.显示后台指令</h2><p>​	1.提供所有进程信息</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ps aux</span><br></pre></td></tr></table></figure>

<ol start="2">
<li><h2 id="提供父进程信息"><a href="#提供父进程信息" class="headerlink" title="提供父进程信息"></a>提供父进程信息</h2></li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ps lax</span><br></pre></td></tr></table></figure>

<h2 id="2-终止某项进程"><a href="#2-终止某项进程" class="headerlink" title="2. 终止某项进程"></a>2. 终止某项进程</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">kill pid</span><br></pre></td></tr></table></figure>

<ul>
<li>kill的意思实际上不是“杀死” ， kill 只是像程序发送一个信号</li>
</ul>
<ol start="3">
<li><h2 id="查看硬件信息"><a href="#查看硬件信息" class="headerlink" title="查看硬件信息"></a>查看硬件信息</h2></li>
</ol>
<ul>
<li>查看内存占用和 swap 分区占用</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">free -h</span><br></pre></td></tr></table></figure>

<ul>
<li><h2 id="查看CPU使用情况"><a href="#查看CPU使用情况" class="headerlink" title="查看CPU使用情况"></a>查看CPU使用情况</h2></li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">top</span><br></pre></td></tr></table></figure>

<h1 id="文件操作"><a href="#文件操作" class="headerlink" title="*文件操作"></a>*文件操作</h1><h2 id="vim-编辑器"><a href="#vim-编辑器" class="headerlink" title="vim 编辑器"></a>vim 编辑器</h2><p><img src="https://www.runoob.com/wp-content/uploads/2015/10/vi-vim-cheat-sheet-sch.gif" alt="img"></p>
<h2 id="more"><a href="#more" class="headerlink" title="more"></a>more</h2><ul>
<li>空白键 (space)：代表向下翻一页；</li>
<li>Enter     ：代表向下翻『一行』；</li>
<li>&#x2F;字串     ：代表在这个显示的内容当中，向下搜寻『字串』这个关键字；</li>
<li>:f      ：立刻显示出档名以及目前显示的行数；</li>
<li>q       ：代表立刻离开 more ，不再显示该文件内容。</li>
<li>b 或 [ctrl]-b ：代表往回翻页，不过这动作只对文件有用，对管线无用。</li>
</ul>
<h2 id="less"><a href="#less" class="headerlink" title="less"></a>less</h2><ul>
<li>空白键  ：向下翻动一页；</li>
<li>[pagedown]：向下翻动一页；</li>
<li>[pageup] ：向上翻动一页；</li>
<li><strong>&#x2F;字串   ：向下搜寻『字串』的功能；</strong></li>
<li><strong>?字串   ：向上搜寻『字串』的功能；</strong></li>
<li><strong>n     ：重复前一个搜寻 (与 &#x2F; 或 ? 有关！)</strong></li>
<li><strong>N     ：反向的重复前一个搜寻 (与 &#x2F; 或 ? 有关！)</strong></li>
<li>q     ：离开 less 这个程序；</li>
</ul>
<h2 id="head"><a href="#head" class="headerlink" title="head"></a>head</h2><p>​	读取前几行文本</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">head -n 20 text.txt</span><br></pre></td></tr></table></figure>

<h2 id="tail"><a href="#tail" class="headerlink" title="tail"></a>tail</h2><p>​	与head相反</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">tail -n 20 text.txt</span><br></pre></td></tr></table></figure>

<h2 id="使用gzip进行压缩和解压缩"><a href="#使用gzip进行压缩和解压缩" class="headerlink" title="使用gzip进行压缩和解压缩"></a>使用gzip进行压缩和解压缩</h2><p>​	压缩：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">gzip linuxFiles.tar</span><br></pre></td></tr></table></figure>

<p>​	</p>
<p>​	解压缩： </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">gunzip linuxFiles.tar.gz</span><br><span class="line">gzip -d linuxFiles.tar.gz</span><br></pre></td></tr></table></figure>

<p>2.文件打包tar</p>
<p>​	1.打包文件</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">tar -cvf linuxFiles.tar home/</span><br></pre></td></tr></table></figure>

<p>​	2.解开打包后的文件</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">tar -xvf linuxFiles.tar</span><br></pre></td></tr></table></figure>

<pre><code>3. tar -w 选项，每次将选择单个文件抽出或加入
</code></pre>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">tar -xvwf linuxFiles.tar //</span><br></pre></td></tr></table></figure>

<ol start="4">
<li>tar -z 自动调用gzip进行解压缩</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">tar -czvf linuxFiles.tar.gz home/</span><br><span class="line">等价于</span><br><span class="line">tar -cvf linuxFiles.tar home/</span><br><span class="line">gzip linuxFiles.tar</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">tar -xzvf linuxFiles.tar.gz home/</span><br><span class="line">等价于</span><br><span class="line">gzip -d linuxFiles.tar.gz</span><br><span class="line">tar -xvf linuxFiles.tar</span><br></pre></td></tr></table></figure>

<h1 id="用户权限"><a href="#用户权限" class="headerlink" title="*用户权限"></a>*用户权限</h1><p><img src="https://www.runoob.com/wp-content/uploads/2014/06/file-llls22.jpg" alt="img"></p>
<h1 id="开放端口"><a href="#开放端口" class="headerlink" title="*开放端口"></a>*开放端口</h1><h2 id="1-查看端口"><a href="#1-查看端口" class="headerlink" title="1. 查看端口"></a>1. 查看端口</h2><h3 id="1-查看某个端口（使用管道-过滤）"><a href="#1-查看某个端口（使用管道-过滤）" class="headerlink" title="1.查看某个端口（使用管道+过滤）"></a>1.查看某个端口（使用管道+过滤）</h3><h4 id="1-一般情况下"><a href="#1-一般情况下" class="headerlink" title="1. 一般情况下"></a>1. 一般情况下</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">netstat -anp | grep 8080  <span class="comment"># -a(all)n(numeric)p(programs)</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="2-netstat的其他参数"><a href="#2-netstat的其他参数" class="headerlink" title="2. netstat的其他参数"></a>2. netstat的其他参数</h4><blockquote>
<p>-a (all) 显示所有选项，默认不显示LISTEN相关。<br>-t (tcp) 仅显示tcp相关选项。<br>-u (udp) 仅显示udp相关选项。<br>-n 拒绝显示别名，能显示数字的全部转化成数字。<br>-l 仅列出有在 Listen (监听) 的服务状态。<br>-p 显示建立相关链接的程序名<br>-r 显示路由信息，路由表<br>-e 显示扩展信息，例如 uid 等<br>-s 按各个协议进行统计<br>-c 每隔一个固定时间，执行该 netstat 命令<br>LISTEN 和 LISTENING 的状态只有用 -a 或者 -l 才能看到</p>
</blockquote>
<h2 id="2-开放端口-通用"><a href="#2-开放端口-通用" class="headerlink" title="2.开放端口(通用)"></a>2.开放端口(通用)</h2><h3 id="1-防火墙的设置"><a href="#1-防火墙的设置" class="headerlink" title="1.防火墙的设置"></a>1.防火墙的设置</h3><p><strong>防火墙这一块后续还需要学习一下，很多情况下我都是直接关。。。</strong></p>
<h4 id="1-查看防火墙状态"><a href="#1-查看防火墙状态" class="headerlink" title="1. 查看防火墙状态"></a>1. 查看防火墙状态</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">systemctl status firewalld</span><br></pre></td></tr></table></figure>

<p>或者（ufw）</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo ufw status</span><br></pre></td></tr></table></figure>



<h4 id="2-开启防火墙"><a href="#2-开启防火墙" class="headerlink" title="2.开启防火墙"></a>2.开启防火墙</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">systemctl start firewalld</span><br><span class="line">systemctl <span class="built_in">enable</span> firewalld</span><br></pre></td></tr></table></figure>

<p>或者（ufw）</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo ufw <span class="built_in">enable</span></span><br></pre></td></tr></table></figure>



<h4 id="3-关闭防火墙"><a href="#3-关闭防火墙" class="headerlink" title="3. 关闭防火墙"></a>3. 关闭防火墙</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">systemctl stop firewalld</span><br></pre></td></tr></table></figure>

<p>或者（ufw）</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo ufw <span class="built_in">disable</span></span><br></pre></td></tr></table></figure>



<h3 id="2-端口操作"><a href="#2-端口操作" class="headerlink" title="2.端口操作"></a>2.端口操作</h3><h4 id="1-开放端口"><a href="#1-开放端口" class="headerlink" title="1.开放端口"></a>1.开放端口</h4><ul>
<li>例如开放ssh端口</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">firewall-cmd --zone=public --add-port=22/tcp --permanent</span><br></pre></td></tr></table></figure>

<ul>
<li>使之生效</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">firewall-cmd --reload</span><br></pre></td></tr></table></figure>

<ul>
<li>检查是否生效</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">firewall-cmd --zone=public --query-port=22/tcp</span><br></pre></td></tr></table></figure>

<p>或者</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo ufw allow 端口</span><br></pre></td></tr></table></figure>

<h4 id="2-关闭端口"><a href="#2-关闭端口" class="headerlink" title="2.关闭端口"></a>2.关闭端口</h4><ul>
<li>限制ssh端口</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">firewall-cmd --zone=public --remove-port=22/tcp --permanent</span><br></pre></td></tr></table></figure>

<p>或者（ufw）</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo ufw denty 端口</span><br></pre></td></tr></table></figure>

<h1 id="任务调度"><a href="#任务调度" class="headerlink" title="*任务调度"></a>*任务调度</h1><h2 id="关键词"><a href="#关键词" class="headerlink" title="关键词"></a>关键词</h2><blockquote>
<ul>
<li><strong>任务调度</strong>：系统在某个时间定时执行特定的命令或程序</li>
<li>任务调度的分类：<ul>
<li><strong>系统任务调度</strong>：系统某些工作需要周而复始、重复地执行，如病毒扫描、日志清理</li>
<li><strong>用户任务调度</strong>：个别用户可能需要定时执行的工作，如备份数据库、用户数据备份</li>
</ul>
</li>
</ul>
</blockquote>
<h2 id="crontab"><a href="#crontab" class="headerlink" title="crontab"></a>crontab</h2><ul>
<li>基本介绍</li>
</ul>
<blockquote>
<ol>
<li>系统任务调度配置文件目录：<code>/etc/crontab</code></li>
<li>用户的crontab文件放置于<code>/var/spool/cron</code></li>
</ol>
</blockquote>
<ul>
<li>指令介绍</li>
</ul>
<ol>
<li>参数选项</li>
</ol>
<table>
<thead>
<tr>
<th align="center">参数</th>
<th>解释</th>
</tr>
</thead>
<tbody><tr>
<td align="center">-e</td>
<td>e是edit的意识，即编辑&#x2F;设置&#x2F;修改当前用户的定时任务</td>
</tr>
<tr>
<td align="center">-l</td>
<td>l是list的意思，即列出&#x2F;查看&#x2F;打印&#x2F;输出当前用户的全部定时任务</td>
</tr>
<tr>
<td align="center">-r</td>
<td>r是remove的意思，即移除&#x2F;删除当前用户的全部定时任务</td>
</tr>
</tbody></table>
<ol start="2">
<li>语法介绍</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Example of job definition:</span></span><br><span class="line"><span class="comment"># .---------------- minute (0 - 59)</span></span><br><span class="line"><span class="comment"># |  .------------- hour (0 - 23)</span></span><br><span class="line"><span class="comment"># |  |  .---------- day of month (1 - 31)</span></span><br><span class="line"><span class="comment"># |  |  |  .------- month (1 - 12) OR jan,feb,mar,apr ...</span></span><br><span class="line"><span class="comment"># |  |  |  |  .---- day of week (0 - 6) (Sunday=0 or 7) OR sun,mon,tue,wed,thu,fri,sat</span></span><br><span class="line"><span class="comment"># |  |  |  |  |</span></span><br><span class="line"><span class="comment"># *  *  *  *  * user-name command to be executed</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>开头<code>*  *  *  *  * </code>参数的解释</li>
</ul>
<table>
<thead>
<tr>
<th>符号</th>
<th>案例</th>
<th>解释</th>
</tr>
</thead>
<tbody><tr>
<td>*</td>
<td>1 2 * * *</td>
<td>每天的2:01执行一次</td>
</tr>
<tr>
<td>*&#x2F;n</td>
<td>*&#x2F;5 * * * *</td>
<td>每隔5分钟执行一次</td>
</tr>
<tr>
<td>,(和)</td>
<td>1 2 3,4 * *</td>
<td>每月的3,4日2:01执行一次</td>
</tr>
<tr>
<td>-（范围）</td>
<td>1 2 3-6 * *</td>
<td>每月的3-6日2:01执行一次</td>
</tr>
</tbody></table>
<ul>
<li>使用方法</li>
</ul>
<ol>
<li>进入编辑模式</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">crontab -e</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>编写任务</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Edit this file to introduce tasks to be run by cron.</span></span><br><span class="line"><span class="comment"># </span></span><br><span class="line"><span class="comment"># Each task to run has to be defined through a single line</span></span><br><span class="line"><span class="comment"># indicating with different fields when the task will be run</span></span><br><span class="line"><span class="comment"># and what command to run for the task</span></span><br><span class="line"><span class="comment"># </span></span><br><span class="line"><span class="comment"># To define the time you can provide concrete values for</span></span><br><span class="line"><span class="comment"># minute (m), hour (h), day of month (dom), month (mon),</span></span><br><span class="line"><span class="comment"># and day of week (dow) or use &#x27;*&#x27; in these fields (for &#x27;any&#x27;).</span></span><br><span class="line"><span class="comment"># </span></span><br><span class="line"><span class="comment"># Notice that tasks will be started based on the cron&#x27;s system</span></span><br><span class="line"><span class="comment"># daemon&#x27;s notion of time and timezones.</span></span><br><span class="line"><span class="comment"># </span></span><br><span class="line"><span class="comment"># Output of the crontab jobs (including errors) is sent through</span></span><br><span class="line"><span class="comment"># email to the user the crontab file belongs to (unless redirected).</span></span><br><span class="line"><span class="comment"># </span></span><br><span class="line"><span class="comment"># For example, you can run a backup of all your user accounts</span></span><br><span class="line"><span class="comment"># at 5 a.m every week with:</span></span><br><span class="line"><span class="comment"># 0 5 * * 1 tar -zcf /var/backups/home.tgz /home/</span></span><br><span class="line"><span class="comment"># </span></span><br><span class="line"><span class="comment"># For more information see the manual pages of crontab(5) and cron(8)</span></span><br><span class="line"><span class="comment"># </span></span><br><span class="line"><span class="comment"># m h  dom mon dow   command</span></span><br></pre></td></tr></table></figure>

<ul>
<li>编辑后保存退出即可</li>
</ul>
<h1 id="磁盘，分区，挂载操作"><a href="#磁盘，分区，挂载操作" class="headerlink" title="* 磁盘，分区，挂载操作"></a>* 磁盘，分区，挂载操作</h1><h2 id="linux硬盘文件系统介绍"><a href="#linux硬盘文件系统介绍" class="headerlink" title="linux硬盘文件系统介绍:"></a>linux硬盘文件系统介绍:</h2><h3 id="ext4"><a href="#ext4" class="headerlink" title="ext4:"></a>ext4:</h3><ul>
<li><p>与ext3相比，ext4文件系统可支持最高1EB的分区与最大16TB的文件</p>
</li>
<li><p>拓展了子目录的数量，理论上可以无限个</p>
</li>
<li><p>与ext3相比，引入了块组的概念，提高了存取的效率</p>
</li>
<li><p>预留空间、延迟获取空间，减少了文件的分散</p>
</li>
<li><p>更详细的inodes，提高了系统的性能</p>
</li>
<li><p>可以实现快速的文件系统检查</p>
</li>
<li><p>提供日志校验和，提高了可靠性</p>
</li>
</ul>
<h2 id="查看设备挂载情况"><a href="#查看设备挂载情况" class="headerlink" title="查看设备挂载情况"></a>查看设备挂载情况</h2><ol>
<li>所有设备</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">lsblk</span><br><span class="line">lsblk -f</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>查看硬盘使用情况</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">df</span> -h</span><br></pre></td></tr></table></figure>



<h2 id="新硬盘的分区以及挂载流程"><a href="#新硬盘的分区以及挂载流程" class="headerlink" title="新硬盘的分区以及挂载流程"></a>新硬盘的分区以及挂载流程</h2><ol>
<li>查看是否已经存在设备</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">lsblk</span><br><span class="line">lsblk -f</span><br></pre></td></tr></table></figure>

<p>或者查看<code>/dev/</code>下是否存在设备</p>
<ol start="2">
<li>使用fdisk进行分区设置</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">fdisk /dev/sdb</span><br></pre></td></tr></table></figure>

<p>​	3.分区格式化</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mkfs  -t  ext4     /dev/sdb1</span><br></pre></td></tr></table></figure>

<ol start="4">
<li>挂载硬盘到文件夹</li>
</ol>
<p>使用<code>mount</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mount /dev/sdb1 /newDisk</span><br></pre></td></tr></table></figure>

<ol start="5">
<li>取消挂载</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">unmount /dev/sdb1</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>笔记</tag>
        <tag>linux</tag>
        <tag>system</tag>
      </tags>
  </entry>
  <entry>
    <title>MQTT服务器搭建（mosquitto）</title>
    <url>/2024/02/09/MQTT%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%90%AD%E5%BB%BA%EF%BC%88mosquitto%EF%BC%89/</url>
    <content><![CDATA[<h1 id="MQTT服务器搭建（mosquitto）"><a href="#MQTT服务器搭建（mosquitto）" class="headerlink" title="MQTT服务器搭建（mosquitto）"></a>MQTT服务器搭建（mosquitto）</h1><h2 id="0-简介"><a href="#0-简介" class="headerlink" title="0.简介"></a>0.简介</h2><ol>
<li>简介</li>
</ol>
<blockquote>
<p>MQTT也称为”消息代理”（Broker）。</p>
<p>MQTT是一个基于客户端-服务器的消息发布&#x2F;订阅传输协议。MQTT协议是轻量、简单、开放和易于实现的，这些特点使它适用范围非常广泛。在很多情况下，包括受限的环境中，如：机器与机器（M2M）通信和物联网（IoT）。其在，通过卫星链路通信传感器、偶尔拨号的医疗设备、智能家居、及一些小型化设备中已广泛使用。</p>
</blockquote>
<ol start="2">
<li>原理</li>
</ol>
<blockquote>
<p>MQTT协议原理<br>MQTT协议实现方式<br>实现MQTT协议需要客户端和服务器端通讯完成，在通讯过程中，MQTT协议中有三种身份：发布者（Publish）、代理（Broker）（服务器）、订阅者（Subscribe）。其中，消息的发布者和订阅者都是客户端，消息代理是服务器，消息发布者可以同时是订阅者。</p>
<p>MQTT传输的消息分为：主题（Topic）和负载（payload）两部分：</p>
<p>（1）Topic，可以理解为消息的类型，订阅者订阅（Subscribe）后，就会收到该主题的消息内容（payload）</p>
<p>（2）payload，可以理解为消息的内容，是指订阅者具体要使用的内容。</p>
</blockquote>
<h2 id="1-mosquitto-服务端"><a href="#1-mosquitto-服务端" class="headerlink" title="1. mosquitto 服务端"></a>1. mosquitto 服务端</h2><ul>
<li>安装</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">apt install mosquitto</span><br></pre></td></tr></table></figure>

<ul>
<li>配置</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /etc/mosquitto</span><br></pre></td></tr></table></figure>

<ul>
<li>修改配置文件</li>
</ul>
<p>​				在 <strong>&#x2F;etc&#x2F;mosquitto&#x2F;conf.d</strong>目录下有一个叫 README 的文件，上面写了信息：</p>
<blockquote>
<h1 id="Any-files-placed-in-this-directory-that-have-a-conf-ending-will-be-loaded-as-config-files-by-the-broker-Use-this-to-make-your-local-config"><a href="#Any-files-placed-in-this-directory-that-have-a-conf-ending-will-be-loaded-as-config-files-by-the-broker-Use-this-to-make-your-local-config" class="headerlink" title="Any files placed in this directory that have a .conf ending will be loaded as config files by the broker. Use this to make your local config."></a>Any files placed in this directory that have a .conf ending will be loaded as config files by the broker. Use this to make your local config.</h1></blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /etc/mosquitto/conf.d</span><br><span class="line"></span><br><span class="line">vim config.conf</span><br><span class="line"><span class="comment"># 添加下面配置</span></span><br><span class="line"><span class="comment"># 不允许匿名访问</span></span><br><span class="line">allow_anonymous <span class="literal">false</span></span><br><span class="line"><span class="comment"># 配置端口</span></span><br><span class="line">listener 1883</span><br><span class="line"><span class="comment"># 设置密码文件保存目录</span></span><br><span class="line">password_file /etc/mosquitto/pwfile.example</span><br></pre></td></tr></table></figure>

<ul>
<li>运行配置文件</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mosquitto -c /etc/mosquitto/conf.d/config.conf -v</span><br></pre></td></tr></table></figure>

<ul>
<li>添加用户</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mosquitto_passwd -c /etc/mosquitto/pwfile.example username</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>关闭防火墙！！！</strong></li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ufw <span class="built_in">disable</span></span><br><span class="line"><span class="comment"># 或者添加规则</span></span><br><span class="line">ufw allow 1883</span><br></pre></td></tr></table></figure>

<h2 id="2-mosquitto-clients-客户端"><a href="#2-mosquitto-clients-客户端" class="headerlink" title="2. mosquitto-clients 客户端"></a>2. mosquitto-clients 客户端</h2><ul>
<li>用户登录订阅，发布</li>
</ul>
<p>​	其实一般都是接近被控设备的系统，比如各种Mcu（esp32，esp8266）等等。这部分将在寒假进行补充（在另外一篇博客）。<a href="https://regenm.gitee.io/">esp8266或者esp32等</a></p>
<p>对于Linux客户，可以是模拟器（ ISH ，Termux）</p>
<ul>
<li>安装</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">apt install mosquitto-clients</span><br></pre></td></tr></table></figure>

<ul>
<li>订阅</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mosquitto_sub -h <span class="string">&quot;IP address&quot;</span> -p 1883 -u username -P regen -t <span class="string">&quot;test&quot;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>发布</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mosquitto_pub -h <span class="string">&quot;IP address&quot;</span> -p 1883 -u username -P regen -t <span class="string">&quot;test&quot;</span> -m <span class="string">&quot;hello mqtt! hello ! mosquitto!&quot;</span></span><br></pre></td></tr></table></figure>

<h2 id="3-mosquitto使用"><a href="#3-mosquitto使用" class="headerlink" title="3. mosquitto使用"></a>3. mosquitto使用</h2><ul>
<li><strong>脚本制作</strong></li>
</ul>
<p>​				为了方便 mosquitto 的使用，可以写几个脚本用于发布和订阅</p>
<ol>
<li>发布</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim regenMosquittoScriptSendRemote.sh</span><br><span class="line"></span><br><span class="line"><span class="comment">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line">mosquitto_pub -h <span class="string">&quot;IP address&quot;</span> -p 1883 -u username -P regen -t <span class="string">&quot;test&quot;</span> -m <span class="string">&quot;<span class="variable">$1</span>&quot;</span></span><br></pre></td></tr></table></figure>

<p>​	赋权</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">chmod</span> 777 regenMosquittoScriptSendRemote.sh</span><br></pre></td></tr></table></figure>

<p>​	运行</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./regenMosquittoScriptSendRemote.sh hello!</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>订阅，同理</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim regenMosquittoScriptSubRemote.sh</span><br><span class="line"></span><br><span class="line"><span class="comment">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line">mosquitto_sub -h <span class="string">&quot;IP address&quot;</span> -p 1883 -u username -P regen -t <span class="string">&quot;<span class="variable">$1</span>&quot;</span></span><br></pre></td></tr></table></figure>

<p>​	赋权</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">chmod</span> 777 regenMosquittoScriptSubRemote.sh</span><br></pre></td></tr></table></figure>

<p>​	运行</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./regenMosquittoScriptSendRemote.sh topic</span><br></pre></td></tr></table></figure>

<ul>
<li>连接esp32或8266</li>
</ul>
<p>看看这个esp8266连接mqtt服务器的项目吗？(<a href="https://regenm.gitee.io/2024/02/09/esp8266%E8%BF%9E%E6%8E%A5%E6%9C%8D%E5%8A%A1%E5%99%A8%EF%BC%88%E5%9F%BA%E4%BA%8Emosquitto%E7%9A%84mqtt-server%EF%BC%89/">esp8266连接服务器（基于mosquitto的mqtt server） | Regen (gitee.io)</a></p>
]]></content>
      <tags>
        <tag>笔记</tag>
        <tag>linux</tag>
        <tag>mqtt</tag>
        <tag>IoT</tag>
        <tag>mosquitto</tag>
      </tags>
  </entry>
  <entry>
    <title>esp8266连接服务器（基于mosquitto的mqtt server）</title>
    <url>/2024/02/09/esp8266%E8%BF%9E%E6%8E%A5%E6%9C%8D%E5%8A%A1%E5%99%A8%EF%BC%88%E5%9F%BA%E4%BA%8Emosquitto%E7%9A%84mqtt-server%EF%BC%89/</url>
    <content><![CDATA[<ul>
<li><p>Time：2024-02-09 00:39:50</p>
</li>
<li><p>还挺兴奋的，这个项目算是我自己搭建云服务器的最后一步。</p>
</li>
</ul>
<h1 id="idea"><a href="#idea" class="headerlink" title="idea"></a>idea</h1><p>​	起因是想要自己搭建云服务器，同时还想要利用手上已经有的esp8266开发板实现对该服务器的远程控制（开关机）。</p>
<p>​	本来打算整一个备用电源给服务器供电，奈何这台服务器是普通PC，即使配置已经很低（与现代PC比较为拉胯，但是比大多数出售的服务器例如某云2核4g更加）但功耗的保守估计已经超过70w。</p>
<p>​	于是便打算使用远程开关降低平均功耗。同时进行物联网方面知识的扫盲与学习。</p>
<h1 id="过程"><a href="#过程" class="headerlink" title="过程"></a>过程</h1><h2 id="1-前期准备"><a href="#1-前期准备" class="headerlink" title="1.前期准备"></a>1.前期准备</h2><p>​	首先，在已经搭建好的mqtt服务器上创建了用户<code>user</code>和密码<code>passwd</code>，同时处于安全性考虑禁止匿名访问。<a href="https://regenm.gitee.io/2024/02/09/MQTT%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%90%AD%E5%BB%BA%EF%BC%88mosquitto%EF%BC%89/">配置mqtt服务器的过程</a>)</p>
<p>​	创建好测试主题（topic）<code>test</code>后进行测试。多平台测试收发message没问题。</p>
<h2 id="2-中期打BOSS"><a href="#2-中期打BOSS" class="headerlink" title="2.中期打BOSS"></a>2.中期打BOSS</h2><p>​	接下来就是攻克esp8266这边的问题了。</p>
<ul>
<li>问题一：esp8266开发环境</li>
</ul>
<p>​	由于这块esp8266开发板是我在高中时期玩的，那时候的电脑早已坏掉，这台电脑的arduinoIDE 还未配置esp8266的环境。</p>
<p>​	本来打算使用platformIO但是太慢了，在下载框架以及支持的时候解决了ide的问题。。。</p>
<blockquote>
<p>需要配置：</p>
<ul>
<li>添加支持esp8266开发板</li>
</ul>
<p>方法一：ide设置里的 Additional boards manager URLs添加<code>http://arduino.esp8266.com/stable/package_esp8266com_index.json</code></p>
<p>方法二：手动添加：下载esp8266_package_installer直接离线下载</p>
<ul>
<li>增加库：<ul>
<li><code>&lt;PubSubClient.h&gt;</code></li>
<li><code>ESP8266WiFi.h</code></li>
</ul>
</li>
</ul>
</blockquote>
<ul>
<li>问题二：esp8266连接不成功</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">MQTT Server Connect Failed. Client State:-2</span><br><span class="line">MQTT Server Connect Failed. Client State:-2</span><br><span class="line">MQTT Server Connect Failed. Client State:-2</span><br><span class="line">MQTT Server Connect Failed. Client State:-2</span><br><span class="line">MQTT Server Connect Failed. Client State:-2</span><br><span class="line">MQTT Server Connect Failed. Client State:-2</span><br></pre></td></tr></table></figure>

<p>​		其实主要是平台的问题，8266，以及PubSubClient.h库中的案例程序和大多数网上教程都是使用的别人的mqtt服务器，他们往往不需要提供账号密码等等。例如</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> Basic MQTT example</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> This sketch demonstrates the basic capabilities of the library.</span></span><br><span class="line"><span class="comment"> It connects to an MQTT server then:</span></span><br><span class="line"><span class="comment">  - publishes &quot;hello world&quot; to the topic &quot;outTopic&quot;</span></span><br><span class="line"><span class="comment">  - subscribes to the topic &quot;inTopic&quot;, printing out any messages</span></span><br><span class="line"><span class="comment">    it receives. NB - it assumes the received payloads are strings not binary</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> It will reconnect to the server if the connection is lost using a blocking</span></span><br><span class="line"><span class="comment"> reconnect function. See the &#x27;mqtt_reconnect_nonblocking&#x27; example for how to</span></span><br><span class="line"><span class="comment"> achieve the same result without blocking the main loop.</span></span><br><span class="line"><span class="comment"> </span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;SPI.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;Ethernet.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;PubSubClient.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Update these with values suitable for your network.</span></span><br><span class="line">byte mac[]    = &#123;  <span class="number">0xDE</span>, <span class="number">0xED</span>, <span class="number">0xBA</span>, <span class="number">0xFE</span>, <span class="number">0xFE</span>, <span class="number">0xED</span> &#125;;</span><br><span class="line"><span class="function">IPAddress <span class="title">ip</span><span class="params">(<span class="number">172</span>, <span class="number">16</span>, <span class="number">0</span>, <span class="number">100</span>)</span></span>;</span><br><span class="line"><span class="function">IPAddress <span class="title">server</span><span class="params">(<span class="number">172</span>, <span class="number">16</span>, <span class="number">0</span>, <span class="number">2</span>)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">callback</span><span class="params">(<span class="type">char</span>* topic, byte* payload, <span class="type">unsigned</span> <span class="type">int</span> length)</span> </span>&#123;</span><br><span class="line">  Serial.<span class="built_in">print</span>(<span class="string">&quot;Message arrived [&quot;</span>);</span><br><span class="line">  Serial.<span class="built_in">print</span>(topic);</span><br><span class="line">  Serial.<span class="built_in">print</span>(<span class="string">&quot;] &quot;</span>);</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">0</span>;i&lt;length;i++) &#123;</span><br><span class="line">    Serial.<span class="built_in">print</span>((<span class="type">char</span>)payload[i]);</span><br><span class="line">  &#125;</span><br><span class="line">  Serial.<span class="built_in">println</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">EthernetClient ethClient;</span><br><span class="line"><span class="function">PubSubClient <span class="title">client</span><span class="params">(ethClient)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">reconnect</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="comment">// Loop until we&#x27;re reconnected</span></span><br><span class="line">  <span class="keyword">while</span> (!client.<span class="built_in">connected</span>()) &#123;</span><br><span class="line">    Serial.<span class="built_in">print</span>(<span class="string">&quot;Attempting MQTT connection...&quot;</span>);</span><br><span class="line">    <span class="comment">// Attempt to connect</span></span><br><span class="line">      <span class="comment">/*----------------------------区别（报错位置）---------------------------*/</span></span><br><span class="line">    <span class="keyword">if</span> (client.<span class="built_in">connect</span>(<span class="string">&quot;arduinoClient&quot;</span>)) &#123;</span><br><span class="line">      <span class="comment">/*----------------------------区别（报错位置）---------------------------*/</span></span><br><span class="line">      Serial.<span class="built_in">println</span>(<span class="string">&quot;connected&quot;</span>);</span><br><span class="line">      <span class="comment">// Once connected, publish an announcement...</span></span><br><span class="line">      client.<span class="built_in">publish</span>(<span class="string">&quot;outTopic&quot;</span>,<span class="string">&quot;hello world&quot;</span>);</span><br><span class="line">      <span class="comment">// ... and resubscribe</span></span><br><span class="line">      client.<span class="built_in">subscribe</span>(<span class="string">&quot;inTopic&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      Serial.<span class="built_in">print</span>(<span class="string">&quot;failed, rc=&quot;</span>);</span><br><span class="line">      Serial.<span class="built_in">print</span>(client.<span class="built_in">state</span>());</span><br><span class="line">      Serial.<span class="built_in">println</span>(<span class="string">&quot; try again in 5 seconds&quot;</span>);</span><br><span class="line">      <span class="comment">// Wait 5 seconds before retrying</span></span><br><span class="line">      <span class="built_in">delay</span>(<span class="number">5000</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">setup</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  Serial.<span class="built_in">begin</span>(<span class="number">57600</span>);</span><br><span class="line"></span><br><span class="line">  client.<span class="built_in">setServer</span>(server, <span class="number">1883</span>);</span><br><span class="line">  client.<span class="built_in">setCallback</span>(callback);</span><br><span class="line"></span><br><span class="line">  Ethernet.<span class="built_in">begin</span>(mac, ip);</span><br><span class="line">  <span class="comment">// Allow the hardware to sort itself out</span></span><br><span class="line">  <span class="built_in">delay</span>(<span class="number">1500</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">loop</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (!client.<span class="built_in">connected</span>()) &#123;</span><br><span class="line">    <span class="built_in">reconnect</span>();</span><br><span class="line">  &#125;</span><br><span class="line">  client.<span class="built_in">loop</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>​	以及太极创客的代码</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**********************************************************************</span></span><br><span class="line"><span class="comment">项目名称/Project          : 零基础入门学用物联网</span></span><br><span class="line"><span class="comment">程序名称/Program name     : publish_ranye_url</span></span><br><span class="line"><span class="comment">团队/Team                : 太极创客团队 / Taichi-Maker (www.taichi-maker.com)</span></span><br><span class="line"><span class="comment">作者/Author              : CYNO朔</span></span><br><span class="line"><span class="comment">日期/Date（YYYYMMDD）     : 20200813</span></span><br><span class="line"><span class="comment">程序目的/Purpose          : </span></span><br><span class="line"><span class="comment">本程序旨在演示如何使用PubSubClient库使用ESP8266向MQTT服务器发布信息。</span></span><br><span class="line"><span class="comment">-----------------------------------------------------------------------</span></span><br><span class="line"><span class="comment">本示例程序为太极创客团队制作的《零基础入门学用物联网》中示例程序。</span></span><br><span class="line"><span class="comment">该教程为对物联网开发感兴趣的朋友所设计和制作。如需了解更多该教程的信息，请参考以下网页：</span></span><br><span class="line"><span class="comment">http://www.taichi-maker.com/homepage/esp8266-nodemcu-iot/iot-c/esp8266-nodemcu-web-client/http-request/</span></span><br><span class="line"><span class="comment">***********************************************************************/</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;ESP8266WiFi.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;PubSubClient.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;Ticker.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置wifi接入信息(请根据您的WiFi信息进行修改)</span></span><br><span class="line"><span class="type">const</span> <span class="type">char</span>* ssid = <span class="string">&quot;lkw&quot;</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">char</span>* password = <span class="string">&quot;01234567890&quot;</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">char</span>* mqttServer = <span class="string">&quot;192.168.43.61&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 如以上MQTT服务器无法正常连接，请前往以下页面寻找解决方案</span></span><br><span class="line"><span class="comment">// http://www.taichi-maker.com/public-mqtt-broker/</span></span><br><span class="line"></span><br><span class="line">Ticker ticker;</span><br><span class="line">WiFiClient wifiClient;</span><br><span class="line"><span class="function">PubSubClient <span class="title">mqttClient</span><span class="params">(wifiClient)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> count;    <span class="comment">// Ticker计数用变量</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">setup</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  Serial.<span class="built_in">begin</span>(<span class="number">9600</span>);</span><br><span class="line">  </span><br><span class="line">  <span class="comment">//设置ESP8266工作模式为无线终端模式</span></span><br><span class="line">  WiFi.<span class="built_in">mode</span>(WIFI_STA);</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 连接WiFi</span></span><br><span class="line">  <span class="built_in">connectWifi</span>();</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 设置MQTT服务器和端口号</span></span><br><span class="line">  mqttClient.<span class="built_in">setServer</span>(mqttServer, <span class="number">1883</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 连接MQTT服务器</span></span><br><span class="line">  <span class="built_in">connectMQTTServer</span>();</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Ticker定时对象</span></span><br><span class="line">  ticker.<span class="built_in">attach</span>(<span class="number">1</span>, tickerCount);  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">loop</span><span class="params">()</span> </span>&#123; </span><br><span class="line">  <span class="keyword">if</span> (mqttClient.<span class="built_in">connected</span>()) &#123; <span class="comment">// 如果开发板成功连接服务器</span></span><br><span class="line">    <span class="comment">// 每隔3秒钟发布一次信息</span></span><br><span class="line">    <span class="keyword">if</span> (count &gt;= <span class="number">3</span>)&#123;</span><br><span class="line">      <span class="built_in">pubMQTTmsg</span>();</span><br><span class="line">      count = <span class="number">0</span>;</span><br><span class="line">    &#125;    </span><br><span class="line">    <span class="comment">// 保持心跳</span></span><br><span class="line">    mqttClient.<span class="built_in">loop</span>();</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;                  <span class="comment">// 如果开发板未能成功连接服务器</span></span><br><span class="line">    <span class="built_in">connectMQTTServer</span>();    <span class="comment">// 则尝试连接服务器</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">tickerCount</span><span class="params">()</span></span>&#123;</span><br><span class="line">  count++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*----------------------------区别（报错位置）---------------------------*/</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">connectMQTTServer</span><span class="params">()</span></span>&#123;</span><br><span class="line">  <span class="comment">// 根据ESP8266的MAC地址生成客户端ID（避免与其它ESP8266的客户端ID重名）</span></span><br><span class="line">  String clientId = <span class="string">&quot;esp8266-&quot;</span> + WiFi.<span class="built_in">macAddress</span>();</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 连接MQTT服务器</span></span><br><span class="line">  <span class="keyword">if</span> (mqttClient.<span class="built_in">connect</span>(clientId.<span class="built_in">c_str</span>())) &#123; </span><br><span class="line"><span class="comment">/*----------------------------区别（报错位置）---------------------------*/</span></span><br><span class="line">    Serial.<span class="built_in">println</span>(<span class="string">&quot;MQTT Server Connected.&quot;</span>);</span><br><span class="line">    Serial.<span class="built_in">println</span>(<span class="string">&quot;Server Address: &quot;</span>);</span><br><span class="line">    Serial.<span class="built_in">println</span>(mqttServer);</span><br><span class="line">    Serial.<span class="built_in">println</span>(<span class="string">&quot;ClientId:&quot;</span>);</span><br><span class="line">    Serial.<span class="built_in">println</span>(clientId);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    Serial.<span class="built_in">print</span>(<span class="string">&quot;MQTT Server Connect Failed. Client State:&quot;</span>);</span><br><span class="line">    Serial.<span class="built_in">println</span>(mqttClient.<span class="built_in">state</span>());</span><br><span class="line">    <span class="built_in">delay</span>(<span class="number">3000</span>);</span><br><span class="line">  &#125;   </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 发布信息</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">pubMQTTmsg</span><span class="params">()</span></span>&#123;</span><br><span class="line">  <span class="type">static</span> <span class="type">int</span> value; <span class="comment">// 客户端发布信息用数字</span></span><br><span class="line"></span><br><span class="line">  String topicString = <span class="string">&quot;lkwMQTTtopic&quot;</span>;</span><br><span class="line">  </span><br><span class="line">  <span class="type">char</span> publishTopic[topicString.<span class="built_in">length</span>() + <span class="number">1</span>];  </span><br><span class="line">  <span class="built_in">strcpy</span>(publishTopic, topicString.<span class="built_in">c_str</span>());</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 建立发布信息。信息内容以Hello World为起始，后面添加发布次数。</span></span><br><span class="line">  String messageString = <span class="string">&quot;Hello World &quot;</span> + <span class="built_in">String</span>(value++); </span><br><span class="line">  <span class="type">char</span> publishMsg[messageString.<span class="built_in">length</span>() + <span class="number">1</span>];   </span><br><span class="line">  <span class="built_in">strcpy</span>(publishMsg, messageString.<span class="built_in">c_str</span>());</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 实现ESP8266向主题发布信息</span></span><br><span class="line">  <span class="keyword">if</span>(mqttClient.<span class="built_in">publish</span>(publishTopic, publishMsg))&#123;</span><br><span class="line">    Serial.<span class="built_in">println</span>(<span class="string">&quot;Publish Topic:&quot;</span>);Serial.<span class="built_in">println</span>(publishTopic);</span><br><span class="line">    Serial.<span class="built_in">println</span>(<span class="string">&quot;Publish message:&quot;</span>);Serial.<span class="built_in">println</span>(publishMsg);    </span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    Serial.<span class="built_in">println</span>(<span class="string">&quot;Message Publish Failed.&quot;</span>); </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ESP8266连接wifi</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">connectWifi</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">  WiFi.<span class="built_in">begin</span>(ssid, password);</span><br><span class="line"> </span><br><span class="line">  <span class="comment">//等待WiFi连接,成功连接后输出成功信息</span></span><br><span class="line">  <span class="keyword">while</span> (WiFi.<span class="built_in">status</span>() != WL_CONNECTED) &#123;</span><br><span class="line">    <span class="built_in">delay</span>(<span class="number">1000</span>);</span><br><span class="line">    Serial.<span class="built_in">print</span>(<span class="string">&quot;.&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  Serial.<span class="built_in">println</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line">  Serial.<span class="built_in">println</span>(<span class="string">&quot;WiFi Connected!&quot;</span>);  </span><br><span class="line">  Serial.<span class="built_in">println</span>(<span class="string">&quot;&quot;</span>); </span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>解决方法：查看<code>PubSubClient</code>的源代码</p>
<p>幸亏结构挺简单，很容易就找到了想要的代码即<code>PubSubClient的connect方法</code></p>
<ul>
<li>在<code>PubSubClient.h</code></li>
</ul>
<p><img src="/images/esp8266_mqtt/PubSubClientH.png" alt="PubSubClientH"></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function">boolean <span class="title">connect</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* id)</span></span>;</span><br><span class="line">  <span class="function">boolean <span class="title">connect</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* id, <span class="type">const</span> <span class="type">char</span>* user, <span class="type">const</span> <span class="type">char</span>* pass)</span></span>;</span><br><span class="line">  <span class="function">boolean <span class="title">connect</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* id, <span class="type">const</span> <span class="type">char</span>* willTopic, <span class="type">uint8_t</span> willQos, boolean willRetain, <span class="type">const</span> <span class="type">char</span>* willMessage)</span></span>;</span><br><span class="line">  <span class="function">boolean <span class="title">connect</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* id, <span class="type">const</span> <span class="type">char</span>* user, <span class="type">const</span> <span class="type">char</span>* pass, <span class="type">const</span> <span class="type">char</span>* willTopic, <span class="type">uint8_t</span> willQos, boolean willRetain, <span class="type">const</span> <span class="type">char</span>* willMessage)</span></span>;</span><br><span class="line">  <span class="function">boolean <span class="title">connect</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* id, <span class="type">const</span> <span class="type">char</span>* user, <span class="type">const</span> <span class="type">char</span>* pass, <span class="type">const</span> <span class="type">char</span>* willTopic, <span class="type">uint8_t</span> willQos, boolean willRetain, <span class="type">const</span> <span class="type">char</span>* willMessage, boolean cleanSession)</span></span>;</span><br><span class="line">  <span class="function"><span class="type">void</span> <span class="title">disconnect</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure>

<p>在<code>PubSubClient.cpp</code></p>
<p><img src="/images/esp8266_mqtt/PubSubClientCPP.png" alt="PubSubClientCPP"></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function">boolean <span class="title">PubSubClient::connect</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *id)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">connect</span>(id,<span class="literal">NULL</span>,<span class="literal">NULL</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">boolean <span class="title">PubSubClient::connect</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *id, <span class="type">const</span> <span class="type">char</span> *user, <span class="type">const</span> <span class="type">char</span> *pass)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">connect</span>(id,user,pass,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">boolean <span class="title">PubSubClient::connect</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *id, <span class="type">const</span> <span class="type">char</span>* willTopic, <span class="type">uint8_t</span> willQos, boolean willRetain, <span class="type">const</span> <span class="type">char</span>* willMessage)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">connect</span>(id,<span class="literal">NULL</span>,<span class="literal">NULL</span>,willTopic,willQos,willRetain,willMessage,<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">boolean <span class="title">PubSubClient::connect</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *id, <span class="type">const</span> <span class="type">char</span> *user, <span class="type">const</span> <span class="type">char</span> *pass, <span class="type">const</span> <span class="type">char</span>* willTopic, <span class="type">uint8_t</span> willQos, boolean willRetain, <span class="type">const</span> <span class="type">char</span>* willMessage)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">connect</span>(id,user,pass,willTopic,willQos,willRetain,willMessage,<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">boolean <span class="title">PubSubClient::connect</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *id, <span class="type">const</span> <span class="type">char</span> *user, <span class="type">const</span> <span class="type">char</span> *pass, <span class="type">const</span> <span class="type">char</span>* willTopic, <span class="type">uint8_t</span> willQos, boolean willRetain, <span class="type">const</span> <span class="type">char</span>* willMessage, boolean cleanSession)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="built_in">connected</span>()) &#123;</span><br><span class="line">        <span class="type">int</span> result = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(_client-&gt;<span class="built_in">connected</span>()) &#123;</span><br><span class="line">            result = <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            </span><br><span class="line">            <span class="comment">/******************省略*****************/</span></span><br></pre></td></tr></table></figure>

<p>​	于是就得出 connect 重载函数本体只有一个，即最后一个，我可以修改输入的参数实现自己想要的功能。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function">boolean <span class="title">PubSubClient::connect</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *id, <span class="type">const</span> <span class="type">char</span> *user, <span class="type">const</span> <span class="type">char</span> *pass)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">connect</span>(id,user,pass,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="3-结尾"><a href="#3-结尾" class="headerlink" title="3.结尾"></a>3.结尾</h2><p>先附上自己的代码，修改了连接模板代码 部分。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;ESP8266WiFi.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;PubSubClient.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;Ticker.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置wifi接入信息(请根据您的WiFi信息进行修改)</span></span><br><span class="line"><span class="type">const</span> <span class="type">char</span>* ssid = <span class="string">&quot;MERCURY_F80E&quot;</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">char</span>* password = <span class="string">&quot;********&quot;</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">char</span>* mqttServer = <span class="string">&quot;regenm.gitee.io&quot;</span>;</span><br><span class="line"></span><br><span class="line">Ticker ticker;</span><br><span class="line">WiFiClient wifiClient;</span><br><span class="line"><span class="function">PubSubClient <span class="title">mqttClient</span><span class="params">(wifiClient)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> count;  <span class="comment">// Ticker计数用变量</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">setup</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  Serial.<span class="built_in">begin</span>(<span class="number">9600</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">//设置ESP8266工作模式为无线终端模式</span></span><br><span class="line">  WiFi.<span class="built_in">mode</span>(WIFI_STA);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 连接WiFi</span></span><br><span class="line">  <span class="built_in">connectWifi</span>();</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 设置MQTT服务器和端口号</span></span><br><span class="line">  mqttClient.<span class="built_in">setServer</span>(mqttServer, <span class="number">1883</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 连接MQTT服务器</span></span><br><span class="line">  <span class="built_in">connectMQTTServer</span>();</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Ticker定时对象</span></span><br><span class="line">  ticker.<span class="built_in">attach</span>(<span class="number">1</span>, tickerCount);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">loop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (mqttClient.<span class="built_in">connected</span>()) &#123;  <span class="comment">// 如果开发板成功连接服务器</span></span><br><span class="line">    <span class="comment">// 每隔3秒钟发布一次信息</span></span><br><span class="line">    <span class="keyword">if</span> (count &gt;= <span class="number">3</span>) &#123;</span><br><span class="line">      <span class="built_in">pubMQTTmsg</span>();</span><br><span class="line">      count = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 保持心跳</span></span><br><span class="line">    mqttClient.<span class="built_in">loop</span>();</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;                <span class="comment">// 如果开发板未能成功连接服务器</span></span><br><span class="line">    <span class="built_in">connectMQTTServer</span>();  <span class="comment">// 则尝试连接服务器</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">tickerCount</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  count++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">connectMQTTServer</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 根据ESP8266的MAC地址生成客户端ID（避免与其它ESP8266的客户端ID重名）</span></span><br><span class="line">  String clientId = <span class="string">&quot;regen&quot;</span>;</span><br><span class="line">  String userRegen = <span class="string">&quot;user&quot;</span>;</span><br><span class="line">  String passwdRegen = <span class="string">&quot;passwd&quot;</span>;</span><br><span class="line">  <span class="comment">// 连接MQTT服务器 </span></span><br><span class="line">    </span><br><span class="line">  <span class="comment">/* --------------------connect(id,user,pass,0,0,0,0,1)-------------------- */</span></span><br><span class="line">  <span class="keyword">if</span> (mqttClient.<span class="built_in">connect</span>(clientId.<span class="built_in">c_str</span>(),userRegen.<span class="built_in">c_str</span>() ,passwdRegen.<span class="built_in">c_str</span>() )) &#123;</span><br><span class="line">    Serial.<span class="built_in">println</span>(<span class="string">&quot;MQTT Server Connected.&quot;</span>);</span><br><span class="line">    Serial.<span class="built_in">println</span>(<span class="string">&quot;Server Address: &quot;</span>);</span><br><span class="line">    Serial.<span class="built_in">println</span>(mqttServer);</span><br><span class="line">    Serial.<span class="built_in">println</span>(<span class="string">&quot;ClientId:&quot;</span>);</span><br><span class="line">    Serial.<span class="built_in">println</span>(clientId);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    Serial.<span class="built_in">print</span>(<span class="string">&quot;MQTT Server Connect Failed. Client State:&quot;</span>);</span><br><span class="line">    Serial.<span class="built_in">println</span>(mqttClient.<span class="built_in">state</span>());</span><br><span class="line">    <span class="built_in">delay</span>(<span class="number">3000</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 发布信息</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">pubMQTTmsg</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="type">static</span> <span class="type">int</span> value;  <span class="comment">// 客户端发布信息用数字</span></span><br><span class="line"></span><br><span class="line">  String topicString = <span class="string">&quot;test&quot;</span>;</span><br><span class="line"></span><br><span class="line">  <span class="type">char</span> publishTopic[topicString.<span class="built_in">length</span>() + <span class="number">1</span>];</span><br><span class="line">  <span class="built_in">strcpy</span>(publishTopic, topicString.<span class="built_in">c_str</span>());</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 建立发布信息。信息内容以Hello World为起始，后面添加发布次数。</span></span><br><span class="line">  String messageString = <span class="string">&quot;Hello World &quot;</span> + <span class="built_in">String</span>(value++);</span><br><span class="line">  <span class="type">char</span> publishMsg[messageString.<span class="built_in">length</span>() + <span class="number">1</span>];</span><br><span class="line">  <span class="built_in">strcpy</span>(publishMsg, messageString.<span class="built_in">c_str</span>());</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 实现ESP8266向主题发布信息</span></span><br><span class="line">  <span class="keyword">if</span> (mqttClient.<span class="built_in">publish</span>(publishTopic, publishMsg)) &#123;</span><br><span class="line">    Serial.<span class="built_in">println</span>(<span class="string">&quot;Publish Topic:&quot;</span>);</span><br><span class="line">    Serial.<span class="built_in">println</span>(publishTopic);</span><br><span class="line">    Serial.<span class="built_in">println</span>(<span class="string">&quot;Publish message:&quot;</span>);</span><br><span class="line">    Serial.<span class="built_in">println</span>(publishMsg);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    Serial.<span class="built_in">println</span>(<span class="string">&quot;Message Publish Failed.&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ESP8266连接wifi</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">connectWifi</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  WiFi.<span class="built_in">begin</span>(ssid, password);</span><br><span class="line"></span><br><span class="line">  <span class="comment">//等待WiFi连接,成功连接后输出成功信息</span></span><br><span class="line">  <span class="keyword">while</span> (WiFi.<span class="built_in">status</span>() != WL_CONNECTED) &#123;</span><br><span class="line">    <span class="built_in">delay</span>(<span class="number">1000</span>);</span><br><span class="line">    Serial.<span class="built_in">print</span>(<span class="string">&quot;.&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  Serial.<span class="built_in">println</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line">  Serial.<span class="built_in">println</span>(<span class="string">&quot;WiFi Connected!&quot;</span>);</span><br><span class="line">  Serial.<span class="built_in">println</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>​	经过测试后成功，附上截图：</p>
<p><img src="/images/esp8266_mqtt/success1.png" alt="success"></p>
<p><img src="/images/esp8266_mqtt/success2.jpg" alt="success"></p>
<p><img src="/images/esp8266_mqtt/success3.png" alt="success"></p>
]]></content>
      <tags>
        <tag>笔记</tag>
        <tag>嵌入式</tag>
        <tag>linux</tag>
        <tag>mqtt</tag>
        <tag>IoT</tag>
        <tag>mosquitto</tag>
        <tag>esp8266</tag>
        <tag>物联网</tag>
      </tags>
  </entry>
  <entry>
    <title>docker容器技术</title>
    <url>/2024/02/09/docker%E5%AE%B9%E5%99%A8%E6%8A%80%E6%9C%AF/</url>
    <content><![CDATA[<p>constructing</p>
<p>toBeContinued</p>
<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><blockquote>
<p>​				docker是一个用Go语言实现的开源项目，可以让我们方便的创建和使用容器，docker将程序以及程序所有的依赖都打包到docker container，这样你的程序可以在任何环境都会有一致的表现，这里程序运行的依赖也就是容器就好比集装箱，容器所处的操作系统环境就好比货船或港口，<strong>程序的表现只和集装箱有关系(容器)，和集装箱放在哪个货船或者哪个港口(操作系统)没有关系</strong>。</p>
<p>​				因此我们可以看到docker可以屏蔽环境差异，也就是说，只要你的程序打包到了docker中，那么无论运行在什么环境下程序的行为都是一致的，程序员再也无法施展表演才华了，<strong>不会再有“在我的环境上可以运行”</strong>，真正实现“build once, run everywhere”。</p>
</blockquote>
<h1 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h1><p>​	docker 中的几个概念：</p>
<blockquote>
<ol>
<li>dockerfile</li>
<li>image</li>
<li>container</li>
</ol>
</blockquote>
<h2 id="dockerfile"><a href="#dockerfile" class="headerlink" title="dockerfile"></a>dockerfile</h2><p>​	<code>Dockerfile</code> 是一个用来构建镜像的文本文件，文本内容包含了一条条构建镜像所需的指令和说明。感觉就像<code>makefile</code>一样。</p>
<h2 id="image"><a href="#image" class="headerlink" title="image"></a>image</h2><p>​	Docker镜像（Docker Image）就是一个只读的模板。比如，一个镜像可以包含一个完整的<a href="https://so.csdn.net/so/search?q=Ubuntu&spm=1001.2101.3001.7020">Ubuntu</a>操作系统环境。镜像可以用来创建Docker容器。</p>
<h2 id="container"><a href="#container" class="headerlink" title="container"></a>container</h2><p>​	容器是镜像的运行时实例，容器是独立运行的一个或一组应用，以及它们的运行态环境。</p>
<p>​	</p>
]]></content>
      <tags>
        <tag>笔记</tag>
        <tag>linux</tag>
        <tag>docker</tag>
      </tags>
  </entry>
  <entry>
    <title>《流星之绊》</title>
    <url>/2024/02/17/%E3%80%8A%E6%B5%81%E6%98%9F%E4%B9%8B%E7%BB%8A%E3%80%8B/</url>
    <content><![CDATA[<h1 id="《流星之绊》"><a href="#《流星之绊》" class="headerlink" title="《流星之绊》"></a>《流星之绊》</h1><p>​	一直想看看短篇小说，想要重新体验一下过去一次性读完一本短篇的感觉。于是就立马想到了东野圭吾和村上春树。</p>
<p>​	偶然发现原来我还有很多没看过的东野圭吾的作品。其中就有这本《流星之绊》，只消半个夜晚就看毕了，关上ipad，躺在床上，他们三兄妹以及他们的故事在脑海里不断重现。</p>
<blockquote>
<p>“我们三人就像流星，毫无目标地飞逝，不知将在何处燃烧殆尽。”</p>
</blockquote>
<p>​	看完后感觉剧情挺一般的，好像这本书少了点东野圭吾的味道了。如果是换做以前的我，大概会觉得这本书挺温暖的，至少就结局来说。也许我真的已经长大了，已经不在相信书里的奇迹了或者说已经不太习惯大团圆结局了。</p>
<p>​	看的时候就觉得这个剧情很适合拍成电视剧供像我一样百无聊赖的人群观看，第二天一查，没想到真的有日剧，而且好像日剧的受众还更广一点。</p>
<p>​	流星之绊啊，我一开始其实是理解为像流星一样转瞬即逝的羁绊，后来才知道是一起约定看流星的羁绊。虽然流星易逝，但是观看流星的他们之间的羁绊却被永远铭记。</p>
<blockquote>
<p>“</p>
<p>然而最美的流星永远是第一次映入眼帘的那颗<br>“第一次”给人的永恒美是人们对“纯真”最后的忠诚<br>流星雨<br>那年也因狮子座流星雨二更而起<br>无数渴望的眼睛在凝视中等待世纪之美的来临<br>可不懂风情的夜空却久久星光依旧<br>剩下一群疯狂的少年奔跑在老师撕心裂肺的呐喊声中<br>未能如期而至的流星雨<br>却留下了无法再来的回忆</p>
<p>“</p>
</blockquote>
]]></content>
      <tags>
        <tag>读书</tag>
        <tag>随手记</tag>
      </tags>
  </entry>
  <entry>
    <title>《树上的男爵》</title>
    <url>/2024/02/18/%E3%80%8A%E6%A0%91%E4%B8%8A%E7%9A%84%E7%94%B7%E7%88%B5%E3%80%8B/</url>
    <content><![CDATA[<p>​	</p>
]]></content>
      <tags>
        <tag>读书</tag>
        <tag>随手记</tag>
      </tags>
  </entry>
  <entry>
    <title>PHOTO</title>
    <url>/2024/02/27/PHOTO/</url>
    <content><![CDATA[<h1 id="说走就走（南昌）"><a href="#说走就走（南昌）" class="headerlink" title="说走就走（南昌）"></a>说走就走（南昌）</h1><p>​	去完南昌回来之后几天。想了想，果然还是想记下来当时间胶囊。</p>
<p>​	回家那一刻我就知道了2024的寒假注定是灰色的，看到最近天气15日阴天，以及温度逐渐下降甚至出现下雪的时候，我心情是复杂的。</p>
<p>​	上学期因荒废暑假后在学期中越想越痛，于是就发誓要好好利用寒假出去逛一逛，看看不同城市的风景。看到这天气后就有点挫伤。</p>
<p>​	于是就怀着这越来越渺茫的希望，打了把又一把游戏。</p>
<p>​	时机已到！那天下午，澡后我感到十分清爽，应该是内啡肽的作用。恰巧温度回升，下午的太阳也很舒服，就是现在！出发！</p>
<p>​	然而刚到市里就开始下雨了。。。。。。我还没带伞，包里就一个没电的相机和一本书。（《杀死一只知更鸟》英文原著）</p>
<p><img src="/images/nanchang/Nikon2023_5_3_332023_6_1163.jpg"></p>
<p><img src="/images/nanchang/Nikon2023_5_3_332023_6_1164.jpg"></p>
<p>​	好在火车上比较舒服，看看书，打了个盹就到了。刚好看完前半部分。看到了高中时期最喜欢的一段。</p>
<blockquote>
<p><strong>我想让你见识一下什么是真正的勇敢，而不要错误地认为一个人手握枪支就是勇敢。勇敢是：当你还未开始就已知道自己会输，可你依然要去做，而且无论如何都要把它坚持到底。你很少能贏，但有时也会。杜博斯太太赢了，用她那仅仅九十八磅重的身躯。按照她的观点，她死得无怨无悔，不欠任何人，也不依赖任何东西。她是我见过的最勇敢的人。</strong></p>
</blockquote>
<blockquote>
<p><strong>“ I wanted you to see what real courage is, instead of getting the idea that courage is a man with a gun in his hand. It’s when you know you’re licked before you begin but you begin anyway and you see it through no matter what. You rarely win, but sometimes you do. Mrs. Dubose won, all ninety-eight pounds of her. According to her views, she died beholden to nothing and nobody. She was the bravest person I ever knew. “</strong></p>
</blockquote>
<p>​	第二天早上，大雨，开始后悔。</p>
<p>​	在滕王阁附近的洪都大拇指奶茶店点了一杯推荐，坐在墙角的小板凳上，看着越下越大的雨，耳边Ólafur Arnalds的《1440》更增加了凄惨的氛围。 能够稍微安慰我的也就只有 手上的 “雪顶幽兰”逐渐散去的余热了。</p>
<p><img src="/images/nanchang/Nikon2023_5_3_332023_6_1165.jpg" alt="路上"></p>
<p><img src="/images/nanchang/Nikon2023_5_3_332023_6_1166.jpg"></p>
<p><img src="/images/nanchang/Nikon2023_5_3_332023_6_1170.jpg" alt="远处"></p>
<p>​	走近看才发现滕王阁原来这么大 ，虽然古人上滕王阁是用爬的，但是时代不一样了，有电梯了。 但是迁客骚人的览物之情却没怎么变化（古今对比），从最顶楼的许愿牌便可得出此结论。</p>
<p><img src="/images/nanchang/Nikon2023_5_3_332023_6_1172.jpg" alt="顶"></p>
<p><img src="/images/nanchang/Nikon2023_5_3_332023_6_1168.jpg" alt="檐"></p>
<p>​	越下越大的雨好像放大了览物之情，让我突然想念起了坐在电炉前乱弹吉他的温暖。于是便回家了······</p>
<hr>
]]></content>
      <tags>
        <tag>旅行</tag>
        <tag>摄影</tag>
        <tag>photo</tag>
      </tags>
  </entry>
  <entry>
    <title>Computer Composition Principle</title>
    <url>/2024/02/27/Computer-Composition-Principle/</url>
    <content><![CDATA[<h1 id="计算机组成原理"><a href="#计算机组成原理" class="headerlink" title="计算机组成原理"></a>计算机组成原理</h1>]]></content>
      <tags>
        <tag>计算机组成原理</tag>
      </tags>
  </entry>
  <entry>
    <title>Database Principles</title>
    <url>/2024/02/27/Database-Principles/</url>
    <content><![CDATA[<h1 id="数据库原理"><a href="#数据库原理" class="headerlink" title="数据库原理"></a>数据库原理</h1><h2 id="数据库概论"><a href="#数据库概论" class="headerlink" title="数据库概论"></a>数据库概论</h2><h3 id="数据库以及相关概念"><a href="#数据库以及相关概念" class="headerlink" title="数据库以及相关概念"></a>数据库以及相关概念</h3><ol>
<li>数据（<strong>data</strong>）：信息的表现形式和载体。</li>
<li>数据库（<strong>database</strong>）：长期存储在计算机内，有组织的，统一管理的相关数据的集合。</li>
<li>数据库管理系统（<strong>DBMS</strong>）：位于用户与操作系统逐之间的一层数据管理软件，为用户或应用程序提供访问DB的方法，包括DB的建立，查询，更新及各种数据控制。</li>
<li>数据库系统（<strong>DBS</strong>）：采用数据库技术的计算机系统。</li>
<li>数据库技术：研究数据库结构，存储设计管理和使用的一门软件学科。</li>
</ol>
<h3 id="高级数据库阶段"><a href="#高级数据库阶段" class="headerlink" title="高级数据库阶段"></a>高级数据库阶段</h3><h4 id="对象数据库技术"><a href="#对象数据库技术" class="headerlink" title="对象数据库技术"></a>对象数据库技术</h4><ul>
<li>面向对象与数据库技术结合的产物</li>
</ul>
<blockquote>
<p>主要特征</p>
<ol>
<li>可以完整的描述现实数据结构，以及数据之间嵌套递归的联系。 </li>
<li>具有封装性和继承性，提高了软件的可重用性</li>
</ol>
</blockquote>
<h4 id="分布式数据库系统"><a href="#分布式数据库系统" class="headerlink" title="分布式数据库系统"></a>分布式数据库系统</h4><blockquote>
<p>主要特征：</p>
<ol>
<li>数据物理上分布在不同场地，逻辑上是一个整体 。</li>
<li>每个场地可以执行局部应用，也可以执行全部应用<br>3.。 各地计算机由数据通信网络联系，本地计算机不能完成的任务可以通过通信网络获取其他场地支持。</li>
</ol>
</blockquote>
<h4 id="开放数据库互联技术"><a href="#开放数据库互联技术" class="headerlink" title="开放数据库互联技术"></a>开放数据库互联技术</h4><ul>
<li>用于单个应用程序访问不同的数据库</li>
</ul>
<ol start="4">
<li>XML数据库技术</li>
</ol>
<ul>
<li>灵活</li>
</ul>
<h4 id="现代信息集成技术"><a href="#现代信息集成技术" class="headerlink" title="现代信息集成技术"></a>现代信息集成技术</h4><ol>
<li>数据仓库</li>
<li>连及分析处理技术</li>
<li>数据挖掘</li>
</ol>
<h3 id="数据描述"><a href="#数据描述" class="headerlink" title="数据描述"></a>数据描述</h3><p>​	数据描述有两种形式：物理数据描述和逻辑数据描述。</p>
<ol>
<li>物理数据描述：数据在存储设备上的存储方式的描述。</li>
<li>逻辑数据描述：程序员或者用户用以操作的数据形式的描述，是抽象的概念化数据。</li>
</ol>
<h4 id="概念设计中的数据描述"><a href="#概念设计中的数据描述" class="headerlink" title="概念设计中的数据描述"></a>概念设计中的数据描述</h4><ul>
<li>实体（entity）</li>
<li>实体集 （entity set）</li>
<li>属性（attribute）</li>
<li>实体标识符（identifier）</li>
</ul>
<h4 id="逻辑设计中的数据描述"><a href="#逻辑设计中的数据描述" class="headerlink" title="逻辑设计中的数据描述"></a>逻辑设计中的数据描述</h4><ul>
<li>字段（Field）</li>
<li>记录（Record）</li>
<li>文件（file）</li>
<li>关键码（Key）</li>
</ul>
<h4 id="物理设计中的概念描述"><a href="#物理设计中的概念描述" class="headerlink" title="物理设计中的概念描述"></a>物理设计中的概念描述</h4><ol>
<li>物理存储介质层次，可分为以下六类</li>
</ol>
<ul>
<li>高速缓冲存储器（<strong>cache</strong>）</li>
<li>主存储器（<strong>main menory</strong>）</li>
<li>快擦鞋存储器(<strong>flash memory</strong>)</li>
<li>磁盘存储器(<strong>magnetic disk</strong>)</li>
<li>光存储器(<strong>optical sstorage</strong>)</li>
<li>磁带(<strong>tape storage</strong>)</li>
</ul>
<ol start="2">
<li>物理存储中的数据描述</li>
</ol>
<ul>
<li>位(<strong>bit</strong>)</li>
<li>字节（<strong>byte</strong>）</li>
<li>字(<strong>word</strong>)</li>
<li>块( <strong>Block</strong>)</li>
<li>桶 (<strong>bucket</strong>)</li>
<li>卷(<strong>volume</strong>)</li>
</ul>
<h4 id="数据联系的描述"><a href="#数据联系的描述" class="headerlink" title="数据联系的描述"></a>数据联系的描述</h4><p><strong>联系：是实体之间的互相关系。</strong></p>
<p><strong>联系的元数：与一个联系有关的实体集个数。</strong></p>
<ul>
<li>二元联系的三种类型</li>
</ul>
<ol>
<li>一对一联系</li>
<li>一对多联系</li>
<li>多对多联系</li>
</ol>
<h3 id="数据抽象过程"><a href="#数据抽象过程" class="headerlink" title="数据抽象过程"></a>数据抽象过程</h3><p>模型（model）: 是对现实世界的抽象。使用数据模型（data model）的概念描述数据库的结构和语义，对现实世界的数据进行抽象。</p>
<ul>
<li><strong>概念模型</strong>：用来表达用户需求观点的数据全局逻辑结构模型称为概念模型</li>
<li><strong>逻辑模型：</strong>表达计算机实现观点的DB全局逻辑结构的模型</li>
<li>**外部模型:**表达用户使用观点DB局部逻辑结构的模型</li>
<li><strong>内部模型：</strong>表达DB物理结构的模型</li>
</ul>
<p>他们之间的关系如图所示</p>
<p><img src="/images/" alt="structure"></p>
<h4 id="概念模型"><a href="#概念模型" class="headerlink" title="概念模型"></a>概念模型</h4>]]></content>
      <tags>
        <tag>笔记</tag>
        <tag>数据库</tag>
        <tag>数据库原理</tag>
      </tags>
  </entry>
  <entry>
    <title>Operating System Principles</title>
    <url>/2024/02/27/Operating-System-Principles/</url>
    <content><![CDATA[]]></content>
  </entry>
</search>
